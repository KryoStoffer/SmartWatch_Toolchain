   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text._ZN12Arduino_OLED8fillRectEsssst,"ax",%progbits
  19              		.align	1
  20              		.global	_ZN12Arduino_OLED8fillRectEsssst
  21              		.thumb
  22              		.thumb_func
  24              	_ZN12Arduino_OLED8fillRectEsssst:
  25              	.LFB100:
  26              		.file 1 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_display.cpp"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // Davey Taylor, Arduino Verkstad AB
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // OLED & LightSensor Arduino Objects
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** #include "driver_display.hpp"
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** #include <stdlib.h>
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** uint8_t font[] = {
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   0x00, 0x00, 0x00, 0x00, 0x00,   
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x5B, 0x4F, 0x5B, 0x3E, 	
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x6B, 0x4F, 0x6B, 0x3E, 	
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1C, 0x3E, 0x7C, 0x3E, 0x1C, 
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x18, 0x3C, 0x7E, 0x3C, 0x18, 
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1C, 0x57, 0x7D, 0x57, 0x1C, 
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1C, 0x5E, 0x7F, 0x5E, 0x1C, 
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x18, 0x3C, 0x18, 0x00, 
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x18, 0x24, 0x18, 0x00, 
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xFF, 0xE7, 0xDB, 0xE7, 0xFF, 
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x30, 0x48, 0x3A, 0x06, 0x0E, 
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x26, 0x29, 0x79, 0x29, 0x26, 
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x40, 0x7F, 0x05, 0x05, 0x07, 
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x40, 0x7F, 0x05, 0x25, 0x3F, 
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x5A, 0x3C, 0xE7, 0x3C, 0x5A, 
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x3E, 0x1C, 0x1C, 0x08, 
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x1C, 0x1C, 0x3E, 0x7F, 
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x22, 0x7F, 0x22, 0x14, 
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x5F, 0x5F, 0x00, 0x5F, 0x5F, 
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x06, 0x09, 0x7F, 0x01, 0x7F, 
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x66, 0x89, 0x95, 0x6A, 
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x60, 0x60, 0x60, 0x60, 0x60, 
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x94, 0xA2, 0xFF, 0xA2, 0x94, 
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x04, 0x7E, 0x04, 0x08, 
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x20, 0x7E, 0x20, 0x10, 
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x08, 0x2A, 0x1C, 0x08, 
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x1C, 0x2A, 0x08, 0x08, 
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1E, 0x10, 0x10, 0x10, 0x10, 
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x0C, 0x1E, 0x0C, 0x1E, 0x0C, 
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x30, 0x38, 0x3E, 0x38, 0x30, 
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x06, 0x0E, 0x3E, 0x0E, 0x06, 
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0x00, 0x00, 
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x5F, 0x00, 0x00, 
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x07, 0x00, 0x07, 0x00, 
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x7F, 0x14, 0x7F, 0x14, 
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x24, 0x2A, 0x7F, 0x2A, 0x12, 
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x23, 0x13, 0x08, 0x64, 0x62, 
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x36, 0x49, 0x56, 0x20, 0x50, 
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x08, 0x07, 0x03, 0x00, 
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x1C, 0x22, 0x41, 0x00, 
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x41, 0x22, 0x1C, 0x00, 
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x08, 0x3E, 0x08, 0x08, 
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x80, 0x70, 0x30, 0x00, 
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x08, 0x08, 0x08, 0x08, 
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x60, 0x60, 0x00, 
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x20, 0x10, 0x08, 0x04, 0x02, 
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x51, 0x49, 0x45, 0x3E, 
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x42, 0x7F, 0x40, 0x00, 
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x72, 0x49, 0x49, 0x49, 0x46, 
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x21, 0x41, 0x49, 0x4D, 0x33, 
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x18, 0x14, 0x12, 0x7F, 0x10, 
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x27, 0x45, 0x45, 0x45, 0x39, 
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3C, 0x4A, 0x49, 0x49, 0x31, 
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x41, 0x21, 0x11, 0x09, 0x07, 
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x36, 0x49, 0x49, 0x49, 0x36, 
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x46, 0x49, 0x49, 0x29, 0x1E, 
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x14, 0x00, 0x00, 
  67:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x40, 0x34, 0x00, 0x00, 
  68:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x08, 0x14, 0x22, 0x41, 
  69:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0x14, 0x14, 
  70:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x41, 0x22, 0x14, 0x08, 
  71:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x02, 0x01, 0x59, 0x09, 0x06, 
  72:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x41, 0x5D, 0x59, 0x4E, 
  73:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7C, 0x12, 0x11, 0x12, 0x7C, 
  74:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x49, 0x49, 0x49, 0x36, 
  75:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x41, 0x41, 0x41, 0x22, 
  76:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x41, 0x41, 0x41, 0x3E, 
  77:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x49, 0x49, 0x49, 0x41, 
  78:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x09, 0x09, 0x09, 0x01, 
  79:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x41, 0x41, 0x51, 0x73, 
  80:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x08, 0x08, 0x08, 0x7F, 
  81:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x41, 0x7F, 0x41, 0x00, 
  82:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x20, 0x40, 0x41, 0x3F, 0x01, 
  83:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x08, 0x14, 0x22, 0x41, 
  84:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x40, 0x40, 0x40, 0x40, 
  85:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x02, 0x1C, 0x02, 0x7F, 
  86:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x04, 0x08, 0x10, 0x7F, 
  87:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x41, 0x41, 0x41, 0x3E, 
  88:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x09, 0x09, 0x09, 0x06, 
  89:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x41, 0x51, 0x21, 0x5E, 
  90:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x09, 0x19, 0x29, 0x46, 
  91:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x26, 0x49, 0x49, 0x49, 0x32, 
  92:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x03, 0x01, 0x7F, 0x01, 0x03, 
  93:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3F, 0x40, 0x40, 0x40, 0x3F, 
  94:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1F, 0x20, 0x40, 0x20, 0x1F, 
  95:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3F, 0x40, 0x38, 0x40, 0x3F, 
  96:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x63, 0x14, 0x08, 0x14, 0x63, 
  97:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x03, 0x04, 0x78, 0x04, 0x03, 
  98:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x61, 0x59, 0x49, 0x4D, 0x43, 
  99:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x7F, 0x41, 0x41, 0x41, 
 100:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x02, 0x04, 0x08, 0x10, 0x20, 
 101:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x41, 0x41, 0x41, 0x7F, 
 102:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x04, 0x02, 0x01, 0x02, 0x04, 
 103:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x40, 0x40, 0x40, 0x40, 0x40, 
 104:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x03, 0x07, 0x08, 0x00, 
 105:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x20, 0x54, 0x54, 0x78, 0x40, 
 106:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x28, 0x44, 0x44, 0x38, 
 107:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x44, 0x44, 0x44, 0x28, 
 108:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x44, 0x44, 0x28, 0x7F, 
 109:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x54, 0x54, 0x54, 0x18, 
 110:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x08, 0x7E, 0x09, 0x02, 
 111:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x18, 0xA4, 0xA4, 0x9C, 0x78, 
 112:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x08, 0x04, 0x04, 0x78, 
 113:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x44, 0x7D, 0x40, 0x00, 
 114:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x20, 0x40, 0x40, 0x3D, 0x00, 
 115:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7F, 0x10, 0x28, 0x44, 0x00, 
 116:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x41, 0x7F, 0x40, 0x00, 
 117:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7C, 0x04, 0x78, 0x04, 0x78, 
 118:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7C, 0x08, 0x04, 0x04, 0x78, 
 119:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x44, 0x44, 0x44, 0x38, 
 120:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xFC, 0x18, 0x24, 0x24, 0x18, 
 121:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x18, 0x24, 0x24, 0x18, 0xFC, 
 122:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7C, 0x08, 0x04, 0x04, 0x08, 
 123:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x48, 0x54, 0x54, 0x54, 0x24, 
 124:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x04, 0x04, 0x3F, 0x44, 0x24, 
 125:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3C, 0x40, 0x40, 0x20, 0x7C, 
 126:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1C, 0x20, 0x40, 0x20, 0x1C, 
 127:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3C, 0x40, 0x30, 0x40, 0x3C, 
 128:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x44, 0x28, 0x10, 0x28, 0x44, 
 129:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x4C, 0x90, 0x90, 0x90, 0x7C, 
 130:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x44, 0x64, 0x54, 0x4C, 0x44, 
 131:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x08, 0x36, 0x41, 0x00, 
 132:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x77, 0x00, 0x00, 
 133:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x41, 0x36, 0x08, 0x00, 
 134:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x02, 0x01, 0x02, 0x04, 0x02, 
 135:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3C, 0x26, 0x23, 0x26, 0x3C, 
 136:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1E, 0xA1, 0xA1, 0x61, 0x12, 
 137:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3A, 0x40, 0x40, 0x20, 0x7A, 
 138:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x54, 0x54, 0x55, 0x59, 
 139:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x21, 0x55, 0x55, 0x79, 0x41, 
 140:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x21, 0x54, 0x54, 0x78, 0x41, 
 141:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x21, 0x55, 0x54, 0x78, 0x40, 
 142:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x20, 0x54, 0x55, 0x79, 0x40, 
 143:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x0C, 0x1E, 0x52, 0x72, 0x12, 
 144:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x39, 0x55, 0x55, 0x55, 0x59, 
 145:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x39, 0x54, 0x54, 0x54, 0x59, 
 146:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x39, 0x55, 0x54, 0x54, 0x58, 
 147:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x45, 0x7C, 0x41, 
 148:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x02, 0x45, 0x7D, 0x42, 
 149:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x01, 0x45, 0x7C, 0x40, 
 150:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xF0, 0x29, 0x24, 0x29, 0xF0, 
 151:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xF0, 0x28, 0x25, 0x28, 0xF0, 
 152:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7C, 0x54, 0x55, 0x45, 0x00, 
 153:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x20, 0x54, 0x54, 0x7C, 0x54, 
 154:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7C, 0x0A, 0x09, 0x7F, 0x49, 
 155:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x32, 0x49, 0x49, 0x49, 0x32, 
 156:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x32, 0x48, 0x48, 0x48, 0x32, 
 157:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x32, 0x4A, 0x48, 0x48, 0x30, 
 158:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3A, 0x41, 0x41, 0x21, 0x7A, 
 159:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3A, 0x42, 0x40, 0x20, 0x78, 
 160:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x9D, 0xA0, 0xA0, 0x7D, 
 161:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x39, 0x44, 0x44, 0x44, 0x39, 
 162:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3D, 0x40, 0x40, 0x40, 0x3D, 
 163:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3C, 0x24, 0xFF, 0x24, 0x24, 
 164:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x48, 0x7E, 0x49, 0x43, 0x66, 
 165:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x2B, 0x2F, 0xFC, 0x2F, 0x2B, 
 166:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xFF, 0x09, 0x29, 0xF6, 0x20, 
 167:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xC0, 0x88, 0x7E, 0x09, 0x03, 
 168:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x20, 0x54, 0x54, 0x79, 0x41, 
 169:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x44, 0x7D, 0x41, 
 170:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x30, 0x48, 0x48, 0x4A, 0x32, 
 171:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x40, 0x40, 0x22, 0x7A, 
 172:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x7A, 0x0A, 0x0A, 0x72, 
 173:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7D, 0x0D, 0x19, 0x31, 0x7D, 
 174:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x26, 0x29, 0x29, 0x2F, 0x28, 
 175:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x26, 0x29, 0x29, 0x29, 0x26, 
 176:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x30, 0x48, 0x4D, 0x40, 0x20, 
 177:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x08, 0x08, 0x08, 0x08, 
 178:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x08, 0x08, 0x08, 0x38, 
 179:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x2F, 0x10, 0xC8, 0xAC, 0xBA, 
 180:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x2F, 0x10, 0x28, 0x34, 0xFA, 
 181:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x7B, 0x00, 0x00, 
 182:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x14, 0x2A, 0x14, 0x22, 
 183:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x22, 0x14, 0x2A, 0x14, 0x08, 
 184:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xAA, 0x00, 0x55, 0x00, 0xAA, 
 185:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xAA, 0x55, 0xAA, 0x55, 0xAA, 
 186:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0xFF, 0x00, 
 187:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x10, 0xFF, 0x00, 
 188:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0xFF, 0x00, 
 189:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0xFF, 0x00, 0xFF, 
 190:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0xF0, 0x10, 0xF0, 
 191:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0xFC, 0x00, 
 192:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0xF7, 0x00, 0xFF, 
 193:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0xFF, 0x00, 0xFF, 
 194:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0xF4, 0x04, 0xFC, 
 195:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x17, 0x10, 0x1F, 
 196:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x1F, 0x10, 0x1F, 
 197:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0x1F, 0x00, 
 198:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x10, 0xF0, 0x00, 
 199:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0x1F, 0x10, 
 200:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x10, 0x1F, 0x10, 
 201:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x10, 0xF0, 0x10, 
 202:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0xFF, 0x10, 
 203:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x10, 0x10, 0x10, 
 204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x10, 0xFF, 0x10, 
 205:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0xFF, 0x14, 
 206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0xFF, 0x00, 0xFF, 
 207:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x1F, 0x10, 0x17, 
 208:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0xFC, 0x04, 0xF4, 
 209:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x17, 0x10, 0x17, 
 210:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0xF4, 0x04, 0xF4, 
 211:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0xFF, 0x00, 0xF7, 
 212:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0x14, 0x14, 
 213:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0xF7, 0x00, 0xF7, 
 214:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0x17, 0x14, 
 215:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x1F, 0x10, 0x1F, 
 216:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0xF4, 0x14, 
 217:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0xF0, 0x10, 0xF0, 
 218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x1F, 0x10, 0x1F, 
 219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0x1F, 0x14, 
 220:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0xFC, 0x14, 
 221:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0xF0, 0x10, 0xF0, 
 222:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0xFF, 0x10, 0xFF, 
 223:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x14, 0x14, 0x14, 0xFF, 0x14, 
 224:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x10, 0x10, 0x10, 0x1F, 0x00, 
 225:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0xF0, 0x10, 
 226:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
 227:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
 228:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xFF, 0xFF, 0xFF, 0x00, 0x00, 
 229:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0xFF, 0xFF, 
 230:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
 231:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x44, 0x44, 0x38, 0x44, 
 232:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7C, 0x2A, 0x2A, 0x3E, 0x14, 
 233:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7E, 0x02, 0x02, 0x06, 0x06, 
 234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x02, 0x7E, 0x02, 0x7E, 0x02, 
 235:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x63, 0x55, 0x49, 0x41, 0x63, 
 236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x38, 0x44, 0x44, 0x3C, 0x04, 
 237:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x40, 0x7E, 0x20, 0x1E, 0x20, 
 238:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x06, 0x02, 0x7E, 0x02, 0x02, 
 239:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x99, 0xA5, 0xE7, 0xA5, 0x99, 
 240:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x1C, 0x2A, 0x49, 0x2A, 0x1C, 
 241:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x4C, 0x72, 0x01, 0x72, 0x4C, 
 242:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x30, 0x4A, 0x4D, 0x4D, 0x30, 
 243:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x30, 0x48, 0x78, 0x48, 0x30, 
 244:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xBC, 0x62, 0x5A, 0x46, 0x3D, 
 245:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x3E, 0x49, 0x49, 0x49, 0x00, 
 246:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x7E, 0x01, 0x01, 0x01, 0x7E, 
 247:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
 248:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x44, 0x44, 0x5F, 0x44, 0x44, 
 249:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x40, 0x51, 0x4A, 0x44, 0x40, 
 250:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x40, 0x44, 0x4A, 0x51, 0x40, 
 251:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0xFF, 0x01, 0x03, 
 252:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0xE0, 0x80, 0xFF, 0x00, 0x00, 
 253:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x08, 0x08, 0x6B, 0x6B, 0x08,
 254:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x36, 0x12, 0x36, 0x24, 0x36, 
 255:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x06, 0x0F, 0x09, 0x0F, 0x06, 
 256:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x18, 0x18, 0x00, 
 257:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x10, 0x10, 0x00, 
 258:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x30, 0x40, 0xFF, 0x01, 0x01, 
 259:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x1F, 0x01, 0x01, 0x1E, 
 260:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x19, 0x1D, 0x17, 0x12, 
 261:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x3C, 0x3C, 0x3C, 0x3C, 
 262:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	0x00, 0x00, 0x00, 0x00, 0x00, 
 263:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** };
 264:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 265:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** ///////////////////////////////////////////////////////
 266:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // draw a circle outline
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f = 1 - r;
 271:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_x = 1;
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 273:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t x = 0;
 274:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t y = r;
 275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0+r, color);
 277:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0-r, color);
 278:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0+r, y0, color);
 279:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0-r, y0, color);
 280:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 282:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (f >= 0) {
 283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f += ddF_y;
 286:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 287:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     x++;
 288:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ddF_x += 2;
 289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f += ddF_x;
 290:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   
 291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + x, y0 + y, color);
 292:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - x, y0 + y, color);
 293:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + x, y0 - y, color);
 294:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - x, y0 - y, color);
 295:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + y, y0 + x, color);
 296:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - y, y0 + x, color);
 297:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + y, y0 - x, color);
 298:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - y, y0 - x, color);
 299:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     
 300:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 301:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 302:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****                int16_t r, uint8_t cornername, uint16_t color) {
 305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f     = 1 - r;
 306:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_x = 1;
 307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 308:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t x     = 0;
 309:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t y     = r;
 310:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 312:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (f >= 0) {
 313:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f     += ddF_y;
 316:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 317:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     x++;
 318:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ddF_x += 2;
 319:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f     += ddF_x;
 320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x4) {
 321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + x, y0 + y, color);
 322:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + y, y0 + x, color);
 323:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     } 
 324:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x2) {
 325:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + x, y0 - y, color);
 326:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + y, y0 - x, color);
 327:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 328:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x8) {
 329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 + x, color);
 330:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - x, y0 + y, color);
 331:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 332:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x1) {
 333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 - x, color);
 334:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - x, y0 - y, color);
 335:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 336:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 337:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 338:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 339:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r, 
 340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x0, y0-r, 2*r+1, color);
 342:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x0, y0, r, 3, 0, color);
 343:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 344:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 345:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // used to do circles and roundrects!
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				    uint8_t cornername, int16_t delta, uint16_t color) {
 348:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f     = 1 - r;
 350:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_x = 1;
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 352:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t x     = 0;
 353:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t y     = r;
 354:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 355:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 356:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (f >= 0) {
 357:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 359:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f     += ddF_y;
 360:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 361:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     x++;
 362:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ddF_x += 2;
 363:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f     += ddF_x;
 364:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x1) {
 366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 368:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 369:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x2) {
 370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 371:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 372:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 373:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 374:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 375:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 376:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** #define swap(a, b) a ^= b; b ^= a; a ^= b;
 377:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 378:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // bresenham's algorithm - thx wikpedia
 379:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawLine(int16_t x0, int16_t y0, 
 380:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    int16_t x1, int16_t y1, 
 381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 382:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 383:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (steep) {
 384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, y0);
 385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x1, y1);
 386:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 387:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 388:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (x0 > x1) {
 389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, x1);
 390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1);
 391:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 392:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 393:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t dx, dy;
 394:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   dx = x1 - x0;
 395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   dy = abs(y1 - y0);
 396:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t err = dx / 2;
 398:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ystep;
 399:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 400:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y0 < y1) {
 401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ystep = 1;
 402:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   } else {
 403:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ystep = -1;
 404:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 405:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 406:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (; x0<=x1; x0++) {
 407:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (steep) {
 408:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(y0, x0, color);
 409:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     } else {
 410:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0, y0, color);
 411:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 412:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     err -= dy;
 413:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (err < 0) {
 414:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y0 += ystep;
 415:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       err += dx;
 416:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 417:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 418:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 419:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 420:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 421:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // draw a rectangle
 422:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawRect(int16_t x, int16_t y, 
 423:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    int16_t w, int16_t h, 
 424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x, y, w, color);
 426:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x, y+h-1, w, color);
 427:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x, y, h, color);
 428:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x+w-1, y, h, color);
 429:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 430:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 431:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawFastVLine(int16_t x, int16_t y, 
 432:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, uint16_t color) {
 433:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // stupidest version - update in subclasses if desired!
 434:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x, y, x, y+h-1, color);
 435:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 436:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 437:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 438:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawFastHLine(int16_t x, int16_t y, 
 439:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t w, uint16_t color) {
 440:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // stupidest version - update in subclasses if desired!
 441:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x, y, x+w-1, y, color);
 442:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 443:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 444:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, 
 445:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 446:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // stupidest version - update in subclasses if desired!
 447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int16_t i=x; i<x+w; i++) {
 448:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastVLine(i, y, h, color); 
 449:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 450:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 451:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 452:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 453:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillScreen(uint16_t color) {
 454:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillRect(0, 0, _width, _height, color);
 455:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 456:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 457:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // draw a rounded rectangle!
 458:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t h, int16_t r, uint16_t color) {
 460:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // smarter version
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y    , w-2*r, color); // Top
 462:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 463:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(  x    , y+r  , h-2*r, color); // Left
 464:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(  x+w-1, y+r  , h-2*r, color); // Right
 465:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // draw four corners
 466:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+r    , y+r    , r, 1, color);
 467:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 468:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 469:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 470:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 471:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 472:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // fill a rounded rectangle!
 473:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, int16_t r, uint16_t color) {
 475:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // smarter version
 476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillRect(x+r, y, w-2*r, h, color);
 477:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 478:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // draw four corners
 479:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 480:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 481:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 482:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 483:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // draw a triangle!
 484:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawTriangle(int16_t x0, int16_t y0,
 485:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				int16_t x1, int16_t y1, 
 486:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				int16_t x2, int16_t y2, uint16_t color) {
 487:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x0, y0, x1, y1, color);
 488:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x1, y1, x2, y2, color);
 489:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x2, y2, x0, y0, color);
 490:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 491:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 492:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // fill a triangle!
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillTriangle ( int16_t x0, int16_t y0,
 494:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				  int16_t x1, int16_t y1, 
 495:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				  int16_t x2, int16_t y2, uint16_t color) {
 496:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 497:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t a, b, y, last;
 498:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 499:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // Sort coordinates by Y order (y2 >= y1 >= y0)
 500:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y0 > y1) {
 501:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1); swap(x0, x1);
 502:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 503:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y1 > y2) {
 504:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y2, y1); swap(x2, x1);
 505:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 506:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y0 > y1) {
 507:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1); swap(x0, x1);
 508:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 509:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 510:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 511:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a = b = x0;
 512:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(x1 < a)      a = x1;
 513:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     else if(x1 > b) b = x1;
 514:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(x2 < a)      a = x2;
 515:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     else if(x2 > b) b = x2;
 516:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y0, b-a+1, color);
 517:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     return;
 518:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 519:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 520:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t
 521:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx01 = x1 - x0,
 522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy01 = y1 - y0,
 523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx02 = x2 - x0,
 524:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy02 = y2 - y0,
 525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx12 = x2 - x1,
 526:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy12 = y2 - y1,
 527:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sa   = 0,
 528:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sb   = 0;
 529:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 530:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // For upper part of triangle, find scanline crossings for segments
 531:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
 532:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // is included here (and second loop will be skipped, avoiding a /0
 533:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // error there), otherwise scanline y1 is skipped here and handled
 534:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // in the second loop...which also avoids a /0 error here if y0=y1
 535:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // (flat-topped triangle).
 536:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if(y1 == y2) last = y1;   // Include y1 scanline
 537:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   else         last = y1-1; // Skip it
 538:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(y=y0; y<=last; y++) {
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x0 + sa / dy01;
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 542:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sa += dx01;
 543:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sb += dx02;
 544:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(a > b) swap(a,b);
 545:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y, b-a+1, color);
 546:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 547:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 548:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // For lower part of triangle, find scanline crossings for segments
 549:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // 0-2 and 1-2.  This loop is skipped if y1=y2.
 550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sa = dx12 * (y - y1);
 551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sb = dx02 * (y - y0);
 552:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(; y<=y2; y++) {
 553:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x1 + sa / dy12;
 554:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 555:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sa += dx12;
 556:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sb += dx02;
 557:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(a > b) swap(a,b);
 558:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y, b-a+1, color);
 559:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 560:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 561:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 562:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawBitmap(int16_t x, int16_t y, 
 563:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      const uint8_t *bitmap, int16_t w, int16_t h,
 564:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 565:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int16_t j=0; j<h; j++) {
 566:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     for (int16_t i=0; i<w; i++ ) {
 567:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** //      if (pgm_read_byte(bitmap + i + (j/8)*w) & _BV(j%8)) {
 568:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       if ((*bitmap + i + (j/8)*w) & (1<<(j%8))) {
 569:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	drawPixel(x+i, y+j, color);
 570:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       }
 571:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 572:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 573:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 574:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 575:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 576:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** uint32_t Arduino_GFX::write(uint8_t c) {
 577:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   
 578:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (c == '\n') {
 579:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     cursor_y += textsize*8;
 580:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     cursor_x = 0;
 581:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   } else if (c == '\r') {
 582:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     // skip em
 583:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   } else {
 584:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 585:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     cursor_x += textsize*6;
 586:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (wrap && (cursor_x > (_width - textsize*6))) {
 587:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       cursor_y += textsize*8;
 588:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       cursor_x = 0;
 589:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 590:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 591:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   return 1;
 592:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 593:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 594:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::print(char *str) {
 595:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while(*str != 0x00) write((uint8_t)*(str++));
 596:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 597:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 598:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::println(char *str) {
 599:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   print(str);
 600:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y += textsize*8;
 601:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = 0;
 602:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 603:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 604:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // draw a character
 605:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color, uint16_t bg, uint8_t size) {
 607:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if((x >= _width)            || // Clip right
 609:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****      (y >= _height)           || // Clip bottom
 610:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****      ((x + 5 * size - 1) < 0) || // Clip left
 611:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****      ((y + 8 * size - 1) < 0))   // Clip top
 612:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     return;
 613:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 614:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     
 615:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int8_t i=0; i<6; i++ ) {
 616:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     uint8_t line;
 617:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (i == 5) 
 618:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       line = 0x0;
 619:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     else 
 620:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       line = font[(c*5)+i];
 621:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** //      line = pgm_read_byte(font+(c*5)+i);
 622:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     for (int8_t j = 0; j<8; j++) {
 623:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       if (line & 0x1) {
 624:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         if (size == 1) // default size
 625:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           drawPixel(x+i, y+j, color);
 626:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         else {  // big size
 627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           fillRect(x+(i*size), y+(j*size), size, size, color);
 628:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         } 
 629:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       } else if (bg != color) {
 630:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         if (size == 1) // default size
 631:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           drawPixel(x+i, y+j, bg);
 632:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         else {  // big size
 633:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           fillRect(x+i*size, y+j*size, size, size, bg);
 634:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         } 	
 635:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       }
 636:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       line >>= 1;
 637:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     }
 638:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   }
 639:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 640:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 641:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setCursor(int16_t x, int16_t y) {
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = x;
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = y;
 644:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 645:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 646:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 647:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setTextSize(uint8_t s) {
 648:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textsize = (s > 0) ? s : 1;
 649:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 650:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 651:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 652:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setTextColor(uint16_t c) {
 653:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textcolor = c;
 654:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textbgcolor = c; 
 655:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // for 'transparent' background, we'll set the bg 
 656:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   // to the same as fg instead of using a flag
 657:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 658:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 659:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****  void Arduino_GFX::setTextColor(uint16_t c, uint16_t b) {
 660:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****    textcolor = c;
 661:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****    textbgcolor = b; 
 662:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****  }
 663:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 664:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setTextWrap(bool w) {
 665:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   wrap = w;
 666:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 667:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 668:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** // return the size of the display which depends on the rotation!
 669:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** int16_t Arduino_GFX::width(void) { 
 670:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   return _width; 
 671:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 672:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****  
 673:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** int16_t Arduino_GFX::height(void) { 
 674:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   return _height; 
 675:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 676:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 677:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** Arduino_OLED::Arduino_OLED() {
 678:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   _width = WIDTH = 128;
 679:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   _height = HEIGHT = 128;
 680:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 681:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = cursor_x = 0;
 682:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textsize = 1;
 683:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textcolor = textbgcolor = 0xFFFF;
 684:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   wrap = true;
 685:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 686:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 687:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::begin() {
 688:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_init();
 689:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 690:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 691:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::shutdown() {
 692:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_deinit();
 693:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 694:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 695:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::setPower(uint8_t power) {
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_power(power);
 697:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 698:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 699:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 700:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x0, y0, x1, y1);
 701:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 702:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 703:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::pushColor(uint16_t color) {
 704:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 1);
 705:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 706:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 707:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillScreen(uint16_t color) {
 708:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(0, 0, 0x7F, 0x7F); 
 709:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 128 * 128);
 710:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 711:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 712:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 713:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y);
 714:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 1);
 715:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 716:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 717:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 718:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y + h - 1);
 719:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, h);
 720:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 721:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 722:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 723:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x + w - 1, y);
 724:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, w);
 725:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 726:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
  27              		.loc 1 727 0
  28              		.cfi_startproc
  29              		@ args = 8, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
 728:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x + w - 1, y + h - 1);
  39              		.loc 1 728 0
  40 0002 C8B2     		uxtb	r0, r1
  41              	.LVL1:
 727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
  42              		.loc 1 727 0
  43 0004 BDF91040 		ldrsh	r4, [sp, #16]
  44              		.loc 1 728 0
  45 0008 D1B2     		uxtb	r1, r2
  46              	.LVL2:
  47 000a 421E     		subs	r2, r0, #1
  48              	.LVL3:
 727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
  49              		.loc 1 727 0
  50 000c 1D46     		mov	r5, r3
  51              		.loc 1 728 0
  52 000e D218     		adds	r2, r2, r3
  53 0010 4B1E     		subs	r3, r1, #1
  54              	.LVL4:
  55 0012 1B19     		adds	r3, r3, r4
  56 0014 D2B2     		uxtb	r2, r2
  57 0016 DBB2     		uxtb	r3, r3
 727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
  58              		.loc 1 727 0
  59 0018 BDF81460 		ldrh	r6, [sp, #20]
  60              		.loc 1 728 0
  61 001c FFF7FEFF 		bl	oled_window
  62              	.LVL5:
 729:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, w * h);
  63              		.loc 1 729 0
  64 0020 05FB04F1 		mul	r1, r5, r4
  65 0024 3046     		mov	r0, r6
  66 0026 89B2     		uxth	r1, r1
 730:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
  67              		.loc 1 730 0
  68 0028 BDE87040 		pop	{r4, r5, r6, lr}
 729:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, w * h);
  69              		.loc 1 729 0
  70 002c FFF7FEBF 		b	oled_push
  71              	.LVL6:
  72              		.cfi_endproc
  73              	.LFE100:
  75              		.section	.text._ZN12Arduino_OLED13drawFastHLineEssst,"ax",%progbits
  76              		.align	1
  77              		.global	_ZN12Arduino_OLED13drawFastHLineEssst
  78              		.thumb
  79              		.thumb_func
  81              	_ZN12Arduino_OLED13drawFastHLineEssst:
  82              	.LFB99:
 722:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  83              		.loc 1 722 0
  84              		.cfi_startproc
  85              		@ args = 4, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              	.LVL7:
  88 0000 38B5     		push	{r3, r4, r5, lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 16
  91              		.cfi_offset 3, -16
  92              		.cfi_offset 4, -12
  93              		.cfi_offset 5, -8
  94              		.cfi_offset 14, -4
 723:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x + w - 1, y);
  95              		.loc 1 723 0
  96 0002 C8B2     		uxtb	r0, r1
  97              	.LVL8:
  98 0004 D1B2     		uxtb	r1, r2
  99              	.LVL9:
 100 0006 421E     		subs	r2, r0, #1
 101              	.LVL10:
 722:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 102              		.loc 1 722 0
 103 0008 1C46     		mov	r4, r3
 723:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x + w - 1, y);
 104              		.loc 1 723 0
 105 000a D318     		adds	r3, r2, r3
 106              	.LVL11:
 107 000c DAB2     		uxtb	r2, r3
 108 000e 0B46     		mov	r3, r1
 722:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 109              		.loc 1 722 0
 110 0010 BDF81050 		ldrh	r5, [sp, #16]
 723:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x + w - 1, y);
 111              		.loc 1 723 0
 112 0014 FFF7FEFF 		bl	oled_window
 113              	.LVL12:
 724:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, w);
 114              		.loc 1 724 0
 115 0018 2846     		mov	r0, r5
 116 001a A1B2     		uxth	r1, r4
 725:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 117              		.loc 1 725 0
 118 001c BDE83840 		pop	{r3, r4, r5, lr}
 724:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, w);
 119              		.loc 1 724 0
 120 0020 FFF7FEBF 		b	oled_push
 121              	.LVL13:
 122              		.cfi_endproc
 123              	.LFE99:
 125              		.section	.text._ZN12Arduino_OLED13drawFastVLineEssst,"ax",%progbits
 126              		.align	1
 127              		.global	_ZN12Arduino_OLED13drawFastVLineEssst
 128              		.thumb
 129              		.thumb_func
 131              	_ZN12Arduino_OLED13drawFastVLineEssst:
 132              	.LFB98:
 717:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 133              		.loc 1 717 0
 134              		.cfi_startproc
 135              		@ args = 4, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              	.LVL14:
 138 0000 38B5     		push	{r3, r4, r5, lr}
 139              	.LCFI2:
 140              		.cfi_def_cfa_offset 16
 141              		.cfi_offset 3, -16
 142              		.cfi_offset 4, -12
 143              		.cfi_offset 5, -8
 144              		.cfi_offset 14, -4
 718:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y + h - 1);
 145              		.loc 1 718 0
 146 0002 C8B2     		uxtb	r0, r1
 147              	.LVL15:
 148 0004 D1B2     		uxtb	r1, r2
 149              	.LVL16:
 717:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 150              		.loc 1 717 0
 151 0006 1C46     		mov	r4, r3
 718:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y + h - 1);
 152              		.loc 1 718 0
 153 0008 4B1E     		subs	r3, r1, #1
 154              	.LVL17:
 155 000a 1B19     		adds	r3, r3, r4
 156 000c 0246     		mov	r2, r0
 157              	.LVL18:
 158 000e DBB2     		uxtb	r3, r3
 717:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 159              		.loc 1 717 0
 160 0010 BDF81050 		ldrh	r5, [sp, #16]
 718:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y + h - 1);
 161              		.loc 1 718 0
 162 0014 FFF7FEFF 		bl	oled_window
 163              	.LVL19:
 719:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, h);
 164              		.loc 1 719 0
 165 0018 2846     		mov	r0, r5
 166 001a A1B2     		uxth	r1, r4
 720:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 167              		.loc 1 720 0
 168 001c BDE83840 		pop	{r3, r4, r5, lr}
 719:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, h);
 169              		.loc 1 719 0
 170 0020 FFF7FEBF 		b	oled_push
 171              	.LVL20:
 172              		.cfi_endproc
 173              	.LFE98:
 175              		.section	.text._ZN12Arduino_OLED9drawPixelEsst,"ax",%progbits
 176              		.align	1
 177              		.global	_ZN12Arduino_OLED9drawPixelEsst
 178              		.thumb
 179              		.thumb_func
 181              	_ZN12Arduino_OLED9drawPixelEsst:
 182              	.LFB97:
 712:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 183              		.loc 1 712 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              	.LVL21:
 713:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y);
 188              		.loc 1 713 0
 189 0000 C8B2     		uxtb	r0, r1
 190              	.LVL22:
 191 0002 D1B2     		uxtb	r1, r2
 192              	.LVL23:
 712:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 193              		.loc 1 712 0
 194 0004 10B5     		push	{r4, lr}
 195              	.LCFI3:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 4, -8
 198              		.cfi_offset 14, -4
 713:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y);
 199              		.loc 1 713 0
 200 0006 0246     		mov	r2, r0
 201              	.LVL24:
 712:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 202              		.loc 1 712 0
 203 0008 1C46     		mov	r4, r3
 713:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x, y, x, y);
 204              		.loc 1 713 0
 205 000a 0B46     		mov	r3, r1
 206              	.LVL25:
 207 000c FFF7FEFF 		bl	oled_window
 208              	.LVL26:
 714:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 1);
 209              		.loc 1 714 0
 210 0010 2046     		mov	r0, r4
 211 0012 0121     		movs	r1, #1
 715:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 212              		.loc 1 715 0
 213 0014 BDE81040 		pop	{r4, lr}
 714:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 1);
 214              		.loc 1 714 0
 215 0018 FFF7FEBF 		b	oled_push
 216              	.LVL27:
 217              		.cfi_endproc
 218              	.LFE97:
 220              		.section	.text._ZN12Arduino_OLED10fillScreenEt,"ax",%progbits
 221              		.align	1
 222              		.global	_ZN12Arduino_OLED10fillScreenEt
 223              		.thumb
 224              		.thumb_func
 226              	_ZN12Arduino_OLED10fillScreenEt:
 227              	.LFB96:
 707:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillScreen(uint16_t color) {
 228              		.loc 1 707 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL28:
 708:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(0, 0, 0x7F, 0x7F); 
 233              		.loc 1 708 0
 234 0000 0020     		movs	r0, #0
 235              	.LVL29:
 236 0002 7F22     		movs	r2, #127
 707:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillScreen(uint16_t color) {
 237              		.loc 1 707 0
 238 0004 10B5     		push	{r4, lr}
 239              	.LCFI4:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 4, -8
 242              		.cfi_offset 14, -4
 708:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(0, 0, 0x7F, 0x7F); 
 243              		.loc 1 708 0
 244 0006 1346     		mov	r3, r2
 707:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::fillScreen(uint16_t color) {
 245              		.loc 1 707 0
 246 0008 0C46     		mov	r4, r1
 708:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(0, 0, 0x7F, 0x7F); 
 247              		.loc 1 708 0
 248 000a 0146     		mov	r1, r0
 249              	.LVL30:
 250 000c FFF7FEFF 		bl	oled_window
 251              	.LVL31:
 709:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 128 * 128);
 252              		.loc 1 709 0
 253 0010 2046     		mov	r0, r4
 254 0012 4FF48041 		mov	r1, #16384
 710:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 255              		.loc 1 710 0
 256 0016 BDE81040 		pop	{r4, lr}
 709:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 128 * 128);
 257              		.loc 1 709 0
 258 001a FFF7FEBF 		b	oled_push
 259              	.LVL32:
 260              		.cfi_endproc
 261              	.LFE96:
 263              		.section	.text._ZN11Arduino_GFX10drawCircleEssst,"ax",%progbits
 264              		.align	1
 265              		.global	_ZN11Arduino_GFX10drawCircleEssst
 266              		.thumb
 267              		.thumb_func
 269              	_ZN11Arduino_GFX10drawCircleEssst:
 270              	.LFB59:
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 271              		.loc 1 269 0
 272              		.cfi_startproc
 273              		@ args = 4, pretend = 0, frame = 24
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              	.LVL33:
 276 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 277              	.LCFI5:
 278              		.cfi_def_cfa_offset 36
 279              		.cfi_offset 4, -36
 280              		.cfi_offset 5, -32
 281              		.cfi_offset 6, -28
 282              		.cfi_offset 7, -24
 283              		.cfi_offset 8, -20
 284              		.cfi_offset 9, -16
 285              		.cfi_offset 10, -12
 286              		.cfi_offset 11, -8
 287              		.cfi_offset 14, -4
 288              	.LBB40:
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f = 1 - r;
 289              		.loc 1 270 0
 290 0004 1FFA83F8 		uxth	r8, r3
 291              	.LBE40:
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 292              		.loc 1 269 0
 293 0008 9A46     		mov	sl, r3
 294              	.LBB41:
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 295              		.loc 1 272 0
 296 000a 6FF00106 		mvn	r6, #1
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f = 1 - r;
 297              		.loc 1 270 0
 298 000e C8F10103 		rsb	r3, r8, #1
 299              	.LVL34:
 300              	.LBE41:
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 301              		.loc 1 269 0
 302 0012 9146     		mov	r9, r2
 303              	.LBB42:
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f = 1 - r;
 304              		.loc 1 270 0
 305 0014 9AB2     		uxth	r2, r3
 306              	.LVL35:
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 307              		.loc 1 272 0
 308 0016 06FB08F3 		mul	r3, r6, r8
 309              	.LBE42:
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 310              		.loc 1 269 0
 311 001a 87B0     		sub	sp, sp, #28
 312              	.LCFI6:
 313              		.cfi_def_cfa_offset 64
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 314              		.loc 1 269 0
 315 001c BDF84050 		ldrh	r5, [sp, #64]
 316              	.LBB43:
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f = 1 - r;
 317              		.loc 1 270 0
 318 0020 0192     		str	r2, [sp, #4]
 319              	.LVL36:
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0+r, color);
 320              		.loc 1 276 0
 321 0022 1FFA89F6 		uxth	r6, r9
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 322              		.loc 1 272 0
 323 0026 9AB2     		uxth	r2, r3
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0+r, color);
 324              		.loc 1 276 0
 325 0028 0368     		ldr	r3, [r0, #0]
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 326              		.loc 1 272 0
 327 002a 0592     		str	r2, [sp, #20]
 328              	.LVL37:
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0+r, color);
 329              		.loc 1 276 0
 330 002c 08EB0602 		add	r2, r8, r6
 331              	.LBE43:
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 332              		.loc 1 269 0
 333 0030 0446     		mov	r4, r0
 334              	.LBB44:
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0+r, color);
 335              		.loc 1 276 0
 336 0032 D3F800C0 		ldr	ip, [r3, #0]
 337 0036 12B2     		sxth	r2, r2
 338 0038 2B46     		mov	r3, r5
 339              	.LBE44:
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 340              		.loc 1 269 0
 341 003a 0F46     		mov	r7, r1
 342              	.LBB45:
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0+r, color);
 343              		.loc 1 276 0
 344 003c E047     		blx	ip
 345              	.LVL38:
 277:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0, y0-r, color);
 346              		.loc 1 277 0
 347 003e 2068     		ldr	r0, [r4, #0]
 348 0040 C8EB0603 		rsb	r3, r8, r6
 349 0044 D0F800C0 		ldr	ip, [r0, #0]
 350 0048 3946     		mov	r1, r7
 351 004a 1AB2     		sxth	r2, r3
 352 004c 2046     		mov	r0, r4
 353 004e 2B46     		mov	r3, r5
 354 0050 E047     		blx	ip
 355              	.LVL39:
 278:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0+r, y0, color);
 356              		.loc 1 278 0
 357 0052 BFB2     		uxth	r7, r7
 358 0054 2268     		ldr	r2, [r4, #0]
 359 0056 08EB0701 		add	r1, r8, r7
 360 005a D2F800C0 		ldr	ip, [r2, #0]
 361 005e 2046     		mov	r0, r4
 362 0060 09B2     		sxth	r1, r1
 363 0062 4A46     		mov	r2, r9
 364 0064 2B46     		mov	r3, r5
 365 0066 E047     		blx	ip
 366              	.LVL40:
 279:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawPixel(x0-r, y0, color);
 367              		.loc 1 279 0
 368 0068 2068     		ldr	r0, [r4, #0]
 369 006a C8EB0703 		rsb	r3, r8, r7
 370 006e D0F800C0 		ldr	ip, [r0, #0]
 371 0072 19B2     		sxth	r1, r3
 372 0074 4A46     		mov	r2, r9
 373 0076 2046     		mov	r0, r4
 374 0078 2B46     		mov	r3, r5
 375 007a E047     		blx	ip
 376              	.LVL41:
 281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 377              		.loc 1 281 0
 378 007c 0022     		movs	r2, #0
 274:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t y = r;
 379              		.loc 1 274 0
 380 007e CDF808A0 		str	sl, [sp, #8]
 281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 381              		.loc 1 281 0
 382 0082 0492     		str	r2, [sp, #16]
 383              	.LVL42:
 384              	.L7:
 281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 385              		.loc 1 281 0 is_stmt 0 discriminator 1
 386 0084 0499     		ldr	r1, [sp, #16]
 387 0086 029B     		ldr	r3, [sp, #8]
 388 0088 08B2     		sxth	r0, r1
 389 008a 1AB2     		sxth	r2, r3
 390 008c 9042     		cmp	r0, r2
 391 008e 80F28980 		bge	.L11
 392              	.L9:
 282:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (f >= 0) {
 393              		.loc 1 282 0 is_stmt 1
 394 0092 0199     		ldr	r1, [sp, #4]
 395 0094 0B04     		lsls	r3, r1, #16
 396 0096 0CD4     		bmi	.L8
 283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 397              		.loc 1 283 0
 398 0098 0298     		ldr	r0, [sp, #8]
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 399              		.loc 1 284 0
 400 009a 0599     		ldr	r1, [sp, #20]
 283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 401              		.loc 1 283 0
 402 009c 431E     		subs	r3, r0, #1
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 403              		.loc 1 284 0
 404 009e 881C     		adds	r0, r1, #2
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f += ddF_y;
 405              		.loc 1 285 0
 406 00a0 0199     		ldr	r1, [sp, #4]
 283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 407              		.loc 1 283 0
 408 00a2 9AB2     		uxth	r2, r3
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 409              		.loc 1 284 0
 410 00a4 83B2     		uxth	r3, r0
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f += ddF_y;
 411              		.loc 1 285 0
 412 00a6 5818     		adds	r0, r3, r1
 283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 413              		.loc 1 283 0
 414 00a8 0292     		str	r2, [sp, #8]
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 415              		.loc 1 284 0
 416 00aa 9AB2     		uxth	r2, r3
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f += ddF_y;
 417              		.loc 1 285 0
 418 00ac 83B2     		uxth	r3, r0
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 419              		.loc 1 284 0
 420 00ae 0592     		str	r2, [sp, #20]
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f += ddF_y;
 421              		.loc 1 285 0
 422 00b0 0193     		str	r3, [sp, #4]
 423              	.L8:
 424              	.LVL43:
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 425              		.loc 1 268 0
 426 00b2 049A     		ldr	r2, [sp, #16]
 427 00b4 0199     		ldr	r1, [sp, #4]
 428 00b6 1FFA82F8 		uxth	r8, r2
 429              	.LVL44:
 430 00ba 01EB4800 		add	r0, r1, r8, lsl #1
 289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f += ddF_x;
 431              		.loc 1 289 0
 432 00be C31C     		adds	r3, r0, #3
 291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + x, y0 + y, color);
 433              		.loc 1 291 0
 434 00c0 0298     		ldr	r0, [sp, #8]
 289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f += ddF_x;
 435              		.loc 1 289 0
 436 00c2 9AB2     		uxth	r2, r3
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 437              		.loc 1 268 0
 438 00c4 07F1010B 		add	fp, r7, #1
 291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + x, y0 + y, color);
 439              		.loc 1 291 0
 440 00c8 83B2     		uxth	r3, r0
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 441              		.loc 1 268 0
 442 00ca 08EB0B01 		add	r1, r8, fp
 289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f += ddF_x;
 443              		.loc 1 289 0
 444 00ce 0192     		str	r2, [sp, #4]
 291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + x, y0 + y, color);
 445              		.loc 1 291 0
 446 00d0 03EB0609 		add	r9, r3, r6
 447 00d4 2268     		ldr	r2, [r4, #0]
 448 00d6 0FFA81FB 		sxth	fp, r1
 449 00da 0FFA89F9 		sxth	r9, r9
 450 00de D2F800A0 		ldr	sl, [r2, #0]
 451 00e2 5946     		mov	r1, fp
 452 00e4 4A46     		mov	r2, r9
 453 00e6 0393     		str	r3, [sp, #12]
 454 00e8 2046     		mov	r0, r4
 455 00ea 2B46     		mov	r3, r5
 456 00ec D047     		blx	sl
 457              	.LVL45:
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 458              		.loc 1 268 0
 459 00ee 07F1FF31 		add	r1, r7, #-1
 460 00f2 C8EB0100 		rsb	r0, r8, r1
 292:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - x, y0 + y, color);
 461              		.loc 1 292 0
 462 00f6 2368     		ldr	r3, [r4, #0]
 463 00f8 0FFA80FA 		sxth	sl, r0
 464 00fc D3F800C0 		ldr	ip, [r3, #0]
 465 0100 5146     		mov	r1, sl
 466 0102 4A46     		mov	r2, r9
 467 0104 2046     		mov	r0, r4
 468 0106 2B46     		mov	r3, r5
 469 0108 E047     		blx	ip
 470              	.LVL46:
 293:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + x, y0 - y, color);
 471              		.loc 1 293 0
 472 010a 039A     		ldr	r2, [sp, #12]
 473 010c 2168     		ldr	r1, [r4, #0]
 474 010e C2EB0609 		rsb	r9, r2, r6
 475 0112 0FFA89F9 		sxth	r9, r9
 476 0116 D1F800C0 		ldr	ip, [r1, #0]
 477 011a 4A46     		mov	r2, r9
 478 011c 5946     		mov	r1, fp
 479 011e 2046     		mov	r0, r4
 480 0120 2B46     		mov	r3, r5
 481 0122 E047     		blx	ip
 482              	.LVL47:
 294:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - x, y0 - y, color);
 483              		.loc 1 294 0
 484 0124 2068     		ldr	r0, [r4, #0]
 485 0126 5146     		mov	r1, sl
 486 0128 D0F800B0 		ldr	fp, [r0, #0]
 487 012c 4A46     		mov	r2, r9
 488 012e 2046     		mov	r0, r4
 489 0130 2B46     		mov	r3, r5
 490 0132 D847     		blx	fp
 491              	.LVL48:
 295:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + y, y0 + x, color);
 492              		.loc 1 295 0
 493 0134 039B     		ldr	r3, [sp, #12]
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 494              		.loc 1 268 0
 495 0136 06F10102 		add	r2, r6, #1
 496 013a 08EB0201 		add	r1, r8, r2
 295:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + y, y0 + x, color);
 497              		.loc 1 295 0
 498 013e 2068     		ldr	r0, [r4, #0]
 499 0140 03EB070A 		add	sl, r3, r7
 500 0144 0FFA81FB 		sxth	fp, r1
 501 0148 0FFA8AFA 		sxth	sl, sl
 502 014c D0F80090 		ldr	r9, [r0, #0]
 503 0150 5146     		mov	r1, sl
 504 0152 2046     		mov	r0, r4
 505 0154 5A46     		mov	r2, fp
 506 0156 2B46     		mov	r3, r5
 507 0158 C847     		blx	r9
 508              	.LVL49:
 296:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - y, y0 + x, color);
 509              		.loc 1 296 0
 510 015a 039B     		ldr	r3, [sp, #12]
 511 015c 2168     		ldr	r1, [r4, #0]
 512 015e FA1A     		subs	r2, r7, r3
 513 0160 0FFA82F9 		sxth	r9, r2
 514 0164 D1F800C0 		ldr	ip, [r1, #0]
 515 0168 2046     		mov	r0, r4
 516 016a 4946     		mov	r1, r9
 517 016c 5A46     		mov	r2, fp
 518 016e 2B46     		mov	r3, r5
 519 0170 E047     		blx	ip
 520              	.LVL50:
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 521              		.loc 1 268 0
 522 0172 701E     		subs	r0, r6, #1
 297:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + y, y0 - x, color);
 523              		.loc 1 297 0
 524 0174 2368     		ldr	r3, [r4, #0]
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, 
 525              		.loc 1 268 0
 526 0176 C8EB0008 		rsb	r8, r8, r0
 527              	.LVL51:
 297:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 + y, y0 - x, color);
 528              		.loc 1 297 0
 529 017a 0FFA88F8 		sxth	r8, r8
 530 017e D3F800C0 		ldr	ip, [r3, #0]
 531 0182 2046     		mov	r0, r4
 532 0184 5146     		mov	r1, sl
 533 0186 4246     		mov	r2, r8
 534 0188 2B46     		mov	r3, r5
 535 018a E047     		blx	ip
 536              	.LVL52:
 298:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawPixel(x0 - y, y0 - x, color);
 537              		.loc 1 298 0
 538 018c 2268     		ldr	r2, [r4, #0]
 539 018e 2046     		mov	r0, r4
 540 0190 D2F800C0 		ldr	ip, [r2, #0]
 541 0194 4946     		mov	r1, r9
 542 0196 4246     		mov	r2, r8
 543 0198 2B46     		mov	r3, r5
 544 019a E047     		blx	ip
 545              	.LVL53:
 546 019c 0499     		ldr	r1, [sp, #16]
 547 019e 481C     		adds	r0, r1, #1
 548 01a0 0490     		str	r0, [sp, #16]
 549 01a2 6FE7     		b	.L7
 550              	.LVL54:
 551              	.L11:
 552              	.LBE45:
 301:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 553              		.loc 1 301 0
 554 01a4 07B0     		add	sp, sp, #28
 555 01a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 556              		.cfi_endproc
 557              	.LFE59:
 559              		.section	.text._ZN11Arduino_GFX16drawCircleHelperEsssht,"ax",%progbits
 560              		.align	1
 561              		.global	_ZN11Arduino_GFX16drawCircleHelperEsssht
 562              		.thumb
 563              		.thumb_func
 565              	_ZN11Arduino_GFX16drawCircleHelperEsssht:
 566              	.LFB60:
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****                int16_t r, uint8_t cornername, uint16_t color) {
 567              		.loc 1 304 0
 568              		.cfi_startproc
 569              		@ args = 8, pretend = 0, frame = 24
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              	.LVL55:
 572 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 573              	.LCFI7:
 574              		.cfi_def_cfa_offset 36
 575              		.cfi_offset 4, -36
 576              		.cfi_offset 5, -32
 577              		.cfi_offset 6, -28
 578              		.cfi_offset 7, -24
 579              		.cfi_offset 8, -20
 580              		.cfi_offset 9, -16
 581              		.cfi_offset 10, -12
 582              		.cfi_offset 11, -8
 583              		.cfi_offset 14, -4
 584 0004 87B0     		sub	sp, sp, #28
 585              	.LCFI8:
 586              		.cfi_def_cfa_offset 64
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****                int16_t r, uint8_t cornername, uint16_t color) {
 587              		.loc 1 304 0
 588 0006 0446     		mov	r4, r0
 589 0008 0291     		str	r1, [sp, #8]
 590              	.LBB46:
 305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f     = 1 - r;
 591              		.loc 1 305 0
 592 000a 98B2     		uxth	r0, r3
 593              	.LVL56:
 307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 594              		.loc 1 307 0
 595 000c 6FF00101 		mvn	r1, #1
 596              	.LVL57:
 305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f     = 1 - r;
 597              		.loc 1 305 0
 598 0010 C0F10108 		rsb	r8, r0, #1
 307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 599              		.loc 1 307 0
 600 0014 4843     		muls	r0, r1, r0
 601              	.LBE46:
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****                int16_t r, uint8_t cornername, uint16_t color) {
 602              		.loc 1 304 0
 603 0016 0392     		str	r2, [sp, #12]
 604              	.LBB47:
 307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 605              		.loc 1 307 0
 606 0018 87B2     		uxth	r7, r0
 607              	.LBE47:
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****                int16_t r, uint8_t cornername, uint16_t color) {
 608              		.loc 1 304 0
 609 001a 9DF84020 		ldrb	r2, [sp, #64]	@ zero_extendqisi2
 610              	.LVL58:
 611              	.LBB48:
 307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 612              		.loc 1 307 0
 613 001e 0597     		str	r7, [sp, #20]
 614              	.LBE48:
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****                int16_t r, uint8_t cornername, uint16_t color) {
 615              		.loc 1 304 0
 616 0020 BDF84460 		ldrh	r6, [sp, #68]
 617              	.LBB49:
 309:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t y     = r;
 618              		.loc 1 309 0
 619 0024 1F46     		mov	r7, r3
 311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 620              		.loc 1 311 0
 621 0026 0023     		movs	r3, #0
 622              	.LVL59:
 623              	.LBE49:
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****                int16_t r, uint8_t cornername, uint16_t color) {
 624              		.loc 1 304 0
 625 0028 0492     		str	r2, [sp, #16]
 626              	.LBB50:
 305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f     = 1 - r;
 627              		.loc 1 305 0
 628 002a 1FFA88F8 		uxth	r8, r8
 629              	.LVL60:
 311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 630              		.loc 1 311 0
 631 002e 0193     		str	r3, [sp, #4]
 632              	.LVL61:
 633              	.L13:
 311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 634              		.loc 1 311 0 is_stmt 0 discriminator 1
 635 0030 019A     		ldr	r2, [sp, #4]
 636 0032 39B2     		sxth	r1, r7
 637 0034 10B2     		sxth	r0, r2
 638 0036 8842     		cmp	r0, r1
 639 0038 80F2B780 		bge	.L32
 640              	.L19:
 312:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (f >= 0) {
 641              		.loc 1 312 0 is_stmt 1
 642 003c 18F4004F 		tst	r8, #32768
 643 0040 0AD1     		bne	.L14
 314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 644              		.loc 1 314 0
 645 0042 059B     		ldr	r3, [sp, #20]
 313:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 646              		.loc 1 313 0
 647 0044 7D1E     		subs	r5, r7, #1
 314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 648              		.loc 1 314 0
 649 0046 9A1C     		adds	r2, r3, #2
 650 0048 90B2     		uxth	r0, r2
 651 004a 81B2     		uxth	r1, r0
 315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f     += ddF_y;
 652              		.loc 1 315 0
 653 004c 00EB080C 		add	ip, r0, r8
 313:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 654              		.loc 1 313 0
 655 0050 AFB2     		uxth	r7, r5
 656              	.LVL62:
 314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 657              		.loc 1 314 0
 658 0052 0591     		str	r1, [sp, #20]
 315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f     += ddF_y;
 659              		.loc 1 315 0
 660 0054 1FFA8CF8 		uxth	r8, ip
 661              	.LVL63:
 662              	.L14:
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 663              		.loc 1 303 0
 664 0058 019D     		ldr	r5, [sp, #4]
 320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x4) {
 665              		.loc 1 320 0
 666 005a 049A     		ldr	r2, [sp, #16]
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 667              		.loc 1 303 0
 668 005c ADB2     		uxth	r5, r5
 669              	.LVL64:
 670 005e 08EB4508 		add	r8, r8, r5, lsl #1
 671              	.LVL65:
 320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x4) {
 672              		.loc 1 320 0
 673 0062 02F00400 		and	r0, r2, #4
 319:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f     += ddF_x;
 674              		.loc 1 319 0
 675 0066 08F10303 		add	r3, r8, #3
 320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x4) {
 676              		.loc 1 320 0
 677 006a C1B2     		uxtb	r1, r0
 319:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f     += ddF_x;
 678              		.loc 1 319 0
 679 006c 1FFA83F8 		uxth	r8, r3
 680              	.LVL66:
 320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x4) {
 681              		.loc 1 320 0
 682 0070 11B3     		cbz	r1, .L15
 321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + x, y0 + y, color);
 683              		.loc 1 321 0
 684 0072 029B     		ldr	r3, [sp, #8]
 685              	.LVL67:
 686 0074 039A     		ldr	r2, [sp, #12]
 687 0076 1FFA83FA 		uxth	sl, r3
 688 007a 2068     		ldr	r0, [r4, #0]
 689 007c 1FFA82F9 		uxth	r9, r2
 690 0080 1FFA87FB 		uxth	fp, r7
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 691              		.loc 1 303 0
 692 0084 0AF10101 		add	r1, sl, #1
 693 0088 6B18     		adds	r3, r5, r1
 321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + x, y0 + y, color);
 694              		.loc 1 321 0
 695 008a 0BEB0902 		add	r2, fp, r9
 696 008e D0F800C0 		ldr	ip, [r0, #0]
 697 0092 19B2     		sxth	r1, r3
 698 0094 2046     		mov	r0, r4
 699 0096 12B2     		sxth	r2, r2
 700 0098 3346     		mov	r3, r6
 701 009a E047     		blx	ip
 702              	.LVL68:
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 703              		.loc 1 303 0
 704 009c 09F10109 		add	r9, r9, #1
 322:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + y, y0 + x, color);
 705              		.loc 1 322 0
 706 00a0 2068     		ldr	r0, [r4, #0]
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 707              		.loc 1 303 0
 708 00a2 05EB0903 		add	r3, r5, r9
 322:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + y, y0 + x, color);
 709              		.loc 1 322 0
 710 00a6 0BEB0A01 		add	r1, fp, sl
 711 00aa D0F800C0 		ldr	ip, [r0, #0]
 712 00ae 1AB2     		sxth	r2, r3
 713 00b0 2046     		mov	r0, r4
 714 00b2 09B2     		sxth	r1, r1
 715 00b4 3346     		mov	r3, r6
 716 00b6 E047     		blx	ip
 717              	.LVL69:
 718              	.L15:
 324:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x2) {
 719              		.loc 1 324 0
 720 00b8 049A     		ldr	r2, [sp, #16]
 721 00ba 02F00200 		and	r0, r2, #2
 722 00be C1B2     		uxtb	r1, r0
 723 00c0 11B3     		cbz	r1, .L16
 325:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + x, y0 - y, color);
 724              		.loc 1 325 0
 725 00c2 029B     		ldr	r3, [sp, #8]
 726 00c4 039A     		ldr	r2, [sp, #12]
 727 00c6 1FFA83FA 		uxth	sl, r3
 728 00ca 2068     		ldr	r0, [r4, #0]
 729 00cc 1FFA82F9 		uxth	r9, r2
 730 00d0 1FFA87FB 		uxth	fp, r7
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 731              		.loc 1 303 0
 732 00d4 0AF10101 		add	r1, sl, #1
 733 00d8 6B18     		adds	r3, r5, r1
 325:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + x, y0 - y, color);
 734              		.loc 1 325 0
 735 00da CBEB0902 		rsb	r2, fp, r9
 736 00de D0F800C0 		ldr	ip, [r0, #0]
 737 00e2 19B2     		sxth	r1, r3
 738 00e4 2046     		mov	r0, r4
 739 00e6 12B2     		sxth	r2, r2
 740 00e8 3346     		mov	r3, r6
 741 00ea E047     		blx	ip
 742              	.LVL70:
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 743              		.loc 1 303 0
 744 00ec 09F1FF39 		add	r9, r9, #-1
 326:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + y, y0 - x, color);
 745              		.loc 1 326 0
 746 00f0 2068     		ldr	r0, [r4, #0]
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 747              		.loc 1 303 0
 748 00f2 C5EB0903 		rsb	r3, r5, r9
 326:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 + y, y0 - x, color);
 749              		.loc 1 326 0
 750 00f6 0BEB0A01 		add	r1, fp, sl
 751 00fa D0F800C0 		ldr	ip, [r0, #0]
 752 00fe 1AB2     		sxth	r2, r3
 753 0100 2046     		mov	r0, r4
 754 0102 09B2     		sxth	r1, r1
 755 0104 3346     		mov	r3, r6
 756 0106 E047     		blx	ip
 757              	.LVL71:
 758              	.L16:
 328:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x8) {
 759              		.loc 1 328 0
 760 0108 049A     		ldr	r2, [sp, #16]
 761 010a 02F00800 		and	r0, r2, #8
 762 010e C1B2     		uxtb	r1, r0
 763 0110 11B3     		cbz	r1, .L17
 329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 + x, color);
 764              		.loc 1 329 0
 765 0112 039A     		ldr	r2, [sp, #12]
 766 0114 029B     		ldr	r3, [sp, #8]
 767 0116 1FFA82F9 		uxth	r9, r2
 768 011a 1FFA83FB 		uxth	fp, r3
 769 011e 2068     		ldr	r0, [r4, #0]
 770 0120 1FFA87FA 		uxth	sl, r7
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 771              		.loc 1 303 0
 772 0124 09F10103 		add	r3, r9, #1
 329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 + x, color);
 773              		.loc 1 329 0
 774 0128 CAEB0B01 		rsb	r1, sl, fp
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 775              		.loc 1 303 0
 776 012c EA18     		adds	r2, r5, r3
 329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 + x, color);
 777              		.loc 1 329 0
 778 012e D0F800C0 		ldr	ip, [r0, #0]
 779 0132 09B2     		sxth	r1, r1
 780 0134 2046     		mov	r0, r4
 781 0136 12B2     		sxth	r2, r2
 782 0138 3346     		mov	r3, r6
 783 013a E047     		blx	ip
 784              	.LVL72:
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 785              		.loc 1 303 0
 786 013c 0BF1FF3B 		add	fp, fp, #-1
 330:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - x, y0 + y, color);
 787              		.loc 1 330 0
 788 0140 2068     		ldr	r0, [r4, #0]
 789 0142 0AEB0903 		add	r3, sl, r9
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 790              		.loc 1 303 0
 791 0146 C5EB0B01 		rsb	r1, r5, fp
 330:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - x, y0 + y, color);
 792              		.loc 1 330 0
 793 014a D0F800C0 		ldr	ip, [r0, #0]
 794 014e 1AB2     		sxth	r2, r3
 795 0150 2046     		mov	r0, r4
 796 0152 09B2     		sxth	r1, r1
 797 0154 3346     		mov	r3, r6
 798 0156 E047     		blx	ip
 799              	.LVL73:
 800              	.L17:
 332:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x1) {
 801              		.loc 1 332 0
 802 0158 049A     		ldr	r2, [sp, #16]
 803 015a D207     		lsls	r2, r2, #31
 804 015c 21D5     		bpl	.L18
 333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 - x, color);
 805              		.loc 1 333 0
 806 015e 0399     		ldr	r1, [sp, #12]
 807 0160 0298     		ldr	r0, [sp, #8]
 808 0162 1FFA81FA 		uxth	sl, r1
 809 0166 1FFA80FB 		uxth	fp, r0
 810 016a 2368     		ldr	r3, [r4, #0]
 811 016c 1FFA87F9 		uxth	r9, r7
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 812              		.loc 1 303 0
 813 0170 0AF1FF32 		add	r2, sl, #-1
 333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 - x, color);
 814              		.loc 1 333 0
 815 0174 C9EB0B01 		rsb	r1, r9, fp
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 816              		.loc 1 303 0
 817 0178 521B     		subs	r2, r2, r5
 333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - y, y0 - x, color);
 818              		.loc 1 333 0
 819 017a D3F800C0 		ldr	ip, [r3, #0]
 820 017e 2046     		mov	r0, r4
 821 0180 09B2     		sxth	r1, r1
 822 0182 12B2     		sxth	r2, r2
 823 0184 3346     		mov	r3, r6
 824 0186 E047     		blx	ip
 825              	.LVL74:
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 826              		.loc 1 303 0
 827 0188 0BF1FF3B 		add	fp, fp, #-1
 334:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - x, y0 - y, color);
 828              		.loc 1 334 0
 829 018c 2068     		ldr	r0, [r4, #0]
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawCircleHelper( int16_t x0, int16_t y0,
 830              		.loc 1 303 0
 831 018e C5EB0B03 		rsb	r3, r5, fp
 334:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0 - x, y0 - y, color);
 832              		.loc 1 334 0
 833 0192 C9EB0A02 		rsb	r2, r9, sl
 834 0196 0568     		ldr	r5, [r0, #0]
 835              	.LVL75:
 836 0198 19B2     		sxth	r1, r3
 837 019a 2046     		mov	r0, r4
 838 019c 12B2     		sxth	r2, r2
 839 019e 3346     		mov	r3, r6
 840 01a0 A847     		blx	r5
 841              	.LVL76:
 842              	.L18:
 843 01a2 0199     		ldr	r1, [sp, #4]
 844 01a4 481C     		adds	r0, r1, #1
 845 01a6 0190     		str	r0, [sp, #4]
 846 01a8 42E7     		b	.L13
 847              	.LVL77:
 848              	.L32:
 849              	.LBE50:
 337:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 850              		.loc 1 337 0
 851 01aa 07B0     		add	sp, sp, #28
 852 01ac BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 853              		.cfi_endproc
 854              	.LFE60:
 856              		.section	.text._ZN11Arduino_GFX16fillCircleHelperEssshst,"ax",%progbits
 857              		.align	1
 858              		.global	_ZN11Arduino_GFX16fillCircleHelperEssshst
 859              		.thumb
 860              		.thumb_func
 862              	_ZN11Arduino_GFX16fillCircleHelperEssshst:
 863              	.LFB62:
 347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				    uint8_t cornername, int16_t delta, uint16_t color) {
 864              		.loc 1 347 0
 865              		.cfi_startproc
 866              		@ args = 12, pretend = 0, frame = 32
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              	.LVL78:
 869 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 870              	.LCFI9:
 871              		.cfi_def_cfa_offset 36
 872              		.cfi_offset 4, -36
 873              		.cfi_offset 5, -32
 874              		.cfi_offset 6, -28
 875              		.cfi_offset 7, -24
 876              		.cfi_offset 8, -20
 877              		.cfi_offset 9, -16
 878              		.cfi_offset 10, -12
 879              		.cfi_offset 11, -8
 880              		.cfi_offset 14, -4
 881 0004 8BB0     		sub	sp, sp, #44
 882              	.LCFI10:
 883              		.cfi_def_cfa_offset 80
 884              	.LBB51:
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 885              		.loc 1 351 0
 886 0006 6FF00105 		mvn	r5, #1
 887              	.LBE51:
 347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				    uint8_t cornername, int16_t delta, uint16_t color) {
 888              		.loc 1 347 0
 889 000a 0792     		str	r2, [sp, #28]
 890              	.LBB52:
 349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f     = 1 - r;
 891              		.loc 1 349 0
 892 000c 9AB2     		uxth	r2, r3
 893              	.LVL79:
 894 000e C2F10106 		rsb	r6, r2, #1
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 895              		.loc 1 351 0
 896 0012 6A43     		muls	r2, r5, r2
 897              	.LBE52:
 347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				    uint8_t cornername, int16_t delta, uint16_t color) {
 898              		.loc 1 347 0
 899 0014 9DF85070 		ldrb	r7, [sp, #80]	@ zero_extendqisi2
 900 0018 0446     		mov	r4, r0
 901 001a 0691     		str	r1, [sp, #24]
 902 001c BDF95400 		ldrsh	r0, [sp, #84]
 903              	.LVL80:
 904 0020 BDF85810 		ldrh	r1, [sp, #88]
 905              	.LVL81:
 906 0024 0897     		str	r7, [sp, #32]
 907              	.LBB53:
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 908              		.loc 1 351 0
 909 0026 97B2     		uxth	r7, r2
 910              	.LBE53:
 347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				    uint8_t cornername, int16_t delta, uint16_t color) {
 911              		.loc 1 347 0
 912 0028 0391     		str	r1, [sp, #12]
 913 002a 0990     		str	r0, [sp, #36]
 914              	.LBB54:
 349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t f     = 1 - r;
 915              		.loc 1 349 0
 916 002c B6B2     		uxth	r6, r6
 917              	.LVL82:
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t ddF_y = -2 * r;
 918              		.loc 1 351 0
 919 002e 0597     		str	r7, [sp, #20]
 920              	.LVL83:
 353:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t y     = r;
 921              		.loc 1 353 0
 922 0030 1D46     		mov	r5, r3
 355:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 923              		.loc 1 355 0
 924 0032 0021     		movs	r1, #0
 925              	.LVL84:
 926              	.L45:
 927 0034 0291     		str	r1, [sp, #8]
 928              	.LVL85:
 355:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while (x<y) {
 929              		.loc 1 355 0 is_stmt 0 discriminator 1
 930 0036 029F     		ldr	r7, [sp, #8]
 931 0038 2BB2     		sxth	r3, r5
 932 003a 38B2     		sxth	r0, r7
 933 003c 9842     		cmp	r0, r3
 934 003e 80F28B80 		bge	.L46
 935              	.L38:
 356:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (f >= 0) {
 936              		.loc 1 356 0 is_stmt 1
 937 0042 3004     		lsls	r0, r6, #16
 938 0044 08D4     		bmi	.L35
 358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 939              		.loc 1 358 0
 940 0046 059A     		ldr	r2, [sp, #20]
 357:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 941              		.loc 1 357 0
 942 0048 691E     		subs	r1, r5, #1
 358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 943              		.loc 1 358 0
 944 004a 971C     		adds	r7, r2, #2
 945 004c B8B2     		uxth	r0, r7
 946 004e 83B2     		uxth	r3, r0
 359:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f     += ddF_y;
 947              		.loc 1 359 0
 948 0050 8619     		adds	r6, r0, r6
 949              	.LVL86:
 357:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y--;
 950              		.loc 1 357 0
 951 0052 8DB2     		uxth	r5, r1
 952              	.LVL87:
 358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       ddF_y += 2;
 953              		.loc 1 358 0
 954 0054 0593     		str	r3, [sp, #20]
 359:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       f     += ddF_y;
 955              		.loc 1 359 0
 956 0056 B6B2     		uxth	r6, r6
 957              	.LVL88:
 958              	.L35:
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 959              		.loc 1 346 0
 960 0058 0299     		ldr	r1, [sp, #8]
 961 005a 8FB2     		uxth	r7, r1
 962 005c 4FEA4709 		lsl	r9, r7, #1
 963 0060 1FFA89F9 		uxth	r9, r9
 964 0064 4A46     		mov	r2, r9
 365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x1) {
 965              		.loc 1 365 0
 966 0066 0899     		ldr	r1, [sp, #32]
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 967              		.loc 1 346 0
 968 0068 D01C     		adds	r0, r2, #3
 363:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f     += ddF_x;
 969              		.loc 1 363 0
 970 006a 3318     		adds	r3, r6, r0
 365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x1) {
 971              		.loc 1 365 0
 972 006c C907     		lsls	r1, r1, #31
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 973              		.loc 1 346 0
 974 006e CDF81090 		str	r9, [sp, #16]
 975              	.LVL89:
 363:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     f     += ddF_x;
 976              		.loc 1 363 0
 977 0072 9EB2     		uxth	r6, r3
 978              	.LVL90:
 365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x1) {
 979              		.loc 1 365 0
 980 0074 34D5     		bpl	.L36
 366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 981              		.loc 1 366 0
 982 0076 069A     		ldr	r2, [sp, #24]
 983 0078 0998     		ldr	r0, [sp, #36]
 984 007a 1FFA82FB 		uxth	fp, r2
 985 007e 1FFA80F9 		uxth	r9, r0
 986 0082 1FFA85F8 		uxth	r8, r5
 987 0086 09F10100 		add	r0, r9, #1
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 988              		.loc 1 346 0
 989 008a 0BF10103 		add	r3, fp, #1
 990              	.LVL91:
 366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 991              		.loc 1 366 0
 992 008e DDF81CE0 		ldr	lr, [sp, #28]
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 993              		.loc 1 346 0
 994 0092 F918     		adds	r1, r7, r3
 366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 995              		.loc 1 366 0
 996 0094 00EB4803 		add	r3, r0, r8, lsl #1
 997 0098 0398     		ldr	r0, [sp, #12]
 998 009a 1FFA8EFA 		uxth	sl, lr
 999 009e 0090     		str	r0, [sp, #0]
 1000 00a0 2068     		ldr	r0, [r4, #0]
 1001 00a2 C8EB0A02 		rsb	r2, r8, sl
 1002 00a6 D0F804C0 		ldr	ip, [r0, #4]
 1003 00aa 09B2     		sxth	r1, r1
 1004 00ac 2046     		mov	r0, r4
 1005 00ae 12B2     		sxth	r2, r2
 1006 00b0 1BB2     		sxth	r3, r3
 1007 00b2 E047     		blx	ip
 1008              	.LVL92:
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 1009              		.loc 1 367 0
 1010 00b4 0398     		ldr	r0, [sp, #12]
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1011              		.loc 1 346 0
 1012 00b6 DDF810E0 		ldr	lr, [sp, #16]
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 1013              		.loc 1 367 0
 1014 00ba 0090     		str	r0, [sp, #0]
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1015              		.loc 1 346 0
 1016 00bc 0AF1FF3A 		add	sl, sl, #-1
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 1017              		.loc 1 367 0
 1018 00c0 2068     		ldr	r0, [r4, #0]
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1019              		.loc 1 346 0
 1020 00c2 09F10309 		add	r9, r9, #3
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 1021              		.loc 1 367 0
 1022 00c6 08EB0B01 		add	r1, r8, fp
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1023              		.loc 1 346 0
 1024 00ca C7EB0A02 		rsb	r2, r7, sl
 1025 00ce 0EEB0903 		add	r3, lr, r9
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 1026              		.loc 1 367 0
 1027 00d2 D0F804C0 		ldr	ip, [r0, #4]
 1028 00d6 09B2     		sxth	r1, r1
 1029 00d8 2046     		mov	r0, r4
 1030 00da 12B2     		sxth	r2, r2
 1031 00dc 1BB2     		sxth	r3, r3
 1032 00de E047     		blx	ip
 1033              	.LVL93:
 1034              	.L36:
 369:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (cornername & 0x2) {
 1035              		.loc 1 369 0
 1036 00e0 0899     		ldr	r1, [sp, #32]
 1037 00e2 01F00202 		and	r2, r1, #2
 1038 00e6 D3B2     		uxtb	r3, r2
 1039 00e8 002B     		cmp	r3, #0
 1040 00ea 32D0     		beq	.L37
 370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 1041              		.loc 1 370 0
 1042 00ec 0698     		ldr	r0, [sp, #24]
 1043 00ee 0999     		ldr	r1, [sp, #36]
 1044 00f0 1FFA80FB 		uxth	fp, r0
 1045 00f4 DDF81C80 		ldr	r8, [sp, #28]
 1046 00f8 0398     		ldr	r0, [sp, #12]
 1047 00fa 1FFA81F9 		uxth	r9, r1
 1048 00fe 1FFA88FA 		uxth	sl, r8
 1049 0102 0090     		str	r0, [sp, #0]
 1050 0104 1FFA85F8 		uxth	r8, r5
 1051 0108 2068     		ldr	r0, [r4, #0]
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1052              		.loc 1 346 0
 1053 010a 0BF1FF32 		add	r2, fp, #-1
 370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 1054              		.loc 1 370 0
 1055 010e 09F10103 		add	r3, r9, #1
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1056              		.loc 1 346 0
 1057 0112 D11B     		subs	r1, r2, r7
 370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 1058              		.loc 1 370 0
 1059 0114 03EB4803 		add	r3, r3, r8, lsl #1
 1060 0118 C8EB0A02 		rsb	r2, r8, sl
 1061 011c D0F804C0 		ldr	ip, [r0, #4]
 1062 0120 09B2     		sxth	r1, r1
 1063 0122 2046     		mov	r0, r4
 1064 0124 12B2     		sxth	r2, r2
 1065 0126 1BB2     		sxth	r3, r3
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1066              		.loc 1 346 0
 1067 0128 0AF1FF3A 		add	sl, sl, #-1
 370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 1068              		.loc 1 370 0
 1069 012c E047     		blx	ip
 1070              	.LVL94:
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
 1071              		.loc 1 346 0
 1072 012e C7EB0A02 		rsb	r2, r7, sl
 1073 0132 049F     		ldr	r7, [sp, #16]
 1074 0134 09F10309 		add	r9, r9, #3
 1075 0138 07EB0903 		add	r3, r7, r9
 371:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 1076              		.loc 1 371 0
 1077 013c 039F     		ldr	r7, [sp, #12]
 1078 013e 2068     		ldr	r0, [r4, #0]
 1079 0140 C8EB0B01 		rsb	r1, r8, fp
 1080 0144 0097     		str	r7, [sp, #0]
 1081 0146 4768     		ldr	r7, [r0, #4]
 1082 0148 09B2     		sxth	r1, r1
 1083 014a 2046     		mov	r0, r4
 1084 014c 12B2     		sxth	r2, r2
 1085 014e 1BB2     		sxth	r3, r3
 1086 0150 B847     		blx	r7
 1087              	.LVL95:
 1088              	.L37:
 1089 0152 0298     		ldr	r0, [sp, #8]
 1090 0154 411C     		adds	r1, r0, #1
 1091 0156 6DE7     		b	.L45
 1092              	.LVL96:
 1093              	.L46:
 1094              	.LBE54:
 374:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1095              		.loc 1 374 0
 1096 0158 0BB0     		add	sp, sp, #44
 1097 015a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1098              		.cfi_endproc
 1099              	.LFE62:
 1101              		.section	.text._ZN11Arduino_GFX10fillCircleEssst,"ax",%progbits
 1102              		.align	1
 1103              		.global	_ZN11Arduino_GFX10fillCircleEssst
 1104              		.thumb
 1105              		.thumb_func
 1107              	_ZN11Arduino_GFX10fillCircleEssst:
 1108              	.LFB61:
 340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 1109              		.loc 1 340 0
 1110              		.cfi_startproc
 1111              		@ args = 4, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113              	.LVL97:
 1114 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1115              	.LCFI11:
 1116              		.cfi_def_cfa_offset 40
 1117              		.cfi_offset 0, -40
 1118              		.cfi_offset 1, -36
 1119              		.cfi_offset 2, -32
 1120              		.cfi_offset 3, -28
 1121              		.cfi_offset 4, -24
 1122              		.cfi_offset 5, -20
 1123              		.cfi_offset 6, -16
 1124              		.cfi_offset 7, -12
 1125              		.cfi_offset 8, -8
 1126              		.cfi_offset 14, -4
 340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 1127              		.loc 1 340 0
 1128 0004 BDF82870 		ldrh	r7, [sp, #40]
 1129 0008 1C46     		mov	r4, r3
 341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x0, y0-r, 2*r+1, color);
 1130              		.loc 1 341 0
 1131 000a 9BB2     		uxth	r3, r3
 1132 000c 0097     		str	r7, [sp, #0]
 340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 1133              		.loc 1 340 0
 1134 000e 1546     		mov	r5, r2
 341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x0, y0-r, 2*r+1, color);
 1135              		.loc 1 341 0
 1136 0010 D21A     		subs	r2, r2, r3
 1137              	.LVL98:
 1138 0012 5B00     		lsls	r3, r3, #1
 1139              	.LVL99:
 1140 0014 03F1010E 		add	lr, r3, #1
 1141 0018 0368     		ldr	r3, [r0, #0]
 1142 001a 12B2     		sxth	r2, r2
 1143 001c D3F804C0 		ldr	ip, [r3, #4]
 1144 0020 0FFA8EF3 		sxth	r3, lr
 340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 1145              		.loc 1 340 0
 1146 0024 0646     		mov	r6, r0
 1147 0026 8846     		mov	r8, r1
 341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x0, y0-r, 2*r+1, color);
 1148              		.loc 1 341 0
 1149 0028 E047     		blx	ip
 1150              	.LVL100:
 342:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x0, y0, r, 3, 0, color);
 1151              		.loc 1 342 0
 1152 002a 0323     		movs	r3, #3
 1153 002c 4FF0000E 		mov	lr, #0
 1154 0030 8DE80840 		stmia	sp, {r3, lr}
 1155 0034 0297     		str	r7, [sp, #8]
 1156 0036 3046     		mov	r0, r6
 1157 0038 4146     		mov	r1, r8
 1158 003a 2A46     		mov	r2, r5
 1159 003c 2346     		mov	r3, r4
 1160 003e FFF7FEFF 		bl	_ZN11Arduino_GFX16fillCircleHelperEssshst
 1161              	.LVL101:
 343:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1162              		.loc 1 343 0
 1163 0042 BDE8FF81 		pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
 1164              		.cfi_endproc
 1165              	.LFE61:
 1167              		.section	.text._ZN11Arduino_GFX8drawLineEsssst,"ax",%progbits
 1168              		.align	1
 1169              		.global	_ZN11Arduino_GFX8drawLineEsssst
 1170              		.thumb
 1171              		.thumb_func
 1173              	_ZN11Arduino_GFX8drawLineEsssst:
 1174              	.LFB63:
 381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1175              		.loc 1 381 0
 1176              		.cfi_startproc
 1177              		@ args = 8, pretend = 0, frame = 8
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 1179              	.LVL102:
 1180 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1181              	.LCFI12:
 1182              		.cfi_def_cfa_offset 48
 1183              		.cfi_offset 0, -48
 1184              		.cfi_offset 1, -44
 1185              		.cfi_offset 2, -40
 1186              		.cfi_offset 4, -36
 1187              		.cfi_offset 5, -32
 1188              		.cfi_offset 6, -28
 1189              		.cfi_offset 7, -24
 1190              		.cfi_offset 8, -20
 1191              		.cfi_offset 9, -16
 1192              		.cfi_offset 10, -12
 1193              		.cfi_offset 11, -8
 1194              		.cfi_offset 14, -4
 381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1195              		.loc 1 381 0
 1196 0004 1E46     		mov	r6, r3
 1197 0006 BDF93030 		ldrsh	r3, [sp, #48]
 1198              	.LVL103:
 1199 000a 1446     		mov	r4, r2
 1200              	.LBB55:
 382:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 1201              		.loc 1 382 0
 1202 000c C2EB0309 		rsb	r9, r2, r3
 1203 0010 721A     		subs	r2, r6, r1
 1204              	.LVL104:
 1205 0012 B9F1000F 		cmp	r9, #0
 1206 0016 B8BF     		it	lt
 1207 0018 C9F10009 		rsblt	r9, r9, #0
 1208 001c 002A     		cmp	r2, #0
 1209 001e B8BF     		it	lt
 1210 0020 5242     		rsblt	r2, r2, #0
 1211 0022 9145     		cmp	r9, r2
 1212 0024 D4BF     		ite	le
 1213 0026 4FF00009 		movle	r9, #0
 1214 002a 4FF00109 		movgt	r9, #1
 1215              	.LVL105:
 1216              	.LBE55:
 381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1217              		.loc 1 381 0
 1218 002e 8046     		mov	r8, r0
 1219 0030 0D46     		mov	r5, r1
 1220 0032 BDF834B0 		ldrh	fp, [sp, #52]
 1221              	.LBB56:
 383:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (steep) {
 1222              		.loc 1 383 0
 1223 0036 B9F1000F 		cmp	r9, #0
 1224 003a 06D0     		beq	.L49
 384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, y0);
 1225              		.loc 1 384 0
 1226 003c 84EA0105 		eor	r5, r4, r1
 1227              	.LVL106:
 385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x1, y1);
 1228              		.loc 1 385 0
 1229 0040 5E40     		eors	r6, r6, r3
 384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, y0);
 1230              		.loc 1 384 0
 1231 0042 6C40     		eors	r4, r4, r5
 1232              	.LVL107:
 385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x1, y1);
 1233              		.loc 1 385 0
 1234 0044 7340     		eors	r3, r3, r6
 384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, y0);
 1235              		.loc 1 384 0
 1236 0046 6540     		eors	r5, r5, r4
 1237              	.LVL108:
 385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x1, y1);
 1238              		.loc 1 385 0
 1239 0048 5E40     		eors	r6, r6, r3
 1240              	.LVL109:
 1241              	.L49:
 388:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (x0 > x1) {
 1242              		.loc 1 388 0
 1243 004a B542     		cmp	r5, r6
 1244 004c 0DDD     		ble	.L50
 389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, x1);
 1245              		.loc 1 389 0
 1246 004e 86EA0500 		eor	r0, r6, r5
 1247              	.LVL110:
 390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1);
 1248              		.loc 1 390 0
 1249 0052 5C40     		eors	r4, r4, r3
 1250              	.LVL111:
 1251 0054 6340     		eors	r3, r3, r4
 1252              	.LVL112:
 389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, x1);
 1253              		.loc 1 389 0
 1254 0056 80EA0601 		eor	r1, r0, r6
 1255 005a 0EB2     		sxth	r6, r1
 1256              	.LVL113:
 390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1);
 1257              		.loc 1 390 0
 1258 005c 1BB2     		sxth	r3, r3
 389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, x1);
 1259              		.loc 1 389 0
 1260 005e 86EA0007 		eor	r7, r6, r0
 390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1);
 1261              		.loc 1 390 0
 1262 0062 83EA0402 		eor	r2, r3, r4
 389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(x0, x1);
 1263              		.loc 1 389 0
 1264 0066 3DB2     		sxth	r5, r7
 1265              	.LVL114:
 390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1);
 1266              		.loc 1 390 0
 1267 0068 14B2     		sxth	r4, r2
 1268              	.LVL115:
 1269              	.L50:
 395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   dy = abs(y1 - y0);
 1270              		.loc 1 395 0
 1271 006a 181B     		subs	r0, r3, r4
 394:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   dx = x1 - x0;
 1272              		.loc 1 394 0
 1273 006c C5EB060A 		rsb	sl, r5, r6
 395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   dy = abs(y1 - y0);
 1274              		.loc 1 395 0
 1275 0070 80EAE071 		eor	r1, r0, r0, asr #31
 1276 0074 A1EBE071 		sub	r1, r1, r0, asr #31
 394:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   dx = x1 - x0;
 1277              		.loc 1 394 0
 1278 0078 1FFA8AFA 		uxth	sl, sl
 1279              	.LVL116:
 397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t err = dx / 2;
 1280              		.loc 1 397 0
 1281 007c 0FFA8AF7 		sxth	r7, sl
 395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   dy = abs(y1 - y0);
 1282              		.loc 1 395 0
 1283 0080 0091     		str	r1, [sp, #0]
 1284              	.LVL117:
 397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t err = dx / 2;
 1285              		.loc 1 397 0
 1286 0082 0222     		movs	r2, #2
 401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ystep = 1;
 1287              		.loc 1 401 0
 1288 0084 4FF6FF71 		movw	r1, #65535
 397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t err = dx / 2;
 1289              		.loc 1 397 0
 1290 0088 97FBF2F0 		sdiv	r0, r7, r2
 401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ystep = 1;
 1291              		.loc 1 401 0
 1292 008c 9C42     		cmp	r4, r3
 1293 008e B8BF     		it	lt
 1294 0090 0121     		movlt	r1, #1
 397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t err = dx / 2;
 1295              		.loc 1 397 0
 1296 0092 87B2     		uxth	r7, r0
 1297              	.LVL118:
 401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     ystep = 1;
 1298              		.loc 1 401 0
 1299 0094 0191     		str	r1, [sp, #4]
 1300              	.LVL119:
 1301              	.L52:
 406:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (; x0<=x1; x0++) {
 1302              		.loc 1 406 0 discriminator 1
 1303 0096 B542     		cmp	r5, r6
 1304 0098 1DDC     		bgt	.L62
 1305              	.L56:
 1306 009a D8F80030 		ldr	r3, [r8, #0]
 408:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(y0, x0, color);
 1307              		.loc 1 408 0
 1308 009e 4046     		mov	r0, r8
 1309 00a0 D3F800C0 		ldr	ip, [r3, #0]
 407:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (steep) {
 1310              		.loc 1 407 0
 1311 00a4 B9F1000F 		cmp	r9, #0
 1312 00a8 02D0     		beq	.L53
 1313              	.LVL120:
 408:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(y0, x0, color);
 1314              		.loc 1 408 0
 1315 00aa 2146     		mov	r1, r4
 1316 00ac 2A46     		mov	r2, r5
 1317 00ae 01E0     		b	.L61
 1318              	.L53:
 410:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       drawPixel(x0, y0, color);
 1319              		.loc 1 410 0
 1320 00b0 2946     		mov	r1, r5
 1321 00b2 2246     		mov	r2, r4
 1322              	.L61:
 1323 00b4 5B46     		mov	r3, fp
 1324 00b6 E047     		blx	ip
 1325              	.LVL121:
 412:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     err -= dy;
 1326              		.loc 1 412 0
 1327 00b8 009A     		ldr	r2, [sp, #0]
 1328 00ba BF1A     		subs	r7, r7, r2
 1329              	.LVL122:
 1330 00bc B8B2     		uxth	r0, r7
 1331 00be 87B2     		uxth	r7, r0
 1332              	.LVL123:
 413:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (err < 0) {
 1333              		.loc 1 413 0
 1334 00c0 3A04     		lsls	r2, r7, #16
 1335 00c2 05D5     		bpl	.L55
 414:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y0 += ystep;
 1336              		.loc 1 414 0
 1337 00c4 0199     		ldr	r1, [sp, #4]
 415:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       err += dx;
 1338              		.loc 1 415 0
 1339 00c6 00EB0A03 		add	r3, r0, sl
 414:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       y0 += ystep;
 1340              		.loc 1 414 0
 1341 00ca 6418     		adds	r4, r4, r1
 1342              	.LVL124:
 1343 00cc 24B2     		sxth	r4, r4
 1344              	.LVL125:
 415:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       err += dx;
 1345              		.loc 1 415 0
 1346 00ce 9FB2     		uxth	r7, r3
 1347              	.LVL126:
 1348              	.L55:
 406:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (; x0<=x1; x0++) {
 1349              		.loc 1 406 0
 1350 00d0 0135     		adds	r5, r5, #1
 1351              	.LVL127:
 1352 00d2 2DB2     		sxth	r5, r5
 1353              	.LVL128:
 1354 00d4 DFE7     		b	.L52
 1355              	.L62:
 1356              	.LBE56:
 418:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1357              		.loc 1 418 0
 1358 00d6 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1359              		.cfi_endproc
 1360              	.LFE63:
 1362              		.section	.text._ZN11Arduino_GFX8drawRectEsssst,"ax",%progbits
 1363              		.align	1
 1364              		.global	_ZN11Arduino_GFX8drawRectEsssst
 1365              		.thumb
 1366              		.thumb_func
 1368              	_ZN11Arduino_GFX8drawRectEsssst:
 1369              	.LFB64:
 424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1370              		.loc 1 424 0
 1371              		.cfi_startproc
 1372              		@ args = 8, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374              	.LVL129:
 1375 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 1376              	.LCFI13:
 1377              		.cfi_def_cfa_offset 40
 1378              		.cfi_offset 0, -40
 1379              		.cfi_offset 1, -36
 1380              		.cfi_offset 4, -32
 1381              		.cfi_offset 5, -28
 1382              		.cfi_offset 6, -24
 1383              		.cfi_offset 7, -20
 1384              		.cfi_offset 8, -16
 1385              		.cfi_offset 9, -12
 1386              		.cfi_offset 10, -8
 1387              		.cfi_offset 14, -4
 424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1388              		.loc 1 424 0
 1389 0004 BDF82C50 		ldrh	r5, [sp, #44]
 425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x, y, w, color);
 1390              		.loc 1 425 0
 1391 0008 0768     		ldr	r7, [r0, #0]
 1392 000a 0095     		str	r5, [sp, #0]
 424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1393              		.loc 1 424 0
 1394 000c 0446     		mov	r4, r0
 1395 000e 9046     		mov	r8, r2
 1396 0010 BDF92860 		ldrsh	r6, [sp, #40]
 425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x, y, w, color);
 1397              		.loc 1 425 0
 1398 0014 BF68     		ldr	r7, [r7, #8]
 424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1399              		.loc 1 424 0
 1400 0016 9A46     		mov	sl, r3
 1401 0018 8946     		mov	r9, r1
 425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x, y, w, color);
 1402              		.loc 1 425 0
 1403 001a B847     		blx	r7
 1404              	.LVL130:
 426:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x, y+h-1, w, color);
 1405              		.loc 1 426 0
 1406 001c 2368     		ldr	r3, [r4, #0]
 1407 001e 08F1FF32 		add	r2, r8, #-1
 1408 0022 0095     		str	r5, [sp, #0]
 1409 0024 9219     		adds	r2, r2, r6
 1410 0026 9F68     		ldr	r7, [r3, #8]
 1411 0028 2046     		mov	r0, r4
 1412 002a 4946     		mov	r1, r9
 1413 002c 5346     		mov	r3, sl
 1414 002e 12B2     		sxth	r2, r2
 1415 0030 B847     		blx	r7
 1416              	.LVL131:
 427:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x, y, h, color);
 1417              		.loc 1 427 0
 1418 0032 2068     		ldr	r0, [r4, #0]
 1419 0034 0095     		str	r5, [sp, #0]
 1420 0036 4768     		ldr	r7, [r0, #4]
 1421 0038 4946     		mov	r1, r9
 1422 003a 2046     		mov	r0, r4
 1423 003c 4246     		mov	r2, r8
 1424 003e 3346     		mov	r3, r6
 1425 0040 B847     		blx	r7
 1426              	.LVL132:
 428:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(x+w-1, y, h, color);
 1427              		.loc 1 428 0
 1428 0042 09F1FF39 		add	r9, r9, #-1
 1429 0046 2368     		ldr	r3, [r4, #0]
 1430 0048 09EB0A01 		add	r1, r9, sl
 1431 004c 0095     		str	r5, [sp, #0]
 1432 004e 5D68     		ldr	r5, [r3, #4]
 1433 0050 2046     		mov	r0, r4
 1434 0052 09B2     		sxth	r1, r1
 1435 0054 4246     		mov	r2, r8
 1436 0056 3346     		mov	r3, r6
 1437 0058 A847     		blx	r5
 1438              	.LVL133:
 429:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1439              		.loc 1 429 0
 1440 005a BDE8FC87 		pop	{r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 1441              		.cfi_endproc
 1442              	.LFE64:
 1444              		.section	.text._ZN11Arduino_GFX13drawFastVLineEssst,"ax",%progbits
 1445              		.align	1
 1446              		.global	_ZN11Arduino_GFX13drawFastVLineEssst
 1447              		.thumb
 1448              		.thumb_func
 1450              	_ZN11Arduino_GFX13drawFastVLineEssst:
 1451              	.LFB65:
 432:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, uint16_t color) {
 1452              		.loc 1 432 0
 1453              		.cfi_startproc
 1454              		@ args = 4, pretend = 0, frame = 0
 1455              		@ frame_needed = 0, uses_anonymous_args = 0
 1456              	.LVL134:
 1457 0000 13B5     		push	{r0, r1, r4, lr}
 1458              	.LCFI14:
 1459              		.cfi_def_cfa_offset 16
 1460              		.cfi_offset 0, -16
 1461              		.cfi_offset 1, -12
 1462              		.cfi_offset 4, -8
 1463              		.cfi_offset 14, -4
 434:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x, y, x, y+h-1, color);
 1464              		.loc 1 434 0
 1465 0002 541E     		subs	r4, r2, #1
 1466 0004 E318     		adds	r3, r4, r3
 1467              	.LVL135:
 1468 0006 1CB2     		sxth	r4, r3
 1469 0008 BDF81030 		ldrh	r3, [sp, #16]
 1470 000c 0094     		str	r4, [sp, #0]
 1471 000e 0193     		str	r3, [sp, #4]
 1472 0010 0B46     		mov	r3, r1
 1473 0012 FFF7FEFF 		bl	_ZN11Arduino_GFX8drawLineEsssst
 1474              	.LVL136:
 435:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1475              		.loc 1 435 0
 1476 0016 1CBD     		pop	{r2, r3, r4, pc}
 1477              		.cfi_endproc
 1478              	.LFE65:
 1480              		.section	.text._ZN11Arduino_GFX13drawFastHLineEssst,"ax",%progbits
 1481              		.align	1
 1482              		.global	_ZN11Arduino_GFX13drawFastHLineEssst
 1483              		.thumb
 1484              		.thumb_func
 1486              	_ZN11Arduino_GFX13drawFastHLineEssst:
 1487              	.LFB66:
 439:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t w, uint16_t color) {
 1488              		.loc 1 439 0
 1489              		.cfi_startproc
 1490              		@ args = 4, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
 1492              	.LVL137:
 1493 0000 13B5     		push	{r0, r1, r4, lr}
 1494              	.LCFI15:
 1495              		.cfi_def_cfa_offset 16
 1496              		.cfi_offset 0, -16
 1497              		.cfi_offset 1, -12
 1498              		.cfi_offset 4, -8
 1499              		.cfi_offset 14, -4
 441:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x, y, x+w-1, y, color);
 1500              		.loc 1 441 0
 1501 0002 4C1E     		subs	r4, r1, #1
 1502 0004 E318     		adds	r3, r4, r3
 1503              	.LVL138:
 1504 0006 BDF81040 		ldrh	r4, [sp, #16]
 1505 000a 0092     		str	r2, [sp, #0]
 1506 000c 0194     		str	r4, [sp, #4]
 1507 000e 1BB2     		sxth	r3, r3
 1508 0010 FFF7FEFF 		bl	_ZN11Arduino_GFX8drawLineEsssst
 1509              	.LVL139:
 442:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1510              		.loc 1 442 0
 1511 0014 1CBD     		pop	{r2, r3, r4, pc}
 1512              		.cfi_endproc
 1513              	.LFE66:
 1515              		.section	.text._ZN11Arduino_GFX8fillRectEsssst,"ax",%progbits
 1516              		.align	1
 1517              		.global	_ZN11Arduino_GFX8fillRectEsssst
 1518              		.thumb
 1519              		.thumb_func
 1521              	_ZN11Arduino_GFX8fillRectEsssst:
 1522              	.LFB67:
 445:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1523              		.loc 1 445 0
 1524              		.cfi_startproc
 1525              		@ args = 8, pretend = 0, frame = 0
 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 1527              	.LVL140:
 1528 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 1529              	.LCFI16:
 1530              		.cfi_def_cfa_offset 40
 1531              		.cfi_offset 0, -40
 1532              		.cfi_offset 1, -36
 1533              		.cfi_offset 4, -32
 1534              		.cfi_offset 5, -28
 1535              		.cfi_offset 6, -24
 1536              		.cfi_offset 7, -20
 1537              		.cfi_offset 8, -16
 1538              		.cfi_offset 9, -12
 1539              		.cfi_offset 10, -8
 1540              		.cfi_offset 14, -4
 445:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color) {
 1541              		.loc 1 445 0
 1542 0004 BDF928A0 		ldrsh	sl, [sp, #40]
 1543 0008 BDF82C70 		ldrh	r7, [sp, #44]
 1544 000c 0646     		mov	r6, r0
 1545 000e 0D46     		mov	r5, r1
 1546              	.LVL141:
 1547 0010 9146     		mov	r9, r2
 1548 0012 9846     		mov	r8, r3
 1549              	.LBB57:
 447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int16_t i=x; i<x+w; i++) {
 1550              		.loc 1 447 0
 1551 0014 0024     		movs	r4, #0
 1552              	.LVL142:
 1553              	.L67:
 444:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, 
 1554              		.loc 1 444 0 discriminator 1
 1555 0016 6019     		adds	r0, r4, r5
 447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int16_t i=x; i<x+w; i++) {
 1556              		.loc 1 447 0 discriminator 1
 1557 0018 05EB0803 		add	r3, r5, r8
 1558 001c 9842     		cmp	r0, r3
 444:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, 
 1559              		.loc 1 444 0 discriminator 1
 1560 001e 81B2     		uxth	r1, r0
 1561              	.LVL143:
 447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int16_t i=x; i<x+w; i++) {
 1562              		.loc 1 447 0 discriminator 1
 1563 0020 0ADA     		bge	.L69
 1564              	.L68:
 448:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastVLine(i, y, h, color); 
 1565              		.loc 1 448 0 discriminator 2
 1566 0022 3268     		ldr	r2, [r6, #0]
 1567 0024 0097     		str	r7, [sp, #0]
 1568 0026 D2F804C0 		ldr	ip, [r2, #4]
 1569 002a 3046     		mov	r0, r6
 1570              	.LVL144:
 1571 002c 09B2     		sxth	r1, r1
 1572              	.LVL145:
 1573 002e 4A46     		mov	r2, r9
 1574 0030 5346     		mov	r3, sl
 1575 0032 E047     		blx	ip
 1576              	.LVL146:
 1577 0034 0134     		adds	r4, r4, #1
 1578              	.LVL147:
 1579 0036 EEE7     		b	.L67
 1580              	.LVL148:
 1581              	.L69:
 1582              	.LBE57:
 450:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1583              		.loc 1 450 0
 1584 0038 BDE8FC87 		pop	{r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 1585              		.cfi_endproc
 1586              	.LFE67:
 1588              		.section	.text._ZN11Arduino_GFX10fillScreenEt,"ax",%progbits
 1589              		.align	1
 1590              		.global	_ZN11Arduino_GFX10fillScreenEt
 1591              		.thumb
 1592              		.thumb_func
 1594              	_ZN11Arduino_GFX10fillScreenEt:
 1595              	.LFB68:
 453:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillScreen(uint16_t color) {
 1596              		.loc 1 453 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 0
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 1600              	.LVL149:
 1601 0000 13B5     		push	{r0, r1, r4, lr}
 1602              	.LCFI17:
 1603              		.cfi_def_cfa_offset 16
 1604              		.cfi_offset 0, -16
 1605              		.cfi_offset 1, -12
 1606              		.cfi_offset 4, -8
 1607              		.cfi_offset 14, -4
 454:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillRect(0, 0, _width, _height, color);
 1608              		.loc 1 454 0
 1609 0002 B0F90A20 		ldrsh	r2, [r0, #10]
 1610 0006 0468     		ldr	r4, [r0, #0]
 1611 0008 0092     		str	r2, [sp, #0]
 1612 000a 0191     		str	r1, [sp, #4]
 1613 000c 0021     		movs	r1, #0
 1614              	.LVL150:
 1615 000e B0F90830 		ldrsh	r3, [r0, #8]
 1616 0012 E468     		ldr	r4, [r4, #12]
 1617 0014 0A46     		mov	r2, r1
 1618 0016 A047     		blx	r4
 1619              	.LVL151:
 455:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1620              		.loc 1 455 0
 1621 0018 1CBD     		pop	{r2, r3, r4, pc}
 1622              		.cfi_endproc
 1623              	.LFE68:
 1625              		.section	.text._ZN11Arduino_GFX13drawRoundRectEssssst,"ax",%progbits
 1626              		.align	1
 1627              		.global	_ZN11Arduino_GFX13drawRoundRectEssssst
 1628              		.thumb
 1629              		.thumb_func
 1631              	_ZN11Arduino_GFX13drawRoundRectEssssst:
 1632              	.LFB69:
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t h, int16_t r, uint16_t color) {
 1633              		.loc 1 459 0
 1634              		.cfi_startproc
 1635              		@ args = 12, pretend = 0, frame = 24
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              	.LVL152:
 1638 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1639              	.LCFI18:
 1640              		.cfi_def_cfa_offset 36
 1641              		.cfi_offset 4, -36
 1642              		.cfi_offset 5, -32
 1643              		.cfi_offset 6, -28
 1644              		.cfi_offset 7, -24
 1645              		.cfi_offset 8, -20
 1646              		.cfi_offset 9, -16
 1647              		.cfi_offset 10, -12
 1648              		.cfi_offset 11, -8
 1649              		.cfi_offset 14, -4
 1650 0004 89B0     		sub	sp, sp, #36
 1651              	.LCFI19:
 1652              		.cfi_def_cfa_offset 72
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t h, int16_t r, uint16_t color) {
 1653              		.loc 1 459 0
 1654 0006 BDF94C60 		ldrsh	r6, [sp, #76]
 1655 000a 0791     		str	r1, [sp, #28]
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y    , w-2*r, color); // Top
 1656              		.loc 1 461 0
 1657 000c 1FFA86FE 		uxth	lr, r6
 1658 0010 89B2     		uxth	r1, r1
 1659 0012 0EEB0107 		add	r7, lr, r1
 1660 0016 0491     		str	r1, [sp, #16]
 1661 0018 9BB2     		uxth	r3, r3
 1662 001a 6FF00101 		mvn	r1, #1
 1663              	.LVL153:
 1664 001e 0593     		str	r3, [sp, #20]
 1665 0020 01FB0EF3 		mul	r3, r1, lr
 1666              	.LVL154:
 1667 0024 0599     		ldr	r1, [sp, #20]
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t h, int16_t r, uint16_t color) {
 1668              		.loc 1 459 0
 1669 0026 BDF85050 		ldrh	r5, [sp, #80]
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y    , w-2*r, color); // Top
 1670              		.loc 1 461 0
 1671 002a 9BB2     		uxth	r3, r3
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t h, int16_t r, uint16_t color) {
 1672              		.loc 1 459 0
 1673 002c 9046     		mov	r8, r2
 1674 002e BDF948B0 		ldrsh	fp, [sp, #72]
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y    , w-2*r, color); // Top
 1675              		.loc 1 461 0
 1676 0032 0693     		str	r3, [sp, #24]
 1677 0034 03EB010A 		add	sl, r3, r1
 1678 0038 0368     		ldr	r3, [r0, #0]
 1679 003a 3FB2     		sxth	r7, r7
 1680 003c 0FFA8AFA 		sxth	sl, sl
 1681 0040 0095     		str	r5, [sp, #0]
 462:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 1682              		.loc 1 462 0
 1683 0042 1FFA88F8 		uxth	r8, r8
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   int16_t h, int16_t r, uint16_t color) {
 1684              		.loc 1 459 0
 1685 0046 0446     		mov	r4, r0
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y    , w-2*r, color); // Top
 1686              		.loc 1 461 0
 1687 0048 CDF80CE0 		str	lr, [sp, #12]
 1688 004c D3F808C0 		ldr	ip, [r3, #8]
 1689 0050 3946     		mov	r1, r7
 1690 0052 5346     		mov	r3, sl
 462:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 1691              		.loc 1 462 0
 1692 0054 08F1FF39 		add	r9, r8, #-1
 1693 0058 1FFA8BFB 		uxth	fp, fp
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y    , w-2*r, color); // Top
 1694              		.loc 1 461 0
 1695 005c E047     		blx	ip
 1696              	.LVL155:
 462:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 1697              		.loc 1 462 0
 1698 005e 2268     		ldr	r2, [r4, #0]
 1699 0060 0BEB0900 		add	r0, fp, r9
 1700 0064 1FFA80F9 		uxth	r9, r0
 1701 0068 0095     		str	r5, [sp, #0]
 1702 006a D2F808C0 		ldr	ip, [r2, #8]
 1703 006e 2046     		mov	r0, r4
 1704 0070 3946     		mov	r1, r7
 1705 0072 0FFA89F2 		sxth	r2, r9
 1706 0076 5346     		mov	r3, sl
 1707 0078 E047     		blx	ip
 1708              	.LVL156:
 463:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(  x    , y+r  , h-2*r, color); // Left
 1709              		.loc 1 463 0
 1710 007a DDF818E0 		ldr	lr, [sp, #24]
 1711 007e 0399     		ldr	r1, [sp, #12]
 1712 0080 F344     		add	fp, lr, fp
 1713 0082 2368     		ldr	r3, [r4, #0]
 1714 0084 01EB080A 		add	sl, r1, r8
 1715 0088 0FFA8AF8 		sxth	r8, sl
 1716 008c 0FFA8BFB 		sxth	fp, fp
 1717 0090 0095     		str	r5, [sp, #0]
 1718 0092 D3F804C0 		ldr	ip, [r3, #4]
 1719 0096 2046     		mov	r0, r4
 1720 0098 0799     		ldr	r1, [sp, #28]
 1721 009a 4246     		mov	r2, r8
 1722 009c 5B46     		mov	r3, fp
 1723 009e E047     		blx	ip
 1724              	.LVL157:
 464:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawFastVLine(  x+w-1, y+r  , h-2*r, color); // Right
 1725              		.loc 1 464 0
 1726 00a0 0498     		ldr	r0, [sp, #16]
 1727 00a2 0599     		ldr	r1, [sp, #20]
 1728 00a4 00F1FF32 		add	r2, r0, #-1
 1729 00a8 2368     		ldr	r3, [r4, #0]
 1730 00aa 01EB020A 		add	sl, r1, r2
 1731 00ae 1FFA8AFA 		uxth	sl, sl
 1732 00b2 0095     		str	r5, [sp, #0]
 1733 00b4 D3F804C0 		ldr	ip, [r3, #4]
 1734 00b8 2046     		mov	r0, r4
 1735 00ba 0FFA8AF1 		sxth	r1, sl
 1736 00be 4246     		mov	r2, r8
 1737 00c0 5B46     		mov	r3, fp
 1738 00c2 E047     		blx	ip
 1739              	.LVL158:
 466:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+r    , y+r    , r, 1, color);
 1740              		.loc 1 466 0
 1741 00c4 0123     		movs	r3, #1
 1742 00c6 8DE82800 		stmia	sp, {r3, r5}
 1743 00ca 2046     		mov	r0, r4
 1744 00cc 3946     		mov	r1, r7
 1745 00ce 4246     		mov	r2, r8
 1746 00d0 3346     		mov	r3, r6
 1747 00d2 FFF7FEFF 		bl	_ZN11Arduino_GFX16drawCircleHelperEsssht
 1748              	.LVL159:
 467:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 1749              		.loc 1 467 0
 1750 00d6 DDF80CE0 		ldr	lr, [sp, #12]
 1751 00da 0223     		movs	r3, #2
 1752 00dc CEEB0A00 		rsb	r0, lr, sl
 1753 00e0 0FFA80FA 		sxth	sl, r0
 1754 00e4 8DE82800 		stmia	sp, {r3, r5}
 1755 00e8 2046     		mov	r0, r4
 1756 00ea 5146     		mov	r1, sl
 1757 00ec 4246     		mov	r2, r8
 1758 00ee 3346     		mov	r3, r6
 1759 00f0 FFF7FEFF 		bl	_ZN11Arduino_GFX16drawCircleHelperEsssht
 1760              	.LVL160:
 468:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 1761              		.loc 1 468 0
 1762 00f4 039A     		ldr	r2, [sp, #12]
 1763 00f6 0423     		movs	r3, #4
 1764 00f8 C2EB0909 		rsb	r9, r2, r9
 1765 00fc 0FFA89F9 		sxth	r9, r9
 1766 0100 8DE82800 		stmia	sp, {r3, r5}
 1767 0104 2046     		mov	r0, r4
 1768 0106 5146     		mov	r1, sl
 1769 0108 4A46     		mov	r2, r9
 1770 010a 3346     		mov	r3, r6
 1771 010c FFF7FEFF 		bl	_ZN11Arduino_GFX16drawCircleHelperEsssht
 1772              	.LVL161:
 469:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 1773              		.loc 1 469 0
 1774 0110 0821     		movs	r1, #8
 1775 0112 1291     		str	r1, [sp, #72]
 1776 0114 2046     		mov	r0, r4
 1777 0116 3946     		mov	r1, r7
 1778 0118 4A46     		mov	r2, r9
 1779 011a 3346     		mov	r3, r6
 1780 011c 1395     		str	r5, [sp, #76]
 470:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1781              		.loc 1 470 0
 1782 011e 09B0     		add	sp, sp, #36
 1783 0120 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 469:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 1784              		.loc 1 469 0
 1785 0124 FFF7FEBF 		b	_ZN11Arduino_GFX16drawCircleHelperEsssht
 1786              	.LVL162:
 1787              		.cfi_endproc
 1788              	.LFE69:
 1790              		.section	.text._ZN11Arduino_GFX13fillRoundRectEssssst,"ax",%progbits
 1791              		.align	1
 1792              		.global	_ZN11Arduino_GFX13fillRoundRectEssssst
 1793              		.thumb
 1794              		.thumb_func
 1796              	_ZN11Arduino_GFX13fillRoundRectEssssst:
 1797              	.LFB70:
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, int16_t r, uint16_t color) {
 1798              		.loc 1 474 0
 1799              		.cfi_startproc
 1800              		@ args = 12, pretend = 0, frame = 8
 1801              		@ frame_needed = 0, uses_anonymous_args = 0
 1802              	.LVL163:
 1803 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1804              	.LCFI20:
 1805              		.cfi_def_cfa_offset 36
 1806              		.cfi_offset 4, -36
 1807              		.cfi_offset 5, -32
 1808              		.cfi_offset 6, -28
 1809              		.cfi_offset 7, -24
 1810              		.cfi_offset 8, -20
 1811              		.cfi_offset 9, -16
 1812              		.cfi_offset 10, -12
 1813              		.cfi_offset 11, -8
 1814              		.cfi_offset 14, -4
 1815 0004 87B0     		sub	sp, sp, #28
 1816              	.LCFI21:
 1817              		.cfi_def_cfa_offset 64
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, int16_t r, uint16_t color) {
 1818              		.loc 1 474 0
 1819 0006 BDF94460 		ldrsh	r6, [sp, #68]
 476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillRect(x+r, y, w-2*r, h, color);
 1820              		.loc 1 476 0
 1821 000a 1FFA83F9 		uxth	r9, r3
 1822 000e B4B2     		uxth	r4, r6
 1823 0010 6FF00103 		mvn	r3, #1
 1824              	.LVL164:
 1825 0014 6343     		muls	r3, r4, r3
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, int16_t r, uint16_t color) {
 1826              		.loc 1 474 0
 1827 0016 BDF84850 		ldrh	r5, [sp, #72]
 1828 001a BDF940B0 		ldrsh	fp, [sp, #64]
 476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillRect(x+r, y, w-2*r, h, color);
 1829              		.loc 1 476 0
 1830 001e 1FFA81FA 		uxth	sl, r1
 1831 0022 04EB0A08 		add	r8, r4, sl
 1832 0026 0168     		ldr	r1, [r0, #0]
 1833              	.LVL165:
 1834 0028 9BB2     		uxth	r3, r3
 1835 002a CDF800B0 		str	fp, [sp, #0]
 1836 002e 0493     		str	r3, [sp, #16]
 1837 0030 0FFA88F8 		sxth	r8, r8
 1838 0034 0195     		str	r5, [sp, #4]
 1839 0036 4B44     		add	r3, r3, r9
 1840 0038 D1F80CC0 		ldr	ip, [r1, #12]
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, int16_t r, uint16_t color) {
 1841              		.loc 1 474 0
 1842 003c 0592     		str	r2, [sp, #20]
 476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillRect(x+r, y, w-2*r, h, color);
 1843              		.loc 1 476 0
 1844 003e 4146     		mov	r1, r8
 1845 0040 1BB2     		sxth	r3, r3
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				 int16_t h, int16_t r, uint16_t color) {
 1846              		.loc 1 474 0
 1847 0042 0746     		mov	r7, r0
 479:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 1848              		.loc 1 479 0
 1849 0044 0AF1FF3A 		add	sl, sl, #-1
 1850              	.LVL166:
 476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillRect(x+r, y, w-2*r, h, color);
 1851              		.loc 1 476 0
 1852 0048 E047     		blx	ip
 1853              	.LVL167:
 479:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 1854              		.loc 1 479 0
 1855 004a 059A     		ldr	r2, [sp, #20]
 1856 004c DDF810E0 		ldr	lr, [sp, #16]
 1857 0050 D144     		add	r9, r9, sl
 1858              	.LVL168:
 1859 0052 0BF1FF3B 		add	fp, fp, #-1
 1860 0056 A018     		adds	r0, r4, r2
 1861 0058 F344     		add	fp, lr, fp
 1862 005a C4EB0901 		rsb	r1, r4, r9
 1863 005e 0124     		movs	r4, #1
 1864 0060 0FFA80FA 		sxth	sl, r0
 1865              	.LVL169:
 1866 0064 0094     		str	r4, [sp, #0]
 1867 0066 0FFA8BF4 		sxth	r4, fp
 1868 006a 3846     		mov	r0, r7
 1869 006c 5246     		mov	r2, sl
 1870 006e 3346     		mov	r3, r6
 1871 0070 0194     		str	r4, [sp, #4]
 1872 0072 0295     		str	r5, [sp, #8]
 1873 0074 09B2     		sxth	r1, r1
 1874 0076 FFF7FEFF 		bl	_ZN11Arduino_GFX16fillCircleHelperEssshst
 1875              	.LVL170:
 480:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 1876              		.loc 1 480 0
 1877 007a 0223     		movs	r3, #2
 1878 007c 1093     		str	r3, [sp, #64]
 1879 007e 3846     		mov	r0, r7
 1880 0080 4146     		mov	r1, r8
 1881 0082 5246     		mov	r2, sl
 1882 0084 3346     		mov	r3, r6
 1883 0086 1194     		str	r4, [sp, #68]
 1884 0088 1295     		str	r5, [sp, #72]
 481:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1885              		.loc 1 481 0
 1886 008a 07B0     		add	sp, sp, #28
 1887 008c BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 480:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 1888              		.loc 1 480 0
 1889 0090 FFF7FEBF 		b	_ZN11Arduino_GFX16fillCircleHelperEssshst
 1890              	.LVL171:
 1891              		.cfi_endproc
 1892              	.LFE70:
 1894              		.section	.text._ZN11Arduino_GFX12drawTriangleEsssssst,"ax",%progbits
 1895              		.align	1
 1896              		.global	_ZN11Arduino_GFX12drawTriangleEsssssst
 1897              		.thumb
 1898              		.thumb_func
 1900              	_ZN11Arduino_GFX12drawTriangleEsssssst:
 1901              	.LFB71:
 486:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				int16_t x2, int16_t y2, uint16_t color) {
 1902              		.loc 1 486 0
 1903              		.cfi_startproc
 1904              		@ args = 16, pretend = 0, frame = 0
 1905              		@ frame_needed = 0, uses_anonymous_args = 0
 1906              	.LVL172:
 1907 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1908              	.LCFI22:
 1909              		.cfi_def_cfa_offset 48
 1910              		.cfi_offset 0, -48
 1911              		.cfi_offset 1, -44
 1912              		.cfi_offset 2, -40
 1913              		.cfi_offset 4, -36
 1914              		.cfi_offset 5, -32
 1915              		.cfi_offset 6, -28
 1916              		.cfi_offset 7, -24
 1917              		.cfi_offset 8, -20
 1918              		.cfi_offset 9, -16
 1919              		.cfi_offset 10, -12
 1920              		.cfi_offset 11, -8
 1921              		.cfi_offset 14, -4
 486:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				int16_t x2, int16_t y2, uint16_t color) {
 1922              		.loc 1 486 0
 1923 0004 BDF83C40 		ldrh	r4, [sp, #60]
 1924 0008 BDF93080 		ldrsh	r8, [sp, #48]
 1925 000c BDF93460 		ldrsh	r6, [sp, #52]
 1926 0010 BDF93850 		ldrsh	r5, [sp, #56]
 1927 0014 0746     		mov	r7, r0
 1928 0016 9B46     		mov	fp, r3
 487:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x0, y0, x1, y1, color);
 1929              		.loc 1 487 0
 1930 0018 CDF80080 		str	r8, [sp, #0]
 1931 001c 0194     		str	r4, [sp, #4]
 486:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				int16_t x2, int16_t y2, uint16_t color) {
 1932              		.loc 1 486 0
 1933 001e 8A46     		mov	sl, r1
 1934 0020 9146     		mov	r9, r2
 487:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x0, y0, x1, y1, color);
 1935              		.loc 1 487 0
 1936 0022 FFF7FEFF 		bl	_ZN11Arduino_GFX8drawLineEsssst
 1937              	.LVL173:
 488:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x1, y1, x2, y2, color);
 1938              		.loc 1 488 0
 1939 0026 3846     		mov	r0, r7
 1940 0028 5946     		mov	r1, fp
 1941 002a 4246     		mov	r2, r8
 1942 002c 3346     		mov	r3, r6
 1943 002e 0095     		str	r5, [sp, #0]
 1944 0030 0194     		str	r4, [sp, #4]
 1945 0032 FFF7FEFF 		bl	_ZN11Arduino_GFX8drawLineEsssst
 1946              	.LVL174:
 489:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x2, y2, x0, y0, color);
 1947              		.loc 1 489 0
 1948 0036 3846     		mov	r0, r7
 1949 0038 3146     		mov	r1, r6
 1950 003a 2A46     		mov	r2, r5
 1951 003c 5346     		mov	r3, sl
 1952 003e CDF83090 		str	r9, [sp, #48]
 1953 0042 0D94     		str	r4, [sp, #52]
 490:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 1954              		.loc 1 490 0
 1955 0044 03B0     		add	sp, sp, #12
 1956 0046 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 489:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   drawLine(x2, y2, x0, y0, color);
 1957              		.loc 1 489 0
 1958 004a FFF7FEBF 		b	_ZN11Arduino_GFX8drawLineEsssst
 1959              	.LVL175:
 1960              		.cfi_endproc
 1961              	.LFE71:
 1963              		.section	.text._ZN11Arduino_GFX12fillTriangleEsssssst,"ax",%progbits
 1964              		.align	1
 1965              		.global	_ZN11Arduino_GFX12fillTriangleEsssssst
 1966              		.thumb
 1967              		.thumb_func
 1969              	_ZN11Arduino_GFX12fillTriangleEsssssst:
 1970              	.LFB72:
 495:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				  int16_t x2, int16_t y2, uint16_t color) {
 1971              		.loc 1 495 0
 1972              		.cfi_startproc
 1973              		@ args = 16, pretend = 0, frame = 40
 1974              		@ frame_needed = 0, uses_anonymous_args = 0
 1975              	.LVL176:
 1976 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1977              	.LCFI23:
 1978              		.cfi_def_cfa_offset 36
 1979              		.cfi_offset 4, -36
 1980              		.cfi_offset 5, -32
 1981              		.cfi_offset 6, -28
 1982              		.cfi_offset 7, -24
 1983              		.cfi_offset 8, -20
 1984              		.cfi_offset 9, -16
 1985              		.cfi_offset 10, -12
 1986              		.cfi_offset 11, -8
 1987              		.cfi_offset 14, -4
 1988 0004 8DB0     		sub	sp, sp, #52
 1989              	.LCFI24:
 1990              		.cfi_def_cfa_offset 88
 495:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				  int16_t x2, int16_t y2, uint16_t color) {
 1991              		.loc 1 495 0
 1992 0006 BDF95840 		ldrsh	r4, [sp, #88]
 1993 000a 1546     		mov	r5, r2
 1994 000c 8046     		mov	r8, r0
 1995 000e BDF86400 		ldrh	r0, [sp, #100]
 1996              	.LVL177:
 1997              	.LBB58:
 500:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y0 > y1) {
 1998              		.loc 1 500 0
 1999 0012 A542     		cmp	r5, r4
 2000              	.LBE58:
 495:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 				  int16_t x2, int16_t y2, uint16_t color) {
 2001              		.loc 1 495 0
 2002 0014 BDF95C20 		ldrsh	r2, [sp, #92]
 2003              	.LVL178:
 2004 0018 BDF96070 		ldrsh	r7, [sp, #96]
 2005 001c 0590     		str	r0, [sp, #20]
 2006              	.LBB59:
 500:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y0 > y1) {
 2007              		.loc 1 500 0
 2008 001e 05DD     		ble	.L75
 501:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1); swap(x0, x1);
 2009              		.loc 1 501 0
 2010 0020 6540     		eors	r5, r5, r4
 2011              	.LVL179:
 2012 0022 5940     		eors	r1, r1, r3
 2013              	.LVL180:
 2014 0024 6C40     		eors	r4, r4, r5
 2015              	.LVL181:
 2016 0026 4B40     		eors	r3, r3, r1
 2017              	.LVL182:
 2018 0028 6540     		eors	r5, r5, r4
 2019              	.LVL183:
 2020 002a 5940     		eors	r1, r1, r3
 2021              	.LVL184:
 2022              	.L75:
 503:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y1 > y2) {
 2023              		.loc 1 503 0
 2024 002c BC42     		cmp	r4, r7
 2025 002e 0BDD     		ble	.L76
 504:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y2, y1); swap(x2, x1);
 2026              		.loc 1 504 0
 2027 0030 6740     		eors	r7, r7, r4
 2028              	.LVL185:
 2029 0032 5A40     		eors	r2, r2, r3
 2030 0034 7C40     		eors	r4, r4, r7
 2031              	.LVL186:
 2032 0036 5340     		eors	r3, r3, r2
 2033              	.LVL187:
 2034 0038 24B2     		sxth	r4, r4
 2035              	.LVL188:
 2036 003a 84EA0700 		eor	r0, r4, r7
 2037 003e 1BB2     		sxth	r3, r3
 2038 0040 07B2     		sxth	r7, r0
 2039              	.LVL189:
 2040 0042 83EA0200 		eor	r0, r3, r2
 2041              	.LVL190:
 2042 0046 02B2     		sxth	r2, r0
 2043              	.LVL191:
 2044              	.L76:
 506:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (y0 > y1) {
 2045              		.loc 1 506 0
 2046 0048 A542     		cmp	r5, r4
 2047 004a 0BDD     		ble	.L77
 507:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     swap(y0, y1); swap(x0, x1);
 2048              		.loc 1 507 0
 2049 004c 6540     		eors	r5, r5, r4
 2050              	.LVL192:
 2051 004e 5940     		eors	r1, r1, r3
 2052              	.LVL193:
 2053 0050 6C40     		eors	r4, r4, r5
 2054              	.LVL194:
 2055 0052 4B40     		eors	r3, r3, r1
 2056              	.LVL195:
 2057 0054 24B2     		sxth	r4, r4
 2058              	.LVL196:
 2059 0056 84EA0500 		eor	r0, r4, r5
 2060 005a 1BB2     		sxth	r3, r3
 2061 005c 05B2     		sxth	r5, r0
 2062              	.LVL197:
 2063 005e 83EA0100 		eor	r0, r3, r1
 2064              	.LVL198:
 2065 0062 01B2     		sxth	r1, r0
 2066              	.LVL199:
 2067              	.L77:
 510:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 2068              		.loc 1 510 0
 2069 0064 BD42     		cmp	r5, r7
 2070 0066 1ED1     		bne	.L78
 2071              	.LVL200:
 512:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(x1 < a)      a = x1;
 2072              		.loc 1 512 0
 2073 0068 8B42     		cmp	r3, r1
 2074 006a 02DB     		blt	.L89
 513:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     else if(x1 > b) b = x1;
 2075              		.loc 1 513 0
 2076 006c 04DC     		bgt	.L90
 2077 006e 0C46     		mov	r4, r1
 2078              	.LVL201:
 2079 0070 03E0     		b	.L79
 2080              	.LVL202:
 2081              	.L89:
 512:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(x1 < a)      a = x1;
 2082              		.loc 1 512 0
 2083 0072 0C46     		mov	r4, r1
 2084              	.LVL203:
 2085 0074 1946     		mov	r1, r3
 2086              	.LVL204:
 2087 0076 00E0     		b	.L79
 2088              	.LVL205:
 2089              	.L90:
 513:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     else if(x1 > b) b = x1;
 2090              		.loc 1 513 0
 2091 0078 1C46     		mov	r4, r3
 2092              	.LVL206:
 2093              	.L79:
 514:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(x2 < a)      a = x2;
 2094              		.loc 1 514 0
 2095 007a 0BB2     		sxth	r3, r1
 2096              	.LVL207:
 2097 007c 9A42     		cmp	r2, r3
 2098 007e 04DB     		blt	.L91
 515:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     else if(x2 > b) b = x2;
 2099              		.loc 1 515 0
 2100 0080 20B2     		sxth	r0, r4
 2101 0082 8242     		cmp	r2, r0
 2102 0084 C8BF     		it	gt
 2103 0086 1446     		movgt	r4, r2
 2104              	.LVL208:
 2105 0088 00E0     		b	.L80
 2106              	.LVL209:
 2107              	.L91:
 514:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(x2 < a)      a = x2;
 2108              		.loc 1 514 0
 2109 008a 1146     		mov	r1, r2
 2110              	.LVL210:
 2111              	.L80:
 516:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y0, b-a+1, color);
 2112              		.loc 1 516 0
 2113 008c 0598     		ldr	r0, [sp, #20]
 2114 008e D8F80020 		ldr	r2, [r8, #0]
 2115              	.LVL211:
 2116 0092 0134     		adds	r4, r4, #1
 2117              	.LVL212:
 2118 0094 631A     		subs	r3, r4, r1
 2119 0096 0090     		str	r0, [sp, #0]
 2120 0098 9468     		ldr	r4, [r2, #8]
 2121              	.LVL213:
 2122 009a 4046     		mov	r0, r8
 2123 009c 09B2     		sxth	r1, r1
 2124              	.LVL214:
 2125 009e 2A46     		mov	r2, r5
 2126 00a0 1BB2     		sxth	r3, r3
 2127 00a2 A047     		blx	r4
 2128              	.LVL215:
 517:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     return;
 2129              		.loc 1 517 0
 2130 00a4 A7E0     		b	.L74
 2131              	.LVL216:
 2132              	.L78:
 521:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx01 = x1 - x0,
 2133              		.loc 1 521 0
 2134 00a6 9EB2     		uxth	r6, r3
 2135 00a8 1FFA81F9 		uxth	r9, r1
 2136 00ac C9EB0601 		rsb	r1, r9, r6
 2137              	.LVL217:
 2138 00b0 0396     		str	r6, [sp, #12]
 522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy01 = y1 - y0,
 2139              		.loc 1 522 0
 2140 00b2 A8B2     		uxth	r0, r5
 2141 00b4 A6B2     		uxth	r6, r4
 521:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx01 = x1 - x0,
 2142              		.loc 1 521 0
 2143 00b6 8BB2     		uxth	r3, r1
 2144              	.LVL218:
 523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx02 = x2 - x0,
 2145              		.loc 1 523 0
 2146 00b8 92B2     		uxth	r2, r2
 2147              	.LVL219:
 522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy01 = y1 - y0,
 2148              		.loc 1 522 0
 2149 00ba 311A     		subs	r1, r6, r0
 521:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx01 = x1 - x0,
 2150              		.loc 1 521 0
 2151 00bc 0993     		str	r3, [sp, #36]
 2152              	.LVL220:
 522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy01 = y1 - y0,
 2153              		.loc 1 522 0
 2154 00be 8BB2     		uxth	r3, r1
 523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx02 = x2 - x0,
 2155              		.loc 1 523 0
 2156 00c0 C9EB0201 		rsb	r1, r9, r2
 522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy01 = y1 - y0,
 2157              		.loc 1 522 0
 2158 00c4 0A93     		str	r3, [sp, #40]
 2159              	.LVL221:
 523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx02 = x2 - x0,
 2160              		.loc 1 523 0
 2161 00c6 8BB2     		uxth	r3, r1
 524:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy02 = y2 - y0,
 2162              		.loc 1 524 0
 2163 00c8 B9B2     		uxth	r1, r7
 2164 00ca 081A     		subs	r0, r1, r0
 523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx02 = x2 - x0,
 2165              		.loc 1 523 0
 2166 00cc 0493     		str	r3, [sp, #16]
 2167              	.LVL222:
 524:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy02 = y2 - y0,
 2168              		.loc 1 524 0
 2169 00ce 83B2     		uxth	r3, r0
 525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx12 = x2 - x1,
 2170              		.loc 1 525 0
 2171 00d0 0398     		ldr	r0, [sp, #12]
 526:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy12 = y2 - y1,
 2172              		.loc 1 526 0
 2173 00d2 891B     		subs	r1, r1, r6
 525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx12 = x2 - x1,
 2174              		.loc 1 525 0
 2175 00d4 121A     		subs	r2, r2, r0
 524:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy02 = y2 - y0,
 2176              		.loc 1 524 0
 2177 00d6 0793     		str	r3, [sp, #28]
 2178              	.LVL223:
 526:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy12 = y2 - y1,
 2179              		.loc 1 526 0
 2180 00d8 88B2     		uxth	r0, r1
 525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx12 = x2 - x1,
 2181              		.loc 1 525 0
 2182 00da 93B2     		uxth	r3, r2
 536:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if(y1 == y2) last = y1;   // Include y1 scanline
 2183              		.loc 1 536 0
 2184 00dc BC42     		cmp	r4, r7
 525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dx12 = x2 - x1,
 2185              		.loc 1 525 0
 2186 00de 0893     		str	r3, [sp, #32]
 2187              	.LVL224:
 526:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     dy12 = y2 - y1,
 2188              		.loc 1 526 0
 2189 00e0 0B90     		str	r0, [sp, #44]
 2190              	.LVL225:
 536:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if(y1 == y2) last = y1;   // Include y1 scanline
 2191              		.loc 1 536 0
 2192 00e2 03D0     		beq	.L93
 537:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   else         last = y1-1; // Skip it
 2193              		.loc 1 537 0
 2194 00e4 013E     		subs	r6, r6, #1
 2195 00e6 B2B2     		uxth	r2, r6
 2196 00e8 0692     		str	r2, [sp, #24]
 2197              	.LVL226:
 2198 00ea 00E0     		b	.L82
 2199              	.LVL227:
 2200              	.L93:
 536:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if(y1 == y2) last = y1;   // Include y1 scanline
 2201              		.loc 1 536 0
 2202 00ec 0694     		str	r4, [sp, #24]
 2203              	.L82:
 2204              	.LVL228:
 528:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sb   = 0;
 2205              		.loc 1 528 0
 2206 00ee 4FF0000A 		mov	sl, #0
 539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(y=y0; y<=last; y++) {
 2207              		.loc 1 539 0
 2208 00f2 2E46     		mov	r6, r5
 527:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     sa   = 0,
 2209              		.loc 1 527 0
 2210 00f4 D346     		mov	fp, sl
 2211              	.LVL229:
 2212              	.L83:
 539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(y=y0; y<=last; y++) {
 2213              		.loc 1 539 0 discriminator 1
 2214 00f6 0699     		ldr	r1, [sp, #24]
 2215 00f8 33B2     		sxth	r3, r6
 2216 00fa 08B2     		sxth	r0, r1
 2217 00fc 8342     		cmp	r3, r0
 2218 00fe 38DC     		bgt	.L94
 2219              	.L85:
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x0 + sa / dy01;
 2220              		.loc 1 540 0
 2221 0100 0A99     		ldr	r1, [sp, #40]
 2222 0102 0FFA8BF2 		sxth	r2, fp
 2223 0106 0BB2     		sxth	r3, r1
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2224              		.loc 1 541 0
 2225 0108 DDF81CE0 		ldr	lr, [sp, #28]
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x0 + sa / dy01;
 2226              		.loc 1 540 0
 2227 010c 92FBF3F0 		sdiv	r0, r2, r3
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2228              		.loc 1 541 0
 2229 0110 0FFA8EF1 		sxth	r1, lr
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x0 + sa / dy01;
 2230              		.loc 1 540 0
 2231 0114 09EB0002 		add	r2, r9, r0
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2232              		.loc 1 541 0
 2233 0118 0FFA8AF0 		sxth	r0, sl
 2234 011c 90FBF1F0 		sdiv	r0, r0, r1
 2235 0120 09EB0001 		add	r1, r9, r0
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x0 + sa / dy01;
 2236              		.loc 1 540 0
 2237 0124 92B2     		uxth	r2, r2
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2238              		.loc 1 541 0
 2239 0126 88B2     		uxth	r0, r1
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillTriangle ( int16_t x0, int16_t y0,
 2240              		.loc 1 493 0
 2241 0128 DDF824C0 		ldr	ip, [sp, #36]
 2242 012c DDF810E0 		ldr	lr, [sp, #16]
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2243              		.loc 1 541 0
 2244 0130 81B2     		uxth	r1, r0
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x0 + sa / dy01;
 2245              		.loc 1 540 0
 2246 0132 93B2     		uxth	r3, r2
 2247              	.LVL230:
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillTriangle ( int16_t x0, int16_t y0,
 2248              		.loc 1 493 0
 2249 0134 E344     		add	fp, ip, fp
 2250              	.LVL231:
 2251 0136 F244     		add	sl, lr, sl
 2252              	.LVL232:
 544:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(a > b) swap(a,b);
 2253              		.loc 1 544 0
 2254 0138 0FFA83FC 		sxth	ip, r3
 2255 013c 0FFA81FE 		sxth	lr, r1
 2256 0140 F445     		cmp	ip, lr
 2257 0142 C8BF     		it	gt
 2258 0144 80EA0203 		eorgt	r3, r0, r2
 2259 0148 4B40     		eors	r3, r3, r1
 545:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y, b-a+1, color);
 2260              		.loc 1 545 0
 2261 014a 0598     		ldr	r0, [sp, #20]
 2262              	.LVL233:
 2263 014c D8F80020 		ldr	r2, [r8, #0]
 2264              	.LVL234:
 2265 0150 0133     		adds	r3, r3, #1
 2266 0152 0090     		str	r0, [sp, #0]
 2267 0154 5B1A     		subs	r3, r3, r1
 2268 0156 D2F808C0 		ldr	ip, [r2, #8]
 2269 015a 4046     		mov	r0, r8
 2270 015c 32B2     		sxth	r2, r6
 2271 015e 09B2     		sxth	r1, r1
 2272              	.LVL235:
 2273 0160 1BB2     		sxth	r3, r3
 539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(y=y0; y<=last; y++) {
 2274              		.loc 1 539 0
 2275 0162 0136     		adds	r6, r6, #1
 2276              	.LVL236:
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillTriangle ( int16_t x0, int16_t y0,
 2277              		.loc 1 493 0
 2278 0164 1FFA8BFB 		uxth	fp, fp
 2279              	.LVL237:
 2280 0168 1FFA8AFA 		uxth	sl, sl
 2281              	.LVL238:
 545:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y, b-a+1, color);
 2282              		.loc 1 545 0
 2283 016c E047     		blx	ip
 2284              	.LVL239:
 539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(y=y0; y<=last; y++) {
 2285              		.loc 1 539 0
 2286 016e B6B2     		uxth	r6, r6
 2287              	.LVL240:
 2288 0170 C1E7     		b	.L83
 2289              	.L94:
 550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sa = dx12 * (y - y1);
 2290              		.loc 1 550 0
 2291 0172 1C1B     		subs	r4, r3, r4
 2292              	.LVL241:
 551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sb = dx02 * (y - y0);
 2293              		.loc 1 551 0
 2294 0174 5D1B     		subs	r5, r3, r5
 2295              	.LVL242:
 550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sa = dx12 * (y - y1);
 2296              		.loc 1 550 0
 2297 0176 089A     		ldr	r2, [sp, #32]
 551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sb = dx02 * (y - y0);
 2298              		.loc 1 551 0
 2299 0178 049B     		ldr	r3, [sp, #16]
 550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sa = dx12 * (y - y1);
 2300              		.loc 1 550 0
 2301 017a 5443     		muls	r4, r2, r4
 551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sb = dx02 * (y - y0);
 2302              		.loc 1 551 0
 2303 017c 5D43     		muls	r5, r3, r5
 550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sa = dx12 * (y - y1);
 2304              		.loc 1 550 0
 2305 017e A4B2     		uxth	r4, r4
 2306              	.LVL243:
 551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   sb = dx02 * (y - y0);
 2307              		.loc 1 551 0
 2308 0180 ADB2     		uxth	r5, r5
 2309              	.LVL244:
 2310              	.L86:
 552:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(; y<=y2; y++) {
 2311              		.loc 1 552 0 discriminator 1
 2312 0182 31B2     		sxth	r1, r6
 2313 0184 B942     		cmp	r1, r7
 2314 0186 36DC     		bgt	.L74
 2315              	.L88:
 553:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x1 + sa / dy12;
 2316              		.loc 1 553 0
 2317 0188 DDF82CE0 		ldr	lr, [sp, #44]
 2318 018c 20B2     		sxth	r0, r4
 2319 018e 0FFA8EF2 		sxth	r2, lr
 2320 0192 0399     		ldr	r1, [sp, #12]
 2321 0194 90FBF2F3 		sdiv	r3, r0, r2
 554:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2322              		.loc 1 554 0
 2323 0198 DDF81CC0 		ldr	ip, [sp, #28]
 553:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x1 + sa / dy12;
 2324              		.loc 1 553 0
 2325 019c C818     		adds	r0, r1, r3
 2326 019e 82B2     		uxth	r2, r0
 554:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2327              		.loc 1 554 0
 2328 01a0 0FFA8CF1 		sxth	r1, ip
 2329 01a4 28B2     		sxth	r0, r5
 2330 01a6 90FBF1F0 		sdiv	r0, r0, r1
 2331 01aa 09EB0001 		add	r1, r9, r0
 2332 01ae 88B2     		uxth	r0, r1
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillTriangle ( int16_t x0, int16_t y0,
 2333              		.loc 1 493 0
 2334 01b0 DDF820E0 		ldr	lr, [sp, #32]
 2335 01b4 DDF810C0 		ldr	ip, [sp, #16]
 554:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     b   = x0 + sb / dy02;
 2336              		.loc 1 554 0
 2337 01b8 81B2     		uxth	r1, r0
 553:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     a   = x1 + sa / dy12;
 2338              		.loc 1 553 0
 2339 01ba 93B2     		uxth	r3, r2
 2340              	.LVL245:
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillTriangle ( int16_t x0, int16_t y0,
 2341              		.loc 1 493 0
 2342 01bc 7444     		add	r4, lr, r4
 2343              	.LVL246:
 2344 01be 6544     		add	r5, ip, r5
 2345              	.LVL247:
 557:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if(a > b) swap(a,b);
 2346              		.loc 1 557 0
 2347 01c0 0FFA81FE 		sxth	lr, r1
 2348 01c4 0FFA83FC 		sxth	ip, r3
 2349 01c8 F445     		cmp	ip, lr
 2350 01ca C8BF     		it	gt
 2351 01cc 80EA0203 		eorgt	r3, r0, r2
 2352 01d0 4B40     		eors	r3, r3, r1
 558:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y, b-a+1, color);
 2353              		.loc 1 558 0
 2354 01d2 0598     		ldr	r0, [sp, #20]
 2355              	.LVL248:
 2356 01d4 D8F80020 		ldr	r2, [r8, #0]
 2357              	.LVL249:
 2358 01d8 0133     		adds	r3, r3, #1
 2359 01da 0090     		str	r0, [sp, #0]
 2360 01dc 5B1A     		subs	r3, r3, r1
 2361 01de D2F808C0 		ldr	ip, [r2, #8]
 2362 01e2 4046     		mov	r0, r8
 2363 01e4 32B2     		sxth	r2, r6
 2364 01e6 09B2     		sxth	r1, r1
 2365              	.LVL250:
 2366 01e8 1BB2     		sxth	r3, r3
 552:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(; y<=y2; y++) {
 2367              		.loc 1 552 0
 2368 01ea 0136     		adds	r6, r6, #1
 2369              	.LVL251:
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::fillTriangle ( int16_t x0, int16_t y0,
 2370              		.loc 1 493 0
 2371 01ec A4B2     		uxth	r4, r4
 2372              	.LVL252:
 2373 01ee ADB2     		uxth	r5, r5
 2374              	.LVL253:
 558:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawFastHLine(a, y, b-a+1, color);
 2375              		.loc 1 558 0
 2376 01f0 E047     		blx	ip
 2377              	.LVL254:
 552:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for(; y<=y2; y++) {
 2378              		.loc 1 552 0
 2379 01f2 B6B2     		uxth	r6, r6
 2380              	.LVL255:
 2381 01f4 C5E7     		b	.L86
 2382              	.LVL256:
 2383              	.L74:
 2384              	.LBE59:
 560:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 2385              		.loc 1 560 0
 2386 01f6 0DB0     		add	sp, sp, #52
 2387 01f8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2388              		.cfi_endproc
 2389              	.LFE72:
 2391              		.section	.text._ZN11Arduino_GFX10drawBitmapEssPKhsst,"ax",%progbits
 2392              		.align	1
 2393              		.global	_ZN11Arduino_GFX10drawBitmapEssPKhsst
 2394              		.thumb
 2395              		.thumb_func
 2397              	_ZN11Arduino_GFX10drawBitmapEssPKhsst:
 2398              	.LFB73:
 564:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 2399              		.loc 1 564 0
 2400              		.cfi_startproc
 2401              		@ args = 12, pretend = 0, frame = 16
 2402              		@ frame_needed = 0, uses_anonymous_args = 0
 2403              	.LVL257:
 2404 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2405              	.LCFI25:
 2406              		.cfi_def_cfa_offset 36
 2407              		.cfi_offset 4, -36
 2408              		.cfi_offset 5, -32
 2409              		.cfi_offset 6, -28
 2410              		.cfi_offset 7, -24
 2411              		.cfi_offset 8, -20
 2412              		.cfi_offset 9, -16
 2413              		.cfi_offset 10, -12
 2414              		.cfi_offset 11, -8
 2415              		.cfi_offset 14, -4
 2416 0004 85B0     		sub	sp, sp, #20
 2417              	.LCFI26:
 2418              		.cfi_def_cfa_offset 56
 564:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			      uint16_t color) {
 2419              		.loc 1 564 0
 2420 0006 9246     		mov	sl, r2
 2421 0008 BDF93C20 		ldrsh	r2, [sp, #60]
 2422              	.LVL258:
 2423 000c BDF93860 		ldrsh	r6, [sp, #56]
 2424 0010 BDF840B0 		ldrh	fp, [sp, #64]
 2425 0014 0746     		mov	r7, r0
 2426 0016 8946     		mov	r9, r1
 2427 0018 0293     		str	r3, [sp, #8]
 2428 001a 0392     		str	r2, [sp, #12]
 2429              	.LBB60:
 565:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int16_t j=0; j<h; j++) {
 2430              		.loc 1 565 0
 2431 001c 0025     		movs	r5, #0
 2432              	.LVL259:
 2433              	.L96:
 565:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int16_t j=0; j<h; j++) {
 2434              		.loc 1 565 0 is_stmt 0 discriminator 1
 2435 001e 0398     		ldr	r0, [sp, #12]
 2436 0020 2BB2     		sxth	r3, r5
 2437 0022 8342     		cmp	r3, r0
 2438 0024 23DA     		bge	.L95
 2439              	.LBB61:
 568:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       if ((*bitmap + i + (j/8)*w) & (1<<(j%8))) {
 2440              		.loc 1 568 0 is_stmt 1
 2441 0026 D910     		asrs	r1, r3, #3
 2442 0028 7143     		muls	r1, r6, r1
 2443 002a 05F00704 		and	r4, r5, #7
 2444 002e 0122     		movs	r2, #1
 2445 0030 02FA04F8 		lsl	r8, r2, r4
 2446 0034 0191     		str	r1, [sp, #4]
 2447 0036 0024     		movs	r4, #0
 2448              	.L100:
 566:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     for (int16_t i=0; i<w; i++ ) {
 2449              		.loc 1 566 0 discriminator 1
 2450 0038 23B2     		sxth	r3, r4
 2451 003a B342     		cmp	r3, r6
 2452 003c 15DA     		bge	.L104
 2453              	.L98:
 568:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       if ((*bitmap + i + (j/8)*w) & (1<<(j%8))) {
 2454              		.loc 1 568 0
 2455 003e 0298     		ldr	r0, [sp, #8]
 2456 0040 019A     		ldr	r2, [sp, #4]
 2457 0042 0178     		ldrb	r1, [r0, #0]	@ zero_extendqisi2
 2458 0044 0B19     		adds	r3, r1, r4
 2459 0046 9818     		adds	r0, r3, r2
 2460 0048 10EA080F 		tst	r0, r8
 2461 004c 0BD0     		beq	.L97
 569:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	drawPixel(x+i, y+j, color);
 2462              		.loc 1 569 0
 2463 004e 3B68     		ldr	r3, [r7, #0]
 562:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawBitmap(int16_t x, int16_t y, 
 2464              		.loc 1 562 0
 2465 0050 04EB0901 		add	r1, r4, r9
 2466 0054 05EB0A02 		add	r2, r5, sl
 569:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 	drawPixel(x+i, y+j, color);
 2467              		.loc 1 569 0
 2468 0058 D3F800C0 		ldr	ip, [r3, #0]
 2469 005c 3846     		mov	r0, r7
 2470 005e 09B2     		sxth	r1, r1
 2471 0060 12B2     		sxth	r2, r2
 2472 0062 5B46     		mov	r3, fp
 2473 0064 E047     		blx	ip
 2474              	.LVL260:
 2475              	.L97:
 2476 0066 0134     		adds	r4, r4, #1
 2477 0068 E6E7     		b	.L100
 2478              	.L104:
 2479              	.LVL261:
 2480 006a 0135     		adds	r5, r5, #1
 2481 006c D7E7     		b	.L96
 2482              	.LVL262:
 2483              	.L95:
 2484              	.LBE61:
 2485              	.LBE60:
 573:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 2486              		.loc 1 573 0
 2487 006e 05B0     		add	sp, sp, #20
 2488 0070 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2489              		.cfi_endproc
 2490              	.LFE73:
 2492              		.section	.text._ZN11Arduino_GFX8drawCharEsshtth,"ax",%progbits
 2493              		.align	1
 2494              		.global	_ZN11Arduino_GFX8drawCharEsshtth
 2495              		.thumb
 2496              		.thumb_func
 2498              	_ZN11Arduino_GFX8drawCharEsshtth:
 2499              	.LFB77:
 606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color, uint16_t bg, uint8_t size) {
 2500              		.loc 1 606 0
 2501              		.cfi_startproc
 2502              		@ args = 12, pretend = 0, frame = 40
 2503              		@ frame_needed = 0, uses_anonymous_args = 0
 2504              	.LVL263:
 2505 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2506              	.LCFI27:
 2507              		.cfi_def_cfa_offset 36
 2508              		.cfi_offset 4, -36
 2509              		.cfi_offset 5, -32
 2510              		.cfi_offset 6, -28
 2511              		.cfi_offset 7, -24
 2512              		.cfi_offset 8, -20
 2513              		.cfi_offset 9, -16
 2514              		.cfi_offset 10, -12
 2515              		.cfi_offset 11, -8
 2516              		.cfi_offset 14, -4
 2517 0004 0546     		mov	r5, r0
 2518 0006 8DB0     		sub	sp, sp, #52
 2519              	.LCFI28:
 2520              		.cfi_def_cfa_offset 88
 606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color, uint16_t bg, uint8_t size) {
 2521              		.loc 1 606 0
 2522 0008 9346     		mov	fp, r2
 2523              	.LBB62:
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if((x >= _width)            || // Clip right
 2524              		.loc 1 608 0
 2525 000a B5F90820 		ldrsh	r2, [r5, #8]
 2526              	.LVL264:
 2527              	.LBE62:
 606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color, uint16_t bg, uint8_t size) {
 2528              		.loc 1 606 0
 2529 000e 8A46     		mov	sl, r1
 2530 0010 BDF85800 		ldrh	r0, [sp, #88]
 2531              	.LVL265:
 2532 0014 BDF85C10 		ldrh	r1, [sp, #92]
 2533              	.LVL266:
 2534              	.LBB67:
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if((x >= _width)            || // Clip right
 2535              		.loc 1 608 0
 2536 0018 5245     		cmp	r2, sl
 2537              	.LBE67:
 606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 			    uint16_t color, uint16_t bg, uint8_t size) {
 2538              		.loc 1 606 0
 2539 001a 0690     		str	r0, [sp, #24]
 2540 001c 0791     		str	r1, [sp, #28]
 2541 001e 9DF86040 		ldrb	r4, [sp, #96]	@ zero_extendqisi2
 2542              	.LBB68:
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if((x >= _width)            || // Clip right
 2543              		.loc 1 608 0
 2544 0022 40F38980 		ble	.L105
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if((x >= _width)            || // Clip right
 2545              		.loc 1 608 0 is_stmt 0 discriminator 1
 2546 0026 B5F90A00 		ldrsh	r0, [r5, #10]
 2547 002a 5845     		cmp	r0, fp
 2548 002c 40F38480 		ble	.L105
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if((x >= _width)            || // Clip right
 2549              		.loc 1 608 0 discriminator 2
 2550 0030 0522     		movs	r2, #5
 2551 0032 02FB04A1 		mla	r1, r2, r4, sl
 2552 0036 0029     		cmp	r1, #0
 2553 0038 7EDD     		ble	.L105
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if((x >= _width)            || // Clip right
 2554              		.loc 1 608 0 discriminator 3
 2555 003a 0BEBC400 		add	r0, fp, r4, lsl #3
 2556 003e 0028     		cmp	r0, #0
 2557 0040 7ADD     		ble	.L105
 2558              	.LBB63:
 2559              	.LBB64:
 620:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       line = font[(c*5)+i];
 2560              		.loc 1 620 0 is_stmt 1
 2561 0042 5A43     		muls	r2, r3, r2
 2562 0044 0623     		movs	r3, #6
 2563              	.LVL267:
 2564 0046 0A92     		str	r2, [sp, #40]
 2565 0048 0993     		str	r3, [sp, #36]
 2566 004a 4FF00008 		mov	r8, #0
 2567              	.L114:
 617:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (i == 5) 
 2568              		.loc 1 617 0
 2569 004e 4FFA88F6 		sxtb	r6, r8
 2570 0052 052E     		cmp	r6, #5
 2571 0054 05D0     		beq	.L115
 620:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       line = font[(c*5)+i];
 2572              		.loc 1 620 0
 2573 0056 3A4F     		ldr	r7, .L120
 2574 0058 0A9A     		ldr	r2, [sp, #40]
 2575 005a B918     		adds	r1, r7, r2
 2576 005c 11F80690 		ldrb	r9, [r1, r6]	@ zero_extendqisi2
 2577              	.LVL268:
 2578 0060 01E0     		b	.L108
 2579              	.LVL269:
 2580              	.L115:
 618:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       line = 0x0;
 2581              		.loc 1 618 0
 2582 0062 4FF00009 		mov	r9, #0
 2583              	.L108:
 2584              	.LVL270:
 2585              	.LBB65:
 627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           fillRect(x+(i*size), y+(j*size), size, size, color);
 2586              		.loc 1 627 0 discriminator 1
 2587 0066 4FFA88F3 		sxtb	r3, r8
 2588 006a 1FFA8AF0 		uxth	r0, sl
 2589 006e 9EB2     		uxth	r6, r3
 2590 0070 04FB0607 		mla	r7, r4, r6, r0
 2591 0074 0496     		str	r6, [sp, #16]
 2592 0076 1FFA8BF6 		uxth	r6, fp
 605:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 2593              		.loc 1 605 0 discriminator 1
 2594 007a 06F10801 		add	r1, r6, #8
 627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           fillRect(x+(i*size), y+(j*size), size, size, color);
 2595              		.loc 1 627 0 discriminator 1
 2596 007e BAB2     		uxth	r2, r7
 2597 0080 0390     		str	r0, [sp, #12]
 605:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 2598              		.loc 1 605 0 discriminator 1
 2599 0082 88B2     		uxth	r0, r1
 627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           fillRect(x+(i*size), y+(j*size), size, size, color);
 2600              		.loc 1 627 0 discriminator 1
 2601 0084 0892     		str	r2, [sp, #32]
 605:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 2602              		.loc 1 605 0 discriminator 1
 2603 0086 0B90     		str	r0, [sp, #44]
 2604              	.LBE65:
 2605 0088 3746     		mov	r7, r6
 2606 008a 0596     		str	r6, [sp, #20]
 2607              	.LVL271:
 2608              	.L113:
 2609              	.LBB66:
 623:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       if (line & 0x1) {
 2610              		.loc 1 623 0
 2611 008c 19F0010F 		tst	r9, #1
 2612 0090 19D0     		beq	.L109
 624:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         if (size == 1) // default size
 2613              		.loc 1 624 0
 2614 0092 012C     		cmp	r4, #1
 2615 0094 2A68     		ldr	r2, [r5, #0]
 2616 0096 0BD1     		bne	.L110
 625:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           drawPixel(x+i, y+j, color);
 2617              		.loc 1 625 0
 2618 0098 0498     		ldr	r0, [sp, #16]
 2619 009a DDF80CE0 		ldr	lr, [sp, #12]
 2620 009e D2F800C0 		ldr	ip, [r2, #0]
 2621 00a2 00EB0E03 		add	r3, r0, lr
 2622 00a6 19B2     		sxth	r1, r3
 2623 00a8 2846     		mov	r0, r5
 2624 00aa 3AB2     		sxth	r2, r7
 2625 00ac 069B     		ldr	r3, [sp, #24]
 2626 00ae 1CE0     		b	.L118
 2627              	.L110:
 627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           fillRect(x+(i*size), y+(j*size), size, size, color);
 2628              		.loc 1 627 0
 2629 00b0 0699     		ldr	r1, [sp, #24]
 2630 00b2 23B2     		sxth	r3, r4
 2631 00b4 0191     		str	r1, [sp, #4]
 2632 00b6 0093     		str	r3, [sp, #0]
 2633 00b8 D2F80CC0 		ldr	ip, [r2, #12]
 2634 00bc 089A     		ldr	r2, [sp, #32]
 2635 00be 2846     		mov	r0, r5
 2636 00c0 11B2     		sxth	r1, r2
 2637 00c2 32B2     		sxth	r2, r6
 2638 00c4 20E0     		b	.L119
 2639              	.L109:
 629:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       } else if (bg != color) {
 2640              		.loc 1 629 0
 2641 00c6 079B     		ldr	r3, [sp, #28]
 2642 00c8 069A     		ldr	r2, [sp, #24]
 2643 00ca 9342     		cmp	r3, r2
 2644 00cc 1DD0     		beq	.L111
 630:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****         if (size == 1) // default size
 2645              		.loc 1 630 0
 2646 00ce 012C     		cmp	r4, #1
 2647 00d0 2A68     		ldr	r2, [r5, #0]
 2648 00d2 0CD1     		bne	.L112
 631:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           drawPixel(x+i, y+j, bg);
 2649              		.loc 1 631 0
 2650 00d4 0498     		ldr	r0, [sp, #16]
 2651 00d6 DDF80CC0 		ldr	ip, [sp, #12]
 2652 00da 00EB0C03 		add	r3, r0, ip
 2653 00de 19B2     		sxth	r1, r3
 2654 00e0 079B     		ldr	r3, [sp, #28]
 2655 00e2 D2F800C0 		ldr	ip, [r2, #0]
 2656 00e6 2846     		mov	r0, r5
 2657 00e8 3AB2     		sxth	r2, r7
 2658              	.LVL272:
 2659              	.L118:
 2660 00ea E047     		blx	ip
 2661              	.LVL273:
 2662 00ec 0DE0     		b	.L111
 2663              	.L112:
 633:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****           fillRect(x+i*size, y+j*size, size, size, bg);
 2664              		.loc 1 633 0
 2665 00ee 0799     		ldr	r1, [sp, #28]
 2666 00f0 23B2     		sxth	r3, r4
 2667 00f2 0191     		str	r1, [sp, #4]
 2668 00f4 0093     		str	r3, [sp, #0]
 2669 00f6 D2F80CC0 		ldr	ip, [r2, #12]
 2670 00fa DDF814E0 		ldr	lr, [sp, #20]
 2671 00fe 089A     		ldr	r2, [sp, #32]
 2672 0100 2846     		mov	r0, r5
 2673 0102 11B2     		sxth	r1, r2
 2674 0104 0FFA8EF2 		sxth	r2, lr
 2675              	.LVL274:
 2676              	.L119:
 2677 0108 E047     		blx	ip
 2678              	.LVL275:
 2679              	.L111:
 2680 010a 0599     		ldr	r1, [sp, #20]
 2681 010c 0137     		adds	r7, r7, #1
 622:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     for (int8_t j = 0; j<8; j++) {
 2682              		.loc 1 622 0
 2683 010e 0B9B     		ldr	r3, [sp, #44]
 2684 0110 0A19     		adds	r2, r1, r4
 2685 0112 BFB2     		uxth	r7, r7
 2686 0114 3619     		adds	r6, r6, r4
 2687 0116 90B2     		uxth	r0, r2
 2688 0118 9F42     		cmp	r7, r3
 636:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       line >>= 1;
 2689              		.loc 1 636 0
 2690 011a 4FEA5909 		lsr	r9, r9, #1
 2691              	.LVL276:
 2692 011e B6B2     		uxth	r6, r6
 2693 0120 0590     		str	r0, [sp, #20]
 622:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     for (int8_t j = 0; j<8; j++) {
 2694              		.loc 1 622 0
 2695 0122 B3D1     		bne	.L113
 2696 0124 0999     		ldr	r1, [sp, #36]
 2697              	.LBE66:
 2698              	.LBE64:
 615:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   for (int8_t i=0; i<6; i++ ) {
 2699              		.loc 1 615 0
 2700 0126 08F10108 		add	r8, r8, #1
 2701 012a 4A1E     		subs	r2, r1, #1
 2702 012c 12F0FF00 		ands	r0, r2, #255
 2703 0130 5FFA88F8 		uxtb	r8, r8
 2704              	.LVL277:
 2705 0134 0990     		str	r0, [sp, #36]
 2706 0136 8AD1     		bne	.L114
 2707              	.LVL278:
 2708              	.L105:
 2709              	.LBE63:
 2710              	.LBE68:
 639:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 2711              		.loc 1 639 0
 2712 0138 0DB0     		add	sp, sp, #52
 2713 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2714              	.L121:
 2715 013e 00BF     		.align	2
 2716              	.L120:
 2717 0140 00000000 		.word	.LANCHOR0
 2718              		.cfi_endproc
 2719              	.LFE77:
 2721              		.section	.text._ZN11Arduino_GFX5writeEh,"ax",%progbits
 2722              		.align	1
 2723              		.global	_ZN11Arduino_GFX5writeEh
 2724              		.thumb
 2725              		.thumb_func
 2727              	_ZN11Arduino_GFX5writeEh:
 2728              	.LFB74:
 576:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** uint32_t Arduino_GFX::write(uint8_t c) {
 2729              		.loc 1 576 0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 0
 2732              		@ frame_needed = 0, uses_anonymous_args = 0
 2733              	.LVL279:
 2734 0000 30B5     		push	{r4, r5, lr}
 2735              	.LCFI29:
 2736              		.cfi_def_cfa_offset 12
 2737              		.cfi_offset 4, -12
 2738              		.cfi_offset 5, -8
 2739              		.cfi_offset 14, -4
 578:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (c == '\n') {
 2740              		.loc 1 578 0
 2741 0002 0A29     		cmp	r1, #10
 576:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** uint32_t Arduino_GFX::write(uint8_t c) {
 2742              		.loc 1 576 0
 2743 0004 85B0     		sub	sp, sp, #20
 2744              	.LCFI30:
 2745              		.cfi_def_cfa_offset 32
 576:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** uint32_t Arduino_GFX::write(uint8_t c) {
 2746              		.loc 1 576 0
 2747 0006 0446     		mov	r4, r0
 2748 0008 0B46     		mov	r3, r1
 578:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   if (c == '\n') {
 2749              		.loc 1 578 0
 2750 000a 04D1     		bne	.L123
 579:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     cursor_y += textsize*8;
 2751              		.loc 1 579 0
 2752 000c 007D     		ldrb	r0, [r0, #20]	@ zero_extendqisi2
 2753              	.LVL280:
 2754 000e E189     		ldrh	r1, [r4, #14]
 2755              	.LVL281:
 2756 0010 01EBC003 		add	r3, r1, r0, lsl #3
 2757 0014 22E0     		b	.L130
 2758              	.LVL282:
 2759              	.L123:
 581:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   } else if (c == '\r') {
 2760              		.loc 1 581 0
 2761 0016 0D29     		cmp	r1, #13
 2762 0018 23D0     		beq	.L124
 584:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 2763              		.loc 1 584 0
 2764 001a 058A     		ldrh	r5, [r0, #16]
 2765 001c B0F90C10 		ldrsh	r1, [r0, #12]
 2766              	.LVL283:
 2767 0020 B0F90E20 		ldrsh	r2, [r0, #14]
 2768 0024 0095     		str	r5, [sp, #0]
 2769 0026 458A     		ldrh	r5, [r0, #18]
 2770 0028 0195     		str	r5, [sp, #4]
 2771 002a 057D     		ldrb	r5, [r0, #20]	@ zero_extendqisi2
 2772 002c 0295     		str	r5, [sp, #8]
 2773 002e FFF7FEFF 		bl	_ZN11Arduino_GFX8drawCharEsshtth
 2774              	.LVL284:
 585:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     cursor_x += textsize*6;
 2775              		.loc 1 585 0
 2776 0032 A289     		ldrh	r2, [r4, #12]
 2777 0034 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 2778 0036 0621     		movs	r1, #6
 2779 0038 01FB0320 		mla	r0, r1, r3, r2
 586:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (wrap && (cursor_x > (_width - textsize*6))) {
 2780              		.loc 1 586 0
 2781 003c 617D     		ldrb	r1, [r4, #21]	@ zero_extendqisi2
 585:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     cursor_x += textsize*6;
 2782              		.loc 1 585 0
 2783 003e 82B2     		uxth	r2, r0
 2784 0040 A281     		strh	r2, [r4, #12]	@ movhi
 586:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (wrap && (cursor_x > (_width - textsize*6))) {
 2785              		.loc 1 586 0
 2786 0042 71B1     		cbz	r1, .L124
 586:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****     if (wrap && (cursor_x > (_width - textsize*6))) {
 2787              		.loc 1 586 0 is_stmt 0 discriminator 1
 2788 0044 B4F90810 		ldrsh	r1, [r4, #8]
 2789 0048 6FF00500 		mvn	r0, #5
 2790 004c 00FB0311 		mla	r1, r0, r3, r1
 2791 0050 12B2     		sxth	r2, r2
 2792 0052 8A42     		cmp	r2, r1
 2793 0054 05DD     		ble	.L124
 587:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       cursor_y += textsize*8;
 2794              		.loc 1 587 0 is_stmt 1
 2795 0056 E289     		ldrh	r2, [r4, #14]
 2796 0058 02EBC303 		add	r3, r2, r3, lsl #3
 2797              	.L130:
 588:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       cursor_x = 0;
 2798              		.loc 1 588 0
 2799 005c 0022     		movs	r2, #0
 587:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       cursor_y += textsize*8;
 2800              		.loc 1 587 0
 2801 005e E381     		strh	r3, [r4, #14]	@ movhi
 588:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****       cursor_x = 0;
 2802              		.loc 1 588 0
 2803 0060 A281     		strh	r2, [r4, #12]	@ movhi
 2804              	.L124:
 592:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 2805              		.loc 1 592 0
 2806 0062 0120     		movs	r0, #1
 2807 0064 05B0     		add	sp, sp, #20
 2808 0066 30BD     		pop	{r4, r5, pc}
 2809              		.cfi_endproc
 2810              	.LFE74:
 2812              		.section	.text._ZN11Arduino_GFX5printEPc,"ax",%progbits
 2813              		.align	1
 2814              		.global	_ZN11Arduino_GFX5printEPc
 2815              		.thumb
 2816              		.thumb_func
 2818              	_ZN11Arduino_GFX5printEPc:
 2819              	.LFB75:
 594:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::print(char *str) {
 2820              		.loc 1 594 0
 2821              		.cfi_startproc
 2822              		@ args = 0, pretend = 0, frame = 0
 2823              		@ frame_needed = 0, uses_anonymous_args = 0
 2824              	.LVL285:
 2825 0000 38B5     		push	{r3, r4, r5, lr}
 2826              	.LCFI31:
 2827              		.cfi_def_cfa_offset 16
 2828              		.cfi_offset 3, -16
 2829              		.cfi_offset 4, -12
 2830              		.cfi_offset 5, -8
 2831              		.cfi_offset 14, -4
 594:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::print(char *str) {
 2832              		.loc 1 594 0
 2833 0002 0546     		mov	r5, r0
 2834 0004 4C1E     		subs	r4, r1, #1
 2835              	.LVL286:
 2836              	.L132:
 595:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while(*str != 0x00) write((uint8_t)*(str++));
 2837              		.loc 1 595 0 discriminator 1
 2838 0006 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
 2839 000a 19B1     		cbz	r1, .L134
 2840              	.L133:
 595:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   while(*str != 0x00) write((uint8_t)*(str++));
 2841              		.loc 1 595 0 is_stmt 0 discriminator 2
 2842 000c 2846     		mov	r0, r5
 2843 000e FFF7FEFF 		bl	_ZN11Arduino_GFX5writeEh
 2844              	.LVL287:
 2845 0012 F8E7     		b	.L132
 2846              	.L134:
 596:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 2847              		.loc 1 596 0 is_stmt 1
 2848 0014 38BD     		pop	{r3, r4, r5, pc}
 2849              		.cfi_endproc
 2850              	.LFE75:
 2852              		.section	.text._ZN11Arduino_GFX7printlnEPc,"ax",%progbits
 2853              		.align	1
 2854              		.global	_ZN11Arduino_GFX7printlnEPc
 2855              		.thumb
 2856              		.thumb_func
 2858              	_ZN11Arduino_GFX7printlnEPc:
 2859              	.LFB76:
 598:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::println(char *str) {
 2860              		.loc 1 598 0
 2861              		.cfi_startproc
 2862              		@ args = 0, pretend = 0, frame = 0
 2863              		@ frame_needed = 0, uses_anonymous_args = 0
 2864              	.LVL288:
 2865 0000 10B5     		push	{r4, lr}
 2866              	.LCFI32:
 2867              		.cfi_def_cfa_offset 8
 2868              		.cfi_offset 4, -8
 2869              		.cfi_offset 14, -4
 598:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::println(char *str) {
 2870              		.loc 1 598 0
 2871 0002 0446     		mov	r4, r0
 599:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   print(str);
 2872              		.loc 1 599 0
 2873 0004 FFF7FEFF 		bl	_ZN11Arduino_GFX5printEPc
 2874              	.LVL289:
 600:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y += textsize*8;
 2875              		.loc 1 600 0
 2876 0008 E389     		ldrh	r3, [r4, #14]
 2877 000a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 601:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = 0;
 2878              		.loc 1 601 0
 2879 000c 0021     		movs	r1, #0
 600:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y += textsize*8;
 2880              		.loc 1 600 0
 2881 000e 03EBC200 		add	r0, r3, r2, lsl #3
 2882 0012 E081     		strh	r0, [r4, #14]	@ movhi
 601:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = 0;
 2883              		.loc 1 601 0
 2884 0014 A181     		strh	r1, [r4, #12]	@ movhi
 2885 0016 10BD     		pop	{r4, pc}
 2886              		.cfi_endproc
 2887              	.LFE76:
 2889              		.section	.text._ZN11Arduino_GFX9setCursorEss,"ax",%progbits
 2890              		.align	1
 2891              		.global	_ZN11Arduino_GFX9setCursorEss
 2892              		.thumb
 2893              		.thumb_func
 2895              	_ZN11Arduino_GFX9setCursorEss:
 2896              	.LFB78:
 641:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setCursor(int16_t x, int16_t y) {
 2897              		.loc 1 641 0
 2898              		.cfi_startproc
 2899              		@ args = 0, pretend = 0, frame = 0
 2900              		@ frame_needed = 0, uses_anonymous_args = 0
 2901              		@ link register save eliminated.
 2902              	.LVL290:
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = x;
 2903              		.loc 1 642 0
 2904 0000 8181     		strh	r1, [r0, #12]	@ movhi
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = y;
 2905              		.loc 1 643 0
 2906 0002 C281     		strh	r2, [r0, #14]	@ movhi
 2907 0004 7047     		bx	lr
 2908              		.cfi_endproc
 2909              	.LFE78:
 2911              		.section	.text._ZN11Arduino_GFX11setTextSizeEh,"ax",%progbits
 2912              		.align	1
 2913              		.global	_ZN11Arduino_GFX11setTextSizeEh
 2914              		.thumb
 2915              		.thumb_func
 2917              	_ZN11Arduino_GFX11setTextSizeEh:
 2918              	.LFB79:
 647:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setTextSize(uint8_t s) {
 2919              		.loc 1 647 0
 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 0
 2922              		@ frame_needed = 0, uses_anonymous_args = 0
 2923              		@ link register save eliminated.
 2924              	.LVL291:
 648:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textsize = (s > 0) ? s : 1;
 2925              		.loc 1 648 0
 2926 0000 0029     		cmp	r1, #0
 2927 0002 08BF     		it	eq
 2928 0004 0121     		moveq	r1, #1
 2929              	.LVL292:
 2930 0006 0175     		strb	r1, [r0, #20]
 2931 0008 7047     		bx	lr
 2932              		.cfi_endproc
 2933              	.LFE79:
 2935              		.section	.text._ZN11Arduino_GFX12setTextColorEt,"ax",%progbits
 2936              		.align	1
 2937              		.global	_ZN11Arduino_GFX12setTextColorEt
 2938              		.thumb
 2939              		.thumb_func
 2941              	_ZN11Arduino_GFX12setTextColorEt:
 2942              	.LFB80:
 652:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setTextColor(uint16_t c) {
 2943              		.loc 1 652 0
 2944              		.cfi_startproc
 2945              		@ args = 0, pretend = 0, frame = 0
 2946              		@ frame_needed = 0, uses_anonymous_args = 0
 2947              		@ link register save eliminated.
 2948              	.LVL293:
 653:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textcolor = c;
 2949              		.loc 1 653 0
 2950 0000 0182     		strh	r1, [r0, #16]	@ movhi
 654:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textbgcolor = c; 
 2951              		.loc 1 654 0
 2952 0002 4182     		strh	r1, [r0, #18]	@ movhi
 2953 0004 7047     		bx	lr
 2954              		.cfi_endproc
 2955              	.LFE80:
 2957              		.section	.text._ZN11Arduino_GFX12setTextColorEtt,"ax",%progbits
 2958              		.align	1
 2959              		.global	_ZN11Arduino_GFX12setTextColorEtt
 2960              		.thumb
 2961              		.thumb_func
 2963              	_ZN11Arduino_GFX12setTextColorEtt:
 2964              	.LFB81:
 659:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****  void Arduino_GFX::setTextColor(uint16_t c, uint16_t b) {
 2965              		.loc 1 659 0
 2966              		.cfi_startproc
 2967              		@ args = 0, pretend = 0, frame = 0
 2968              		@ frame_needed = 0, uses_anonymous_args = 0
 2969              		@ link register save eliminated.
 2970              	.LVL294:
 660:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****    textcolor = c;
 2971              		.loc 1 660 0
 2972 0000 0182     		strh	r1, [r0, #16]	@ movhi
 661:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****    textbgcolor = b; 
 2973              		.loc 1 661 0
 2974 0002 4282     		strh	r2, [r0, #18]	@ movhi
 2975 0004 7047     		bx	lr
 2976              		.cfi_endproc
 2977              	.LFE81:
 2979              		.section	.text._ZN11Arduino_GFX11setTextWrapEb,"ax",%progbits
 2980              		.align	1
 2981              		.global	_ZN11Arduino_GFX11setTextWrapEb
 2982              		.thumb
 2983              		.thumb_func
 2985              	_ZN11Arduino_GFX11setTextWrapEb:
 2986              	.LFB82:
 664:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_GFX::setTextWrap(bool w) {
 2987              		.loc 1 664 0
 2988              		.cfi_startproc
 2989              		@ args = 0, pretend = 0, frame = 0
 2990              		@ frame_needed = 0, uses_anonymous_args = 0
 2991              		@ link register save eliminated.
 2992              	.LVL295:
 665:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   wrap = w;
 2993              		.loc 1 665 0
 2994 0000 4175     		strb	r1, [r0, #21]
 2995 0002 7047     		bx	lr
 2996              		.cfi_endproc
 2997              	.LFE82:
 2999              		.section	.text._ZN11Arduino_GFX5widthEv,"ax",%progbits
 3000              		.align	1
 3001              		.global	_ZN11Arduino_GFX5widthEv
 3002              		.thumb
 3003              		.thumb_func
 3005              	_ZN11Arduino_GFX5widthEv:
 3006              	.LFB83:
 669:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** int16_t Arduino_GFX::width(void) { 
 3007              		.loc 1 669 0
 3008              		.cfi_startproc
 3009              		@ args = 0, pretend = 0, frame = 0
 3010              		@ frame_needed = 0, uses_anonymous_args = 0
 3011              		@ link register save eliminated.
 3012              	.LVL296:
 671:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3013              		.loc 1 671 0
 3014 0000 B0F90800 		ldrsh	r0, [r0, #8]
 3015              	.LVL297:
 3016 0004 7047     		bx	lr
 3017              		.cfi_endproc
 3018              	.LFE83:
 3020              		.section	.text._ZN11Arduino_GFX6heightEv,"ax",%progbits
 3021              		.align	1
 3022              		.global	_ZN11Arduino_GFX6heightEv
 3023              		.thumb
 3024              		.thumb_func
 3026              	_ZN11Arduino_GFX6heightEv:
 3027              	.LFB84:
 673:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** int16_t Arduino_GFX::height(void) { 
 3028              		.loc 1 673 0
 3029              		.cfi_startproc
 3030              		@ args = 0, pretend = 0, frame = 0
 3031              		@ frame_needed = 0, uses_anonymous_args = 0
 3032              		@ link register save eliminated.
 3033              	.LVL298:
 675:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3034              		.loc 1 675 0
 3035 0000 B0F90A00 		ldrsh	r0, [r0, #10]
 3036              	.LVL299:
 3037 0004 7047     		bx	lr
 3038              		.cfi_endproc
 3039              	.LFE84:
 3041              		.section	.text._ZN12Arduino_OLEDC2Ev,"ax",%progbits
 3042              		.align	1
 3043              		.global	_ZN12Arduino_OLEDC2Ev
 3044              		.thumb
 3045              		.thumb_func
 3047              	_ZN12Arduino_OLEDC2Ev:
 3048              	.LFB89:
 677:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** Arduino_OLED::Arduino_OLED() {
 3049              		.loc 1 677 0
 3050              		.cfi_startproc
 3051              		@ args = 0, pretend = 0, frame = 0
 3052              		@ frame_needed = 0, uses_anonymous_args = 0
 3053              		@ link register save eliminated.
 3054              	.LVL300:
 3055              	.LBB69:
 677:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** Arduino_OLED::Arduino_OLED() {
 3056              		.loc 1 677 0
 3057 0000 084A     		ldr	r2, .L145
 678:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   _width = WIDTH = 128;
 3058              		.loc 1 678 0
 3059 0002 8021     		movs	r1, #128
 677:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** Arduino_OLED::Arduino_OLED() {
 3060              		.loc 1 677 0
 3061 0004 0260     		str	r2, [r0, #0]
 681:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = cursor_x = 0;
 3062              		.loc 1 681 0
 3063 0006 0022     		movs	r2, #0
 678:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   _width = WIDTH = 128;
 3064              		.loc 1 678 0
 3065 0008 8180     		strh	r1, [r0, #4]	@ movhi
 3066 000a 0181     		strh	r1, [r0, #8]	@ movhi
 679:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   _height = HEIGHT = 128;
 3067              		.loc 1 679 0
 3068 000c C180     		strh	r1, [r0, #6]	@ movhi
 3069 000e 4181     		strh	r1, [r0, #10]	@ movhi
 681:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = cursor_x = 0;
 3070              		.loc 1 681 0
 3071 0010 8281     		strh	r2, [r0, #12]	@ movhi
 683:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textcolor = textbgcolor = 0xFFFF;
 3072              		.loc 1 683 0
 3073 0012 4FF6FF71 		movw	r1, #65535
 681:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = cursor_x = 0;
 3074              		.loc 1 681 0
 3075 0016 C281     		strh	r2, [r0, #14]	@ movhi
 682:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textsize = 1;
 3076              		.loc 1 682 0
 3077 0018 0122     		movs	r2, #1
 3078 001a 0275     		strb	r2, [r0, #20]
 683:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textcolor = textbgcolor = 0xFFFF;
 3079              		.loc 1 683 0
 3080 001c 4182     		strh	r1, [r0, #18]	@ movhi
 3081 001e 0182     		strh	r1, [r0, #16]	@ movhi
 684:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   wrap = true;
 3082              		.loc 1 684 0
 3083 0020 4275     		strb	r2, [r0, #21]
 3084              	.LBE69:
 685:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3085              		.loc 1 685 0
 3086 0022 7047     		bx	lr
 3087              	.L146:
 3088              		.align	2
 3089              	.L145:
 3090 0024 08000000 		.word	.LANCHOR1+8
 3091              		.cfi_endproc
 3092              	.LFE89:
 3094              		.global	_ZN12Arduino_OLEDC1Ev
 3095              		.thumb_set _ZN12Arduino_OLEDC1Ev,_ZN12Arduino_OLEDC2Ev
 3096              		.section	.text._ZN12Arduino_OLED5beginEv,"ax",%progbits
 3097              		.align	1
 3098              		.global	_ZN12Arduino_OLED5beginEv
 3099              		.thumb
 3100              		.thumb_func
 3102              	_ZN12Arduino_OLED5beginEv:
 3103              	.LFB91:
 687:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::begin() {
 3104              		.loc 1 687 0
 3105              		.cfi_startproc
 3106              		@ args = 0, pretend = 0, frame = 0
 3107              		@ frame_needed = 0, uses_anonymous_args = 0
 3108              		@ link register save eliminated.
 3109              	.LVL301:
 689:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3110              		.loc 1 689 0
 688:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_init();
 3111              		.loc 1 688 0
 3112 0000 FFF7FEBF 		b	oled_init
 3113              	.LVL302:
 3114              		.cfi_endproc
 3115              	.LFE91:
 3117              		.section	.text._ZN12Arduino_OLED8shutdownEv,"ax",%progbits
 3118              		.align	1
 3119              		.global	_ZN12Arduino_OLED8shutdownEv
 3120              		.thumb
 3121              		.thumb_func
 3123              	_ZN12Arduino_OLED8shutdownEv:
 3124              	.LFB92:
 691:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::shutdown() {
 3125              		.loc 1 691 0
 3126              		.cfi_startproc
 3127              		@ args = 0, pretend = 0, frame = 0
 3128              		@ frame_needed = 0, uses_anonymous_args = 0
 3129              		@ link register save eliminated.
 3130              	.LVL303:
 693:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3131              		.loc 1 693 0
 692:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_deinit();
 3132              		.loc 1 692 0
 3133 0000 FFF7FEBF 		b	oled_deinit
 3134              	.LVL304:
 3135              		.cfi_endproc
 3136              	.LFE92:
 3138              		.section	.text._ZN12Arduino_OLED8setPowerEh,"ax",%progbits
 3139              		.align	1
 3140              		.global	_ZN12Arduino_OLED8setPowerEh
 3141              		.thumb
 3142              		.thumb_func
 3144              	_ZN12Arduino_OLED8setPowerEh:
 3145              	.LFB93:
 695:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::setPower(uint8_t power) {
 3146              		.loc 1 695 0
 3147              		.cfi_startproc
 3148              		@ args = 0, pretend = 0, frame = 0
 3149              		@ frame_needed = 0, uses_anonymous_args = 0
 3150              		@ link register save eliminated.
 3151              	.LVL305:
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_power(power);
 3152              		.loc 1 696 0
 3153 0000 0846     		mov	r0, r1
 3154              	.LVL306:
 697:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3155              		.loc 1 697 0
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_power(power);
 3156              		.loc 1 696 0
 3157 0002 FFF7FEBF 		b	oled_power
 3158              	.LVL307:
 3159              		.cfi_endproc
 3160              	.LFE93:
 3162              		.section	.text._ZN12Arduino_OLED13setAddrWindowEhhhh,"ax",%progbits
 3163              		.align	1
 3164              		.global	_ZN12Arduino_OLED13setAddrWindowEhhhh
 3165              		.thumb
 3166              		.thumb_func
 3168              	_ZN12Arduino_OLED13setAddrWindowEhhhh:
 3169              	.LFB94:
 699:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 3170              		.loc 1 699 0
 3171              		.cfi_startproc
 3172              		@ args = 4, pretend = 0, frame = 0
 3173              		@ frame_needed = 0, uses_anonymous_args = 0
 3174              		@ link register save eliminated.
 3175              	.LVL308:
 700:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x0, y0, x1, y1);
 3176              		.loc 1 700 0
 3177 0000 0846     		mov	r0, r1
 3178              	.LVL309:
 3179 0002 1146     		mov	r1, r2
 3180              	.LVL310:
 3181 0004 1A46     		mov	r2, r3
 3182              	.LVL311:
 3183 0006 9DF80030 		ldrb	r3, [sp, #0]	@ zero_extendqisi2
 3184              	.LVL312:
 701:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3185              		.loc 1 701 0
 700:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_window(x0, y0, x1, y1);
 3186              		.loc 1 700 0
 3187 000a FFF7FEBF 		b	oled_window
 3188              	.LVL313:
 3189              		.cfi_endproc
 3190              	.LFE94:
 3192              		.section	.text._ZN12Arduino_OLED9pushColorEt,"ax",%progbits
 3193              		.align	1
 3194              		.global	_ZN12Arduino_OLED9pushColorEt
 3195              		.thumb
 3196              		.thumb_func
 3198              	_ZN12Arduino_OLED9pushColorEt:
 3199              	.LFB95:
 703:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** void Arduino_OLED::pushColor(uint16_t color) {
 3200              		.loc 1 703 0
 3201              		.cfi_startproc
 3202              		@ args = 0, pretend = 0, frame = 0
 3203              		@ frame_needed = 0, uses_anonymous_args = 0
 3204              		@ link register save eliminated.
 3205              	.LVL314:
 704:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 1);
 3206              		.loc 1 704 0
 3207 0000 0846     		mov	r0, r1
 3208              	.LVL315:
 3209 0002 0121     		movs	r1, #1
 3210              	.LVL316:
 705:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3211              		.loc 1 705 0
 704:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_push(color, 1);
 3212              		.loc 1 704 0
 3213 0004 FFF7FEBF 		b	oled_push
 3214              	.LVL317:
 3215              		.cfi_endproc
 3216              	.LFE95:
 3218              		.section	.text._ZN12Arduino_OLED8Color565Ehhh,"ax",%progbits
 3219              		.align	1
 3220              		.global	_ZN12Arduino_OLED8Color565Ehhh
 3221              		.thumb
 3222              		.thumb_func
 3224              	_ZN12Arduino_OLED8Color565Ehhh:
 3225              	.LFB101:
 731:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 732:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** uint16_t Arduino_OLED::Color565(uint8_t r, uint8_t g, uint8_t b) {
 3226              		.loc 1 732 0
 3227              		.cfi_startproc
 3228              		@ args = 0, pretend = 0, frame = 0
 3229              		@ frame_needed = 0, uses_anonymous_args = 0
 3230              		@ link register save eliminated.
 3231              	.LVL318:
 733:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 3232              		.loc 1 733 0
 3233 0000 02F0FC02 		and	r2, r2, #252
 3234              	.LVL319:
 3235 0004 DB08     		lsrs	r3, r3, #3
 3236              	.LVL320:
 3237 0006 43EAC200 		orr	r0, r3, r2, lsl #3
 3238              	.LVL321:
 3239 000a 01F0F801 		and	r1, r1, #248
 3240              	.LVL322:
 734:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** }
 3241              		.loc 1 734 0
 3242 000e 40EA0120 		orr	r0, r0, r1, lsl #8
 3243 0012 7047     		bx	lr
 3244              		.cfi_endproc
 3245              	.LFE101:
 3247              		.section	.text._Z4initv,"ax",%progbits
 3248              		.align	1
 3249              		.global	_Z4initv
 3250              		.thumb
 3251              		.thumb_func
 3253              	_Z4initv:
 3254              	.LFB111:
 3255              		.file 2 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/main.cpp"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** // Davey Taylor, Arduino Verkstad AB
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** // Sony SmartWatch startup procedure
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** // Include our drivers and libs
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** extern "C" {
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   #include "pins.h"
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   #include "driver_i2c.h"
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   #include "driver_adc.h"
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   #include "driver_display.h"
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   #include "driver_power.h"
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** }
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****  
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** // Include our Arduino style C++ objects
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** // This should eventually be moved to the makefile
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** #include "driver_display.cpp"
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** #include "driver_power.cpp"
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** // System initialization
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** void init() {
 3256              		.loc 2 19 0
 3257              		.cfi_startproc
 3258              		@ args = 0, pretend = 0, frame = 0
 3259              		@ frame_needed = 0, uses_anonymous_args = 0
 3260 0000 10B5     		push	{r4, lr}
 3261              	.LCFI33:
 3262              		.cfi_def_cfa_offset 8
 3263              		.cfi_offset 4, -8
 3264              		.cfi_offset 14, -4
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Tip from Sony:
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Prevents hard-faults when booting from USB
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   delay_loop(200000);
 3265              		.loc 2 22 0
 3266 0002 1A48     		ldr	r0, .L159
 3267 0004 FFF7FEFF 		bl	delay_loop
 3268              	.LVL323:
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Initializes all pins to their default settings (see pins.c)
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   initializePins();
 3269              		.loc 2 25 0
 3270 0008 FFF7FEFF 		bl	initializePins
 3271              	.LVL324:
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Tip from Sony:
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Not quite sure, but I believe a pullup on DP enables charging of a device even if
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // it does not do USB any communication by removing the pre-enum current limit
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   if(digitalRead(USB_CONNECTED)) pinMode(USB_DP, INPUT_PULLUP);
 3272              		.loc 2 30 0
 3273 000c 1848     		ldr	r0, .L159+4
 3274 000e FFF7FEFF 		bl	digitalRead
 3275              	.LVL325:
 3276 0012 18B1     		cbz	r0, .L154
 3277              		.loc 2 30 0 is_stmt 0 discriminator 1
 3278 0014 1748     		ldr	r0, .L159+8
 3279 0016 1849     		ldr	r1, .L159+12
 3280 0018 FFF7FEFF 		bl	pinMode
 3281              	.LVL326:
 3282              	.L154:
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Initialize system clocks
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   cpu_init();
 3283              		.loc 2 33 0 is_stmt 1
 3284 001c FFF7FEFF 		bl	cpu_init
 3285              	.LVL327:
 3286              	.LBB78:
 3287              	.LBB79:
 3288              		.file 3 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/pins.h"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** // Davey Taylor, Arduino Verkstad AB
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** // Platform configuration and Arduino internals
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #ifndef _PINS_H_
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #define _PINS_H_
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #include "stm32f2xx_gpio.h"
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #include <stdint.h>
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #include <stdbool.h>
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #define HIGH 1
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #define LOW 0
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** #define NO_CHANGE -1
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** typedef struct {
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   GPIOMode_TypeDef  mode;  // operating mode @ref GPIOMode_TypeDef
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   GPIOSpeed_TypeDef speed; // speed @ref GPIOSpeed_TypeDef
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   GPIOOType_TypeDef type;  // output type @ref GPIOOType_TypeDef
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   GPIOPuPd_TypeDef  pupd;  // pull-up/down @ref GPIOPuPd_TypeDef
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   uint8_t af;              // alternate function
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   int16_t set;             // pin setting
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** } PinCfg_t;
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** typedef struct {
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   GPIO_TypeDef *port; // Pin port
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   uint32_t pin;       // Pin mask @ref GPIO_pins_define
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   uint8_t  source;    // Pin number @ref GPIO_Pin_sources 
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   uint32_t clock;     // clock source
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   const PinCfg_t *cfg;      // Default configuration
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** } PinDef_t;
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t INPUT;
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t INPUT_PULLDOWN;
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t INPUT_PULLUP;
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t ANALOG_INPUT;
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t OUTPUT;
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t OUTPUT_HIGH;
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t OUTPUT_LOW;
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t AF_SPI1;
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinCfg_t AF_MCO1;
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA0 ;
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA1 ;
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA2 ;
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA4 ;
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA5 ;
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA7 ;
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA8 ;
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA9 ;
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA11;
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA12;
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PA15;
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB0 ;
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB1 ;
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB2 ;
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB3 ;
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB4 ;
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB5 ;
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB6 ;
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB7 ;
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB8 ;
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB9 ;
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB10;
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB11;
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB12;
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB13;
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB14;
  67:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PB15; 
  68:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC0 ;
  69:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC1 ;
  70:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC3 ;
  71:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC4 ;
  72:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC6 ;
  73:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC7 ;
  74:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC9 ;
  75:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC10;
  76:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC11;
  77:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC12; 
  78:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern const PinDef_t PIN_PC13;
  79:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  80:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** void pinMode(const PinDef_t *pin, const PinCfg_t *cfg);
  81:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** void initializePins(void);
  82:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** void digitalWrite(const PinDef_t *pin, uint8_t value);
  83:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** uint8_t digitalRead(const PinDef_t *pin);
  84:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  85:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** extern volatile uint16_t int_ctr;
  86:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** 
  87:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** // Nested interrupt enable
  88:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void cli(void) {
  89:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   __ASM volatile ("cpsid i");
 3289              		.loc 3 89 0
 3290              	@ 89 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/pins.h" 1
 3291 0020 72B6     		cpsid i
 3292              	@ 0 "" 2
  90:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   int_ctr++;
 3293              		.loc 3 90 0
 3294              		.thumb
 3295 0022 164C     		ldr	r4, .L159+16
 3296 0024 2388     		ldrh	r3, [r4, #0]
 3297 0026 581C     		adds	r0, r3, #1
 3298 0028 81B2     		uxth	r1, r0
 3299              	.LVL328:
 3300 002a 2180     		strh	r1, [r4, #0]	@ movhi
 3301              	.LBE79:
 3302              	.LBE78:
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Disable interrupts until we are done setting everything up
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   cli();
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Start system tick (used for timing, delay, etc)
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   SystemCoreClockUpdate();
 3303              		.loc 2 39 0
 3304 002c FFF7FEFF 		bl	SystemCoreClockUpdate
 3305              	.LVL329:
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   SysTick_Config(SystemCoreClock / 1000);
 3306              		.loc 2 40 0
 3307 0030 134A     		ldr	r2, .L159+20
 3308              	.LVL330:
 3309 0032 4FF47A73 		mov	r3, #1000
 3310 0036 1068     		ldr	r0, [r2, #0]
 3311 0038 B0FBF3F1 		udiv	r1, r0, r3
 3312              	.LVL331:
 3313              	.LBB80:
 3314              	.LBB81:
 3315              		.file 4 "src/libstm32f2/core_cm3.h"
   1:src/libstm32f2/core_cm3.h **** /**************************************************************************//**
   2:src/libstm32f2/core_cm3.h ****  * @file     core_cm3.h
   3:src/libstm32f2/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:src/libstm32f2/core_cm3.h ****  * @version  V3.01
   5:src/libstm32f2/core_cm3.h ****  * @date     22. March 2012
   6:src/libstm32f2/core_cm3.h ****  *
   7:src/libstm32f2/core_cm3.h ****  * @note
   8:src/libstm32f2/core_cm3.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:src/libstm32f2/core_cm3.h ****  *
  10:src/libstm32f2/core_cm3.h ****  * @par
  11:src/libstm32f2/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:src/libstm32f2/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:src/libstm32f2/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:src/libstm32f2/core_cm3.h ****  *
  15:src/libstm32f2/core_cm3.h ****  * @par
  16:src/libstm32f2/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:src/libstm32f2/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:src/libstm32f2/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:src/libstm32f2/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:src/libstm32f2/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:src/libstm32f2/core_cm3.h ****  *
  22:src/libstm32f2/core_cm3.h ****  ******************************************************************************/
  23:src/libstm32f2/core_cm3.h **** #if defined ( __ICCARM__ )
  24:src/libstm32f2/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:src/libstm32f2/core_cm3.h **** #endif
  26:src/libstm32f2/core_cm3.h **** 
  27:src/libstm32f2/core_cm3.h **** #ifdef __cplusplus
  28:src/libstm32f2/core_cm3.h ****  extern "C" {
  29:src/libstm32f2/core_cm3.h **** #endif
  30:src/libstm32f2/core_cm3.h **** 
  31:src/libstm32f2/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:src/libstm32f2/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:src/libstm32f2/core_cm3.h **** 
  34:src/libstm32f2/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  35:src/libstm32f2/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  36:src/libstm32f2/core_cm3.h **** 
  37:src/libstm32f2/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  38:src/libstm32f2/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  39:src/libstm32f2/core_cm3.h **** 
  40:src/libstm32f2/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  41:src/libstm32f2/core_cm3.h ****      Unions are used for effective representation of core registers.
  42:src/libstm32f2/core_cm3.h **** 
  43:src/libstm32f2/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  44:src/libstm32f2/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  45:src/libstm32f2/core_cm3.h ****  */
  46:src/libstm32f2/core_cm3.h **** 
  47:src/libstm32f2/core_cm3.h **** 
  48:src/libstm32f2/core_cm3.h **** /*******************************************************************************
  49:src/libstm32f2/core_cm3.h ****  *                 CMSIS definitions
  50:src/libstm32f2/core_cm3.h ****  ******************************************************************************/
  51:src/libstm32f2/core_cm3.h **** /** \ingroup Cortex_M3
  52:src/libstm32f2/core_cm3.h ****   @{
  53:src/libstm32f2/core_cm3.h ****  */
  54:src/libstm32f2/core_cm3.h **** 
  55:src/libstm32f2/core_cm3.h **** /*  CMSIS CM3 definitions */
  56:src/libstm32f2/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  57:src/libstm32f2/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x01)                                   /*!< [15:0]  CMSIS HAL s
  58:src/libstm32f2/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  59:src/libstm32f2/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  60:src/libstm32f2/core_cm3.h **** 
  61:src/libstm32f2/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  62:src/libstm32f2/core_cm3.h **** 
  63:src/libstm32f2/core_cm3.h **** 
  64:src/libstm32f2/core_cm3.h **** #if   defined ( __CC_ARM )
  65:src/libstm32f2/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:src/libstm32f2/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:src/libstm32f2/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  68:src/libstm32f2/core_cm3.h **** 
  69:src/libstm32f2/core_cm3.h **** #elif defined ( __ICCARM__ )
  70:src/libstm32f2/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  71:src/libstm32f2/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  72:src/libstm32f2/core_cm3.h ****   #define __STATIC_INLINE  static inline
  73:src/libstm32f2/core_cm3.h **** 
  74:src/libstm32f2/core_cm3.h **** #elif defined ( __TMS470__ )
  75:src/libstm32f2/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  76:src/libstm32f2/core_cm3.h ****   #define __STATIC_INLINE  static inline
  77:src/libstm32f2/core_cm3.h **** 
  78:src/libstm32f2/core_cm3.h **** #elif defined ( __GNUC__ )
  79:src/libstm32f2/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  80:src/libstm32f2/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  81:src/libstm32f2/core_cm3.h ****   #define __STATIC_INLINE  static inline
  82:src/libstm32f2/core_cm3.h **** 
  83:src/libstm32f2/core_cm3.h **** #elif defined ( __TASKING__ )
  84:src/libstm32f2/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  85:src/libstm32f2/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  86:src/libstm32f2/core_cm3.h ****   #define __STATIC_INLINE  static inline
  87:src/libstm32f2/core_cm3.h **** 
  88:src/libstm32f2/core_cm3.h **** #endif
  89:src/libstm32f2/core_cm3.h **** 
  90:src/libstm32f2/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
  91:src/libstm32f2/core_cm3.h **** */
  92:src/libstm32f2/core_cm3.h **** #define __FPU_USED       0
  93:src/libstm32f2/core_cm3.h **** 
  94:src/libstm32f2/core_cm3.h **** #if defined ( __CC_ARM )
  95:src/libstm32f2/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  96:src/libstm32f2/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  97:src/libstm32f2/core_cm3.h ****   #endif
  98:src/libstm32f2/core_cm3.h **** 
  99:src/libstm32f2/core_cm3.h **** #elif defined ( __ICCARM__ )
 100:src/libstm32f2/core_cm3.h ****   #if defined __ARMVFP__
 101:src/libstm32f2/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:src/libstm32f2/core_cm3.h ****   #endif
 103:src/libstm32f2/core_cm3.h **** 
 104:src/libstm32f2/core_cm3.h **** #elif defined ( __TMS470__ )
 105:src/libstm32f2/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 106:src/libstm32f2/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 107:src/libstm32f2/core_cm3.h ****   #endif
 108:src/libstm32f2/core_cm3.h **** 
 109:src/libstm32f2/core_cm3.h **** #elif defined ( __GNUC__ )
 110:src/libstm32f2/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 111:src/libstm32f2/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:src/libstm32f2/core_cm3.h ****   #endif
 113:src/libstm32f2/core_cm3.h **** 
 114:src/libstm32f2/core_cm3.h **** #elif defined ( __TASKING__ )
 115:src/libstm32f2/core_cm3.h ****   #if defined __FPU_VFP__
 116:src/libstm32f2/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 117:src/libstm32f2/core_cm3.h ****   #endif
 118:src/libstm32f2/core_cm3.h **** #endif
 119:src/libstm32f2/core_cm3.h **** 
 120:src/libstm32f2/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 121:src/libstm32f2/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 122:src/libstm32f2/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 123:src/libstm32f2/core_cm3.h **** 
 124:src/libstm32f2/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 125:src/libstm32f2/core_cm3.h **** 
 126:src/libstm32f2/core_cm3.h **** #ifndef __CMSIS_GENERIC
 127:src/libstm32f2/core_cm3.h **** 
 128:src/libstm32f2/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 129:src/libstm32f2/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 130:src/libstm32f2/core_cm3.h **** 
 131:src/libstm32f2/core_cm3.h **** /* check device defines and use defaults */
 132:src/libstm32f2/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 133:src/libstm32f2/core_cm3.h ****   #ifndef __CM3_REV
 134:src/libstm32f2/core_cm3.h ****     #define __CM3_REV               0x0200
 135:src/libstm32f2/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 136:src/libstm32f2/core_cm3.h ****   #endif
 137:src/libstm32f2/core_cm3.h **** 
 138:src/libstm32f2/core_cm3.h ****   #ifndef __MPU_PRESENT
 139:src/libstm32f2/core_cm3.h ****     #define __MPU_PRESENT             0
 140:src/libstm32f2/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 141:src/libstm32f2/core_cm3.h ****   #endif
 142:src/libstm32f2/core_cm3.h **** 
 143:src/libstm32f2/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 144:src/libstm32f2/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 145:src/libstm32f2/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 146:src/libstm32f2/core_cm3.h ****   #endif
 147:src/libstm32f2/core_cm3.h **** 
 148:src/libstm32f2/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 149:src/libstm32f2/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 150:src/libstm32f2/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 151:src/libstm32f2/core_cm3.h ****   #endif
 152:src/libstm32f2/core_cm3.h **** #endif
 153:src/libstm32f2/core_cm3.h **** 
 154:src/libstm32f2/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 155:src/libstm32f2/core_cm3.h **** /**
 156:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 157:src/libstm32f2/core_cm3.h **** 
 158:src/libstm32f2/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 159:src/libstm32f2/core_cm3.h ****     \li to specify the access to peripheral variables.
 160:src/libstm32f2/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 161:src/libstm32f2/core_cm3.h **** */
 162:src/libstm32f2/core_cm3.h **** #ifdef __cplusplus
 163:src/libstm32f2/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 164:src/libstm32f2/core_cm3.h **** #else
 165:src/libstm32f2/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 166:src/libstm32f2/core_cm3.h **** #endif
 167:src/libstm32f2/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 168:src/libstm32f2/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 169:src/libstm32f2/core_cm3.h **** 
 170:src/libstm32f2/core_cm3.h **** /*@} end of group Cortex_M3 */
 171:src/libstm32f2/core_cm3.h **** 
 172:src/libstm32f2/core_cm3.h **** 
 173:src/libstm32f2/core_cm3.h **** 
 174:src/libstm32f2/core_cm3.h **** /*******************************************************************************
 175:src/libstm32f2/core_cm3.h ****  *                 Register Abstraction
 176:src/libstm32f2/core_cm3.h ****   Core Register contain:
 177:src/libstm32f2/core_cm3.h ****   - Core Register
 178:src/libstm32f2/core_cm3.h ****   - Core NVIC Register
 179:src/libstm32f2/core_cm3.h ****   - Core SCB Register
 180:src/libstm32f2/core_cm3.h ****   - Core SysTick Register
 181:src/libstm32f2/core_cm3.h ****   - Core Debug Register
 182:src/libstm32f2/core_cm3.h ****   - Core MPU Register
 183:src/libstm32f2/core_cm3.h ****  ******************************************************************************/
 184:src/libstm32f2/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 185:src/libstm32f2/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 186:src/libstm32f2/core_cm3.h **** */
 187:src/libstm32f2/core_cm3.h **** 
 188:src/libstm32f2/core_cm3.h **** /** \ingroup    CMSIS_core_register
 189:src/libstm32f2/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 190:src/libstm32f2/core_cm3.h ****     \brief  Core Register type definitions.
 191:src/libstm32f2/core_cm3.h ****   @{
 192:src/libstm32f2/core_cm3.h ****  */
 193:src/libstm32f2/core_cm3.h **** 
 194:src/libstm32f2/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 195:src/libstm32f2/core_cm3.h ****  */
 196:src/libstm32f2/core_cm3.h **** typedef union
 197:src/libstm32f2/core_cm3.h **** {
 198:src/libstm32f2/core_cm3.h ****   struct
 199:src/libstm32f2/core_cm3.h ****   {
 200:src/libstm32f2/core_cm3.h **** #if (__CORTEX_M != 0x04)
 201:src/libstm32f2/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 202:src/libstm32f2/core_cm3.h **** #else
 203:src/libstm32f2/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 204:src/libstm32f2/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 205:src/libstm32f2/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 206:src/libstm32f2/core_cm3.h **** #endif
 207:src/libstm32f2/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 208:src/libstm32f2/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 209:src/libstm32f2/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 210:src/libstm32f2/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 211:src/libstm32f2/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 212:src/libstm32f2/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 213:src/libstm32f2/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 214:src/libstm32f2/core_cm3.h **** } APSR_Type;
 215:src/libstm32f2/core_cm3.h **** 
 216:src/libstm32f2/core_cm3.h **** 
 217:src/libstm32f2/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 218:src/libstm32f2/core_cm3.h ****  */
 219:src/libstm32f2/core_cm3.h **** typedef union
 220:src/libstm32f2/core_cm3.h **** {
 221:src/libstm32f2/core_cm3.h ****   struct
 222:src/libstm32f2/core_cm3.h ****   {
 223:src/libstm32f2/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 224:src/libstm32f2/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 225:src/libstm32f2/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 226:src/libstm32f2/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 227:src/libstm32f2/core_cm3.h **** } IPSR_Type;
 228:src/libstm32f2/core_cm3.h **** 
 229:src/libstm32f2/core_cm3.h **** 
 230:src/libstm32f2/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 231:src/libstm32f2/core_cm3.h ****  */
 232:src/libstm32f2/core_cm3.h **** typedef union
 233:src/libstm32f2/core_cm3.h **** {
 234:src/libstm32f2/core_cm3.h ****   struct
 235:src/libstm32f2/core_cm3.h ****   {
 236:src/libstm32f2/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 237:src/libstm32f2/core_cm3.h **** #if (__CORTEX_M != 0x04)
 238:src/libstm32f2/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 239:src/libstm32f2/core_cm3.h **** #else
 240:src/libstm32f2/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 241:src/libstm32f2/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 242:src/libstm32f2/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 243:src/libstm32f2/core_cm3.h **** #endif
 244:src/libstm32f2/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 245:src/libstm32f2/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 246:src/libstm32f2/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 247:src/libstm32f2/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 248:src/libstm32f2/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 249:src/libstm32f2/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 250:src/libstm32f2/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 251:src/libstm32f2/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 252:src/libstm32f2/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 253:src/libstm32f2/core_cm3.h **** } xPSR_Type;
 254:src/libstm32f2/core_cm3.h **** 
 255:src/libstm32f2/core_cm3.h **** 
 256:src/libstm32f2/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 257:src/libstm32f2/core_cm3.h ****  */
 258:src/libstm32f2/core_cm3.h **** typedef union
 259:src/libstm32f2/core_cm3.h **** {
 260:src/libstm32f2/core_cm3.h ****   struct
 261:src/libstm32f2/core_cm3.h ****   {
 262:src/libstm32f2/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 263:src/libstm32f2/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 264:src/libstm32f2/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 265:src/libstm32f2/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 266:src/libstm32f2/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:src/libstm32f2/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:src/libstm32f2/core_cm3.h **** } CONTROL_Type;
 269:src/libstm32f2/core_cm3.h **** 
 270:src/libstm32f2/core_cm3.h **** /*@} end of group CMSIS_CORE */
 271:src/libstm32f2/core_cm3.h **** 
 272:src/libstm32f2/core_cm3.h **** 
 273:src/libstm32f2/core_cm3.h **** /** \ingroup    CMSIS_core_register
 274:src/libstm32f2/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 275:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 276:src/libstm32f2/core_cm3.h ****   @{
 277:src/libstm32f2/core_cm3.h ****  */
 278:src/libstm32f2/core_cm3.h **** 
 279:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 280:src/libstm32f2/core_cm3.h ****  */
 281:src/libstm32f2/core_cm3.h **** typedef struct
 282:src/libstm32f2/core_cm3.h **** {
 283:src/libstm32f2/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 284:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED0[24];
 285:src/libstm32f2/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 286:src/libstm32f2/core_cm3.h ****        uint32_t RSERVED1[24];
 287:src/libstm32f2/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 288:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED2[24];
 289:src/libstm32f2/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 290:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED3[24];
 291:src/libstm32f2/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 292:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED4[56];
 293:src/libstm32f2/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 294:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED5[644];
 295:src/libstm32f2/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 296:src/libstm32f2/core_cm3.h **** }  NVIC_Type;
 297:src/libstm32f2/core_cm3.h **** 
 298:src/libstm32f2/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 299:src/libstm32f2/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 300:src/libstm32f2/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 301:src/libstm32f2/core_cm3.h **** 
 302:src/libstm32f2/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 303:src/libstm32f2/core_cm3.h **** 
 304:src/libstm32f2/core_cm3.h **** 
 305:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
 306:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 307:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 308:src/libstm32f2/core_cm3.h ****   @{
 309:src/libstm32f2/core_cm3.h ****  */
 310:src/libstm32f2/core_cm3.h **** 
 311:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 312:src/libstm32f2/core_cm3.h ****  */
 313:src/libstm32f2/core_cm3.h **** typedef struct
 314:src/libstm32f2/core_cm3.h **** {
 315:src/libstm32f2/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 316:src/libstm32f2/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 317:src/libstm32f2/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 318:src/libstm32f2/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 319:src/libstm32f2/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 320:src/libstm32f2/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 321:src/libstm32f2/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 322:src/libstm32f2/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 323:src/libstm32f2/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 324:src/libstm32f2/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 325:src/libstm32f2/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 326:src/libstm32f2/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 327:src/libstm32f2/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 328:src/libstm32f2/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 329:src/libstm32f2/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 330:src/libstm32f2/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 331:src/libstm32f2/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 332:src/libstm32f2/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 333:src/libstm32f2/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 334:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED0[5];
 335:src/libstm32f2/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 336:src/libstm32f2/core_cm3.h **** } SCB_Type;
 337:src/libstm32f2/core_cm3.h **** 
 338:src/libstm32f2/core_cm3.h **** /* SCB CPUID Register Definitions */
 339:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 340:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 341:src/libstm32f2/core_cm3.h **** 
 342:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 343:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 344:src/libstm32f2/core_cm3.h **** 
 345:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 346:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 347:src/libstm32f2/core_cm3.h **** 
 348:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 349:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 350:src/libstm32f2/core_cm3.h **** 
 351:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 352:src/libstm32f2/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 353:src/libstm32f2/core_cm3.h **** 
 354:src/libstm32f2/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 355:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 356:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 357:src/libstm32f2/core_cm3.h **** 
 358:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 359:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 360:src/libstm32f2/core_cm3.h **** 
 361:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 362:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 363:src/libstm32f2/core_cm3.h **** 
 364:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 365:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 366:src/libstm32f2/core_cm3.h **** 
 367:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 368:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 369:src/libstm32f2/core_cm3.h **** 
 370:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 371:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 372:src/libstm32f2/core_cm3.h **** 
 373:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 374:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 375:src/libstm32f2/core_cm3.h **** 
 376:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 377:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 378:src/libstm32f2/core_cm3.h **** 
 379:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 380:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 381:src/libstm32f2/core_cm3.h **** 
 382:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 383:src/libstm32f2/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 384:src/libstm32f2/core_cm3.h **** 
 385:src/libstm32f2/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 386:src/libstm32f2/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 387:src/libstm32f2/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 388:src/libstm32f2/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 389:src/libstm32f2/core_cm3.h **** 
 390:src/libstm32f2/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 391:src/libstm32f2/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 392:src/libstm32f2/core_cm3.h **** #else
 393:src/libstm32f2/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 394:src/libstm32f2/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 395:src/libstm32f2/core_cm3.h **** #endif
 396:src/libstm32f2/core_cm3.h **** 
 397:src/libstm32f2/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 398:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 399:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 400:src/libstm32f2/core_cm3.h **** 
 401:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 402:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 403:src/libstm32f2/core_cm3.h **** 
 404:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 405:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 406:src/libstm32f2/core_cm3.h **** 
 407:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 408:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 409:src/libstm32f2/core_cm3.h **** 
 410:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 411:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 412:src/libstm32f2/core_cm3.h **** 
 413:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 414:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 415:src/libstm32f2/core_cm3.h **** 
 416:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 417:src/libstm32f2/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 418:src/libstm32f2/core_cm3.h **** 
 419:src/libstm32f2/core_cm3.h **** /* SCB System Control Register Definitions */
 420:src/libstm32f2/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 421:src/libstm32f2/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 422:src/libstm32f2/core_cm3.h **** 
 423:src/libstm32f2/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 424:src/libstm32f2/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 425:src/libstm32f2/core_cm3.h **** 
 426:src/libstm32f2/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 427:src/libstm32f2/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 428:src/libstm32f2/core_cm3.h **** 
 429:src/libstm32f2/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 430:src/libstm32f2/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 431:src/libstm32f2/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 432:src/libstm32f2/core_cm3.h **** 
 433:src/libstm32f2/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 434:src/libstm32f2/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 435:src/libstm32f2/core_cm3.h **** 
 436:src/libstm32f2/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 437:src/libstm32f2/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 438:src/libstm32f2/core_cm3.h **** 
 439:src/libstm32f2/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 440:src/libstm32f2/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 441:src/libstm32f2/core_cm3.h **** 
 442:src/libstm32f2/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 443:src/libstm32f2/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 444:src/libstm32f2/core_cm3.h **** 
 445:src/libstm32f2/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 446:src/libstm32f2/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 447:src/libstm32f2/core_cm3.h **** 
 448:src/libstm32f2/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 449:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 450:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 451:src/libstm32f2/core_cm3.h **** 
 452:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 453:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 454:src/libstm32f2/core_cm3.h **** 
 455:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 456:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 457:src/libstm32f2/core_cm3.h **** 
 458:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 459:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 460:src/libstm32f2/core_cm3.h **** 
 461:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 462:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 463:src/libstm32f2/core_cm3.h **** 
 464:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 465:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 466:src/libstm32f2/core_cm3.h **** 
 467:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 468:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 469:src/libstm32f2/core_cm3.h **** 
 470:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 471:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 472:src/libstm32f2/core_cm3.h **** 
 473:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 474:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 475:src/libstm32f2/core_cm3.h **** 
 476:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 477:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 478:src/libstm32f2/core_cm3.h **** 
 479:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 480:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 481:src/libstm32f2/core_cm3.h **** 
 482:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 483:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 484:src/libstm32f2/core_cm3.h **** 
 485:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 486:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 487:src/libstm32f2/core_cm3.h **** 
 488:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 489:src/libstm32f2/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 490:src/libstm32f2/core_cm3.h **** 
 491:src/libstm32f2/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 492:src/libstm32f2/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 493:src/libstm32f2/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 494:src/libstm32f2/core_cm3.h **** 
 495:src/libstm32f2/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 496:src/libstm32f2/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 497:src/libstm32f2/core_cm3.h **** 
 498:src/libstm32f2/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 499:src/libstm32f2/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 500:src/libstm32f2/core_cm3.h **** 
 501:src/libstm32f2/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 502:src/libstm32f2/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 503:src/libstm32f2/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 504:src/libstm32f2/core_cm3.h **** 
 505:src/libstm32f2/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 506:src/libstm32f2/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 507:src/libstm32f2/core_cm3.h **** 
 508:src/libstm32f2/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 509:src/libstm32f2/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 510:src/libstm32f2/core_cm3.h **** 
 511:src/libstm32f2/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 512:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 513:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 514:src/libstm32f2/core_cm3.h **** 
 515:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 516:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 517:src/libstm32f2/core_cm3.h **** 
 518:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 519:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 520:src/libstm32f2/core_cm3.h **** 
 521:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 522:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 523:src/libstm32f2/core_cm3.h **** 
 524:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 525:src/libstm32f2/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 526:src/libstm32f2/core_cm3.h **** 
 527:src/libstm32f2/core_cm3.h **** /*@} end of group CMSIS_SCB */
 528:src/libstm32f2/core_cm3.h **** 
 529:src/libstm32f2/core_cm3.h **** 
 530:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
 531:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 532:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 533:src/libstm32f2/core_cm3.h ****   @{
 534:src/libstm32f2/core_cm3.h ****  */
 535:src/libstm32f2/core_cm3.h **** 
 536:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 537:src/libstm32f2/core_cm3.h ****  */
 538:src/libstm32f2/core_cm3.h **** typedef struct
 539:src/libstm32f2/core_cm3.h **** {
 540:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED0[1];
 541:src/libstm32f2/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 542:src/libstm32f2/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 543:src/libstm32f2/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 544:src/libstm32f2/core_cm3.h **** #else
 545:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED1[1];
 546:src/libstm32f2/core_cm3.h **** #endif
 547:src/libstm32f2/core_cm3.h **** } SCnSCB_Type;
 548:src/libstm32f2/core_cm3.h **** 
 549:src/libstm32f2/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 550:src/libstm32f2/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 551:src/libstm32f2/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 552:src/libstm32f2/core_cm3.h **** 
 553:src/libstm32f2/core_cm3.h **** /* Auxiliary Control Register Definitions */
 554:src/libstm32f2/core_cm3.h **** 
 555:src/libstm32f2/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 556:src/libstm32f2/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 557:src/libstm32f2/core_cm3.h **** 
 558:src/libstm32f2/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 559:src/libstm32f2/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 560:src/libstm32f2/core_cm3.h **** 
 561:src/libstm32f2/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 562:src/libstm32f2/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 563:src/libstm32f2/core_cm3.h **** 
 564:src/libstm32f2/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 565:src/libstm32f2/core_cm3.h **** 
 566:src/libstm32f2/core_cm3.h **** 
 567:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
 568:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 569:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 570:src/libstm32f2/core_cm3.h ****   @{
 571:src/libstm32f2/core_cm3.h ****  */
 572:src/libstm32f2/core_cm3.h **** 
 573:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 574:src/libstm32f2/core_cm3.h ****  */
 575:src/libstm32f2/core_cm3.h **** typedef struct
 576:src/libstm32f2/core_cm3.h **** {
 577:src/libstm32f2/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 578:src/libstm32f2/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 579:src/libstm32f2/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 580:src/libstm32f2/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 581:src/libstm32f2/core_cm3.h **** } SysTick_Type;
 582:src/libstm32f2/core_cm3.h **** 
 583:src/libstm32f2/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 584:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 585:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 586:src/libstm32f2/core_cm3.h **** 
 587:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 588:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 589:src/libstm32f2/core_cm3.h **** 
 590:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 591:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 592:src/libstm32f2/core_cm3.h **** 
 593:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 594:src/libstm32f2/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 595:src/libstm32f2/core_cm3.h **** 
 596:src/libstm32f2/core_cm3.h **** /* SysTick Reload Register Definitions */
 597:src/libstm32f2/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 598:src/libstm32f2/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 599:src/libstm32f2/core_cm3.h **** 
 600:src/libstm32f2/core_cm3.h **** /* SysTick Current Register Definitions */
 601:src/libstm32f2/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 602:src/libstm32f2/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 603:src/libstm32f2/core_cm3.h **** 
 604:src/libstm32f2/core_cm3.h **** /* SysTick Calibration Register Definitions */
 605:src/libstm32f2/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 606:src/libstm32f2/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 607:src/libstm32f2/core_cm3.h **** 
 608:src/libstm32f2/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 609:src/libstm32f2/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 610:src/libstm32f2/core_cm3.h **** 
 611:src/libstm32f2/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 612:src/libstm32f2/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 613:src/libstm32f2/core_cm3.h **** 
 614:src/libstm32f2/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 615:src/libstm32f2/core_cm3.h **** 
 616:src/libstm32f2/core_cm3.h **** 
 617:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
 618:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 619:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 620:src/libstm32f2/core_cm3.h ****   @{
 621:src/libstm32f2/core_cm3.h ****  */
 622:src/libstm32f2/core_cm3.h **** 
 623:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 624:src/libstm32f2/core_cm3.h ****  */
 625:src/libstm32f2/core_cm3.h **** typedef struct
 626:src/libstm32f2/core_cm3.h **** {
 627:src/libstm32f2/core_cm3.h ****   __O  union
 628:src/libstm32f2/core_cm3.h ****   {
 629:src/libstm32f2/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 630:src/libstm32f2/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 631:src/libstm32f2/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 632:src/libstm32f2/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 633:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED0[864];
 634:src/libstm32f2/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 635:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED1[15];
 636:src/libstm32f2/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 637:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED2[15];
 638:src/libstm32f2/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 639:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 640:src/libstm32f2/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 641:src/libstm32f2/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 642:src/libstm32f2/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 643:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 644:src/libstm32f2/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 645:src/libstm32f2/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 646:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 647:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 648:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 649:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 650:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 651:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 652:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 653:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 654:src/libstm32f2/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 655:src/libstm32f2/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 656:src/libstm32f2/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 657:src/libstm32f2/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 658:src/libstm32f2/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 659:src/libstm32f2/core_cm3.h **** } ITM_Type;
 660:src/libstm32f2/core_cm3.h **** 
 661:src/libstm32f2/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 662:src/libstm32f2/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 663:src/libstm32f2/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 664:src/libstm32f2/core_cm3.h **** 
 665:src/libstm32f2/core_cm3.h **** /* ITM Trace Control Register Definitions */
 666:src/libstm32f2/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 667:src/libstm32f2/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 668:src/libstm32f2/core_cm3.h **** 
 669:src/libstm32f2/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 670:src/libstm32f2/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 671:src/libstm32f2/core_cm3.h **** 
 672:src/libstm32f2/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 673:src/libstm32f2/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 674:src/libstm32f2/core_cm3.h **** 
 675:src/libstm32f2/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 676:src/libstm32f2/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 677:src/libstm32f2/core_cm3.h **** 
 678:src/libstm32f2/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 679:src/libstm32f2/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 680:src/libstm32f2/core_cm3.h **** 
 681:src/libstm32f2/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 682:src/libstm32f2/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 683:src/libstm32f2/core_cm3.h **** 
 684:src/libstm32f2/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 685:src/libstm32f2/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 686:src/libstm32f2/core_cm3.h **** 
 687:src/libstm32f2/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 688:src/libstm32f2/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 689:src/libstm32f2/core_cm3.h **** 
 690:src/libstm32f2/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 691:src/libstm32f2/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 692:src/libstm32f2/core_cm3.h **** 
 693:src/libstm32f2/core_cm3.h **** /* ITM Integration Write Register Definitions */
 694:src/libstm32f2/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 695:src/libstm32f2/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 696:src/libstm32f2/core_cm3.h **** 
 697:src/libstm32f2/core_cm3.h **** /* ITM Integration Read Register Definitions */
 698:src/libstm32f2/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 699:src/libstm32f2/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 700:src/libstm32f2/core_cm3.h **** 
 701:src/libstm32f2/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 702:src/libstm32f2/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 703:src/libstm32f2/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 704:src/libstm32f2/core_cm3.h **** 
 705:src/libstm32f2/core_cm3.h **** /* ITM Lock Status Register Definitions */
 706:src/libstm32f2/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 707:src/libstm32f2/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 708:src/libstm32f2/core_cm3.h **** 
 709:src/libstm32f2/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 710:src/libstm32f2/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 711:src/libstm32f2/core_cm3.h **** 
 712:src/libstm32f2/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 713:src/libstm32f2/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 714:src/libstm32f2/core_cm3.h **** 
 715:src/libstm32f2/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 716:src/libstm32f2/core_cm3.h **** 
 717:src/libstm32f2/core_cm3.h **** 
 718:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
 719:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 720:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 721:src/libstm32f2/core_cm3.h ****   @{
 722:src/libstm32f2/core_cm3.h ****  */
 723:src/libstm32f2/core_cm3.h **** 
 724:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 725:src/libstm32f2/core_cm3.h ****  */
 726:src/libstm32f2/core_cm3.h **** typedef struct
 727:src/libstm32f2/core_cm3.h **** {
 728:src/libstm32f2/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 729:src/libstm32f2/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 730:src/libstm32f2/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 731:src/libstm32f2/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 732:src/libstm32f2/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 733:src/libstm32f2/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 734:src/libstm32f2/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 735:src/libstm32f2/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 736:src/libstm32f2/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 737:src/libstm32f2/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 738:src/libstm32f2/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 739:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED0[1];
 740:src/libstm32f2/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 741:src/libstm32f2/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 742:src/libstm32f2/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 743:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED1[1];
 744:src/libstm32f2/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 745:src/libstm32f2/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 746:src/libstm32f2/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 747:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED2[1];
 748:src/libstm32f2/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 749:src/libstm32f2/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 750:src/libstm32f2/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 751:src/libstm32f2/core_cm3.h **** } DWT_Type;
 752:src/libstm32f2/core_cm3.h **** 
 753:src/libstm32f2/core_cm3.h **** /* DWT Control Register Definitions */
 754:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 755:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 756:src/libstm32f2/core_cm3.h **** 
 757:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 758:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 759:src/libstm32f2/core_cm3.h **** 
 760:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 761:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 762:src/libstm32f2/core_cm3.h **** 
 763:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 764:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 765:src/libstm32f2/core_cm3.h **** 
 766:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 767:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 768:src/libstm32f2/core_cm3.h **** 
 769:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 770:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 771:src/libstm32f2/core_cm3.h **** 
 772:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 773:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 774:src/libstm32f2/core_cm3.h **** 
 775:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 776:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 777:src/libstm32f2/core_cm3.h **** 
 778:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 779:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 780:src/libstm32f2/core_cm3.h **** 
 781:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 782:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 783:src/libstm32f2/core_cm3.h **** 
 784:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 785:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 786:src/libstm32f2/core_cm3.h **** 
 787:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 788:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 789:src/libstm32f2/core_cm3.h **** 
 790:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 791:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 792:src/libstm32f2/core_cm3.h **** 
 793:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 794:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 795:src/libstm32f2/core_cm3.h **** 
 796:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 797:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 798:src/libstm32f2/core_cm3.h **** 
 799:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 800:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 801:src/libstm32f2/core_cm3.h **** 
 802:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 803:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 804:src/libstm32f2/core_cm3.h **** 
 805:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 806:src/libstm32f2/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 807:src/libstm32f2/core_cm3.h **** 
 808:src/libstm32f2/core_cm3.h **** /* DWT CPI Count Register Definitions */
 809:src/libstm32f2/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 810:src/libstm32f2/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 811:src/libstm32f2/core_cm3.h **** 
 812:src/libstm32f2/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 813:src/libstm32f2/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 814:src/libstm32f2/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 815:src/libstm32f2/core_cm3.h **** 
 816:src/libstm32f2/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 817:src/libstm32f2/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 818:src/libstm32f2/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 819:src/libstm32f2/core_cm3.h **** 
 820:src/libstm32f2/core_cm3.h **** /* DWT LSU Count Register Definitions */
 821:src/libstm32f2/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 822:src/libstm32f2/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 823:src/libstm32f2/core_cm3.h **** 
 824:src/libstm32f2/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 825:src/libstm32f2/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 826:src/libstm32f2/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 827:src/libstm32f2/core_cm3.h **** 
 828:src/libstm32f2/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 829:src/libstm32f2/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 830:src/libstm32f2/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 831:src/libstm32f2/core_cm3.h **** 
 832:src/libstm32f2/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 833:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 834:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 835:src/libstm32f2/core_cm3.h **** 
 836:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 837:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 838:src/libstm32f2/core_cm3.h **** 
 839:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 840:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 841:src/libstm32f2/core_cm3.h **** 
 842:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 843:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 844:src/libstm32f2/core_cm3.h **** 
 845:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 846:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 847:src/libstm32f2/core_cm3.h **** 
 848:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 849:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 850:src/libstm32f2/core_cm3.h **** 
 851:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 852:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 853:src/libstm32f2/core_cm3.h **** 
 854:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 855:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 856:src/libstm32f2/core_cm3.h **** 
 857:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 858:src/libstm32f2/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 859:src/libstm32f2/core_cm3.h **** 
 860:src/libstm32f2/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 861:src/libstm32f2/core_cm3.h **** 
 862:src/libstm32f2/core_cm3.h **** 
 863:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
 864:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 865:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 866:src/libstm32f2/core_cm3.h ****   @{
 867:src/libstm32f2/core_cm3.h ****  */
 868:src/libstm32f2/core_cm3.h **** 
 869:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 870:src/libstm32f2/core_cm3.h ****  */
 871:src/libstm32f2/core_cm3.h **** typedef struct
 872:src/libstm32f2/core_cm3.h **** {
 873:src/libstm32f2/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 874:src/libstm32f2/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 875:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED0[2];
 876:src/libstm32f2/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 877:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED1[55];
 878:src/libstm32f2/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 879:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED2[131];
 880:src/libstm32f2/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 881:src/libstm32f2/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 882:src/libstm32f2/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 883:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED3[759];
 884:src/libstm32f2/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 885:src/libstm32f2/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 886:src/libstm32f2/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 887:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED4[1];
 888:src/libstm32f2/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 889:src/libstm32f2/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 890:src/libstm32f2/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 891:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED5[39];
 892:src/libstm32f2/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 893:src/libstm32f2/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 894:src/libstm32f2/core_cm3.h ****        uint32_t RESERVED7[8];
 895:src/libstm32f2/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 896:src/libstm32f2/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 897:src/libstm32f2/core_cm3.h **** } TPI_Type;
 898:src/libstm32f2/core_cm3.h **** 
 899:src/libstm32f2/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 900:src/libstm32f2/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 901:src/libstm32f2/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 902:src/libstm32f2/core_cm3.h **** 
 903:src/libstm32f2/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 904:src/libstm32f2/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 905:src/libstm32f2/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 906:src/libstm32f2/core_cm3.h **** 
 907:src/libstm32f2/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 908:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 909:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 910:src/libstm32f2/core_cm3.h **** 
 911:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 912:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 913:src/libstm32f2/core_cm3.h **** 
 914:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 915:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 916:src/libstm32f2/core_cm3.h **** 
 917:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 918:src/libstm32f2/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 919:src/libstm32f2/core_cm3.h **** 
 920:src/libstm32f2/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 921:src/libstm32f2/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 922:src/libstm32f2/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 923:src/libstm32f2/core_cm3.h **** 
 924:src/libstm32f2/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 925:src/libstm32f2/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 926:src/libstm32f2/core_cm3.h **** 
 927:src/libstm32f2/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 928:src/libstm32f2/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 929:src/libstm32f2/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 930:src/libstm32f2/core_cm3.h **** 
 931:src/libstm32f2/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 932:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 933:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 934:src/libstm32f2/core_cm3.h **** 
 935:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 936:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 937:src/libstm32f2/core_cm3.h **** 
 938:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 939:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 940:src/libstm32f2/core_cm3.h **** 
 941:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 942:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 943:src/libstm32f2/core_cm3.h **** 
 944:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 945:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 946:src/libstm32f2/core_cm3.h **** 
 947:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 948:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 949:src/libstm32f2/core_cm3.h **** 
 950:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 951:src/libstm32f2/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 952:src/libstm32f2/core_cm3.h **** 
 953:src/libstm32f2/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 954:src/libstm32f2/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 955:src/libstm32f2/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 956:src/libstm32f2/core_cm3.h **** 
 957:src/libstm32f2/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 958:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 959:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 960:src/libstm32f2/core_cm3.h **** 
 961:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 962:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 963:src/libstm32f2/core_cm3.h **** 
 964:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 965:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 966:src/libstm32f2/core_cm3.h **** 
 967:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 968:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 969:src/libstm32f2/core_cm3.h **** 
 970:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 971:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 972:src/libstm32f2/core_cm3.h **** 
 973:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 974:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 975:src/libstm32f2/core_cm3.h **** 
 976:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 977:src/libstm32f2/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 978:src/libstm32f2/core_cm3.h **** 
 979:src/libstm32f2/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 980:src/libstm32f2/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 981:src/libstm32f2/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 982:src/libstm32f2/core_cm3.h **** 
 983:src/libstm32f2/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 984:src/libstm32f2/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
 985:src/libstm32f2/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
 986:src/libstm32f2/core_cm3.h **** 
 987:src/libstm32f2/core_cm3.h **** /* TPI DEVID Register Definitions */
 988:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
 989:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
 990:src/libstm32f2/core_cm3.h **** 
 991:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
 992:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
 993:src/libstm32f2/core_cm3.h **** 
 994:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
 995:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
 996:src/libstm32f2/core_cm3.h **** 
 997:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
 998:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
 999:src/libstm32f2/core_cm3.h **** 
1000:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1001:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1002:src/libstm32f2/core_cm3.h **** 
1003:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1004:src/libstm32f2/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1005:src/libstm32f2/core_cm3.h **** 
1006:src/libstm32f2/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1007:src/libstm32f2/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1008:src/libstm32f2/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1009:src/libstm32f2/core_cm3.h **** 
1010:src/libstm32f2/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1011:src/libstm32f2/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1012:src/libstm32f2/core_cm3.h **** 
1013:src/libstm32f2/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1014:src/libstm32f2/core_cm3.h **** 
1015:src/libstm32f2/core_cm3.h **** 
1016:src/libstm32f2/core_cm3.h **** #if (__MPU_PRESENT == 1)
1017:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
1018:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1019:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1020:src/libstm32f2/core_cm3.h ****   @{
1021:src/libstm32f2/core_cm3.h ****  */
1022:src/libstm32f2/core_cm3.h **** 
1023:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1024:src/libstm32f2/core_cm3.h ****  */
1025:src/libstm32f2/core_cm3.h **** typedef struct
1026:src/libstm32f2/core_cm3.h **** {
1027:src/libstm32f2/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1028:src/libstm32f2/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1029:src/libstm32f2/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1030:src/libstm32f2/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1031:src/libstm32f2/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1032:src/libstm32f2/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1033:src/libstm32f2/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1034:src/libstm32f2/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1035:src/libstm32f2/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1036:src/libstm32f2/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1037:src/libstm32f2/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1038:src/libstm32f2/core_cm3.h **** } MPU_Type;
1039:src/libstm32f2/core_cm3.h **** 
1040:src/libstm32f2/core_cm3.h **** /* MPU Type Register */
1041:src/libstm32f2/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1042:src/libstm32f2/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1043:src/libstm32f2/core_cm3.h **** 
1044:src/libstm32f2/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1045:src/libstm32f2/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1046:src/libstm32f2/core_cm3.h **** 
1047:src/libstm32f2/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1048:src/libstm32f2/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1049:src/libstm32f2/core_cm3.h **** 
1050:src/libstm32f2/core_cm3.h **** /* MPU Control Register */
1051:src/libstm32f2/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1052:src/libstm32f2/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1053:src/libstm32f2/core_cm3.h **** 
1054:src/libstm32f2/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1055:src/libstm32f2/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1056:src/libstm32f2/core_cm3.h **** 
1057:src/libstm32f2/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1058:src/libstm32f2/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1059:src/libstm32f2/core_cm3.h **** 
1060:src/libstm32f2/core_cm3.h **** /* MPU Region Number Register */
1061:src/libstm32f2/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1062:src/libstm32f2/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1063:src/libstm32f2/core_cm3.h **** 
1064:src/libstm32f2/core_cm3.h **** /* MPU Region Base Address Register */
1065:src/libstm32f2/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1066:src/libstm32f2/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1067:src/libstm32f2/core_cm3.h **** 
1068:src/libstm32f2/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1069:src/libstm32f2/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1070:src/libstm32f2/core_cm3.h **** 
1071:src/libstm32f2/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1072:src/libstm32f2/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1073:src/libstm32f2/core_cm3.h **** 
1074:src/libstm32f2/core_cm3.h **** /* MPU Region Attribute and Size Register */
1075:src/libstm32f2/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1076:src/libstm32f2/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1077:src/libstm32f2/core_cm3.h **** 
1078:src/libstm32f2/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1079:src/libstm32f2/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1080:src/libstm32f2/core_cm3.h **** 
1081:src/libstm32f2/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1082:src/libstm32f2/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1083:src/libstm32f2/core_cm3.h **** 
1084:src/libstm32f2/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1085:src/libstm32f2/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1086:src/libstm32f2/core_cm3.h **** 
1087:src/libstm32f2/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1088:src/libstm32f2/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1089:src/libstm32f2/core_cm3.h **** 
1090:src/libstm32f2/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1091:src/libstm32f2/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1092:src/libstm32f2/core_cm3.h **** 
1093:src/libstm32f2/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1094:src/libstm32f2/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1095:src/libstm32f2/core_cm3.h **** 
1096:src/libstm32f2/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1097:src/libstm32f2/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1098:src/libstm32f2/core_cm3.h **** 
1099:src/libstm32f2/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1100:src/libstm32f2/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1101:src/libstm32f2/core_cm3.h **** 
1102:src/libstm32f2/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1103:src/libstm32f2/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1104:src/libstm32f2/core_cm3.h **** 
1105:src/libstm32f2/core_cm3.h **** /*@} end of group CMSIS_MPU */
1106:src/libstm32f2/core_cm3.h **** #endif
1107:src/libstm32f2/core_cm3.h **** 
1108:src/libstm32f2/core_cm3.h **** 
1109:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_core_register
1110:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1111:src/libstm32f2/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1112:src/libstm32f2/core_cm3.h ****   @{
1113:src/libstm32f2/core_cm3.h ****  */
1114:src/libstm32f2/core_cm3.h **** 
1115:src/libstm32f2/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1116:src/libstm32f2/core_cm3.h ****  */
1117:src/libstm32f2/core_cm3.h **** typedef struct
1118:src/libstm32f2/core_cm3.h **** {
1119:src/libstm32f2/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1120:src/libstm32f2/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1121:src/libstm32f2/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1122:src/libstm32f2/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1123:src/libstm32f2/core_cm3.h **** } CoreDebug_Type;
1124:src/libstm32f2/core_cm3.h **** 
1125:src/libstm32f2/core_cm3.h **** /* Debug Halting Control and Status Register */
1126:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1127:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1128:src/libstm32f2/core_cm3.h **** 
1129:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1130:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1131:src/libstm32f2/core_cm3.h **** 
1132:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1133:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1134:src/libstm32f2/core_cm3.h **** 
1135:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1136:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1137:src/libstm32f2/core_cm3.h **** 
1138:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1139:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1140:src/libstm32f2/core_cm3.h **** 
1141:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1142:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1143:src/libstm32f2/core_cm3.h **** 
1144:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1145:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1146:src/libstm32f2/core_cm3.h **** 
1147:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1148:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1149:src/libstm32f2/core_cm3.h **** 
1150:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1151:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1152:src/libstm32f2/core_cm3.h **** 
1153:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1154:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1155:src/libstm32f2/core_cm3.h **** 
1156:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1157:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1158:src/libstm32f2/core_cm3.h **** 
1159:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1160:src/libstm32f2/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1161:src/libstm32f2/core_cm3.h **** 
1162:src/libstm32f2/core_cm3.h **** /* Debug Core Register Selector Register */
1163:src/libstm32f2/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1164:src/libstm32f2/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1165:src/libstm32f2/core_cm3.h **** 
1166:src/libstm32f2/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1167:src/libstm32f2/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1168:src/libstm32f2/core_cm3.h **** 
1169:src/libstm32f2/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1170:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1171:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1172:src/libstm32f2/core_cm3.h **** 
1173:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1174:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1175:src/libstm32f2/core_cm3.h **** 
1176:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1177:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1178:src/libstm32f2/core_cm3.h **** 
1179:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1180:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1181:src/libstm32f2/core_cm3.h **** 
1182:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1183:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1184:src/libstm32f2/core_cm3.h **** 
1185:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1186:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1187:src/libstm32f2/core_cm3.h **** 
1188:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1189:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1190:src/libstm32f2/core_cm3.h **** 
1191:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1192:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1193:src/libstm32f2/core_cm3.h **** 
1194:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1195:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1196:src/libstm32f2/core_cm3.h **** 
1197:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1198:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1199:src/libstm32f2/core_cm3.h **** 
1200:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1201:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1202:src/libstm32f2/core_cm3.h **** 
1203:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1204:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1205:src/libstm32f2/core_cm3.h **** 
1206:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1207:src/libstm32f2/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1208:src/libstm32f2/core_cm3.h **** 
1209:src/libstm32f2/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1210:src/libstm32f2/core_cm3.h **** 
1211:src/libstm32f2/core_cm3.h **** 
1212:src/libstm32f2/core_cm3.h **** /** \ingroup    CMSIS_core_register
1213:src/libstm32f2/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1214:src/libstm32f2/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1215:src/libstm32f2/core_cm3.h ****   @{
1216:src/libstm32f2/core_cm3.h ****  */
1217:src/libstm32f2/core_cm3.h **** 
1218:src/libstm32f2/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1219:src/libstm32f2/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1220:src/libstm32f2/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1221:src/libstm32f2/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1222:src/libstm32f2/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1223:src/libstm32f2/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1224:src/libstm32f2/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1225:src/libstm32f2/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1226:src/libstm32f2/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1227:src/libstm32f2/core_cm3.h **** 
1228:src/libstm32f2/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1229:src/libstm32f2/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1230:src/libstm32f2/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1231:src/libstm32f2/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1232:src/libstm32f2/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1233:src/libstm32f2/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1234:src/libstm32f2/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1235:src/libstm32f2/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1236:src/libstm32f2/core_cm3.h **** 
1237:src/libstm32f2/core_cm3.h **** #if (__MPU_PRESENT == 1)
1238:src/libstm32f2/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1239:src/libstm32f2/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1240:src/libstm32f2/core_cm3.h **** #endif
1241:src/libstm32f2/core_cm3.h **** 
1242:src/libstm32f2/core_cm3.h **** /*@} */
1243:src/libstm32f2/core_cm3.h **** 
1244:src/libstm32f2/core_cm3.h **** 
1245:src/libstm32f2/core_cm3.h **** 
1246:src/libstm32f2/core_cm3.h **** /*******************************************************************************
1247:src/libstm32f2/core_cm3.h ****  *                Hardware Abstraction Layer
1248:src/libstm32f2/core_cm3.h ****   Core Function Interface contains:
1249:src/libstm32f2/core_cm3.h ****   - Core NVIC Functions
1250:src/libstm32f2/core_cm3.h ****   - Core SysTick Functions
1251:src/libstm32f2/core_cm3.h ****   - Core Debug Functions
1252:src/libstm32f2/core_cm3.h ****   - Core Register Access Functions
1253:src/libstm32f2/core_cm3.h ****  ******************************************************************************/
1254:src/libstm32f2/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1255:src/libstm32f2/core_cm3.h **** */
1256:src/libstm32f2/core_cm3.h **** 
1257:src/libstm32f2/core_cm3.h **** 
1258:src/libstm32f2/core_cm3.h **** 
1259:src/libstm32f2/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1260:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1261:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1262:src/libstm32f2/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1263:src/libstm32f2/core_cm3.h ****     @{
1264:src/libstm32f2/core_cm3.h ****  */
1265:src/libstm32f2/core_cm3.h **** 
1266:src/libstm32f2/core_cm3.h **** /** \brief  Set Priority Grouping
1267:src/libstm32f2/core_cm3.h **** 
1268:src/libstm32f2/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1269:src/libstm32f2/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1270:src/libstm32f2/core_cm3.h ****   Only values from 0..7 are used.
1271:src/libstm32f2/core_cm3.h ****   In case of a conflict between priority grouping and available
1272:src/libstm32f2/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1273:src/libstm32f2/core_cm3.h **** 
1274:src/libstm32f2/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1275:src/libstm32f2/core_cm3.h ****  */
1276:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1277:src/libstm32f2/core_cm3.h **** {
1278:src/libstm32f2/core_cm3.h ****   uint32_t reg_value;
1279:src/libstm32f2/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1280:src/libstm32f2/core_cm3.h **** 
1281:src/libstm32f2/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1282:src/libstm32f2/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1283:src/libstm32f2/core_cm3.h ****   reg_value  =  (reg_value                                 |
1284:src/libstm32f2/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1285:src/libstm32f2/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1286:src/libstm32f2/core_cm3.h ****   SCB->AIRCR =  reg_value;
1287:src/libstm32f2/core_cm3.h **** }
1288:src/libstm32f2/core_cm3.h **** 
1289:src/libstm32f2/core_cm3.h **** 
1290:src/libstm32f2/core_cm3.h **** /** \brief  Get Priority Grouping
1291:src/libstm32f2/core_cm3.h **** 
1292:src/libstm32f2/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1293:src/libstm32f2/core_cm3.h **** 
1294:src/libstm32f2/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1295:src/libstm32f2/core_cm3.h ****  */
1296:src/libstm32f2/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1297:src/libstm32f2/core_cm3.h **** {
1298:src/libstm32f2/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1299:src/libstm32f2/core_cm3.h **** }
1300:src/libstm32f2/core_cm3.h **** 
1301:src/libstm32f2/core_cm3.h **** 
1302:src/libstm32f2/core_cm3.h **** /** \brief  Enable External Interrupt
1303:src/libstm32f2/core_cm3.h **** 
1304:src/libstm32f2/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1305:src/libstm32f2/core_cm3.h **** 
1306:src/libstm32f2/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1307:src/libstm32f2/core_cm3.h ****  */
1308:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1309:src/libstm32f2/core_cm3.h **** {
1310:src/libstm32f2/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1311:src/libstm32f2/core_cm3.h **** }
1312:src/libstm32f2/core_cm3.h **** 
1313:src/libstm32f2/core_cm3.h **** 
1314:src/libstm32f2/core_cm3.h **** /** \brief  Disable External Interrupt
1315:src/libstm32f2/core_cm3.h **** 
1316:src/libstm32f2/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1317:src/libstm32f2/core_cm3.h **** 
1318:src/libstm32f2/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1319:src/libstm32f2/core_cm3.h ****  */
1320:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1321:src/libstm32f2/core_cm3.h **** {
1322:src/libstm32f2/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1323:src/libstm32f2/core_cm3.h **** }
1324:src/libstm32f2/core_cm3.h **** 
1325:src/libstm32f2/core_cm3.h **** 
1326:src/libstm32f2/core_cm3.h **** /** \brief  Get Pending Interrupt
1327:src/libstm32f2/core_cm3.h **** 
1328:src/libstm32f2/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1329:src/libstm32f2/core_cm3.h ****     for the specified interrupt.
1330:src/libstm32f2/core_cm3.h **** 
1331:src/libstm32f2/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1332:src/libstm32f2/core_cm3.h **** 
1333:src/libstm32f2/core_cm3.h ****     \return             0  Interrupt status is not pending.
1334:src/libstm32f2/core_cm3.h ****     \return             1  Interrupt status is pending.
1335:src/libstm32f2/core_cm3.h ****  */
1336:src/libstm32f2/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1337:src/libstm32f2/core_cm3.h **** {
1338:src/libstm32f2/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1339:src/libstm32f2/core_cm3.h **** }
1340:src/libstm32f2/core_cm3.h **** 
1341:src/libstm32f2/core_cm3.h **** 
1342:src/libstm32f2/core_cm3.h **** /** \brief  Set Pending Interrupt
1343:src/libstm32f2/core_cm3.h **** 
1344:src/libstm32f2/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1345:src/libstm32f2/core_cm3.h **** 
1346:src/libstm32f2/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1347:src/libstm32f2/core_cm3.h ****  */
1348:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1349:src/libstm32f2/core_cm3.h **** {
1350:src/libstm32f2/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1351:src/libstm32f2/core_cm3.h **** }
1352:src/libstm32f2/core_cm3.h **** 
1353:src/libstm32f2/core_cm3.h **** 
1354:src/libstm32f2/core_cm3.h **** /** \brief  Clear Pending Interrupt
1355:src/libstm32f2/core_cm3.h **** 
1356:src/libstm32f2/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1357:src/libstm32f2/core_cm3.h **** 
1358:src/libstm32f2/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1359:src/libstm32f2/core_cm3.h ****  */
1360:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1361:src/libstm32f2/core_cm3.h **** {
1362:src/libstm32f2/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1363:src/libstm32f2/core_cm3.h **** }
1364:src/libstm32f2/core_cm3.h **** 
1365:src/libstm32f2/core_cm3.h **** 
1366:src/libstm32f2/core_cm3.h **** /** \brief  Get Active Interrupt
1367:src/libstm32f2/core_cm3.h **** 
1368:src/libstm32f2/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1369:src/libstm32f2/core_cm3.h **** 
1370:src/libstm32f2/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1371:src/libstm32f2/core_cm3.h **** 
1372:src/libstm32f2/core_cm3.h ****     \return             0  Interrupt status is not active.
1373:src/libstm32f2/core_cm3.h ****     \return             1  Interrupt status is active.
1374:src/libstm32f2/core_cm3.h ****  */
1375:src/libstm32f2/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1376:src/libstm32f2/core_cm3.h **** {
1377:src/libstm32f2/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1378:src/libstm32f2/core_cm3.h **** }
1379:src/libstm32f2/core_cm3.h **** 
1380:src/libstm32f2/core_cm3.h **** 
1381:src/libstm32f2/core_cm3.h **** /** \brief  Set Interrupt Priority
1382:src/libstm32f2/core_cm3.h **** 
1383:src/libstm32f2/core_cm3.h ****     The function sets the priority of an interrupt.
1384:src/libstm32f2/core_cm3.h **** 
1385:src/libstm32f2/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1386:src/libstm32f2/core_cm3.h **** 
1387:src/libstm32f2/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1388:src/libstm32f2/core_cm3.h ****     \param [in]  priority  Priority to set.
1389:src/libstm32f2/core_cm3.h ****  */
1390:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1391:src/libstm32f2/core_cm3.h **** {
1392:src/libstm32f2/core_cm3.h ****   if(IRQn < 0) {
1393:src/libstm32f2/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1394:src/libstm32f2/core_cm3.h ****   else {
1395:src/libstm32f2/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1396:src/libstm32f2/core_cm3.h **** }
1397:src/libstm32f2/core_cm3.h **** 
1398:src/libstm32f2/core_cm3.h **** 
1399:src/libstm32f2/core_cm3.h **** /** \brief  Get Interrupt Priority
1400:src/libstm32f2/core_cm3.h **** 
1401:src/libstm32f2/core_cm3.h ****     The function reads the priority of an interrupt. The interrupt
1402:src/libstm32f2/core_cm3.h ****     number can be positive to specify an external (device specific)
1403:src/libstm32f2/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1404:src/libstm32f2/core_cm3.h **** 
1405:src/libstm32f2/core_cm3.h **** 
1406:src/libstm32f2/core_cm3.h ****     \param [in]   IRQn  Interrupt number.
1407:src/libstm32f2/core_cm3.h ****     \return             Interrupt Priority. Value is aligned automatically to the implemented
1408:src/libstm32f2/core_cm3.h ****                         priority bits of the microcontroller.
1409:src/libstm32f2/core_cm3.h ****  */
1410:src/libstm32f2/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1411:src/libstm32f2/core_cm3.h **** {
1412:src/libstm32f2/core_cm3.h **** 
1413:src/libstm32f2/core_cm3.h ****   if(IRQn < 0) {
1414:src/libstm32f2/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1415:src/libstm32f2/core_cm3.h ****   else {
1416:src/libstm32f2/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1417:src/libstm32f2/core_cm3.h **** }
1418:src/libstm32f2/core_cm3.h **** 
1419:src/libstm32f2/core_cm3.h **** 
1420:src/libstm32f2/core_cm3.h **** /** \brief  Encode Priority
1421:src/libstm32f2/core_cm3.h **** 
1422:src/libstm32f2/core_cm3.h ****     The function encodes the priority for an interrupt with the given priority group,
1423:src/libstm32f2/core_cm3.h ****     preemptive priority value, and subpriority value.
1424:src/libstm32f2/core_cm3.h ****     In case of a conflict between priority grouping and available
1425:src/libstm32f2/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.
1426:src/libstm32f2/core_cm3.h **** 
1427:src/libstm32f2/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1428:src/libstm32f2/core_cm3.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1429:src/libstm32f2/core_cm3.h ****     \param [in]       SubPriority  Subpriority value (starting from 0).
1430:src/libstm32f2/core_cm3.h ****     \return                        Encoded priority. Value can be used in the function \ref NVIC_Se
1431:src/libstm32f2/core_cm3.h ****  */
1432:src/libstm32f2/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1433:src/libstm32f2/core_cm3.h **** {
1434:src/libstm32f2/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1435:src/libstm32f2/core_cm3.h ****   uint32_t PreemptPriorityBits;
1436:src/libstm32f2/core_cm3.h ****   uint32_t SubPriorityBits;
1437:src/libstm32f2/core_cm3.h **** 
1438:src/libstm32f2/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1439:src/libstm32f2/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1440:src/libstm32f2/core_cm3.h **** 
1441:src/libstm32f2/core_cm3.h ****   return (
1442:src/libstm32f2/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1443:src/libstm32f2/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1444:src/libstm32f2/core_cm3.h ****          );
1445:src/libstm32f2/core_cm3.h **** }
1446:src/libstm32f2/core_cm3.h **** 
1447:src/libstm32f2/core_cm3.h **** 
1448:src/libstm32f2/core_cm3.h **** /** \brief  Decode Priority
1449:src/libstm32f2/core_cm3.h **** 
1450:src/libstm32f2/core_cm3.h ****     The function decodes an interrupt priority value with a given priority group to
1451:src/libstm32f2/core_cm3.h ****     preemptive priority value and subpriority value.
1452:src/libstm32f2/core_cm3.h ****     In case of a conflict between priority grouping and available
1453:src/libstm32f2/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1454:src/libstm32f2/core_cm3.h **** 
1455:src/libstm32f2/core_cm3.h ****     \param [in]         Priority   Priority value, which can be retrieved with the function \ref NV
1456:src/libstm32f2/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1457:src/libstm32f2/core_cm3.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1458:src/libstm32f2/core_cm3.h ****     \param [out]     pSubPriority  Subpriority value (starting from 0).
1459:src/libstm32f2/core_cm3.h ****  */
1460:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1461:src/libstm32f2/core_cm3.h **** {
1462:src/libstm32f2/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1463:src/libstm32f2/core_cm3.h ****   uint32_t PreemptPriorityBits;
1464:src/libstm32f2/core_cm3.h ****   uint32_t SubPriorityBits;
1465:src/libstm32f2/core_cm3.h **** 
1466:src/libstm32f2/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1467:src/libstm32f2/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1468:src/libstm32f2/core_cm3.h **** 
1469:src/libstm32f2/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1470:src/libstm32f2/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1471:src/libstm32f2/core_cm3.h **** }
1472:src/libstm32f2/core_cm3.h **** 
1473:src/libstm32f2/core_cm3.h **** 
1474:src/libstm32f2/core_cm3.h **** /** \brief  System Reset
1475:src/libstm32f2/core_cm3.h **** 
1476:src/libstm32f2/core_cm3.h ****     The function initiates a system reset request to reset the MCU.
1477:src/libstm32f2/core_cm3.h ****  */
1478:src/libstm32f2/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1479:src/libstm32f2/core_cm3.h **** {
1480:src/libstm32f2/core_cm3.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1481:src/libstm32f2/core_cm3.h ****                                                                   buffered write are completed befo
1482:src/libstm32f2/core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1483:src/libstm32f2/core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1484:src/libstm32f2/core_cm3.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1485:src/libstm32f2/core_cm3.h ****   __DSB();                                                     /* Ensure completion of memory acces
1486:src/libstm32f2/core_cm3.h ****   while(1);                                                    /* wait until reset */
1487:src/libstm32f2/core_cm3.h **** }
1488:src/libstm32f2/core_cm3.h **** 
1489:src/libstm32f2/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1490:src/libstm32f2/core_cm3.h **** 
1491:src/libstm32f2/core_cm3.h **** 
1492:src/libstm32f2/core_cm3.h **** 
1493:src/libstm32f2/core_cm3.h **** /* ##################################    SysTick function  ########################################
1494:src/libstm32f2/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1495:src/libstm32f2/core_cm3.h ****     \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1496:src/libstm32f2/core_cm3.h ****     \brief      Functions that configure the System.
1497:src/libstm32f2/core_cm3.h ****   @{
1498:src/libstm32f2/core_cm3.h ****  */
1499:src/libstm32f2/core_cm3.h **** 
1500:src/libstm32f2/core_cm3.h **** #if (__Vendor_SysTickConfig == 0)
1501:src/libstm32f2/core_cm3.h **** 
1502:src/libstm32f2/core_cm3.h **** /** \brief  System Tick Configuration
1503:src/libstm32f2/core_cm3.h **** 
1504:src/libstm32f2/core_cm3.h ****     The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
1505:src/libstm32f2/core_cm3.h ****     Counter is in free running mode to generate periodic interrupts.
1506:src/libstm32f2/core_cm3.h **** 
1507:src/libstm32f2/core_cm3.h ****     \param [in]  ticks  Number of ticks between two interrupts.
1508:src/libstm32f2/core_cm3.h **** 
1509:src/libstm32f2/core_cm3.h ****     \return          0  Function succeeded.
1510:src/libstm32f2/core_cm3.h ****     \return          1  Function failed.
1511:src/libstm32f2/core_cm3.h **** 
1512:src/libstm32f2/core_cm3.h ****     \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1513:src/libstm32f2/core_cm3.h ****     function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
1514:src/libstm32f2/core_cm3.h ****     must contain a vendor-specific implementation of this function.
1515:src/libstm32f2/core_cm3.h **** 
1516:src/libstm32f2/core_cm3.h ****  */
1517:src/libstm32f2/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1518:src/libstm32f2/core_cm3.h **** {
1519:src/libstm32f2/core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
1520:src/libstm32f2/core_cm3.h **** 
1521:src/libstm32f2/core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 3316              		.loc 4 1521 0
 3317 003c 4A1E     		subs	r2, r1, #1
 3318 003e 1148     		ldr	r0, .L159+24
 3319              	.LBB82:
 3320              	.LBB83:
1393:src/libstm32f2/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 3321              		.loc 4 1393 0
 3322 0040 1149     		ldr	r1, .L159+28
 3323              	.LVL332:
 3324 0042 F023     		movs	r3, #240
 3325              	.LBE83:
 3326              	.LBE82:
 3327              		.loc 4 1521 0
 3328 0044 4260     		str	r2, [r0, #4]
 3329              	.LVL333:
 3330              	.LBB85:
 3331              	.LBB84:
1393:src/libstm32f2/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 3332              		.loc 4 1393 0
 3333 0046 81F82330 		strb	r3, [r1, #35]
 3334              	.LBE84:
 3335              	.LBE85:
1522:src/libstm32f2/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrup
1523:src/libstm32f2/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 3336              		.loc 4 1523 0
 3337 004a 0022     		movs	r2, #0
 3338              	.LVL334:
1524:src/libstm32f2/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1525:src/libstm32f2/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1526:src/libstm32f2/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 3339              		.loc 4 1526 0
 3340 004c 0723     		movs	r3, #7
1523:src/libstm32f2/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 3341              		.loc 4 1523 0
 3342 004e 8260     		str	r2, [r0, #8]
 3343              		.loc 4 1526 0
 3344 0050 0360     		str	r3, [r0, #0]
 3345              	.LBE81:
 3346              	.LBE80:
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Initialize ADC
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   adc_init();
 3347              		.loc 2 43 0
 3348 0052 FFF7FEFF 		bl	adc_init
 3349              	.LVL335:
 3350              	.LBB86:
 3351              	.LBB87:
  91:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** }
  92:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** // Nested interrupt disable
  93:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void sei(void) {
  94:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   __ASM volatile ("cpsid i");
 3352              		.loc 3 94 0
 3353              	@ 94 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/pins.h" 1
 3354 0056 72B6     		cpsid i
 3355              	@ 0 "" 2
  95:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\pins.h ****   if(!--int_ctr) {__ASM volatile ("cpsie i");}
 3356              		.loc 3 95 0
 3357              		.thumb
 3358 0058 2088     		ldrh	r0, [r4, #0]
 3359 005a 411E     		subs	r1, r0, #1
 3360 005c 8AB2     		uxth	r2, r1
 3361 005e 2280     		strh	r2, [r4, #0]	@ movhi
 3362 0060 02B9     		cbnz	r2, .L155
 3363              	@ 95 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/pins.h" 1
 3364 0062 62B6     		cpsie i
 3365              	@ 0 "" 2
 3366              		.thumb
 3367              	.L155:
 3368              	.LBE87:
 3369              	.LBE86:
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Enable interrupts
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   sei();
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // Initialize I2C
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   i2c_init();
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** }
 3370              		.loc 2 51 0
 3371 0064 BDE81040 		pop	{r4, lr}
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   i2c_init();
 3372              		.loc 2 49 0
 3373 0068 FFF7FEBF 		b	i2c_init
 3374              	.LVL336:
 3375              	.L160:
 3376              		.align	2
 3377              	.L159:
 3378 006c 400D0300 		.word	200000
 3379 0070 00000000 		.word	PIN_PA9
 3380 0074 00000000 		.word	PIN_PA12
 3381 0078 00000000 		.word	pincfg_in_pu
 3382 007c 00000000 		.word	int_ctr
 3383 0080 00000000 		.word	SystemCoreClock
 3384 0084 10E000E0 		.word	-536813552
 3385 0088 00ED00E0 		.word	-536810240
 3386              		.cfi_endproc
 3387              	.LFE111:
 3389              		.section	.text._Z5setupv,"ax",%progbits
 3390              		.align	1
 3391              		.global	_Z5setupv
 3392              		.thumb
 3393              		.thumb_func
 3395              	_Z5setupv:
 3396              	.LFB113:
 3397              		.file 5 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch/ssw.ino"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** #include <stdio.h>
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** static const char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** void setup() {
 3398              		.loc 5 5 0
 3399              		.cfi_startproc
 3400              		@ args = 0, pretend = 0, frame = 0
 3401              		@ frame_needed = 0, uses_anonymous_args = 0
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   digitalWrite(BUZZER, HIGH);
 3402              		.loc 5 6 0
 3403 0000 0121     		movs	r1, #1
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** void setup() {
 3404              		.loc 5 5 0
 3405 0002 38B5     		push	{r3, r4, r5, lr}
 3406              	.LCFI34:
 3407              		.cfi_def_cfa_offset 16
 3408              		.cfi_offset 3, -16
 3409              		.cfi_offset 4, -12
 3410              		.cfi_offset 5, -8
 3411              		.cfi_offset 14, -4
 3412              		.loc 5 6 0
 3413 0004 1F48     		ldr	r0, .L169
 3414 0006 FFF7FEFF 		bl	digitalWrite
 3415              	.LVL337:
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   delay(250);
 3416              		.loc 5 7 0
 3417 000a FA20     		movs	r0, #250
 3418 000c FFF7FEFF 		bl	delay
 3419              	.LVL338:
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   digitalWrite(BUZZER, LOW);
 3420              		.loc 5 8 0
 3421 0010 1C48     		ldr	r0, .L169
 3422 0012 0021     		movs	r1, #0
 3423 0014 FFF7FEFF 		bl	digitalWrite
 3424              	.LVL339:
 3425              	.L162:
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   while(digitalRead(BUTTON));
 3426              		.loc 5 9 0 discriminator 1
 3427 0018 1B48     		ldr	r0, .L169+4
 3428 001a FFF7FEFF 		bl	digitalRead
 3429              	.LVL340:
 3430 001e 0546     		mov	r5, r0
 3431 0020 0028     		cmp	r0, #0
 3432 0022 F9D1     		bne	.L162
 3433              	.LVL341:
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.begin();
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.fillScreen(0x5555);
 3434              		.loc 5 13 0
 3435 0024 194C     		ldr	r4, .L169+8
 3436              	.LBB100:
 3437              	.LBB101:
 688:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_init();
 3438              		.loc 1 688 0
 3439 0026 FFF7FEFF 		bl	oled_init
 3440              	.LVL342:
 3441              	.LBE101:
 3442              	.LBE100:
 3443              		.loc 5 13 0
 3444 002a 2046     		mov	r0, r4
 3445 002c 45F25551 		movw	r1, #21845
 3446 0030 FFF7FEFF 		bl	_ZN12Arduino_OLED10fillScreenEt
 3447              	.LVL343:
 3448              	.LBB102:
 3449              	.LBB103:
 648:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textsize = (s > 0) ? s : 1;
 3450              		.loc 1 648 0
 3451 0034 0120     		movs	r0, #1
 3452              	.LBE103:
 3453              	.LBE102:
 3454              	.LBB105:
 3455              	.LBB106:
 653:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textcolor = c;
 3456              		.loc 1 653 0
 3457 0036 4FF6FF73 		movw	r3, #65535
 3458              	.LBE106:
 3459              	.LBE105:
 3460              	.LBB108:
 3461              	.LBB104:
 648:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textsize = (s > 0) ? s : 1;
 3462              		.loc 1 648 0
 3463 003a 2075     		strb	r0, [r4, #20]
 3464              	.LBE104:
 3465              	.LBE108:
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.setTextColor(0xFFFF);
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.setTextSize(1);
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   //OLED.setPower(100);
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   //delay(1000);
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.setCursor(0, 0);
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.print((char*)"PMU init...   ");
 3466              		.loc 5 23 0
 3467 003c 1449     		ldr	r1, .L169+12
 3468 003e 2046     		mov	r0, r4
 3469              	.LBB109:
 3470              	.LBB107:
 653:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textcolor = c;
 3471              		.loc 1 653 0
 3472 0040 2382     		strh	r3, [r4, #16]	@ movhi
 654:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   textbgcolor = c; 
 3473              		.loc 1 654 0
 3474 0042 6382     		strh	r3, [r4, #18]	@ movhi
 3475              	.LVL344:
 3476              	.LBE107:
 3477              	.LBE109:
 3478              	.LBB110:
 3479              	.LBB111:
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = x;
 3480              		.loc 1 642 0
 3481 0044 A581     		strh	r5, [r4, #12]	@ movhi
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = y;
 3482              		.loc 1 643 0
 3483 0046 E581     		strh	r5, [r4, #14]	@ movhi
 3484              	.LBE111:
 3485              	.LBE110:
 3486              		.loc 5 23 0
 3487 0048 FFF7FEFF 		bl	_ZN11Arduino_GFX5printEPc
 3488              	.LVL345:
 3489              	.LBB112:
 3490              	.LBB113:
 3491              		.file 6 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_power.hpp"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** // Davey Taylor, Arduino Verkstad AB
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** // Power Management Arduino Objects
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** 
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** #ifndef _DRIVER_POWER_HPP_
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** #define _DRIVER_POWER_HPP_
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** #include "pins.h"
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** #include "driver_power.h"
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** #include "driver_adc.h"
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** 
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** class Arduino_CPU {
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****   public:
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Change CPU speed
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline void setSpeed(const ClockDef_t *clk) { cpu_reclock(clk); };
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** };
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** 
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** extern Arduino_CPU CPU;
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** 
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp **** class Arduino_Battery {
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****   public:
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Initialize PMU (Power Management Unit)
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // The PMU is an I2C external circuit that manages battery charging
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline boolean begin() { return pmu_init(); };
 3492              		.loc 6 22 0
 3493 004c FFF7FEFF 		bl	pmu_init
 3494              	.LVL346:
 3495              	.LBE113:
 3496              	.LBE112:
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   if(Battery.begin()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
 3497              		.loc 5 24 0
 3498 0050 10B1     		cbz	r0, .L163
 3499              		.loc 5 24 0 is_stmt 0 discriminator 1
 3500 0052 2046     		mov	r0, r4
 3501 0054 0F49     		ldr	r1, .L169+16
 3502 0056 01E0     		b	.L167
 3503              	.L163:
 3504              		.loc 5 24 0 discriminator 2
 3505 0058 0F49     		ldr	r1, .L169+20
 3506 005a 2046     		mov	r0, r4
 3507              	.L167:
 3508 005c FFF7FEFF 		bl	_ZN11Arduino_GFX7printlnEPc
 3509              	.LVL347:
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.print((char*)"PMU enable... ");
 3510              		.loc 5 25 0 is_stmt 1 discriminator 2
 3511 0060 0A48     		ldr	r0, .L169+8
 3512 0062 0E49     		ldr	r1, .L169+24
 3513 0064 FFF7FEFF 		bl	_ZN11Arduino_GFX5printEPc
 3514              	.LVL348:
 3515              	.LBB114:
 3516              	.LBB115:
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Returns true if charging is possible (means USB is connected)
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline boolean canCharge() { return digitalRead(USB_CONNECTED) == HIGH; };
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Allow the PMU to charge the battery (does not mean it will)
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline boolean enableCharging() { return pmu_charge(true); };
 3517              		.loc 6 26 0 discriminator 2
 3518 0068 0120     		movs	r0, #1
 3519 006a FFF7FEFF 		bl	pmu_charge
 3520              	.LVL349:
 3521              	.LBE115:
 3522              	.LBE114:
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   if(Battery.enableCharging()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
 3523              		.loc 5 26 0 discriminator 2
 3524 006e 10B1     		cbz	r0, .L165
 3525              		.loc 5 26 0 is_stmt 0 discriminator 1
 3526 0070 0648     		ldr	r0, .L169+8
 3527 0072 0849     		ldr	r1, .L169+16
 3528 0074 01E0     		b	.L168
 3529              	.L165:
 3530              		.loc 5 26 0 discriminator 2
 3531 0076 0548     		ldr	r0, .L169+8
 3532 0078 0749     		ldr	r1, .L169+20
 3533              	.L168:
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** }
 3534              		.loc 5 28 0 is_stmt 1 discriminator 2
 3535 007a BDE83840 		pop	{r3, r4, r5, lr}
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   if(Battery.enableCharging()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
 3536              		.loc 5 26 0 discriminator 2
 3537 007e FFF7FEBF 		b	_ZN11Arduino_GFX7printlnEPc
 3538              	.LVL350:
 3539              	.L170:
 3540 0082 00BF     		.align	2
 3541              	.L169:
 3542 0084 00000000 		.word	PIN_PB8
 3543 0088 00000000 		.word	PIN_PB11
 3544 008c 00000000 		.word	.LANCHOR2
 3545 0090 00000000 		.word	.LC0
 3546 0094 0F000000 		.word	.LC1
 3547 0098 12000000 		.word	.LC2
 3548 009c 17000000 		.word	.LC3
 3549              		.cfi_endproc
 3550              	.LFE113:
 3552              		.global	__aeabi_ui2f
 3553              		.global	__aeabi_fdiv
 3554              		.global	__aeabi_f2d
 3555              		.section	.text._Z4loopv,"ax",%progbits
 3556              		.align	1
 3557              		.global	_Z4loopv
 3558              		.thumb
 3559              		.thumb_func
 3561              	_Z4loopv:
 3562              	.LFB114:
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** void loop() {
 3563              		.loc 5 30 0
 3564              		.cfi_startproc
 3565              		@ args = 0, pretend = 0, frame = 40
 3566              		@ frame_needed = 0, uses_anonymous_args = 0
 3567 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3568              	.LCFI35:
 3569              		.cfi_def_cfa_offset 24
 3570              		.cfi_offset 4, -24
 3571              		.cfi_offset 5, -20
 3572              		.cfi_offset 6, -16
 3573              		.cfi_offset 7, -12
 3574              		.cfi_offset 8, -8
 3575              		.cfi_offset 14, -4
 3576              	.LBB142:
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   char text[32];
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.fillRect(0, 24, 128, 40, 0x5555);
 3577              		.loc 5 33 0
 3578 0004 4F4C     		ldr	r4, .L184
 3579              	.LBE142:
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** void loop() {
 3580              		.loc 5 30 0
 3581 0006 8CB0     		sub	sp, sp, #48
 3582              	.LCFI36:
 3583              		.cfi_def_cfa_offset 72
 3584              	.LBB170:
 3585              		.loc 5 33 0
 3586 0008 2825     		movs	r5, #40
 3587 000a 45F25553 		movw	r3, #21845
 3588 000e 1822     		movs	r2, #24
 3589 0010 2046     		mov	r0, r4
 3590 0012 0193     		str	r3, [sp, #4]
 3591 0014 0021     		movs	r1, #0
 3592 0016 8023     		movs	r3, #128
 3593 0018 0095     		str	r5, [sp, #0]
 3594 001a FFF7FEFF 		bl	_ZN12Arduino_OLED8fillRectEsssst
 3595              	.LVL351:
 3596              	.LBB143:
 3597              	.LBB144:
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = x;
 3598              		.loc 1 642 0
 3599 001e 0026     		movs	r6, #0
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = y;
 3600              		.loc 1 643 0
 3601 0020 1820     		movs	r0, #24
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = x;
 3602              		.loc 1 642 0
 3603 0022 A681     		strh	r6, [r4, #12]	@ movhi
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = y;
 3604              		.loc 1 643 0
 3605 0024 E081     		strh	r0, [r4, #14]	@ movhi
 3606              	.LBE144:
 3607              	.LBE143:
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.setCursor(0, 24);
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.print("USB connected: ");
 3608              		.loc 5 36 0
 3609 0026 4849     		ldr	r1, .L184+4
 3610 0028 2046     		mov	r0, r4
 3611 002a FFF7FEFF 		bl	_ZN11Arduino_GFX5printEPc
 3612              	.LVL352:
 3613              	.LBB145:
 3614              	.LBB146:
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline boolean canCharge() { return digitalRead(USB_CONNECTED) == HIGH; };
 3615              		.loc 6 24 0
 3616 002e 4748     		ldr	r0, .L184+8
 3617 0030 FFF7FEFF 		bl	digitalRead
 3618              	.LVL353:
 3619              	.LBE146:
 3620              	.LBE145:
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.println((char*)(Battery.canCharge() ? "YES" : "NO"));
 3621              		.loc 5 37 0
 3622 0034 DFF84081 		ldr	r8, .L184+52
 3623 0038 454F     		ldr	r7, .L184+12
 3624 003a 0128     		cmp	r0, #1
 3625 003c 14BF     		ite	ne
 3626 003e 4146     		movne	r1, r8
 3627 0040 3946     		moveq	r1, r7
 3628 0042 2046     		mov	r0, r4
 3629 0044 FFF7FEFF 		bl	_ZN11Arduino_GFX7printlnEPc
 3630              	.LVL354:
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.print("PMU charging:  ");
 3631              		.loc 5 39 0
 3632 0048 2046     		mov	r0, r4
 3633 004a 4249     		ldr	r1, .L184+16
 3634 004c FFF7FEFF 		bl	_ZN11Arduino_GFX5printEPc
 3635              	.LVL355:
 3636              	.LBB147:
 3637              	.LBB148:
 3638              	.LBB149:
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Prevent the PMU from charging the battery
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline boolean disableCharging() { return pmu_charge(false); };
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Check if the PMU is charging the battery (it will stop on errors, full battery, safety timeo
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline boolean isCharging() { bool c; pmu_charging(&c); return c; };
 3639              		.loc 6 30 0
 3640 0050 0DF10F00 		add	r0, sp, #15
 3641 0054 FFF7FEFF 		bl	pmu_charging
 3642              	.LVL356:
 3643 0058 9DF80F10 		ldrb	r1, [sp, #15]	@ zero_extendqisi2
 3644              	.LBE149:
 3645              	.LBE148:
 3646              	.LBE147:
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.println((char*)(Battery.isCharging() ? "YES" : "NO"));
 3647              		.loc 5 40 0
 3648 005c 2046     		mov	r0, r4
 3649 005e B142     		cmp	r1, r6
 3650 0060 0CBF     		ite	eq
 3651 0062 4146     		moveq	r1, r8
 3652 0064 3946     		movne	r1, r7
 3653 0066 FFF7FEFF 		bl	_ZN11Arduino_GFX7printlnEPc
 3654              	.LVL357:
 3655              	.LBB150:
 3656              	.LBB151:
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_y = y;
 3657              		.loc 1 643 0
 3658 006a 3022     		movs	r2, #48
 3659 006c E281     		strh	r2, [r4, #14]	@ movhi
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   cursor_x = x;
 3660              		.loc 1 642 0
 3661 006e A681     		strh	r6, [r4, #12]	@ movhi
 3662              	.LBE151:
 3663              	.LBE150:
 3664              	.LBB152:
 3665              	.LBB153:
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Return RAW battery level from ADC
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline word readRaw() { return adc_battery(); };
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     // Return battery voltage in millivolts
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline word readMilliVolts() { return (adc_battery() * 4440) / 4095; };
 3666              		.loc 6 34 0
 3667 0070 FFF7FEFF 		bl	adc_battery
 3668              	.LVL358:
 3669 0074 41F25813 		movw	r3, #4440
 3670 0078 5843     		muls	r0, r3, r0
 3671 007a 40F6FF76 		movw	r6, #4095
 3672 007e 90FBF6F0 		sdiv	r0, r0, r6
 3673              	.LBE153:
 3674              	.LBE152:
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.setCursor(0, 48);
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   sprintf(text, "Battery: %.2fV", ((float)Battery.readMilliVolts()) / 1000.0);
 3675              		.loc 5 44 0
 3676 0082 80B2     		uxth	r0, r0
 3677 0084 FFF7FEFF 		bl	__aeabi_ui2f
 3678              	.LVL359:
 3679 0088 3349     		ldr	r1, .L184+20
 3680 008a FFF7FEFF 		bl	__aeabi_fdiv
 3681              	.LVL360:
 3682 008e FFF7FEFF 		bl	__aeabi_f2d
 3683              	.LVL361:
 3684 0092 0B46     		mov	r3, r1
 3685 0094 0246     		mov	r2, r0
 3686 0096 3149     		ldr	r1, .L184+24
 3687 0098 04A8     		add	r0, sp, #16
 3688 009a FFF7FEFF 		bl	sprintf
 3689              	.LVL362:
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.println(text);
 3690              		.loc 5 45 0
 3691 009e 2046     		mov	r0, r4
 3692 00a0 04A9     		add	r1, sp, #16
 3693 00a2 FFF7FEFF 		bl	_ZN11Arduino_GFX7printlnEPc
 3694              	.LVL363:
 3695              	.LBB154:
 3696              	.LBB155:
 3697              		.file 7 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_display.hpp"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** // Davey Taylor, Arduino Verkstad AB
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** // OLED & LightSensor Arduino Objects
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** 
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** #ifndef _DRIVER_DISPLAY_HPP_
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** #define _DRIVER_DISPLAY_HPP_
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** #include "driver_display.h"
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** 
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** class Arduino_GFX {
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   public:
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     virtual void drawPixel(int16_t x, int16_t y, uint16_t color);
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     virtual void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     virtual void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     virtual void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     virtual void fillScreen(uint16_t color);
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color);
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color);
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uin
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint1
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint1
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, uint16_t color
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void fillRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, uint16_t color
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t col
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     uint32_t write(uint8_t);
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** 
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void print(char *str);
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void println(char *str);
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void setCursor(int16_t x, int16_t y);
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void setTextColor(uint16_t c);
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void setTextColor(uint16_t c, uint16_t bg);
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void setTextSize(uint8_t s);
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void setTextWrap(bool w);
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     int16_t height(void);
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     int16_t width(void);
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** // protected:
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     int16_t  WIDTH, HEIGHT;   // this is the 'raw' display w/h - never changes
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     int16_t  _width, _height; // dependent on rotation
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     int16_t  cursor_x, cursor_y;
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     uint16_t textcolor, textbgcolor;
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     uint8_t  textsize;
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     bool  wrap; // If set, 'wrap' text at right edge of display
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** };
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** 
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** class Arduino_OLED : public Arduino_GFX {
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   public:
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     Arduino_OLED();
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** 
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     void     begin(),
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              shutdown(),
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              setPower(uint8_t power),
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1),
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              pushColor(uint16_t color),
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              fillScreen(uint16_t color),
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              drawPixel(int16_t x, int16_t y, uint16_t color),
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color),
  67:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color),
  68:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****              fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
  69:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     uint16_t Color565(uint8_t r, uint8_t g, uint8_t b);
  70:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** 
  71:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   private:
  72:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** };
  73:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** 
  74:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp **** class Arduino_LightSensor {
  75:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****   public:
  76:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.hpp ****     inline word readRaw() { return adc_lightsensor(); };
 3698              		.loc 7 76 0
 3699 00a6 FFF7FEFF 		bl	adc_lightsensor
 3700              	.LVL364:
 3701              	.LBE155:
 3702              	.LBE154:
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   sprintf(text, "Sensor:  %u%%", (LightSensor.readRaw()*100)/4095);
 3703              		.loc 5 47 0
 3704 00aa 6422     		movs	r2, #100
 3705 00ac 4243     		muls	r2, r0, r2
 3706 00ae 2C49     		ldr	r1, .L184+28
 3707 00b0 92FBF6F2 		sdiv	r2, r2, r6
 3708 00b4 04A8     		add	r0, sp, #16
 3709 00b6 FFF7FEFF 		bl	sprintf
 3710              	.LVL365:
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   OLED.println(text);
 3711              		.loc 5 48 0
 3712 00ba 2046     		mov	r0, r4
 3713 00bc 04A9     		add	r1, sp, #16
 3714 00be FFF7FEFF 		bl	_ZN11Arduino_GFX7printlnEPc
 3715              	.LVL366:
 3716              	.LBB156:
 3717              	.LBB157:
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline void setSpeed(const ClockDef_t *clk) { cpu_reclock(clk); };
 3718              		.loc 6 13 0
 3719 00c2 2848     		ldr	r0, .L184+32
 3720 00c4 FFF7FEFF 		bl	cpu_reclock
 3721              	.LVL367:
 3722              	.LBE157:
 3723              	.LBE156:
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   // Delay in low speed mode
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   CPU.setSpeed(CPU_LS);
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   delay(150);
 3724              		.loc 5 52 0
 3725 00c8 9620     		movs	r0, #150
 3726 00ca FFF7FEFF 		bl	delay
 3727              	.LVL368:
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   for(uint8_t n = 40; n <= 90; n++) {
 3728              		.loc 5 53 0
 3729 00ce 2C46     		mov	r4, r5
 3730              	.LVL369:
 3731              	.L174:
 3732              	.LBB158:
 3733              	.LBB159:
 3734              	.LBB160:
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_power(power);
 3735              		.loc 1 696 0
 3736 00d0 2046     		mov	r0, r4
 3737              	.LBE160:
 3738              	.LBE159:
 3739              		.loc 5 53 0
 3740 00d2 0134     		adds	r4, r4, #1
 3741              	.LVL370:
 3742              	.LBB162:
 3743              	.LBB161:
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_power(power);
 3744              		.loc 1 696 0
 3745 00d4 FFF7FEFF 		bl	oled_power
 3746              	.LVL371:
 3747              	.LBE161:
 3748              	.LBE162:
 3749              		.loc 5 53 0
 3750 00d8 E4B2     		uxtb	r4, r4
 3751              	.LVL372:
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     OLED.setPower(n);
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     delay(2);
 3752              		.loc 5 55 0
 3753 00da 0220     		movs	r0, #2
 3754 00dc FFF7FEFF 		bl	delay
 3755              	.LVL373:
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   for(uint8_t n = 40; n <= 90; n++) {
 3756              		.loc 5 53 0
 3757 00e0 5B2C     		cmp	r4, #91
 3758 00e2 F5D1     		bne	.L174
 3759 00e4 5A24     		movs	r4, #90
 3760              	.LVL374:
 3761              	.L175:
 3762              	.LBE158:
 3763              	.LBB163:
 3764              	.LBB164:
 3765              	.LBB165:
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_power(power);
 3766              		.loc 1 696 0
 3767 00e6 2046     		mov	r0, r4
 3768 00e8 FFF7FEFF 		bl	oled_power
 3769              	.LVL375:
 3770              	.LBE165:
 3771              	.LBE164:
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   }
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   for(uint8_t n = 90; n >= 40; n--) {
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     OLED.setPower(n);
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     delay(2);
 3772              		.loc 5 59 0
 3773 00ec 0220     		movs	r0, #2
 3774 00ee FFF7FEFF 		bl	delay
 3775              	.LVL376:
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   for(uint8_t n = 90; n >= 40; n--) {
 3776              		.loc 5 57 0
 3777 00f2 611E     		subs	r1, r4, #1
 3778 00f4 CCB2     		uxtb	r4, r1
 3779              	.LVL377:
 3780 00f6 272C     		cmp	r4, #39
 3781 00f8 F5D1     		bne	.L175
 3782              	.LBE163:
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   }
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   delay(150);
 3783              		.loc 5 61 0
 3784 00fa 9620     		movs	r0, #150
 3785 00fc FFF7FEFF 		bl	delay
 3786              	.LVL378:
 3787              	.LBB166:
 3788              	.LBB167:
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_power.hpp ****     inline void setSpeed(const ClockDef_t *clk) { cpu_reclock(clk); };
 3789              		.loc 6 13 0
 3790 0100 1948     		ldr	r0, .L184+36
 3791 0102 FFF7FEFF 		bl	cpu_reclock
 3792              	.LVL379:
 3793              	.LBE167:
 3794              	.LBE166:
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   CPU.setSpeed(CPU_HS);
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** 
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   if(digitalRead(BUTTON)) {
 3795              		.loc 5 64 0
 3796 0106 1948     		ldr	r0, .L184+40
 3797 0108 FFF7FEFF 		bl	digitalRead
 3798              	.LVL380:
 3799 010c B0B1     		cbz	r0, .L171
 3800              	.LVL381:
 3801              	.LBB168:
 3802              	.LBB169:
 692:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp ****   oled_deinit();
 3803              		.loc 1 692 0
 3804 010e FFF7FEFF 		bl	oled_deinit
 3805              	.LVL382:
 3806              	.LBE169:
 3807              	.LBE168:
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     OLED.shutdown();
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     digitalWrite(BUZZER, HIGH);
 3808              		.loc 5 66 0
 3809 0112 0121     		movs	r1, #1
 3810 0114 1648     		ldr	r0, .L184+44
 3811 0116 FFF7FEFF 		bl	digitalWrite
 3812              	.LVL383:
  67:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     delay(250);
 3813              		.loc 5 67 0
 3814 011a FA20     		movs	r0, #250
 3815 011c FFF7FEFF 		bl	delay
 3816              	.LVL384:
  68:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     digitalWrite(BUZZER, LOW);
 3817              		.loc 5 68 0
 3818 0120 1348     		ldr	r0, .L184+44
 3819 0122 0021     		movs	r1, #0
 3820 0124 FFF7FEFF 		bl	digitalWrite
 3821              	.LVL385:
 3822              	.L177:
  69:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     while(digitalRead(BUTTON));
 3823              		.loc 5 69 0 discriminator 1
 3824 0128 1048     		ldr	r0, .L184+40
 3825 012a FFF7FEFF 		bl	digitalRead
 3826              	.LVL386:
 3827 012e 0146     		mov	r1, r0
 3828 0130 0028     		cmp	r0, #0
 3829 0132 F9D1     		bne	.L177
  70:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     digitalWrite(POWER, LOW);
 3830              		.loc 5 70 0
 3831 0134 0F48     		ldr	r0, .L184+48
 3832 0136 FFF7FEFF 		bl	digitalWrite
 3833              	.LVL387:
 3834              	.L178:
 3835 013a FEE7     		b	.L178
 3836              	.LVL388:
 3837              	.L171:
 3838              	.LBE170:
  71:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****     while(1);
  72:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   }
  73:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino ****   
  74:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/../sketch\ssw.ino **** }
 3839              		.loc 5 74 0
 3840 013c 0CB0     		add	sp, sp, #48
 3841 013e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3842              	.L185:
 3843 0142 00BF     		.align	2
 3844              	.L184:
 3845 0144 00000000 		.word	.LANCHOR2
 3846 0148 2D000000 		.word	.LC6
 3847 014c 00000000 		.word	PIN_PA9
 3848 0150 26000000 		.word	.LC4
 3849 0154 3D000000 		.word	.LC7
 3850 0158 00007A44 		.word	1148846080
 3851 015c 4D000000 		.word	.LC8
 3852 0160 5C000000 		.word	.LC9
 3853 0164 00000000 		.word	sysclock_3m25
 3854 0168 00000000 		.word	sysclock_120m
 3855 016c 00000000 		.word	PIN_PB11
 3856 0170 00000000 		.word	PIN_PB8
 3857 0174 00000000 		.word	PIN_PC3
 3858 0178 2A000000 		.word	.LC5
 3859              		.cfi_endproc
 3860              	.LFE114:
 3862              		.section	.text.startup.main,"ax",%progbits
 3863              		.align	1
 3864              		.global	main
 3865              		.thumb
 3866              		.thumb_func
 3868              	main:
 3869              	.LFB112:
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** // Found in sketch (.ino file)
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** void setup();
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** void loop();
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** int main(void) {
 3870              		.loc 2 57 0
 3871              		.cfi_startproc
 3872              		@ Volatile: function does not return.
 3873              		@ args = 0, pretend = 0, frame = 0
 3874              		@ frame_needed = 0, uses_anonymous_args = 0
 3875 0000 08B5     		push	{r3, lr}
 3876              	.LCFI37:
 3877              		.cfi_def_cfa_offset 8
 3878              		.cfi_offset 3, -8
 3879              		.cfi_offset 14, -4
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // System initialization
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   init();
 3880              		.loc 2 60 0
 3881 0002 FFF7FEFF 		bl	_Z4initv
 3882              	.LVL389:
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   // User initialization
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp ****   setup();
 3883              		.loc 2 63 0
 3884 0006 FFF7FEFF 		bl	_Z5setupv
 3885              	.LVL390:
 3886              	.L187:
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 	// Forever loop, I want to be, forever... loop
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\main.cpp **** 	while(1) loop();
 3887              		.loc 2 66 0 discriminator 1
 3888 000a FFF7FEFF 		bl	_Z4loopv
 3889              	.LVL391:
 3890 000e FCE7     		b	.L187
 3891              		.cfi_endproc
 3892              	.LFE112:
 3894              		.section	.text.startup._GLOBAL__sub_I_font,"ax",%progbits
 3895              		.align	1
 3896              		.thumb
 3897              		.thumb_func
 3899              	_GLOBAL__sub_I_font:
 3900              	.LFB116:
 3901              		.loc 5 74 0
 3902              		.cfi_startproc
 3903              		@ args = 0, pretend = 0, frame = 0
 3904              		@ frame_needed = 0, uses_anonymous_args = 0
 3905              		@ link register save eliminated.
 3906              	.LVL392:
 3907              	.LBB173:
 3908              	.LBB174:
 735:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** 
 736:c:/Dropbox/AV_SmartWatch/toolchain_v3/src\driver_display.cpp **** Arduino_OLED OLED;
 3909              		.loc 1 736 0
 3910 0000 0148     		ldr	r0, .L189
 3911              	.LBE174:
 3912              	.LBE173:
 3913              		.loc 5 74 0
 3914              	.LBB176:
 3915              	.LBB175:
 3916              		.loc 1 736 0
 3917 0002 FFF7FEBF 		b	_ZN12Arduino_OLEDC1Ev
 3918              	.LVL393:
 3919              	.L190:
 3920 0006 00BF     		.align	2
 3921              	.L189:
 3922 0008 00000000 		.word	.LANCHOR2
 3923              	.LBE175:
 3924              	.LBE176:
 3925              		.cfi_endproc
 3926              	.LFE116:
 3928              		.section	.init_array,"aw",%init_array
 3929              		.align	2
 3930 0000 00000000 		.word	_GLOBAL__sub_I_font(target1)
 3931              		.global	_ZTV12Arduino_OLED
 3932              		.global	CPU
 3933              		.global	Battery
 3934              		.global	LightSensor
 3935              		.global	OLED
 3936              		.global	font
 3937              		.section	.bss.Battery,"aw",%nobits
 3940              	Battery:
 3941 0000 00       		.space	1
 3942              		.section	.bss.CPU,"aw",%nobits
 3945              	CPU:
 3946 0000 00       		.space	1
 3947              		.section	.data.font,"aw",%progbits
 3948              		.set	.LANCHOR0,. + 0
 3951              	font:
 3952 0000 00       		.byte	0
 3953 0001 00       		.byte	0
 3954 0002 00       		.byte	0
 3955 0003 00       		.byte	0
 3956 0004 00       		.byte	0
 3957 0005 3E       		.byte	62
 3958 0006 5B       		.byte	91
 3959 0007 4F       		.byte	79
 3960 0008 5B       		.byte	91
 3961 0009 3E       		.byte	62
 3962 000a 3E       		.byte	62
 3963 000b 6B       		.byte	107
 3964 000c 4F       		.byte	79
 3965 000d 6B       		.byte	107
 3966 000e 3E       		.byte	62
 3967 000f 1C       		.byte	28
 3968 0010 3E       		.byte	62
 3969 0011 7C       		.byte	124
 3970 0012 3E       		.byte	62
 3971 0013 1C       		.byte	28
 3972 0014 18       		.byte	24
 3973 0015 3C       		.byte	60
 3974 0016 7E       		.byte	126
 3975 0017 3C       		.byte	60
 3976 0018 18       		.byte	24
 3977 0019 1C       		.byte	28
 3978 001a 57       		.byte	87
 3979 001b 7D       		.byte	125
 3980 001c 57       		.byte	87
 3981 001d 1C       		.byte	28
 3982 001e 1C       		.byte	28
 3983 001f 5E       		.byte	94
 3984 0020 7F       		.byte	127
 3985 0021 5E       		.byte	94
 3986 0022 1C       		.byte	28
 3987 0023 00       		.byte	0
 3988 0024 18       		.byte	24
 3989 0025 3C       		.byte	60
 3990 0026 18       		.byte	24
 3991 0027 00       		.byte	0
 3992 0028 FF       		.byte	-1
 3993 0029 E7       		.byte	-25
 3994 002a C3       		.byte	-61
 3995 002b E7       		.byte	-25
 3996 002c FF       		.byte	-1
 3997 002d 00       		.byte	0
 3998 002e 18       		.byte	24
 3999 002f 24       		.byte	36
 4000 0030 18       		.byte	24
 4001 0031 00       		.byte	0
 4002 0032 FF       		.byte	-1
 4003 0033 E7       		.byte	-25
 4004 0034 DB       		.byte	-37
 4005 0035 E7       		.byte	-25
 4006 0036 FF       		.byte	-1
 4007 0037 30       		.byte	48
 4008 0038 48       		.byte	72
 4009 0039 3A       		.byte	58
 4010 003a 06       		.byte	6
 4011 003b 0E       		.byte	14
 4012 003c 26       		.byte	38
 4013 003d 29       		.byte	41
 4014 003e 79       		.byte	121
 4015 003f 29       		.byte	41
 4016 0040 26       		.byte	38
 4017 0041 40       		.byte	64
 4018 0042 7F       		.byte	127
 4019 0043 05       		.byte	5
 4020 0044 05       		.byte	5
 4021 0045 07       		.byte	7
 4022 0046 40       		.byte	64
 4023 0047 7F       		.byte	127
 4024 0048 05       		.byte	5
 4025 0049 25       		.byte	37
 4026 004a 3F       		.byte	63
 4027 004b 5A       		.byte	90
 4028 004c 3C       		.byte	60
 4029 004d E7       		.byte	-25
 4030 004e 3C       		.byte	60
 4031 004f 5A       		.byte	90
 4032 0050 7F       		.byte	127
 4033 0051 3E       		.byte	62
 4034 0052 1C       		.byte	28
 4035 0053 1C       		.byte	28
 4036 0054 08       		.byte	8
 4037 0055 08       		.byte	8
 4038 0056 1C       		.byte	28
 4039 0057 1C       		.byte	28
 4040 0058 3E       		.byte	62
 4041 0059 7F       		.byte	127
 4042 005a 14       		.byte	20
 4043 005b 22       		.byte	34
 4044 005c 7F       		.byte	127
 4045 005d 22       		.byte	34
 4046 005e 14       		.byte	20
 4047 005f 5F       		.byte	95
 4048 0060 5F       		.byte	95
 4049 0061 00       		.byte	0
 4050 0062 5F       		.byte	95
 4051 0063 5F       		.byte	95
 4052 0064 06       		.byte	6
 4053 0065 09       		.byte	9
 4054 0066 7F       		.byte	127
 4055 0067 01       		.byte	1
 4056 0068 7F       		.byte	127
 4057 0069 00       		.byte	0
 4058 006a 66       		.byte	102
 4059 006b 89       		.byte	-119
 4060 006c 95       		.byte	-107
 4061 006d 6A       		.byte	106
 4062 006e 60       		.byte	96
 4063 006f 60       		.byte	96
 4064 0070 60       		.byte	96
 4065 0071 60       		.byte	96
 4066 0072 60       		.byte	96
 4067 0073 94       		.byte	-108
 4068 0074 A2       		.byte	-94
 4069 0075 FF       		.byte	-1
 4070 0076 A2       		.byte	-94
 4071 0077 94       		.byte	-108
 4072 0078 08       		.byte	8
 4073 0079 04       		.byte	4
 4074 007a 7E       		.byte	126
 4075 007b 04       		.byte	4
 4076 007c 08       		.byte	8
 4077 007d 10       		.byte	16
 4078 007e 20       		.byte	32
 4079 007f 7E       		.byte	126
 4080 0080 20       		.byte	32
 4081 0081 10       		.byte	16
 4082 0082 08       		.byte	8
 4083 0083 08       		.byte	8
 4084 0084 2A       		.byte	42
 4085 0085 1C       		.byte	28
 4086 0086 08       		.byte	8
 4087 0087 08       		.byte	8
 4088 0088 1C       		.byte	28
 4089 0089 2A       		.byte	42
 4090 008a 08       		.byte	8
 4091 008b 08       		.byte	8
 4092 008c 1E       		.byte	30
 4093 008d 10       		.byte	16
 4094 008e 10       		.byte	16
 4095 008f 10       		.byte	16
 4096 0090 10       		.byte	16
 4097 0091 0C       		.byte	12
 4098 0092 1E       		.byte	30
 4099 0093 0C       		.byte	12
 4100 0094 1E       		.byte	30
 4101 0095 0C       		.byte	12
 4102 0096 30       		.byte	48
 4103 0097 38       		.byte	56
 4104 0098 3E       		.byte	62
 4105 0099 38       		.byte	56
 4106 009a 30       		.byte	48
 4107 009b 06       		.byte	6
 4108 009c 0E       		.byte	14
 4109 009d 3E       		.byte	62
 4110 009e 0E       		.byte	14
 4111 009f 06       		.byte	6
 4112 00a0 00       		.byte	0
 4113 00a1 00       		.byte	0
 4114 00a2 00       		.byte	0
 4115 00a3 00       		.byte	0
 4116 00a4 00       		.byte	0
 4117 00a5 00       		.byte	0
 4118 00a6 00       		.byte	0
 4119 00a7 5F       		.byte	95
 4120 00a8 00       		.byte	0
 4121 00a9 00       		.byte	0
 4122 00aa 00       		.byte	0
 4123 00ab 07       		.byte	7
 4124 00ac 00       		.byte	0
 4125 00ad 07       		.byte	7
 4126 00ae 00       		.byte	0
 4127 00af 14       		.byte	20
 4128 00b0 7F       		.byte	127
 4129 00b1 14       		.byte	20
 4130 00b2 7F       		.byte	127
 4131 00b3 14       		.byte	20
 4132 00b4 24       		.byte	36
 4133 00b5 2A       		.byte	42
 4134 00b6 7F       		.byte	127
 4135 00b7 2A       		.byte	42
 4136 00b8 12       		.byte	18
 4137 00b9 23       		.byte	35
 4138 00ba 13       		.byte	19
 4139 00bb 08       		.byte	8
 4140 00bc 64       		.byte	100
 4141 00bd 62       		.byte	98
 4142 00be 36       		.byte	54
 4143 00bf 49       		.byte	73
 4144 00c0 56       		.byte	86
 4145 00c1 20       		.byte	32
 4146 00c2 50       		.byte	80
 4147 00c3 00       		.byte	0
 4148 00c4 08       		.byte	8
 4149 00c5 07       		.byte	7
 4150 00c6 03       		.byte	3
 4151 00c7 00       		.byte	0
 4152 00c8 00       		.byte	0
 4153 00c9 1C       		.byte	28
 4154 00ca 22       		.byte	34
 4155 00cb 41       		.byte	65
 4156 00cc 00       		.byte	0
 4157 00cd 00       		.byte	0
 4158 00ce 41       		.byte	65
 4159 00cf 22       		.byte	34
 4160 00d0 1C       		.byte	28
 4161 00d1 00       		.byte	0
 4162 00d2 2A       		.byte	42
 4163 00d3 1C       		.byte	28
 4164 00d4 7F       		.byte	127
 4165 00d5 1C       		.byte	28
 4166 00d6 2A       		.byte	42
 4167 00d7 08       		.byte	8
 4168 00d8 08       		.byte	8
 4169 00d9 3E       		.byte	62
 4170 00da 08       		.byte	8
 4171 00db 08       		.byte	8
 4172 00dc 00       		.byte	0
 4173 00dd 80       		.byte	-128
 4174 00de 70       		.byte	112
 4175 00df 30       		.byte	48
 4176 00e0 00       		.byte	0
 4177 00e1 08       		.byte	8
 4178 00e2 08       		.byte	8
 4179 00e3 08       		.byte	8
 4180 00e4 08       		.byte	8
 4181 00e5 08       		.byte	8
 4182 00e6 00       		.byte	0
 4183 00e7 00       		.byte	0
 4184 00e8 60       		.byte	96
 4185 00e9 60       		.byte	96
 4186 00ea 00       		.byte	0
 4187 00eb 20       		.byte	32
 4188 00ec 10       		.byte	16
 4189 00ed 08       		.byte	8
 4190 00ee 04       		.byte	4
 4191 00ef 02       		.byte	2
 4192 00f0 3E       		.byte	62
 4193 00f1 51       		.byte	81
 4194 00f2 49       		.byte	73
 4195 00f3 45       		.byte	69
 4196 00f4 3E       		.byte	62
 4197 00f5 00       		.byte	0
 4198 00f6 42       		.byte	66
 4199 00f7 7F       		.byte	127
 4200 00f8 40       		.byte	64
 4201 00f9 00       		.byte	0
 4202 00fa 72       		.byte	114
 4203 00fb 49       		.byte	73
 4204 00fc 49       		.byte	73
 4205 00fd 49       		.byte	73
 4206 00fe 46       		.byte	70
 4207 00ff 21       		.byte	33
 4208 0100 41       		.byte	65
 4209 0101 49       		.byte	73
 4210 0102 4D       		.byte	77
 4211 0103 33       		.byte	51
 4212 0104 18       		.byte	24
 4213 0105 14       		.byte	20
 4214 0106 12       		.byte	18
 4215 0107 7F       		.byte	127
 4216 0108 10       		.byte	16
 4217 0109 27       		.byte	39
 4218 010a 45       		.byte	69
 4219 010b 45       		.byte	69
 4220 010c 45       		.byte	69
 4221 010d 39       		.byte	57
 4222 010e 3C       		.byte	60
 4223 010f 4A       		.byte	74
 4224 0110 49       		.byte	73
 4225 0111 49       		.byte	73
 4226 0112 31       		.byte	49
 4227 0113 41       		.byte	65
 4228 0114 21       		.byte	33
 4229 0115 11       		.byte	17
 4230 0116 09       		.byte	9
 4231 0117 07       		.byte	7
 4232 0118 36       		.byte	54
 4233 0119 49       		.byte	73
 4234 011a 49       		.byte	73
 4235 011b 49       		.byte	73
 4236 011c 36       		.byte	54
 4237 011d 46       		.byte	70
 4238 011e 49       		.byte	73
 4239 011f 49       		.byte	73
 4240 0120 29       		.byte	41
 4241 0121 1E       		.byte	30
 4242 0122 00       		.byte	0
 4243 0123 00       		.byte	0
 4244 0124 14       		.byte	20
 4245 0125 00       		.byte	0
 4246 0126 00       		.byte	0
 4247 0127 00       		.byte	0
 4248 0128 40       		.byte	64
 4249 0129 34       		.byte	52
 4250 012a 00       		.byte	0
 4251 012b 00       		.byte	0
 4252 012c 00       		.byte	0
 4253 012d 08       		.byte	8
 4254 012e 14       		.byte	20
 4255 012f 22       		.byte	34
 4256 0130 41       		.byte	65
 4257 0131 14       		.byte	20
 4258 0132 14       		.byte	20
 4259 0133 14       		.byte	20
 4260 0134 14       		.byte	20
 4261 0135 14       		.byte	20
 4262 0136 00       		.byte	0
 4263 0137 41       		.byte	65
 4264 0138 22       		.byte	34
 4265 0139 14       		.byte	20
 4266 013a 08       		.byte	8
 4267 013b 02       		.byte	2
 4268 013c 01       		.byte	1
 4269 013d 59       		.byte	89
 4270 013e 09       		.byte	9
 4271 013f 06       		.byte	6
 4272 0140 3E       		.byte	62
 4273 0141 41       		.byte	65
 4274 0142 5D       		.byte	93
 4275 0143 59       		.byte	89
 4276 0144 4E       		.byte	78
 4277 0145 7C       		.byte	124
 4278 0146 12       		.byte	18
 4279 0147 11       		.byte	17
 4280 0148 12       		.byte	18
 4281 0149 7C       		.byte	124
 4282 014a 7F       		.byte	127
 4283 014b 49       		.byte	73
 4284 014c 49       		.byte	73
 4285 014d 49       		.byte	73
 4286 014e 36       		.byte	54
 4287 014f 3E       		.byte	62
 4288 0150 41       		.byte	65
 4289 0151 41       		.byte	65
 4290 0152 41       		.byte	65
 4291 0153 22       		.byte	34
 4292 0154 7F       		.byte	127
 4293 0155 41       		.byte	65
 4294 0156 41       		.byte	65
 4295 0157 41       		.byte	65
 4296 0158 3E       		.byte	62
 4297 0159 7F       		.byte	127
 4298 015a 49       		.byte	73
 4299 015b 49       		.byte	73
 4300 015c 49       		.byte	73
 4301 015d 41       		.byte	65
 4302 015e 7F       		.byte	127
 4303 015f 09       		.byte	9
 4304 0160 09       		.byte	9
 4305 0161 09       		.byte	9
 4306 0162 01       		.byte	1
 4307 0163 3E       		.byte	62
 4308 0164 41       		.byte	65
 4309 0165 41       		.byte	65
 4310 0166 51       		.byte	81
 4311 0167 73       		.byte	115
 4312 0168 7F       		.byte	127
 4313 0169 08       		.byte	8
 4314 016a 08       		.byte	8
 4315 016b 08       		.byte	8
 4316 016c 7F       		.byte	127
 4317 016d 00       		.byte	0
 4318 016e 41       		.byte	65
 4319 016f 7F       		.byte	127
 4320 0170 41       		.byte	65
 4321 0171 00       		.byte	0
 4322 0172 20       		.byte	32
 4323 0173 40       		.byte	64
 4324 0174 41       		.byte	65
 4325 0175 3F       		.byte	63
 4326 0176 01       		.byte	1
 4327 0177 7F       		.byte	127
 4328 0178 08       		.byte	8
 4329 0179 14       		.byte	20
 4330 017a 22       		.byte	34
 4331 017b 41       		.byte	65
 4332 017c 7F       		.byte	127
 4333 017d 40       		.byte	64
 4334 017e 40       		.byte	64
 4335 017f 40       		.byte	64
 4336 0180 40       		.byte	64
 4337 0181 7F       		.byte	127
 4338 0182 02       		.byte	2
 4339 0183 1C       		.byte	28
 4340 0184 02       		.byte	2
 4341 0185 7F       		.byte	127
 4342 0186 7F       		.byte	127
 4343 0187 04       		.byte	4
 4344 0188 08       		.byte	8
 4345 0189 10       		.byte	16
 4346 018a 7F       		.byte	127
 4347 018b 3E       		.byte	62
 4348 018c 41       		.byte	65
 4349 018d 41       		.byte	65
 4350 018e 41       		.byte	65
 4351 018f 3E       		.byte	62
 4352 0190 7F       		.byte	127
 4353 0191 09       		.byte	9
 4354 0192 09       		.byte	9
 4355 0193 09       		.byte	9
 4356 0194 06       		.byte	6
 4357 0195 3E       		.byte	62
 4358 0196 41       		.byte	65
 4359 0197 51       		.byte	81
 4360 0198 21       		.byte	33
 4361 0199 5E       		.byte	94
 4362 019a 7F       		.byte	127
 4363 019b 09       		.byte	9
 4364 019c 19       		.byte	25
 4365 019d 29       		.byte	41
 4366 019e 46       		.byte	70
 4367 019f 26       		.byte	38
 4368 01a0 49       		.byte	73
 4369 01a1 49       		.byte	73
 4370 01a2 49       		.byte	73
 4371 01a3 32       		.byte	50
 4372 01a4 03       		.byte	3
 4373 01a5 01       		.byte	1
 4374 01a6 7F       		.byte	127
 4375 01a7 01       		.byte	1
 4376 01a8 03       		.byte	3
 4377 01a9 3F       		.byte	63
 4378 01aa 40       		.byte	64
 4379 01ab 40       		.byte	64
 4380 01ac 40       		.byte	64
 4381 01ad 3F       		.byte	63
 4382 01ae 1F       		.byte	31
 4383 01af 20       		.byte	32
 4384 01b0 40       		.byte	64
 4385 01b1 20       		.byte	32
 4386 01b2 1F       		.byte	31
 4387 01b3 3F       		.byte	63
 4388 01b4 40       		.byte	64
 4389 01b5 38       		.byte	56
 4390 01b6 40       		.byte	64
 4391 01b7 3F       		.byte	63
 4392 01b8 63       		.byte	99
 4393 01b9 14       		.byte	20
 4394 01ba 08       		.byte	8
 4395 01bb 14       		.byte	20
 4396 01bc 63       		.byte	99
 4397 01bd 03       		.byte	3
 4398 01be 04       		.byte	4
 4399 01bf 78       		.byte	120
 4400 01c0 04       		.byte	4
 4401 01c1 03       		.byte	3
 4402 01c2 61       		.byte	97
 4403 01c3 59       		.byte	89
 4404 01c4 49       		.byte	73
 4405 01c5 4D       		.byte	77
 4406 01c6 43       		.byte	67
 4407 01c7 00       		.byte	0
 4408 01c8 7F       		.byte	127
 4409 01c9 41       		.byte	65
 4410 01ca 41       		.byte	65
 4411 01cb 41       		.byte	65
 4412 01cc 02       		.byte	2
 4413 01cd 04       		.byte	4
 4414 01ce 08       		.byte	8
 4415 01cf 10       		.byte	16
 4416 01d0 20       		.byte	32
 4417 01d1 00       		.byte	0
 4418 01d2 41       		.byte	65
 4419 01d3 41       		.byte	65
 4420 01d4 41       		.byte	65
 4421 01d5 7F       		.byte	127
 4422 01d6 04       		.byte	4
 4423 01d7 02       		.byte	2
 4424 01d8 01       		.byte	1
 4425 01d9 02       		.byte	2
 4426 01da 04       		.byte	4
 4427 01db 40       		.byte	64
 4428 01dc 40       		.byte	64
 4429 01dd 40       		.byte	64
 4430 01de 40       		.byte	64
 4431 01df 40       		.byte	64
 4432 01e0 00       		.byte	0
 4433 01e1 03       		.byte	3
 4434 01e2 07       		.byte	7
 4435 01e3 08       		.byte	8
 4436 01e4 00       		.byte	0
 4437 01e5 20       		.byte	32
 4438 01e6 54       		.byte	84
 4439 01e7 54       		.byte	84
 4440 01e8 78       		.byte	120
 4441 01e9 40       		.byte	64
 4442 01ea 7F       		.byte	127
 4443 01eb 28       		.byte	40
 4444 01ec 44       		.byte	68
 4445 01ed 44       		.byte	68
 4446 01ee 38       		.byte	56
 4447 01ef 38       		.byte	56
 4448 01f0 44       		.byte	68
 4449 01f1 44       		.byte	68
 4450 01f2 44       		.byte	68
 4451 01f3 28       		.byte	40
 4452 01f4 38       		.byte	56
 4453 01f5 44       		.byte	68
 4454 01f6 44       		.byte	68
 4455 01f7 28       		.byte	40
 4456 01f8 7F       		.byte	127
 4457 01f9 38       		.byte	56
 4458 01fa 54       		.byte	84
 4459 01fb 54       		.byte	84
 4460 01fc 54       		.byte	84
 4461 01fd 18       		.byte	24
 4462 01fe 00       		.byte	0
 4463 01ff 08       		.byte	8
 4464 0200 7E       		.byte	126
 4465 0201 09       		.byte	9
 4466 0202 02       		.byte	2
 4467 0203 18       		.byte	24
 4468 0204 A4       		.byte	-92
 4469 0205 A4       		.byte	-92
 4470 0206 9C       		.byte	-100
 4471 0207 78       		.byte	120
 4472 0208 7F       		.byte	127
 4473 0209 08       		.byte	8
 4474 020a 04       		.byte	4
 4475 020b 04       		.byte	4
 4476 020c 78       		.byte	120
 4477 020d 00       		.byte	0
 4478 020e 44       		.byte	68
 4479 020f 7D       		.byte	125
 4480 0210 40       		.byte	64
 4481 0211 00       		.byte	0
 4482 0212 20       		.byte	32
 4483 0213 40       		.byte	64
 4484 0214 40       		.byte	64
 4485 0215 3D       		.byte	61
 4486 0216 00       		.byte	0
 4487 0217 7F       		.byte	127
 4488 0218 10       		.byte	16
 4489 0219 28       		.byte	40
 4490 021a 44       		.byte	68
 4491 021b 00       		.byte	0
 4492 021c 00       		.byte	0
 4493 021d 41       		.byte	65
 4494 021e 7F       		.byte	127
 4495 021f 40       		.byte	64
 4496 0220 00       		.byte	0
 4497 0221 7C       		.byte	124
 4498 0222 04       		.byte	4
 4499 0223 78       		.byte	120
 4500 0224 04       		.byte	4
 4501 0225 78       		.byte	120
 4502 0226 7C       		.byte	124
 4503 0227 08       		.byte	8
 4504 0228 04       		.byte	4
 4505 0229 04       		.byte	4
 4506 022a 78       		.byte	120
 4507 022b 38       		.byte	56
 4508 022c 44       		.byte	68
 4509 022d 44       		.byte	68
 4510 022e 44       		.byte	68
 4511 022f 38       		.byte	56
 4512 0230 FC       		.byte	-4
 4513 0231 18       		.byte	24
 4514 0232 24       		.byte	36
 4515 0233 24       		.byte	36
 4516 0234 18       		.byte	24
 4517 0235 18       		.byte	24
 4518 0236 24       		.byte	36
 4519 0237 24       		.byte	36
 4520 0238 18       		.byte	24
 4521 0239 FC       		.byte	-4
 4522 023a 7C       		.byte	124
 4523 023b 08       		.byte	8
 4524 023c 04       		.byte	4
 4525 023d 04       		.byte	4
 4526 023e 08       		.byte	8
 4527 023f 48       		.byte	72
 4528 0240 54       		.byte	84
 4529 0241 54       		.byte	84
 4530 0242 54       		.byte	84
 4531 0243 24       		.byte	36
 4532 0244 04       		.byte	4
 4533 0245 04       		.byte	4
 4534 0246 3F       		.byte	63
 4535 0247 44       		.byte	68
 4536 0248 24       		.byte	36
 4537 0249 3C       		.byte	60
 4538 024a 40       		.byte	64
 4539 024b 40       		.byte	64
 4540 024c 20       		.byte	32
 4541 024d 7C       		.byte	124
 4542 024e 1C       		.byte	28
 4543 024f 20       		.byte	32
 4544 0250 40       		.byte	64
 4545 0251 20       		.byte	32
 4546 0252 1C       		.byte	28
 4547 0253 3C       		.byte	60
 4548 0254 40       		.byte	64
 4549 0255 30       		.byte	48
 4550 0256 40       		.byte	64
 4551 0257 3C       		.byte	60
 4552 0258 44       		.byte	68
 4553 0259 28       		.byte	40
 4554 025a 10       		.byte	16
 4555 025b 28       		.byte	40
 4556 025c 44       		.byte	68
 4557 025d 4C       		.byte	76
 4558 025e 90       		.byte	-112
 4559 025f 90       		.byte	-112
 4560 0260 90       		.byte	-112
 4561 0261 7C       		.byte	124
 4562 0262 44       		.byte	68
 4563 0263 64       		.byte	100
 4564 0264 54       		.byte	84
 4565 0265 4C       		.byte	76
 4566 0266 44       		.byte	68
 4567 0267 00       		.byte	0
 4568 0268 08       		.byte	8
 4569 0269 36       		.byte	54
 4570 026a 41       		.byte	65
 4571 026b 00       		.byte	0
 4572 026c 00       		.byte	0
 4573 026d 00       		.byte	0
 4574 026e 77       		.byte	119
 4575 026f 00       		.byte	0
 4576 0270 00       		.byte	0
 4577 0271 00       		.byte	0
 4578 0272 41       		.byte	65
 4579 0273 36       		.byte	54
 4580 0274 08       		.byte	8
 4581 0275 00       		.byte	0
 4582 0276 02       		.byte	2
 4583 0277 01       		.byte	1
 4584 0278 02       		.byte	2
 4585 0279 04       		.byte	4
 4586 027a 02       		.byte	2
 4587 027b 3C       		.byte	60
 4588 027c 26       		.byte	38
 4589 027d 23       		.byte	35
 4590 027e 26       		.byte	38
 4591 027f 3C       		.byte	60
 4592 0280 1E       		.byte	30
 4593 0281 A1       		.byte	-95
 4594 0282 A1       		.byte	-95
 4595 0283 61       		.byte	97
 4596 0284 12       		.byte	18
 4597 0285 3A       		.byte	58
 4598 0286 40       		.byte	64
 4599 0287 40       		.byte	64
 4600 0288 20       		.byte	32
 4601 0289 7A       		.byte	122
 4602 028a 38       		.byte	56
 4603 028b 54       		.byte	84
 4604 028c 54       		.byte	84
 4605 028d 55       		.byte	85
 4606 028e 59       		.byte	89
 4607 028f 21       		.byte	33
 4608 0290 55       		.byte	85
 4609 0291 55       		.byte	85
 4610 0292 79       		.byte	121
 4611 0293 41       		.byte	65
 4612 0294 21       		.byte	33
 4613 0295 54       		.byte	84
 4614 0296 54       		.byte	84
 4615 0297 78       		.byte	120
 4616 0298 41       		.byte	65
 4617 0299 21       		.byte	33
 4618 029a 55       		.byte	85
 4619 029b 54       		.byte	84
 4620 029c 78       		.byte	120
 4621 029d 40       		.byte	64
 4622 029e 20       		.byte	32
 4623 029f 54       		.byte	84
 4624 02a0 55       		.byte	85
 4625 02a1 79       		.byte	121
 4626 02a2 40       		.byte	64
 4627 02a3 0C       		.byte	12
 4628 02a4 1E       		.byte	30
 4629 02a5 52       		.byte	82
 4630 02a6 72       		.byte	114
 4631 02a7 12       		.byte	18
 4632 02a8 39       		.byte	57
 4633 02a9 55       		.byte	85
 4634 02aa 55       		.byte	85
 4635 02ab 55       		.byte	85
 4636 02ac 59       		.byte	89
 4637 02ad 39       		.byte	57
 4638 02ae 54       		.byte	84
 4639 02af 54       		.byte	84
 4640 02b0 54       		.byte	84
 4641 02b1 59       		.byte	89
 4642 02b2 39       		.byte	57
 4643 02b3 55       		.byte	85
 4644 02b4 54       		.byte	84
 4645 02b5 54       		.byte	84
 4646 02b6 58       		.byte	88
 4647 02b7 00       		.byte	0
 4648 02b8 00       		.byte	0
 4649 02b9 45       		.byte	69
 4650 02ba 7C       		.byte	124
 4651 02bb 41       		.byte	65
 4652 02bc 00       		.byte	0
 4653 02bd 02       		.byte	2
 4654 02be 45       		.byte	69
 4655 02bf 7D       		.byte	125
 4656 02c0 42       		.byte	66
 4657 02c1 00       		.byte	0
 4658 02c2 01       		.byte	1
 4659 02c3 45       		.byte	69
 4660 02c4 7C       		.byte	124
 4661 02c5 40       		.byte	64
 4662 02c6 F0       		.byte	-16
 4663 02c7 29       		.byte	41
 4664 02c8 24       		.byte	36
 4665 02c9 29       		.byte	41
 4666 02ca F0       		.byte	-16
 4667 02cb F0       		.byte	-16
 4668 02cc 28       		.byte	40
 4669 02cd 25       		.byte	37
 4670 02ce 28       		.byte	40
 4671 02cf F0       		.byte	-16
 4672 02d0 7C       		.byte	124
 4673 02d1 54       		.byte	84
 4674 02d2 55       		.byte	85
 4675 02d3 45       		.byte	69
 4676 02d4 00       		.byte	0
 4677 02d5 20       		.byte	32
 4678 02d6 54       		.byte	84
 4679 02d7 54       		.byte	84
 4680 02d8 7C       		.byte	124
 4681 02d9 54       		.byte	84
 4682 02da 7C       		.byte	124
 4683 02db 0A       		.byte	10
 4684 02dc 09       		.byte	9
 4685 02dd 7F       		.byte	127
 4686 02de 49       		.byte	73
 4687 02df 32       		.byte	50
 4688 02e0 49       		.byte	73
 4689 02e1 49       		.byte	73
 4690 02e2 49       		.byte	73
 4691 02e3 32       		.byte	50
 4692 02e4 32       		.byte	50
 4693 02e5 48       		.byte	72
 4694 02e6 48       		.byte	72
 4695 02e7 48       		.byte	72
 4696 02e8 32       		.byte	50
 4697 02e9 32       		.byte	50
 4698 02ea 4A       		.byte	74
 4699 02eb 48       		.byte	72
 4700 02ec 48       		.byte	72
 4701 02ed 30       		.byte	48
 4702 02ee 3A       		.byte	58
 4703 02ef 41       		.byte	65
 4704 02f0 41       		.byte	65
 4705 02f1 21       		.byte	33
 4706 02f2 7A       		.byte	122
 4707 02f3 3A       		.byte	58
 4708 02f4 42       		.byte	66
 4709 02f5 40       		.byte	64
 4710 02f6 20       		.byte	32
 4711 02f7 78       		.byte	120
 4712 02f8 00       		.byte	0
 4713 02f9 9D       		.byte	-99
 4714 02fa A0       		.byte	-96
 4715 02fb A0       		.byte	-96
 4716 02fc 7D       		.byte	125
 4717 02fd 39       		.byte	57
 4718 02fe 44       		.byte	68
 4719 02ff 44       		.byte	68
 4720 0300 44       		.byte	68
 4721 0301 39       		.byte	57
 4722 0302 3D       		.byte	61
 4723 0303 40       		.byte	64
 4724 0304 40       		.byte	64
 4725 0305 40       		.byte	64
 4726 0306 3D       		.byte	61
 4727 0307 3C       		.byte	60
 4728 0308 24       		.byte	36
 4729 0309 FF       		.byte	-1
 4730 030a 24       		.byte	36
 4731 030b 24       		.byte	36
 4732 030c 48       		.byte	72
 4733 030d 7E       		.byte	126
 4734 030e 49       		.byte	73
 4735 030f 43       		.byte	67
 4736 0310 66       		.byte	102
 4737 0311 2B       		.byte	43
 4738 0312 2F       		.byte	47
 4739 0313 FC       		.byte	-4
 4740 0314 2F       		.byte	47
 4741 0315 2B       		.byte	43
 4742 0316 FF       		.byte	-1
 4743 0317 09       		.byte	9
 4744 0318 29       		.byte	41
 4745 0319 F6       		.byte	-10
 4746 031a 20       		.byte	32
 4747 031b C0       		.byte	-64
 4748 031c 88       		.byte	-120
 4749 031d 7E       		.byte	126
 4750 031e 09       		.byte	9
 4751 031f 03       		.byte	3
 4752 0320 20       		.byte	32
 4753 0321 54       		.byte	84
 4754 0322 54       		.byte	84
 4755 0323 79       		.byte	121
 4756 0324 41       		.byte	65
 4757 0325 00       		.byte	0
 4758 0326 00       		.byte	0
 4759 0327 44       		.byte	68
 4760 0328 7D       		.byte	125
 4761 0329 41       		.byte	65
 4762 032a 30       		.byte	48
 4763 032b 48       		.byte	72
 4764 032c 48       		.byte	72
 4765 032d 4A       		.byte	74
 4766 032e 32       		.byte	50
 4767 032f 38       		.byte	56
 4768 0330 40       		.byte	64
 4769 0331 40       		.byte	64
 4770 0332 22       		.byte	34
 4771 0333 7A       		.byte	122
 4772 0334 00       		.byte	0
 4773 0335 7A       		.byte	122
 4774 0336 0A       		.byte	10
 4775 0337 0A       		.byte	10
 4776 0338 72       		.byte	114
 4777 0339 7D       		.byte	125
 4778 033a 0D       		.byte	13
 4779 033b 19       		.byte	25
 4780 033c 31       		.byte	49
 4781 033d 7D       		.byte	125
 4782 033e 26       		.byte	38
 4783 033f 29       		.byte	41
 4784 0340 29       		.byte	41
 4785 0341 2F       		.byte	47
 4786 0342 28       		.byte	40
 4787 0343 26       		.byte	38
 4788 0344 29       		.byte	41
 4789 0345 29       		.byte	41
 4790 0346 29       		.byte	41
 4791 0347 26       		.byte	38
 4792 0348 30       		.byte	48
 4793 0349 48       		.byte	72
 4794 034a 4D       		.byte	77
 4795 034b 40       		.byte	64
 4796 034c 20       		.byte	32
 4797 034d 38       		.byte	56
 4798 034e 08       		.byte	8
 4799 034f 08       		.byte	8
 4800 0350 08       		.byte	8
 4801 0351 08       		.byte	8
 4802 0352 08       		.byte	8
 4803 0353 08       		.byte	8
 4804 0354 08       		.byte	8
 4805 0355 08       		.byte	8
 4806 0356 38       		.byte	56
 4807 0357 2F       		.byte	47
 4808 0358 10       		.byte	16
 4809 0359 C8       		.byte	-56
 4810 035a AC       		.byte	-84
 4811 035b BA       		.byte	-70
 4812 035c 2F       		.byte	47
 4813 035d 10       		.byte	16
 4814 035e 28       		.byte	40
 4815 035f 34       		.byte	52
 4816 0360 FA       		.byte	-6
 4817 0361 00       		.byte	0
 4818 0362 00       		.byte	0
 4819 0363 7B       		.byte	123
 4820 0364 00       		.byte	0
 4821 0365 00       		.byte	0
 4822 0366 08       		.byte	8
 4823 0367 14       		.byte	20
 4824 0368 2A       		.byte	42
 4825 0369 14       		.byte	20
 4826 036a 22       		.byte	34
 4827 036b 22       		.byte	34
 4828 036c 14       		.byte	20
 4829 036d 2A       		.byte	42
 4830 036e 14       		.byte	20
 4831 036f 08       		.byte	8
 4832 0370 AA       		.byte	-86
 4833 0371 00       		.byte	0
 4834 0372 55       		.byte	85
 4835 0373 00       		.byte	0
 4836 0374 AA       		.byte	-86
 4837 0375 AA       		.byte	-86
 4838 0376 55       		.byte	85
 4839 0377 AA       		.byte	-86
 4840 0378 55       		.byte	85
 4841 0379 AA       		.byte	-86
 4842 037a 00       		.byte	0
 4843 037b 00       		.byte	0
 4844 037c 00       		.byte	0
 4845 037d FF       		.byte	-1
 4846 037e 00       		.byte	0
 4847 037f 10       		.byte	16
 4848 0380 10       		.byte	16
 4849 0381 10       		.byte	16
 4850 0382 FF       		.byte	-1
 4851 0383 00       		.byte	0
 4852 0384 14       		.byte	20
 4853 0385 14       		.byte	20
 4854 0386 14       		.byte	20
 4855 0387 FF       		.byte	-1
 4856 0388 00       		.byte	0
 4857 0389 10       		.byte	16
 4858 038a 10       		.byte	16
 4859 038b FF       		.byte	-1
 4860 038c 00       		.byte	0
 4861 038d FF       		.byte	-1
 4862 038e 10       		.byte	16
 4863 038f 10       		.byte	16
 4864 0390 F0       		.byte	-16
 4865 0391 10       		.byte	16
 4866 0392 F0       		.byte	-16
 4867 0393 14       		.byte	20
 4868 0394 14       		.byte	20
 4869 0395 14       		.byte	20
 4870 0396 FC       		.byte	-4
 4871 0397 00       		.byte	0
 4872 0398 14       		.byte	20
 4873 0399 14       		.byte	20
 4874 039a F7       		.byte	-9
 4875 039b 00       		.byte	0
 4876 039c FF       		.byte	-1
 4877 039d 00       		.byte	0
 4878 039e 00       		.byte	0
 4879 039f FF       		.byte	-1
 4880 03a0 00       		.byte	0
 4881 03a1 FF       		.byte	-1
 4882 03a2 14       		.byte	20
 4883 03a3 14       		.byte	20
 4884 03a4 F4       		.byte	-12
 4885 03a5 04       		.byte	4
 4886 03a6 FC       		.byte	-4
 4887 03a7 14       		.byte	20
 4888 03a8 14       		.byte	20
 4889 03a9 17       		.byte	23
 4890 03aa 10       		.byte	16
 4891 03ab 1F       		.byte	31
 4892 03ac 10       		.byte	16
 4893 03ad 10       		.byte	16
 4894 03ae 1F       		.byte	31
 4895 03af 10       		.byte	16
 4896 03b0 1F       		.byte	31
 4897 03b1 14       		.byte	20
 4898 03b2 14       		.byte	20
 4899 03b3 14       		.byte	20
 4900 03b4 1F       		.byte	31
 4901 03b5 00       		.byte	0
 4902 03b6 10       		.byte	16
 4903 03b7 10       		.byte	16
 4904 03b8 10       		.byte	16
 4905 03b9 F0       		.byte	-16
 4906 03ba 00       		.byte	0
 4907 03bb 00       		.byte	0
 4908 03bc 00       		.byte	0
 4909 03bd 00       		.byte	0
 4910 03be 1F       		.byte	31
 4911 03bf 10       		.byte	16
 4912 03c0 10       		.byte	16
 4913 03c1 10       		.byte	16
 4914 03c2 10       		.byte	16
 4915 03c3 1F       		.byte	31
 4916 03c4 10       		.byte	16
 4917 03c5 10       		.byte	16
 4918 03c6 10       		.byte	16
 4919 03c7 10       		.byte	16
 4920 03c8 F0       		.byte	-16
 4921 03c9 10       		.byte	16
 4922 03ca 00       		.byte	0
 4923 03cb 00       		.byte	0
 4924 03cc 00       		.byte	0
 4925 03cd FF       		.byte	-1
 4926 03ce 10       		.byte	16
 4927 03cf 10       		.byte	16
 4928 03d0 10       		.byte	16
 4929 03d1 10       		.byte	16
 4930 03d2 10       		.byte	16
 4931 03d3 10       		.byte	16
 4932 03d4 10       		.byte	16
 4933 03d5 10       		.byte	16
 4934 03d6 10       		.byte	16
 4935 03d7 FF       		.byte	-1
 4936 03d8 10       		.byte	16
 4937 03d9 00       		.byte	0
 4938 03da 00       		.byte	0
 4939 03db 00       		.byte	0
 4940 03dc FF       		.byte	-1
 4941 03dd 14       		.byte	20
 4942 03de 00       		.byte	0
 4943 03df 00       		.byte	0
 4944 03e0 FF       		.byte	-1
 4945 03e1 00       		.byte	0
 4946 03e2 FF       		.byte	-1
 4947 03e3 00       		.byte	0
 4948 03e4 00       		.byte	0
 4949 03e5 1F       		.byte	31
 4950 03e6 10       		.byte	16
 4951 03e7 17       		.byte	23
 4952 03e8 00       		.byte	0
 4953 03e9 00       		.byte	0
 4954 03ea FC       		.byte	-4
 4955 03eb 04       		.byte	4
 4956 03ec F4       		.byte	-12
 4957 03ed 14       		.byte	20
 4958 03ee 14       		.byte	20
 4959 03ef 17       		.byte	23
 4960 03f0 10       		.byte	16
 4961 03f1 17       		.byte	23
 4962 03f2 14       		.byte	20
 4963 03f3 14       		.byte	20
 4964 03f4 F4       		.byte	-12
 4965 03f5 04       		.byte	4
 4966 03f6 F4       		.byte	-12
 4967 03f7 00       		.byte	0
 4968 03f8 00       		.byte	0
 4969 03f9 FF       		.byte	-1
 4970 03fa 00       		.byte	0
 4971 03fb F7       		.byte	-9
 4972 03fc 14       		.byte	20
 4973 03fd 14       		.byte	20
 4974 03fe 14       		.byte	20
 4975 03ff 14       		.byte	20
 4976 0400 14       		.byte	20
 4977 0401 14       		.byte	20
 4978 0402 14       		.byte	20
 4979 0403 F7       		.byte	-9
 4980 0404 00       		.byte	0
 4981 0405 F7       		.byte	-9
 4982 0406 14       		.byte	20
 4983 0407 14       		.byte	20
 4984 0408 14       		.byte	20
 4985 0409 17       		.byte	23
 4986 040a 14       		.byte	20
 4987 040b 10       		.byte	16
 4988 040c 10       		.byte	16
 4989 040d 1F       		.byte	31
 4990 040e 10       		.byte	16
 4991 040f 1F       		.byte	31
 4992 0410 14       		.byte	20
 4993 0411 14       		.byte	20
 4994 0412 14       		.byte	20
 4995 0413 F4       		.byte	-12
 4996 0414 14       		.byte	20
 4997 0415 10       		.byte	16
 4998 0416 10       		.byte	16
 4999 0417 F0       		.byte	-16
 5000 0418 10       		.byte	16
 5001 0419 F0       		.byte	-16
 5002 041a 00       		.byte	0
 5003 041b 00       		.byte	0
 5004 041c 1F       		.byte	31
 5005 041d 10       		.byte	16
 5006 041e 1F       		.byte	31
 5007 041f 00       		.byte	0
 5008 0420 00       		.byte	0
 5009 0421 00       		.byte	0
 5010 0422 1F       		.byte	31
 5011 0423 14       		.byte	20
 5012 0424 00       		.byte	0
 5013 0425 00       		.byte	0
 5014 0426 00       		.byte	0
 5015 0427 FC       		.byte	-4
 5016 0428 14       		.byte	20
 5017 0429 00       		.byte	0
 5018 042a 00       		.byte	0
 5019 042b F0       		.byte	-16
 5020 042c 10       		.byte	16
 5021 042d F0       		.byte	-16
 5022 042e 10       		.byte	16
 5023 042f 10       		.byte	16
 5024 0430 FF       		.byte	-1
 5025 0431 10       		.byte	16
 5026 0432 FF       		.byte	-1
 5027 0433 14       		.byte	20
 5028 0434 14       		.byte	20
 5029 0435 14       		.byte	20
 5030 0436 FF       		.byte	-1
 5031 0437 14       		.byte	20
 5032 0438 10       		.byte	16
 5033 0439 10       		.byte	16
 5034 043a 10       		.byte	16
 5035 043b 1F       		.byte	31
 5036 043c 00       		.byte	0
 5037 043d 00       		.byte	0
 5038 043e 00       		.byte	0
 5039 043f 00       		.byte	0
 5040 0440 F0       		.byte	-16
 5041 0441 10       		.byte	16
 5042 0442 FF       		.byte	-1
 5043 0443 FF       		.byte	-1
 5044 0444 FF       		.byte	-1
 5045 0445 FF       		.byte	-1
 5046 0446 FF       		.byte	-1
 5047 0447 F0       		.byte	-16
 5048 0448 F0       		.byte	-16
 5049 0449 F0       		.byte	-16
 5050 044a F0       		.byte	-16
 5051 044b F0       		.byte	-16
 5052 044c FF       		.byte	-1
 5053 044d FF       		.byte	-1
 5054 044e FF       		.byte	-1
 5055 044f 00       		.byte	0
 5056 0450 00       		.byte	0
 5057 0451 00       		.byte	0
 5058 0452 00       		.byte	0
 5059 0453 00       		.byte	0
 5060 0454 FF       		.byte	-1
 5061 0455 FF       		.byte	-1
 5062 0456 0F       		.byte	15
 5063 0457 0F       		.byte	15
 5064 0458 0F       		.byte	15
 5065 0459 0F       		.byte	15
 5066 045a 0F       		.byte	15
 5067 045b 38       		.byte	56
 5068 045c 44       		.byte	68
 5069 045d 44       		.byte	68
 5070 045e 38       		.byte	56
 5071 045f 44       		.byte	68
 5072 0460 7C       		.byte	124
 5073 0461 2A       		.byte	42
 5074 0462 2A       		.byte	42
 5075 0463 3E       		.byte	62
 5076 0464 14       		.byte	20
 5077 0465 7E       		.byte	126
 5078 0466 02       		.byte	2
 5079 0467 02       		.byte	2
 5080 0468 06       		.byte	6
 5081 0469 06       		.byte	6
 5082 046a 02       		.byte	2
 5083 046b 7E       		.byte	126
 5084 046c 02       		.byte	2
 5085 046d 7E       		.byte	126
 5086 046e 02       		.byte	2
 5087 046f 63       		.byte	99
 5088 0470 55       		.byte	85
 5089 0471 49       		.byte	73
 5090 0472 41       		.byte	65
 5091 0473 63       		.byte	99
 5092 0474 38       		.byte	56
 5093 0475 44       		.byte	68
 5094 0476 44       		.byte	68
 5095 0477 3C       		.byte	60
 5096 0478 04       		.byte	4
 5097 0479 40       		.byte	64
 5098 047a 7E       		.byte	126
 5099 047b 20       		.byte	32
 5100 047c 1E       		.byte	30
 5101 047d 20       		.byte	32
 5102 047e 06       		.byte	6
 5103 047f 02       		.byte	2
 5104 0480 7E       		.byte	126
 5105 0481 02       		.byte	2
 5106 0482 02       		.byte	2
 5107 0483 99       		.byte	-103
 5108 0484 A5       		.byte	-91
 5109 0485 E7       		.byte	-25
 5110 0486 A5       		.byte	-91
 5111 0487 99       		.byte	-103
 5112 0488 1C       		.byte	28
 5113 0489 2A       		.byte	42
 5114 048a 49       		.byte	73
 5115 048b 2A       		.byte	42
 5116 048c 1C       		.byte	28
 5117 048d 4C       		.byte	76
 5118 048e 72       		.byte	114
 5119 048f 01       		.byte	1
 5120 0490 72       		.byte	114
 5121 0491 4C       		.byte	76
 5122 0492 30       		.byte	48
 5123 0493 4A       		.byte	74
 5124 0494 4D       		.byte	77
 5125 0495 4D       		.byte	77
 5126 0496 30       		.byte	48
 5127 0497 30       		.byte	48
 5128 0498 48       		.byte	72
 5129 0499 78       		.byte	120
 5130 049a 48       		.byte	72
 5131 049b 30       		.byte	48
 5132 049c BC       		.byte	-68
 5133 049d 62       		.byte	98
 5134 049e 5A       		.byte	90
 5135 049f 46       		.byte	70
 5136 04a0 3D       		.byte	61
 5137 04a1 3E       		.byte	62
 5138 04a2 49       		.byte	73
 5139 04a3 49       		.byte	73
 5140 04a4 49       		.byte	73
 5141 04a5 00       		.byte	0
 5142 04a6 7E       		.byte	126
 5143 04a7 01       		.byte	1
 5144 04a8 01       		.byte	1
 5145 04a9 01       		.byte	1
 5146 04aa 7E       		.byte	126
 5147 04ab 2A       		.byte	42
 5148 04ac 2A       		.byte	42
 5149 04ad 2A       		.byte	42
 5150 04ae 2A       		.byte	42
 5151 04af 2A       		.byte	42
 5152 04b0 44       		.byte	68
 5153 04b1 44       		.byte	68
 5154 04b2 5F       		.byte	95
 5155 04b3 44       		.byte	68
 5156 04b4 44       		.byte	68
 5157 04b5 40       		.byte	64
 5158 04b6 51       		.byte	81
 5159 04b7 4A       		.byte	74
 5160 04b8 44       		.byte	68
 5161 04b9 40       		.byte	64
 5162 04ba 40       		.byte	64
 5163 04bb 44       		.byte	68
 5164 04bc 4A       		.byte	74
 5165 04bd 51       		.byte	81
 5166 04be 40       		.byte	64
 5167 04bf 00       		.byte	0
 5168 04c0 00       		.byte	0
 5169 04c1 FF       		.byte	-1
 5170 04c2 01       		.byte	1
 5171 04c3 03       		.byte	3
 5172 04c4 E0       		.byte	-32
 5173 04c5 80       		.byte	-128
 5174 04c6 FF       		.byte	-1
 5175 04c7 00       		.byte	0
 5176 04c8 00       		.byte	0
 5177 04c9 08       		.byte	8
 5178 04ca 08       		.byte	8
 5179 04cb 6B       		.byte	107
 5180 04cc 6B       		.byte	107
 5181 04cd 08       		.byte	8
 5182 04ce 36       		.byte	54
 5183 04cf 12       		.byte	18
 5184 04d0 36       		.byte	54
 5185 04d1 24       		.byte	36
 5186 04d2 36       		.byte	54
 5187 04d3 06       		.byte	6
 5188 04d4 0F       		.byte	15
 5189 04d5 09       		.byte	9
 5190 04d6 0F       		.byte	15
 5191 04d7 06       		.byte	6
 5192 04d8 00       		.byte	0
 5193 04d9 00       		.byte	0
 5194 04da 18       		.byte	24
 5195 04db 18       		.byte	24
 5196 04dc 00       		.byte	0
 5197 04dd 00       		.byte	0
 5198 04de 00       		.byte	0
 5199 04df 10       		.byte	16
 5200 04e0 10       		.byte	16
 5201 04e1 00       		.byte	0
 5202 04e2 30       		.byte	48
 5203 04e3 40       		.byte	64
 5204 04e4 FF       		.byte	-1
 5205 04e5 01       		.byte	1
 5206 04e6 01       		.byte	1
 5207 04e7 00       		.byte	0
 5208 04e8 1F       		.byte	31
 5209 04e9 01       		.byte	1
 5210 04ea 01       		.byte	1
 5211 04eb 1E       		.byte	30
 5212 04ec 00       		.byte	0
 5213 04ed 19       		.byte	25
 5214 04ee 1D       		.byte	29
 5215 04ef 17       		.byte	23
 5216 04f0 12       		.byte	18
 5217 04f1 00       		.byte	0
 5218 04f2 3C       		.byte	60
 5219 04f3 3C       		.byte	60
 5220 04f4 3C       		.byte	60
 5221 04f5 3C       		.byte	60
 5222 04f6 00       		.byte	0
 5223 04f7 00       		.byte	0
 5224 04f8 00       		.byte	0
 5225 04f9 00       		.byte	0
 5226 04fa 00       		.byte	0
 5227              		.section	.rodata._ZTV12Arduino_OLED,"a",%progbits
 5228              		.align	3
 5229              		.set	.LANCHOR1,. + 0
 5232              	_ZTV12Arduino_OLED:
 5233 0000 00000000 		.word	0
 5234 0004 00000000 		.word	0
 5235 0008 00000000 		.word	_ZN12Arduino_OLED9drawPixelEsst
 5236 000c 00000000 		.word	_ZN12Arduino_OLED13drawFastVLineEssst
 5237 0010 00000000 		.word	_ZN12Arduino_OLED13drawFastHLineEssst
 5238 0014 00000000 		.word	_ZN12Arduino_OLED8fillRectEsssst
 5239 0018 00000000 		.word	_ZN12Arduino_OLED10fillScreenEt
 5240 001c 00000000 		.section	.rodata.str1.1,"aMS",%progbits,1
 5241              	.LC0:
 5242 0000 504D5520 		.ascii	"PMU init...   \000"
 5242      696E6974 
 5242      2E2E2E20 
 5242      202000
 5243              	.LC1:
 5244 000f 4F4B00   		.ascii	"OK\000"
 5245              	.LC2:
 5246 0012 4641494C 		.ascii	"FAIL\000"
 5246      00
 5247              	.LC3:
 5248 0017 504D5520 		.ascii	"PMU enable... \000"
 5248      656E6162 
 5248      6C652E2E 
 5248      2E2000
 5249              	.LC4:
 5250 0026 59455300 		.ascii	"YES\000"
 5251              	.LC5:
 5252 002a 4E4F00   		.ascii	"NO\000"
 5253              	.LC6:
 5254 002d 55534220 		.ascii	"USB connected: \000"
 5254      636F6E6E 
 5254      65637465 
 5254      643A2000 
 5255              	.LC7:
 5256 003d 504D5520 		.ascii	"PMU charging:  \000"
 5256      63686172 
 5256      67696E67 
 5256      3A202000 
 5257              	.LC8:
 5258 004d 42617474 		.ascii	"Battery: %.2fV\000"
 5258      6572793A 
 5258      20252E32 
 5258      665600
 5259              	.LC9:
 5260 005c 53656E73 		.ascii	"Sensor:  %u%%\000"
 5260      6F723A20 
 5260      20257525 
 5260      2500
 5261              		.section	.bss.LightSensor,"aw",%nobits
 5264              	LightSensor:
 5265 0000 00       		.space	1
 5266              		.section	.bss.OLED,"aw",%nobits
 5267              		.align	2
 5268              		.set	.LANCHOR2,. + 0
 5271              	OLED:
 5272 0000 00000000 		.space	24
 5272      00000000 
 5272      00000000 
 5272      00000000 
 5272      00000000 
 5273              		.text
 5274              	.Letext0:
 5275              		.file 8 "src/libstm32f2/stm32f2xx.h"
 5276              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q1\\bin\\../lib/gcc/arm-none-eab
 5277              		.file 10 "src/libstm32f2/stm32f2xx_gpio.h"
 5278              		.file 11 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_power.h"
 5279              		.file 12 "src/libstm32f2/system_stm32f2xx.h"
 5280              		.file 13 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_power.cpp"
 5281              		.file 14 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_display.h"
 5282              		.file 15 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_adc.h"
 5283              		.file 16 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/driver_i2c.h"
 5284              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q1\\bin\\../lib/gcc/arm-none-ea
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:19     .text._ZN12Arduino_OLED8fillRectEsssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:24     .text._ZN12Arduino_OLED8fillRectEsssst:00000000 _ZN12Arduino_OLED8fillRectEsssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:76     .text._ZN12Arduino_OLED13drawFastHLineEssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:81     .text._ZN12Arduino_OLED13drawFastHLineEssst:00000000 _ZN12Arduino_OLED13drawFastHLineEssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:126    .text._ZN12Arduino_OLED13drawFastVLineEssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:131    .text._ZN12Arduino_OLED13drawFastVLineEssst:00000000 _ZN12Arduino_OLED13drawFastVLineEssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:176    .text._ZN12Arduino_OLED9drawPixelEsst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:181    .text._ZN12Arduino_OLED9drawPixelEsst:00000000 _ZN12Arduino_OLED9drawPixelEsst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:221    .text._ZN12Arduino_OLED10fillScreenEt:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:226    .text._ZN12Arduino_OLED10fillScreenEt:00000000 _ZN12Arduino_OLED10fillScreenEt
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:264    .text._ZN11Arduino_GFX10drawCircleEssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:269    .text._ZN11Arduino_GFX10drawCircleEssst:00000000 _ZN11Arduino_GFX10drawCircleEssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:560    .text._ZN11Arduino_GFX16drawCircleHelperEsssht:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:565    .text._ZN11Arduino_GFX16drawCircleHelperEsssht:00000000 _ZN11Arduino_GFX16drawCircleHelperEsssht
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:857    .text._ZN11Arduino_GFX16fillCircleHelperEssshst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:862    .text._ZN11Arduino_GFX16fillCircleHelperEssshst:00000000 _ZN11Arduino_GFX16fillCircleHelperEssshst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1102   .text._ZN11Arduino_GFX10fillCircleEssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1107   .text._ZN11Arduino_GFX10fillCircleEssst:00000000 _ZN11Arduino_GFX10fillCircleEssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1168   .text._ZN11Arduino_GFX8drawLineEsssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1173   .text._ZN11Arduino_GFX8drawLineEsssst:00000000 _ZN11Arduino_GFX8drawLineEsssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1363   .text._ZN11Arduino_GFX8drawRectEsssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1368   .text._ZN11Arduino_GFX8drawRectEsssst:00000000 _ZN11Arduino_GFX8drawRectEsssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1445   .text._ZN11Arduino_GFX13drawFastVLineEssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1450   .text._ZN11Arduino_GFX13drawFastVLineEssst:00000000 _ZN11Arduino_GFX13drawFastVLineEssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1481   .text._ZN11Arduino_GFX13drawFastHLineEssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1486   .text._ZN11Arduino_GFX13drawFastHLineEssst:00000000 _ZN11Arduino_GFX13drawFastHLineEssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1516   .text._ZN11Arduino_GFX8fillRectEsssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1521   .text._ZN11Arduino_GFX8fillRectEsssst:00000000 _ZN11Arduino_GFX8fillRectEsssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1589   .text._ZN11Arduino_GFX10fillScreenEt:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1594   .text._ZN11Arduino_GFX10fillScreenEt:00000000 _ZN11Arduino_GFX10fillScreenEt
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1626   .text._ZN11Arduino_GFX13drawRoundRectEssssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1631   .text._ZN11Arduino_GFX13drawRoundRectEssssst:00000000 _ZN11Arduino_GFX13drawRoundRectEssssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1791   .text._ZN11Arduino_GFX13fillRoundRectEssssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1796   .text._ZN11Arduino_GFX13fillRoundRectEssssst:00000000 _ZN11Arduino_GFX13fillRoundRectEssssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1895   .text._ZN11Arduino_GFX12drawTriangleEsssssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1900   .text._ZN11Arduino_GFX12drawTriangleEsssssst:00000000 _ZN11Arduino_GFX12drawTriangleEsssssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1964   .text._ZN11Arduino_GFX12fillTriangleEsssssst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:1969   .text._ZN11Arduino_GFX12fillTriangleEsssssst:00000000 _ZN11Arduino_GFX12fillTriangleEsssssst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2392   .text._ZN11Arduino_GFX10drawBitmapEssPKhsst:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2397   .text._ZN11Arduino_GFX10drawBitmapEssPKhsst:00000000 _ZN11Arduino_GFX10drawBitmapEssPKhsst
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2493   .text._ZN11Arduino_GFX8drawCharEsshtth:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2498   .text._ZN11Arduino_GFX8drawCharEsshtth:00000000 _ZN11Arduino_GFX8drawCharEsshtth
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2717   .text._ZN11Arduino_GFX8drawCharEsshtth:00000140 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2722   .text._ZN11Arduino_GFX5writeEh:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2727   .text._ZN11Arduino_GFX5writeEh:00000000 _ZN11Arduino_GFX5writeEh
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2813   .text._ZN11Arduino_GFX5printEPc:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2818   .text._ZN11Arduino_GFX5printEPc:00000000 _ZN11Arduino_GFX5printEPc
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2853   .text._ZN11Arduino_GFX7printlnEPc:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2858   .text._ZN11Arduino_GFX7printlnEPc:00000000 _ZN11Arduino_GFX7printlnEPc
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2890   .text._ZN11Arduino_GFX9setCursorEss:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2895   .text._ZN11Arduino_GFX9setCursorEss:00000000 _ZN11Arduino_GFX9setCursorEss
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2912   .text._ZN11Arduino_GFX11setTextSizeEh:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2917   .text._ZN11Arduino_GFX11setTextSizeEh:00000000 _ZN11Arduino_GFX11setTextSizeEh
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2936   .text._ZN11Arduino_GFX12setTextColorEt:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2941   .text._ZN11Arduino_GFX12setTextColorEt:00000000 _ZN11Arduino_GFX12setTextColorEt
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2958   .text._ZN11Arduino_GFX12setTextColorEtt:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2963   .text._ZN11Arduino_GFX12setTextColorEtt:00000000 _ZN11Arduino_GFX12setTextColorEtt
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2980   .text._ZN11Arduino_GFX11setTextWrapEb:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:2985   .text._ZN11Arduino_GFX11setTextWrapEb:00000000 _ZN11Arduino_GFX11setTextWrapEb
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3000   .text._ZN11Arduino_GFX5widthEv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3005   .text._ZN11Arduino_GFX5widthEv:00000000 _ZN11Arduino_GFX5widthEv
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3021   .text._ZN11Arduino_GFX6heightEv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3026   .text._ZN11Arduino_GFX6heightEv:00000000 _ZN11Arduino_GFX6heightEv
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3042   .text._ZN12Arduino_OLEDC2Ev:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3047   .text._ZN12Arduino_OLEDC2Ev:00000000 _ZN12Arduino_OLEDC2Ev
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3090   .text._ZN12Arduino_OLEDC2Ev:00000024 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3047   .text._ZN12Arduino_OLEDC2Ev:00000000 _ZN12Arduino_OLEDC1Ev
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3097   .text._ZN12Arduino_OLED5beginEv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3102   .text._ZN12Arduino_OLED5beginEv:00000000 _ZN12Arduino_OLED5beginEv
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3118   .text._ZN12Arduino_OLED8shutdownEv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3123   .text._ZN12Arduino_OLED8shutdownEv:00000000 _ZN12Arduino_OLED8shutdownEv
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3139   .text._ZN12Arduino_OLED8setPowerEh:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3144   .text._ZN12Arduino_OLED8setPowerEh:00000000 _ZN12Arduino_OLED8setPowerEh
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3163   .text._ZN12Arduino_OLED13setAddrWindowEhhhh:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3168   .text._ZN12Arduino_OLED13setAddrWindowEhhhh:00000000 _ZN12Arduino_OLED13setAddrWindowEhhhh
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3193   .text._ZN12Arduino_OLED9pushColorEt:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3198   .text._ZN12Arduino_OLED9pushColorEt:00000000 _ZN12Arduino_OLED9pushColorEt
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3219   .text._ZN12Arduino_OLED8Color565Ehhh:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3224   .text._ZN12Arduino_OLED8Color565Ehhh:00000000 _ZN12Arduino_OLED8Color565Ehhh
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3248   .text._Z4initv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3253   .text._Z4initv:00000000 _Z4initv
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3378   .text._Z4initv:0000006c $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3390   .text._Z5setupv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3395   .text._Z5setupv:00000000 _Z5setupv
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3542   .text._Z5setupv:00000084 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3556   .text._Z4loopv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3561   .text._Z4loopv:00000000 _Z4loopv
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3845   .text._Z4loopv:00000144 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3863   .text.startup.main:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3868   .text.startup.main:00000000 main
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3895   .text.startup._GLOBAL__sub_I_font:00000000 $t
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3899   .text.startup._GLOBAL__sub_I_font:00000000 _GLOBAL__sub_I_font
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3922   .text.startup._GLOBAL__sub_I_font:00000008 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3929   .init_array:00000000 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:5232   .rodata._ZTV12Arduino_OLED:00000000 _ZTV12Arduino_OLED
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3945   .bss.CPU:00000000 CPU
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3940   .bss.Battery:00000000 Battery
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:5264   .bss.LightSensor:00000000 LightSensor
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:5271   .bss.OLED:00000000 OLED
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3951   .data.font:00000000 font
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3941   .bss.Battery:00000000 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:3946   .bss.CPU:00000000 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:5228   .rodata._ZTV12Arduino_OLED:00000000 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:5265   .bss.LightSensor:00000000 $d
C:\Users\STINA\AppData\Local\Temp\cczvgwUP.s:5267   .bss.OLED:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
oled_window
oled_push
oled_init
oled_deinit
oled_power
delay_loop
initializePins
digitalRead
pinMode
cpu_init
SystemCoreClockUpdate
adc_init
i2c_init
PIN_PA9
PIN_PA12
pincfg_in_pu
int_ctr
SystemCoreClock
digitalWrite
delay
pmu_init
pmu_charge
PIN_PB8
PIN_PB11
__aeabi_ui2f
__aeabi_fdiv
__aeabi_f2d
pmu_charging
adc_battery
sprintf
adc_lightsensor
cpu_reclock
sysclock_3m25
sysclock_120m
PIN_PC3
