   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_cryp_des.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.CRYP_DES_ECB,"ax",%progbits
  19              		.align	1
  20              		.global	CRYP_DES_ECB
  21              		.thumb
  22              		.thumb_func
  24              	CRYP_DES_ECB:
  25              	.LFB56:
  26              		.file 1 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_cryp_des.c"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /**
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ******************************************************************************
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @file    stm32f2xx_cryp_des.c
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @author  MCD Application Team
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @version V1.1.2
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @date    05-March-2012 
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          It uses the stm32f2xx_cryp.c/.h drivers to access the STM32F2xx CRYP
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          peripheral.
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *  @verbatim
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          ===================================================================
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *                                   How to use this driver
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          ===================================================================
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          1. Enable The CRYP controller clock using 
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          2. Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB()
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *             function.
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          3. Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC()
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *             function.
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *  @endverbatim
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ******************************************************************************
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @attention
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * You may not use this file except in compliance with the License.
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * You may obtain a copy of the License at:
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * Unless required by applicable law or agreed to in writing, software 
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * See the License for the specific language governing permissions and
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * limitations under the License.
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ******************************************************************************
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   */
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** #include "stm32f2xx_cryp.h"
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @{
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   */
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /** @defgroup CRYP 
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @brief CRYP driver modules
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @{
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   */
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  67:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  68:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  69:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  70:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  71:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  72:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @{
  73:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   */ 
  74:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  75:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  76:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****  *  @brief   High Level DES functions 
  77:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****  *
  78:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** @verbatim   
  79:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****  ===============================================================================
  80:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****                           High Level DES functions
  81:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****  ===============================================================================
  82:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** @endverbatim
  83:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @{
  84:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   */
  85:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
  86:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /**
  87:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  88:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  89:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *           This parameter can be one of the following values:
  90:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  91:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  92:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  93:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  94:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  95:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
  96:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  97:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          - SUCCESS: Operation done
  98:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          - ERROR: Operation failed
  99:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   */
 100:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
 101:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
 102:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** {
  27              		.loc 1 102 0
  28              		.cfi_startproc
  29              		@ args = 4, pretend = 0, frame = 48
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 28
  35              		.cfi_offset 4, -28
  36              		.cfi_offset 5, -24
  37              		.cfi_offset 6, -20
  38              		.cfi_offset 7, -16
  39              		.cfi_offset 8, -12
  40              		.cfi_offset 9, -8
  41              		.cfi_offset 14, -4
  42 0004 8DB0     		sub	sp, sp, #52
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 80
  45              		.loc 1 102 0
  46 0006 8146     		mov	r9, r0
 103:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 104:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 105:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   __IO uint32_t counter = 0;
  47              		.loc 1 105 0
  48 0008 0026     		movs	r6, #0
 106:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t busystatus = 0;
 107:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 108:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 109:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 110:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 111:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t i = 0;
 112:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 113:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Crypto structures initialisation*/
 114:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  49              		.loc 1 114 0
  50 000a 04A8     		add	r0, sp, #16
  51              	.LVL1:
 102:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** {
  52              		.loc 1 102 0
  53 000c 0C46     		mov	r4, r1
  54 000e 1746     		mov	r7, r2
  55 0010 9846     		mov	r8, r3
 105:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   __IO uint32_t counter = 0;
  56              		.loc 1 105 0
  57 0012 0196     		str	r6, [sp, #4]
  58              	.LVL2:
 110:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  59              		.loc 1 110 0
  60 0014 149D     		ldr	r5, [sp, #80]
  61              	.LVL3:
  62              		.loc 1 114 0
  63 0016 FFF7FEFF 		bl	CRYP_KeyStructInit
  64              	.LVL4:
 115:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 116:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 117:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  65              		.loc 1 117 0
  66 001a B9F1010F 		cmp	r9, #1
  67 001e 02D1     		bne	.L2
 118:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   {
 119:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  68              		.loc 1 119 0
  69 0020 ADF80860 		strh	r6, [sp, #8]	@ movhi
  70 0024 02E0     		b	.L3
  71              	.L2:
 120:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   }
 121:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 122:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   {      
 123:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  72              		.loc 1 123 0
  73 0026 0423     		movs	r3, #4
  74 0028 ADF80830 		strh	r3, [sp, #8]	@ movhi
  75              	.L3:
 124:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   }
 125:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 126:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  76              		.loc 1 126 0
  77 002c 1020     		movs	r0, #16
  78 002e ADF80A00 		strh	r0, [sp, #10]	@ movhi
 127:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  79              		.loc 1 127 0
  80 0032 8021     		movs	r1, #128
 128:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  81              		.loc 1 128 0
  82 0034 02A8     		add	r0, sp, #8
 127:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  83              		.loc 1 127 0
  84 0036 ADF80C10 		strh	r1, [sp, #12]	@ movhi
  85              		.loc 1 128 0
  86 003a FFF7FEFF 		bl	CRYP_Init
  87              	.LVL5:
  88              	.LBB14:
  89              	.LBB15:
  90              		.file 2 "src/libstm32f2/core_cmInstr.h"
   1:src/libstm32f2/core_cmInstr.h **** /**************************************************************************//**
   2:src/libstm32f2/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:src/libstm32f2/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:src/libstm32f2/core_cmInstr.h ****  * @version  V3.01
   5:src/libstm32f2/core_cmInstr.h ****  * @date     06. March 2012
   6:src/libstm32f2/core_cmInstr.h ****  *
   7:src/libstm32f2/core_cmInstr.h ****  * @note
   8:src/libstm32f2/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:src/libstm32f2/core_cmInstr.h ****  *
  10:src/libstm32f2/core_cmInstr.h ****  * @par
  11:src/libstm32f2/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:src/libstm32f2/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:src/libstm32f2/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:src/libstm32f2/core_cmInstr.h ****  *
  15:src/libstm32f2/core_cmInstr.h ****  * @par
  16:src/libstm32f2/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:src/libstm32f2/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:src/libstm32f2/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:src/libstm32f2/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:src/libstm32f2/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:src/libstm32f2/core_cmInstr.h ****  *
  22:src/libstm32f2/core_cmInstr.h ****  ******************************************************************************/
  23:src/libstm32f2/core_cmInstr.h **** 
  24:src/libstm32f2/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:src/libstm32f2/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:src/libstm32f2/core_cmInstr.h **** 
  27:src/libstm32f2/core_cmInstr.h **** 
  28:src/libstm32f2/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:src/libstm32f2/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:src/libstm32f2/core_cmInstr.h ****   Access to dedicated instructions
  31:src/libstm32f2/core_cmInstr.h ****   @{
  32:src/libstm32f2/core_cmInstr.h **** */
  33:src/libstm32f2/core_cmInstr.h **** 
  34:src/libstm32f2/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:src/libstm32f2/core_cmInstr.h **** /* ARM armcc specific functions */
  36:src/libstm32f2/core_cmInstr.h **** 
  37:src/libstm32f2/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:src/libstm32f2/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:src/libstm32f2/core_cmInstr.h **** #endif
  40:src/libstm32f2/core_cmInstr.h **** 
  41:src/libstm32f2/core_cmInstr.h **** 
  42:src/libstm32f2/core_cmInstr.h **** /** \brief  No Operation
  43:src/libstm32f2/core_cmInstr.h **** 
  44:src/libstm32f2/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:src/libstm32f2/core_cmInstr.h ****  */
  46:src/libstm32f2/core_cmInstr.h **** #define __NOP                             __nop
  47:src/libstm32f2/core_cmInstr.h **** 
  48:src/libstm32f2/core_cmInstr.h **** 
  49:src/libstm32f2/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:src/libstm32f2/core_cmInstr.h **** 
  51:src/libstm32f2/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:src/libstm32f2/core_cmInstr.h ****     until one of a number of events occurs.
  53:src/libstm32f2/core_cmInstr.h ****  */
  54:src/libstm32f2/core_cmInstr.h **** #define __WFI                             __wfi
  55:src/libstm32f2/core_cmInstr.h **** 
  56:src/libstm32f2/core_cmInstr.h **** 
  57:src/libstm32f2/core_cmInstr.h **** /** \brief  Wait For Event
  58:src/libstm32f2/core_cmInstr.h **** 
  59:src/libstm32f2/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:src/libstm32f2/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:src/libstm32f2/core_cmInstr.h ****  */
  62:src/libstm32f2/core_cmInstr.h **** #define __WFE                             __wfe
  63:src/libstm32f2/core_cmInstr.h **** 
  64:src/libstm32f2/core_cmInstr.h **** 
  65:src/libstm32f2/core_cmInstr.h **** /** \brief  Send Event
  66:src/libstm32f2/core_cmInstr.h **** 
  67:src/libstm32f2/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:src/libstm32f2/core_cmInstr.h ****  */
  69:src/libstm32f2/core_cmInstr.h **** #define __SEV                             __sev
  70:src/libstm32f2/core_cmInstr.h **** 
  71:src/libstm32f2/core_cmInstr.h **** 
  72:src/libstm32f2/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:src/libstm32f2/core_cmInstr.h **** 
  74:src/libstm32f2/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:src/libstm32f2/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:src/libstm32f2/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:src/libstm32f2/core_cmInstr.h ****  */
  78:src/libstm32f2/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:src/libstm32f2/core_cmInstr.h **** 
  80:src/libstm32f2/core_cmInstr.h **** 
  81:src/libstm32f2/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:src/libstm32f2/core_cmInstr.h **** 
  83:src/libstm32f2/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:src/libstm32f2/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:src/libstm32f2/core_cmInstr.h ****  */
  86:src/libstm32f2/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:src/libstm32f2/core_cmInstr.h **** 
  88:src/libstm32f2/core_cmInstr.h **** 
  89:src/libstm32f2/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:src/libstm32f2/core_cmInstr.h **** 
  91:src/libstm32f2/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:src/libstm32f2/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:src/libstm32f2/core_cmInstr.h ****  */
  94:src/libstm32f2/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:src/libstm32f2/core_cmInstr.h **** 
  96:src/libstm32f2/core_cmInstr.h **** 
  97:src/libstm32f2/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:src/libstm32f2/core_cmInstr.h **** 
  99:src/libstm32f2/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:src/libstm32f2/core_cmInstr.h **** 
 101:src/libstm32f2/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:src/libstm32f2/core_cmInstr.h ****     \return               Reversed value
 103:src/libstm32f2/core_cmInstr.h ****  */
 104:src/libstm32f2/core_cmInstr.h **** #define __REV                             __rev
 105:src/libstm32f2/core_cmInstr.h **** 
 106:src/libstm32f2/core_cmInstr.h **** 
 107:src/libstm32f2/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:src/libstm32f2/core_cmInstr.h **** 
 109:src/libstm32f2/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:src/libstm32f2/core_cmInstr.h **** 
 111:src/libstm32f2/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:src/libstm32f2/core_cmInstr.h ****     \return               Reversed value
 113:src/libstm32f2/core_cmInstr.h ****  */
 114:src/libstm32f2/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:src/libstm32f2/core_cmInstr.h **** {
 116:src/libstm32f2/core_cmInstr.h ****   rev16 r0, r0
 117:src/libstm32f2/core_cmInstr.h ****   bx lr
 118:src/libstm32f2/core_cmInstr.h **** }
 119:src/libstm32f2/core_cmInstr.h **** 
 120:src/libstm32f2/core_cmInstr.h **** 
 121:src/libstm32f2/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:src/libstm32f2/core_cmInstr.h **** 
 123:src/libstm32f2/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:src/libstm32f2/core_cmInstr.h **** 
 125:src/libstm32f2/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:src/libstm32f2/core_cmInstr.h ****     \return               Reversed value
 127:src/libstm32f2/core_cmInstr.h ****  */
 128:src/libstm32f2/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:src/libstm32f2/core_cmInstr.h **** {
 130:src/libstm32f2/core_cmInstr.h ****   revsh r0, r0
 131:src/libstm32f2/core_cmInstr.h ****   bx lr
 132:src/libstm32f2/core_cmInstr.h **** }
 133:src/libstm32f2/core_cmInstr.h **** 
 134:src/libstm32f2/core_cmInstr.h **** 
 135:src/libstm32f2/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:src/libstm32f2/core_cmInstr.h **** 
 137:src/libstm32f2/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:src/libstm32f2/core_cmInstr.h **** 
 139:src/libstm32f2/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:src/libstm32f2/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:src/libstm32f2/core_cmInstr.h ****     \return               Rotated value
 142:src/libstm32f2/core_cmInstr.h ****  */
 143:src/libstm32f2/core_cmInstr.h **** #define __ROR                             __ror
 144:src/libstm32f2/core_cmInstr.h **** 
 145:src/libstm32f2/core_cmInstr.h **** 
 146:src/libstm32f2/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:src/libstm32f2/core_cmInstr.h **** 
 148:src/libstm32f2/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:src/libstm32f2/core_cmInstr.h **** 
 150:src/libstm32f2/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:src/libstm32f2/core_cmInstr.h **** 
 152:src/libstm32f2/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:src/libstm32f2/core_cmInstr.h ****     \return               Reversed value
 154:src/libstm32f2/core_cmInstr.h ****  */
 155:src/libstm32f2/core_cmInstr.h **** #define __RBIT                            __rbit
 156:src/libstm32f2/core_cmInstr.h **** 
 157:src/libstm32f2/core_cmInstr.h **** 
 158:src/libstm32f2/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:src/libstm32f2/core_cmInstr.h **** 
 160:src/libstm32f2/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:src/libstm32f2/core_cmInstr.h **** 
 162:src/libstm32f2/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:src/libstm32f2/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:src/libstm32f2/core_cmInstr.h ****  */
 165:src/libstm32f2/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:src/libstm32f2/core_cmInstr.h **** 
 167:src/libstm32f2/core_cmInstr.h **** 
 168:src/libstm32f2/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:src/libstm32f2/core_cmInstr.h **** 
 170:src/libstm32f2/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:src/libstm32f2/core_cmInstr.h **** 
 172:src/libstm32f2/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:src/libstm32f2/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:src/libstm32f2/core_cmInstr.h ****  */
 175:src/libstm32f2/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:src/libstm32f2/core_cmInstr.h **** 
 177:src/libstm32f2/core_cmInstr.h **** 
 178:src/libstm32f2/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:src/libstm32f2/core_cmInstr.h **** 
 180:src/libstm32f2/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:src/libstm32f2/core_cmInstr.h **** 
 182:src/libstm32f2/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:src/libstm32f2/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:src/libstm32f2/core_cmInstr.h ****  */
 185:src/libstm32f2/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:src/libstm32f2/core_cmInstr.h **** 
 187:src/libstm32f2/core_cmInstr.h **** 
 188:src/libstm32f2/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:src/libstm32f2/core_cmInstr.h **** 
 190:src/libstm32f2/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:src/libstm32f2/core_cmInstr.h **** 
 192:src/libstm32f2/core_cmInstr.h ****     \param [in]  value  Value to store
 193:src/libstm32f2/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:src/libstm32f2/core_cmInstr.h ****     \return          0  Function succeeded
 195:src/libstm32f2/core_cmInstr.h ****     \return          1  Function failed
 196:src/libstm32f2/core_cmInstr.h ****  */
 197:src/libstm32f2/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:src/libstm32f2/core_cmInstr.h **** 
 199:src/libstm32f2/core_cmInstr.h **** 
 200:src/libstm32f2/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:src/libstm32f2/core_cmInstr.h **** 
 202:src/libstm32f2/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:src/libstm32f2/core_cmInstr.h **** 
 204:src/libstm32f2/core_cmInstr.h ****     \param [in]  value  Value to store
 205:src/libstm32f2/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:src/libstm32f2/core_cmInstr.h ****     \return          0  Function succeeded
 207:src/libstm32f2/core_cmInstr.h ****     \return          1  Function failed
 208:src/libstm32f2/core_cmInstr.h ****  */
 209:src/libstm32f2/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:src/libstm32f2/core_cmInstr.h **** 
 211:src/libstm32f2/core_cmInstr.h **** 
 212:src/libstm32f2/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:src/libstm32f2/core_cmInstr.h **** 
 214:src/libstm32f2/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:src/libstm32f2/core_cmInstr.h **** 
 216:src/libstm32f2/core_cmInstr.h ****     \param [in]  value  Value to store
 217:src/libstm32f2/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:src/libstm32f2/core_cmInstr.h ****     \return          0  Function succeeded
 219:src/libstm32f2/core_cmInstr.h ****     \return          1  Function failed
 220:src/libstm32f2/core_cmInstr.h ****  */
 221:src/libstm32f2/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:src/libstm32f2/core_cmInstr.h **** 
 223:src/libstm32f2/core_cmInstr.h **** 
 224:src/libstm32f2/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:src/libstm32f2/core_cmInstr.h **** 
 226:src/libstm32f2/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:src/libstm32f2/core_cmInstr.h **** 
 228:src/libstm32f2/core_cmInstr.h ****  */
 229:src/libstm32f2/core_cmInstr.h **** #define __CLREX                           __clrex
 230:src/libstm32f2/core_cmInstr.h **** 
 231:src/libstm32f2/core_cmInstr.h **** 
 232:src/libstm32f2/core_cmInstr.h **** /** \brief  Signed Saturate
 233:src/libstm32f2/core_cmInstr.h **** 
 234:src/libstm32f2/core_cmInstr.h ****     This function saturates a signed value.
 235:src/libstm32f2/core_cmInstr.h **** 
 236:src/libstm32f2/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:src/libstm32f2/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:src/libstm32f2/core_cmInstr.h ****     \return             Saturated value
 239:src/libstm32f2/core_cmInstr.h ****  */
 240:src/libstm32f2/core_cmInstr.h **** #define __SSAT                            __ssat
 241:src/libstm32f2/core_cmInstr.h **** 
 242:src/libstm32f2/core_cmInstr.h **** 
 243:src/libstm32f2/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:src/libstm32f2/core_cmInstr.h **** 
 245:src/libstm32f2/core_cmInstr.h ****     This function saturates an unsigned value.
 246:src/libstm32f2/core_cmInstr.h **** 
 247:src/libstm32f2/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:src/libstm32f2/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:src/libstm32f2/core_cmInstr.h ****     \return             Saturated value
 250:src/libstm32f2/core_cmInstr.h ****  */
 251:src/libstm32f2/core_cmInstr.h **** #define __USAT                            __usat
 252:src/libstm32f2/core_cmInstr.h **** 
 253:src/libstm32f2/core_cmInstr.h **** 
 254:src/libstm32f2/core_cmInstr.h **** /** \brief  Count leading zeros
 255:src/libstm32f2/core_cmInstr.h **** 
 256:src/libstm32f2/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:src/libstm32f2/core_cmInstr.h **** 
 258:src/libstm32f2/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:src/libstm32f2/core_cmInstr.h ****     \return             number of leading zeros in value
 260:src/libstm32f2/core_cmInstr.h ****  */
 261:src/libstm32f2/core_cmInstr.h **** #define __CLZ                             __clz
 262:src/libstm32f2/core_cmInstr.h **** 
 263:src/libstm32f2/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:src/libstm32f2/core_cmInstr.h **** 
 265:src/libstm32f2/core_cmInstr.h **** 
 266:src/libstm32f2/core_cmInstr.h **** 
 267:src/libstm32f2/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:src/libstm32f2/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:src/libstm32f2/core_cmInstr.h **** 
 270:src/libstm32f2/core_cmInstr.h **** #include <cmsis_iar.h>
 271:src/libstm32f2/core_cmInstr.h **** 
 272:src/libstm32f2/core_cmInstr.h **** 
 273:src/libstm32f2/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:src/libstm32f2/core_cmInstr.h **** /* TI CCS specific functions */
 275:src/libstm32f2/core_cmInstr.h **** 
 276:src/libstm32f2/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:src/libstm32f2/core_cmInstr.h **** 
 278:src/libstm32f2/core_cmInstr.h **** 
 279:src/libstm32f2/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:src/libstm32f2/core_cmInstr.h **** /* GNU gcc specific functions */
 281:src/libstm32f2/core_cmInstr.h **** 
 282:src/libstm32f2/core_cmInstr.h **** /** \brief  No Operation
 283:src/libstm32f2/core_cmInstr.h **** 
 284:src/libstm32f2/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:src/libstm32f2/core_cmInstr.h ****  */
 286:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:src/libstm32f2/core_cmInstr.h **** {
 288:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("nop");
 289:src/libstm32f2/core_cmInstr.h **** }
 290:src/libstm32f2/core_cmInstr.h **** 
 291:src/libstm32f2/core_cmInstr.h **** 
 292:src/libstm32f2/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:src/libstm32f2/core_cmInstr.h **** 
 294:src/libstm32f2/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:src/libstm32f2/core_cmInstr.h ****     until one of a number of events occurs.
 296:src/libstm32f2/core_cmInstr.h ****  */
 297:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:src/libstm32f2/core_cmInstr.h **** {
 299:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:src/libstm32f2/core_cmInstr.h **** }
 301:src/libstm32f2/core_cmInstr.h **** 
 302:src/libstm32f2/core_cmInstr.h **** 
 303:src/libstm32f2/core_cmInstr.h **** /** \brief  Wait For Event
 304:src/libstm32f2/core_cmInstr.h **** 
 305:src/libstm32f2/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:src/libstm32f2/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:src/libstm32f2/core_cmInstr.h ****  */
 308:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:src/libstm32f2/core_cmInstr.h **** {
 310:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:src/libstm32f2/core_cmInstr.h **** }
 312:src/libstm32f2/core_cmInstr.h **** 
 313:src/libstm32f2/core_cmInstr.h **** 
 314:src/libstm32f2/core_cmInstr.h **** /** \brief  Send Event
 315:src/libstm32f2/core_cmInstr.h **** 
 316:src/libstm32f2/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:src/libstm32f2/core_cmInstr.h ****  */
 318:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:src/libstm32f2/core_cmInstr.h **** {
 320:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("sev");
 321:src/libstm32f2/core_cmInstr.h **** }
 322:src/libstm32f2/core_cmInstr.h **** 
 323:src/libstm32f2/core_cmInstr.h **** 
 324:src/libstm32f2/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:src/libstm32f2/core_cmInstr.h **** 
 326:src/libstm32f2/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:src/libstm32f2/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:src/libstm32f2/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:src/libstm32f2/core_cmInstr.h ****  */
 330:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:src/libstm32f2/core_cmInstr.h **** {
 332:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("isb");
 333:src/libstm32f2/core_cmInstr.h **** }
 334:src/libstm32f2/core_cmInstr.h **** 
 335:src/libstm32f2/core_cmInstr.h **** 
 336:src/libstm32f2/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:src/libstm32f2/core_cmInstr.h **** 
 338:src/libstm32f2/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:src/libstm32f2/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:src/libstm32f2/core_cmInstr.h ****  */
 341:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:src/libstm32f2/core_cmInstr.h **** {
 343:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:src/libstm32f2/core_cmInstr.h **** }
 345:src/libstm32f2/core_cmInstr.h **** 
 346:src/libstm32f2/core_cmInstr.h **** 
 347:src/libstm32f2/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:src/libstm32f2/core_cmInstr.h **** 
 349:src/libstm32f2/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:src/libstm32f2/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:src/libstm32f2/core_cmInstr.h ****  */
 352:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:src/libstm32f2/core_cmInstr.h **** {
 354:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("dmb");
 355:src/libstm32f2/core_cmInstr.h **** }
 356:src/libstm32f2/core_cmInstr.h **** 
 357:src/libstm32f2/core_cmInstr.h **** 
 358:src/libstm32f2/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 359:src/libstm32f2/core_cmInstr.h **** 
 360:src/libstm32f2/core_cmInstr.h ****     This function reverses the byte order in integer value.
 361:src/libstm32f2/core_cmInstr.h **** 
 362:src/libstm32f2/core_cmInstr.h ****     \param [in]    value  Value to reverse
 363:src/libstm32f2/core_cmInstr.h ****     \return               Reversed value
 364:src/libstm32f2/core_cmInstr.h ****  */
 365:src/libstm32f2/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
 366:src/libstm32f2/core_cmInstr.h **** {
 367:src/libstm32f2/core_cmInstr.h ****   uint32_t result;
 368:src/libstm32f2/core_cmInstr.h **** 
 369:src/libstm32f2/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
  91              		.loc 2 369 0
  92 003e 2268     		ldr	r2, [r4, #0]
  93              	@ 369 "src/libstm32f2/core_cmInstr.h" 1
  94 0040 16BA     		rev r6, r2
  95              	@ 0 "" 2
  96              	.LVL6:
  97              		.thumb
  98              	.LBE15:
  99              	.LBE14:
 129:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 130:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Key Initialisation */
 131:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 100              		.loc 1 131 0
 101 0042 0696     		str	r6, [sp, #24]
 102              	.LVL7:
 103              	.LBB16:
 104              	.LBB17:
 105              		.loc 2 369 0
 106 0044 6468     		ldr	r4, [r4, #4]
 107              	.LVL8:
 108              	@ 369 "src/libstm32f2/core_cmInstr.h" 1
 109 0046 23BA     		rev r3, r4
 110              	@ 0 "" 2
 111              	.LVL9:
 112              		.thumb
 113              	.LBE17:
 114              	.LBE16:
 132:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   keyaddr+=4;
 133:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 134:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 115              		.loc 1 134 0
 116 0048 04A8     		add	r0, sp, #16
 133:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 117              		.loc 1 133 0
 118 004a 0793     		str	r3, [sp, #28]
 119              		.loc 1 134 0
 120 004c FFF7FEFF 		bl	CRYP_KeyInit
 121              	.LVL10:
 135:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 136:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 137:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_FIFOFlush();
 122              		.loc 1 137 0
 123 0050 FFF7FEFF 		bl	CRYP_FIFOFlush
 124              	.LVL11:
 138:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 139:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Enable Crypto processor */
 140:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 125              		.loc 1 140 0
 126 0054 0120     		movs	r0, #1
 127 0056 FFF7FEFF 		bl	CRYP_Cmd
 128              	.LVL12:
 141:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 142:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 129              		.loc 1 142 0
 130 005a 0024     		movs	r4, #0
 131              	.LVL13:
 107:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 132              		.loc 1 107 0
 133 005c 0126     		movs	r6, #1
 134              	.LVL14:
 135              	.L4:
 136              		.loc 1 142 0 discriminator 1
 137 005e 4445     		cmp	r4, r8
 138 0060 22D2     		bcs	.L9
 139              		.loc 1 142 0 is_stmt 0 discriminator 2
 140 0062 0EB3     		cbz	r6, .L9
 141              	.L10:
 143:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   {
 144:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 145:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 146:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 142              		.loc 1 146 0 is_stmt 1
 143 0064 3859     		ldr	r0, [r7, r4]
 144 0066 FFF7FEFF 		bl	CRYP_DataIn
 145              	.LVL15:
 100:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
 146              		.loc 1 100 0
 147 006a 3819     		adds	r0, r7, r4
 147:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     inputaddr+=4;
 148:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 148              		.loc 1 148 0
 149 006c 4068     		ldr	r0, [r0, #4]
 150 006e FFF7FEFF 		bl	CRYP_DataIn
 151              	.LVL16:
 149:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     inputaddr+=4;
 150:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 151:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /* Wait until the complete message has been processed */
 152:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     counter = 0;
 152              		.loc 1 152 0
 153 0072 0021     		movs	r1, #0
 154 0074 0191     		str	r1, [sp, #4]
 155              	.LVL17:
 156              	.L6:
 153:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     do
 154:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     {
 155:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 157              		.loc 1 155 0 discriminator 1
 158 0076 1020     		movs	r0, #16
 159 0078 FFF7FEFF 		bl	CRYP_GetFlagStatus
 160              	.LVL18:
 156:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       counter++;
 161              		.loc 1 156 0 discriminator 1
 162 007c 019A     		ldr	r2, [sp, #4]
 163 007e 561C     		adds	r6, r2, #1
 164              	.LVL19:
 165 0080 0196     		str	r6, [sp, #4]
 166              	.LVL20:
 157:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 167              		.loc 1 157 0 discriminator 1
 168 0082 019B     		ldr	r3, [sp, #4]
 169 0084 B3F5803F 		cmp	r3, #65536
 170 0088 02D0     		beq	.L5
 171 008a 0028     		cmp	r0, #0
 172 008c F3D1     		bne	.L6
 173 008e 01E0     		b	.L7
 174              	.L5:
 158:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 159:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     if (busystatus != RESET)
 160:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****    {
 161:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****        status = ERROR;
 175              		.loc 1 161 0
 176 0090 0026     		movs	r6, #0
 159:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     if (busystatus != RESET)
 177              		.loc 1 159 0
 178 0092 38B9     		cbnz	r0, .L8
 179              	.LVL21:
 180              	.L7:
 162:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     }
 163:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     else
 164:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     {
 165:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 166:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 167:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 181              		.loc 1 167 0
 182 0094 FFF7FEFF 		bl	CRYP_DataOut
 183              	.LVL22:
 184 0098 2860     		str	r0, [r5, #0]
 185              	.LVL23:
 168:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       outputaddr+=4;
 169:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 186              		.loc 1 169 0
 187 009a FFF7FEFF 		bl	CRYP_DataOut
 188              	.LVL24:
 170:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       outputaddr+=4;
 189              		.loc 1 170 0
 190 009e 0126     		movs	r6, #1
 169:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 191              		.loc 1 169 0
 192 00a0 6860     		str	r0, [r5, #4]
 193              		.loc 1 170 0
 194 00a2 0835     		adds	r5, r5, #8
 195              	.LVL25:
 196              	.L8:
 142:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 197              		.loc 1 142 0
 198 00a4 0834     		adds	r4, r4, #8
 199              	.LVL26:
 200 00a6 DAE7     		b	.L4
 201              	.L9:
 171:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     }
 172:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   }
 173:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 174:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Disable Crypto */
 175:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 202              		.loc 1 175 0
 203 00a8 0020     		movs	r0, #0
 204 00aa FFF7FEFF 		bl	CRYP_Cmd
 205              	.LVL27:
 176:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 177:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   return status; 
 178:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** }
 206              		.loc 1 178 0
 207 00ae 3046     		mov	r0, r6
 208 00b0 0DB0     		add	sp, sp, #52
 209 00b2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 210              		.cfi_endproc
 211              	.LFE56:
 213              		.section	.text.CRYP_DES_CBC,"ax",%progbits
 214              		.align	1
 215              		.global	CRYP_DES_CBC
 216              		.thumb
 217              		.thumb_func
 219              	CRYP_DES_CBC:
 220              	.LFB57:
 179:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 180:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** /**
 181:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 182:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 183:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          This parameter can be one of the following values:
 184:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 185:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 186:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 187:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 188:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 189:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 190:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 191:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 192:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          - SUCCESS: Operation done
 193:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   *          - ERROR: Operation failed
 194:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   */
 195:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 196:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 197:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** {
 221              		.loc 1 197 0
 222              		.cfi_startproc
 223              		@ args = 8, pretend = 0, frame = 64
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL28:
 226 0000 2DE9F045 		push	{r4, r5, r6, r7, r8, sl, lr}
 227              	.LCFI2:
 228              		.cfi_def_cfa_offset 28
 229              		.cfi_offset 4, -28
 230              		.cfi_offset 5, -24
 231              		.cfi_offset 6, -20
 232              		.cfi_offset 7, -16
 233              		.cfi_offset 8, -12
 234              		.cfi_offset 10, -8
 235              		.cfi_offset 14, -4
 236 0004 91B0     		sub	sp, sp, #68
 237              	.LCFI3:
 238              		.cfi_def_cfa_offset 96
 239              		.loc 1 197 0
 240 0006 8246     		mov	sl, r0
 198:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 199:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 200:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 201:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   __IO uint32_t counter = 0;
 241              		.loc 1 201 0
 242 0008 0027     		movs	r7, #0
 202:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t busystatus = 0;
 203:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 205:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 207:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 208:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t i = 0;
 209:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 210:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Crypto structures initialisation*/
 211:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 243              		.loc 1 211 0
 244 000a 08A8     		add	r0, sp, #32
 245              	.LVL29:
 197:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** {
 246              		.loc 1 197 0
 247 000c 0C46     		mov	r4, r1
 248 000e 1646     		mov	r6, r2
 249 0010 9846     		mov	r8, r3
 201:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   __IO uint32_t counter = 0;
 250              		.loc 1 201 0
 251 0012 0197     		str	r7, [sp, #4]
 252              	.LVL30:
 206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 253              		.loc 1 206 0
 254 0014 199D     		ldr	r5, [sp, #100]
 255              	.LVL31:
 256              		.loc 1 211 0
 257 0016 FFF7FEFF 		bl	CRYP_KeyStructInit
 258              	.LVL32:
 212:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 213:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 214:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 259              		.loc 1 214 0
 260 001a BAF1010F 		cmp	sl, #1
 261 001e 02D1     		bne	.L15
 215:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   {
 216:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 262              		.loc 1 216 0
 263 0020 ADF80870 		strh	r7, [sp, #8]	@ movhi
 264 0024 02E0     		b	.L16
 265              	.L15:
 217:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   }
 218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   {
 220:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 266              		.loc 1 220 0
 267 0026 0423     		movs	r3, #4
 268 0028 ADF80830 		strh	r3, [sp, #8]	@ movhi
 269              	.L16:
 221:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   }
 222:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 223:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 270              		.loc 1 223 0
 271 002c 1820     		movs	r0, #24
 272 002e ADF80A00 		strh	r0, [sp, #10]	@ movhi
 224:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 273              		.loc 1 224 0
 274 0032 8021     		movs	r1, #128
 225:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 275              		.loc 1 225 0
 276 0034 02A8     		add	r0, sp, #8
 224:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 277              		.loc 1 224 0
 278 0036 ADF80C10 		strh	r1, [sp, #12]	@ movhi
 279              		.loc 1 225 0
 280 003a FFF7FEFF 		bl	CRYP_Init
 281              	.LVL33:
 282              	.LBB18:
 283              	.LBB19:
 284              		.loc 2 369 0
 285 003e 2268     		ldr	r2, [r4, #0]
 286              	@ 369 "src/libstm32f2/core_cmInstr.h" 1
 287 0040 13BA     		rev r3, r2
 288              	@ 0 "" 2
 289              	.LVL34:
 290              		.thumb
 291              	.LBE19:
 292              	.LBE18:
 226:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 227:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Key Initialisation */
 228:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 293              		.loc 1 228 0
 294 0042 0A93     		str	r3, [sp, #40]
 295              	.LVL35:
 296              	.LBB20:
 297              	.LBB21:
 298              		.loc 2 369 0
 299 0044 6468     		ldr	r4, [r4, #4]
 300              	.LVL36:
 301              	@ 369 "src/libstm32f2/core_cmInstr.h" 1
 302 0046 20BA     		rev r0, r4
 303              	@ 0 "" 2
 304              	.LVL37:
 305              		.thumb
 306              	.LBE21:
 307              	.LBE20:
 229:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   keyaddr+=4;
 230:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 308              		.loc 1 230 0
 309 0048 0B90     		str	r0, [sp, #44]
 231:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 310              		.loc 1 231 0
 311 004a 08A8     		add	r0, sp, #32
 312              	.LVL38:
 313 004c FFF7FEFF 		bl	CRYP_KeyInit
 314              	.LVL39:
 315              	.LBB22:
 316              	.LBB23:
 317              		.loc 2 369 0
 318 0050 3168     		ldr	r1, [r6, #0]
 319              	@ 369 "src/libstm32f2/core_cmInstr.h" 1
 320 0052 0ABA     		rev r2, r1
 321              	@ 0 "" 2
 322              	.LVL40:
 323              		.thumb
 324              	.LBE23:
 325              	.LBE22:
 232:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 233:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Initialization Vectors */
 234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 326              		.loc 1 234 0
 327 0054 0492     		str	r2, [sp, #16]
 328              	.LVL41:
 329              	.LBB24:
 330              	.LBB25:
 331              		.loc 2 369 0
 332 0056 7668     		ldr	r6, [r6, #4]
 333              	.LVL42:
 334              	@ 369 "src/libstm32f2/core_cmInstr.h" 1
 335 0058 33BA     		rev r3, r6
 336              	@ 0 "" 2
 337              	.LVL43:
 338              		.thumb
 339              	.LBE25:
 340              	.LBE24:
 235:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ivaddr+=4;
 236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 237:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 341              		.loc 1 237 0
 342 005a 04A8     		add	r0, sp, #16
 236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 343              		.loc 1 236 0
 344 005c 0593     		str	r3, [sp, #20]
 345              		.loc 1 237 0
 346 005e FFF7FEFF 		bl	CRYP_IVInit
 347              	.LVL44:
 238:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 239:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 240:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_FIFOFlush();
 348              		.loc 1 240 0
 349 0062 FFF7FEFF 		bl	CRYP_FIFOFlush
 350              	.LVL45:
 241:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   
 242:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Enable Crypto processor */
 243:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 351              		.loc 1 243 0
 352 0066 0120     		movs	r0, #1
 353 0068 FFF7FEFF 		bl	CRYP_Cmd
 354              	.LVL46:
 244:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 245:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 355              		.loc 1 245 0
 356 006c 0024     		movs	r4, #0
 357              	.LVL47:
 203:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 358              		.loc 1 203 0
 359 006e 0126     		movs	r6, #1
 360              	.LVL48:
 361              	.L17:
 362              		.loc 1 245 0 discriminator 1
 363 0070 1898     		ldr	r0, [sp, #96]
 364 0072 8442     		cmp	r4, r0
 365 0074 24D2     		bcs	.L22
 366              		.loc 1 245 0 is_stmt 0 discriminator 2
 367 0076 1EB3     		cbz	r6, .L22
 368              	.L23:
 246:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   {
 247:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 248:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 369              		.loc 1 248 0 is_stmt 1
 370 0078 58F80400 		ldr	r0, [r8, r4]
 371 007c FFF7FEFF 		bl	CRYP_DataIn
 372              	.LVL49:
 195:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 373              		.loc 1 195 0
 374 0080 08EB0401 		add	r1, r8, r4
 249:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     inputaddr+=4;
 250:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 375              		.loc 1 250 0
 376 0084 4868     		ldr	r0, [r1, #4]
 377 0086 FFF7FEFF 		bl	CRYP_DataIn
 378              	.LVL50:
 251:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     inputaddr+=4;
 252:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 253:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     /* Wait until the complete message has been processed */
 254:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     counter = 0;
 379              		.loc 1 254 0
 380 008a 0022     		movs	r2, #0
 381 008c 0192     		str	r2, [sp, #4]
 382              	.LVL51:
 383              	.L19:
 255:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     do
 256:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     {
 257:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 384              		.loc 1 257 0 discriminator 1
 385 008e 1020     		movs	r0, #16
 386 0090 FFF7FEFF 		bl	CRYP_GetFlagStatus
 387              	.LVL52:
 258:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       counter++;
 388              		.loc 1 258 0 discriminator 1
 389 0094 019E     		ldr	r6, [sp, #4]
 390 0096 731C     		adds	r3, r6, #1
 391              	.LVL53:
 392 0098 0193     		str	r3, [sp, #4]
 393              	.LVL54:
 259:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 394              		.loc 1 259 0 discriminator 1
 395 009a 0199     		ldr	r1, [sp, #4]
 396 009c B1F5803F 		cmp	r1, #65536
 397 00a0 02D0     		beq	.L18
 398 00a2 0028     		cmp	r0, #0
 399 00a4 F3D1     		bne	.L19
 400 00a6 01E0     		b	.L20
 401              	.L18:
 260:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 261:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     if (busystatus != RESET)
 262:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****    {
 263:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****        status = ERROR;
 402              		.loc 1 263 0
 403 00a8 0026     		movs	r6, #0
 261:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     if (busystatus != RESET)
 404              		.loc 1 261 0
 405 00aa 38B9     		cbnz	r0, .L21
 406              	.L20:
 264:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     }
 265:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     else
 266:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     {
 267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 407              		.loc 1 268 0
 408 00ac FFF7FEFF 		bl	CRYP_DataOut
 409              	.LVL55:
 410 00b0 2860     		str	r0, [r5, #0]
 411              	.LVL56:
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       outputaddr+=4;
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 412              		.loc 1 270 0
 413 00b2 FFF7FEFF 		bl	CRYP_DataOut
 414              	.LVL57:
 271:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       outputaddr+=4;
 415              		.loc 1 271 0
 416 00b6 0126     		movs	r6, #1
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 417              		.loc 1 270 0
 418 00b8 6860     		str	r0, [r5, #4]
 419              		.loc 1 271 0
 420 00ba 0835     		adds	r5, r5, #8
 421              	.LVL58:
 422              	.L21:
 245:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 423              		.loc 1 245 0
 424 00bc 0834     		adds	r4, r4, #8
 425              	.LVL59:
 426 00be D7E7     		b	.L17
 427              	.L22:
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****     }
 273:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   }
 274:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   /* Disable Crypto */
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 428              		.loc 1 276 0
 429 00c0 0020     		movs	r0, #0
 430 00c2 FFF7FEFF 		bl	CRYP_Cmd
 431              	.LVL60:
 277:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** 
 278:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c ****   return status; 
 279:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_cryp_des.c **** }
 432              		.loc 1 279 0
 433 00c6 3046     		mov	r0, r6
 434 00c8 11B0     		add	sp, sp, #68
 435 00ca BDE8F085 		pop	{r4, r5, r6, r7, r8, sl, pc}
 436              		.cfi_endproc
 437              	.LFE57:
 439              		.text
 440              	.Letext0:
 441              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q1\\bin\\../lib/gcc/arm-none-eab
 442              		.file 4 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx.h"
 443              		.file 5 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_cryp.h"
 444              		.file 6 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_cryp_des.c
C:\Users\STINA\AppData\Local\Temp\ccginmh6.s:19     .text.CRYP_DES_ECB:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccginmh6.s:24     .text.CRYP_DES_ECB:00000000 CRYP_DES_ECB
C:\Users\STINA\AppData\Local\Temp\ccginmh6.s:214    .text.CRYP_DES_CBC:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccginmh6.s:219    .text.CRYP_DES_CBC:00000000 CRYP_DES_CBC
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
