   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ADC_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	ADC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	ADC_DeInit:
  25              	.LFB56:
  26              		.file 1 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_adc.c"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ******************************************************************************
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @file    stm32f2xx_adc.c
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @author  MCD Application Team
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @version V1.1.2
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @date    05-March-2012 
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *             selection)
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - Analog Watchdog configuration
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *             management 
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - Regular Channels Configuration
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - Injected channels Configuration
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - Interrupts and flags management
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *  @verbatim
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          ===================================================================
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *                                   How to use this driver
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          ===================================================================
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *     
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          2. ADC pins configuration
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          Regular channels group configuration
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          ====================================    
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              function.
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              function.
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          ===============================================
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              functions.        
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          ====================================================== 
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *             ADC_DMACmd() function.
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *             function.
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  67:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          Injected channels group configuration
  68:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          =====================================    
  69:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              functions.
  72:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              function.
  74:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              function.        
  78:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *              function.
  80:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  81:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *  @endverbatim
  82:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  83:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ******************************************************************************
  84:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @attention
  85:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  86:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  87:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  88:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  89:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * You may not use this file except in compliance with the License.
  90:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * You may obtain a copy of the License at:
  91:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  92:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  93:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
  94:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  95:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  96:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  97:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * See the License for the specific language governing permissions and
  98:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * limitations under the License.
  99:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *
 100:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ******************************************************************************
 101:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 102:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 103:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* Includes ------------------------------------------------------------------*/
 104:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #include "stm32f2xx_adc.h"
 105:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #include "stm32f2xx_rcc.h"
 106:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 107:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
 108:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
 109:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 110:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 111:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC 
 112:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief ADC driver modules
 113:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
 114:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */ 
 115:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 116:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 117:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 118:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 119:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC DISCNUM mask */
 120:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 121:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 122:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC AWDCH mask */
 123:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 124:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 125:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 126:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 127:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 128:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* CR1 register Mask */
 129:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 130:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 131:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC EXTEN mask */
 132:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 133:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 134:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC JEXTEN mask */
 135:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 136:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 137:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC JEXTSEL mask */
 138:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 139:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 140:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* CR2 register Mask */
 141:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 142:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 143:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC SQx mask */
 144:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 145:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 146:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 147:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 148:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC L Mask */
 149:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 150:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 151:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC JSQx mask */
 152:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 153:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 154:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC JL mask */
 155:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 156:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 157:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 158:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC SMPx mask */
 159:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 160:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 161:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 162:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC JDRx registers offset */
 163:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 164:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 165:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC CDR register base address */
 166:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 167:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 168:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* ADC CCR register Mask */
 169:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 170:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 171:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 172:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 173:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 174:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 175:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 176:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Private_Functions
 177:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
 178:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */ 
 179:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 180:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 181:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 182:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *
 183:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @verbatim    
 184:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================
 185:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                       Initialization and Configuration functions
 186:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================  
 187:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   This section provides functions allowing to:
 188:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - Initialize and configure the ADC Prescaler
 189:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 190:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 191:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 192:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      regular group
 193:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - External trigger Edge and source of regular group, 
 194:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - Converted data alignment (left or right)
 195:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 196:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      regular channel group
 197:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - Multi ADC mode selection
 198:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 199:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 200:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    - Enable or disable the ADC peripheral
 201:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    
 202:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @endverbatim
 203:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
 204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 205:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 207:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 208:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         values.
 209:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  None
 210:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 211:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 212:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_DeInit(void)
 213:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
  27              		.loc 1 213 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
 214:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Enable all ADCs reset state */
 215:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  31              		.loc 1 215 0
  32 0000 0121     		movs	r1, #1
 213:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
  33              		.loc 1 213 0
  34 0002 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 215 0
  40 0004 4FF48070 		mov	r0, #256
  41 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  42              	.LVL0:
 216:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 217:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Release all ADCs from reset state */
 218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  43              		.loc 1 218 0
  44 000c 4FF48070 		mov	r0, #256
  45 0010 0021     		movs	r1, #0
 219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
  46              		.loc 1 219 0
  47 0012 BDE80840 		pop	{r3, lr}
 218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  48              		.loc 1 218 0
  49 0016 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
  50              	.LVL1:
  51              		.cfi_endproc
  52              	.LFE56:
  54              		.section	.text.ADC_Init,"ax",%progbits
  55              		.align	1
  56              		.global	ADC_Init
  57              		.thumb
  58              		.thumb_func
  60              	ADC_Init:
  61              	.LFB57:
 220:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 221:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 222:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 223:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         in the ADC_InitStruct.
 224:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 225:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 226:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 227:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 228:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 229:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 230:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 231:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 232:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 233:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 235:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
  62              		.loc 1 235 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL2:
 236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
 237:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint8_t tmpreg2 = 0;
 238:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 239:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 240:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 241:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 242:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 243:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 244:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 245:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 246:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 247:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 248:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 249:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADCx CR1 value */
 250:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->CR1;
  67              		.loc 1 250 0
  68 0000 4268     		ldr	r2, [r0, #4]
  69              	.LVL3:
 235:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
  70              		.loc 1 235 0
  71 0002 10B5     		push	{r4, lr}
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
 251:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 252:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear RES and SCAN bits */
 253:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  76              		.loc 1 253 0
  77 0004 22F04073 		bic	r3, r2, #50331648
 254:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 255:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 256:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 257:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 258:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  78              		.loc 1 258 0
  79 0008 0A68     		ldr	r2, [r1, #0]
  80              	.LVL4:
 253:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  81              		.loc 1 253 0
  82 000a 23F48074 		bic	r4, r3, #256
  83              		.loc 1 258 0
  84 000e 44EA0203 		orr	r3, r4, r2
  85 0012 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
  86 0014 43EA0422 		orr	r2, r3, r4, lsl #8
  87              	.LVL5:
 259:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 260:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Write to ADCx CR1 */
 261:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg1;
  88              		.loc 1 261 0
  89 0018 4260     		str	r2, [r0, #4]
 262:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 263:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADCx CR2 value */
 264:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->CR2;
 265:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 266:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      continuous conversion mode */
 271:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 273:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 274:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
  90              		.loc 1 275 0
  91 001a 0B69     		ldr	r3, [r1, #16]
  92 001c CA68     		ldr	r2, [r1, #12]
  93              	.LVL6:
 264:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->CR2;
  94              		.loc 1 264 0
  95 001e 8468     		ldr	r4, [r0, #8]
  96              	.LVL7:
  97              		.loc 1 275 0
  98 0020 1A43     		orrs	r2, r2, r3
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
  99              		.loc 1 276 0
 100 0022 8B68     		ldr	r3, [r1, #8]
 101 0024 1A43     		orrs	r2, r2, r3
 267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 102              		.loc 1 267 0
 103 0026 084B     		ldr	r3, .L3
 104 0028 2340     		ands	r3, r3, r4
 105              	.LVL8:
 275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 106              		.loc 1 275 0
 107 002a 1343     		orrs	r3, r3, r2
 108              	.LVL9:
 277:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 278:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 109              		.loc 1 278 0
 110 002c 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 111              		.loc 1 275 0
 112 002e 43EA4203 		orr	r3, r3, r2, lsl #1
 113              	.LVL10:
 279:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         
 280:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Write to ADCx CR2 */
 281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR2 = tmpreg1;
 114              		.loc 1 281 0
 115 0032 8360     		str	r3, [r0, #8]
 282:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADCx SQR1 value */
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 286:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear L bits */
 287:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 288:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 290:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 116              		.loc 1 291 0
 117 0034 097D     		ldrb	r1, [r1, #20]	@ zero_extendqisi2
 118              	.LVL11:
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 119              		.loc 1 284 0
 120 0036 C26A     		ldr	r2, [r0, #44]
 121              	.LVL12:
 122              		.loc 1 291 0
 123 0038 4B1E     		subs	r3, r1, #1
 287:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 124              		.loc 1 287 0
 125 003a 22F47002 		bic	r2, r2, #15728640
 126              	.LVL13:
 292:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 127              		.loc 1 292 0
 128 003e D9B2     		uxtb	r1, r3
 129 0040 42EA0152 		orr	r2, r2, r1, lsl #20
 130              	.LVL14:
 293:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 294:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Write to ADCx SQR1 */
 295:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 131              		.loc 1 295 0
 132 0044 C262     		str	r2, [r0, #44]
 133 0046 10BD     		pop	{r4, pc}
 134              	.L4:
 135              		.align	2
 136              	.L3:
 137 0048 FDF7FFC0 		.word	-1056966659
 138              		.cfi_endproc
 139              	.LFE57:
 141              		.section	.text.ADC_StructInit,"ax",%progbits
 142              		.align	1
 143              		.global	ADC_StructInit
 144              		.thumb
 145              		.thumb_func
 147              	ADC_StructInit:
 148              	.LFB58:
 296:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 297:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 298:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 299:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 300:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 301:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 302:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 306:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         be initialized.
 307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 308:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 309:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 310:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 149              		.loc 1 310 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL15:
 311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_Mode member */
 312:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 155              		.loc 1 312 0
 156 0000 0023     		movs	r3, #0
 313:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 316:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 317:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 318:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 319:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 322:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 323:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 324:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 325:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 326:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 327:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 328:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 330:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 157              		.loc 1 330 0
 158 0002 0121     		movs	r1, #1
 312:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 159              		.loc 1 312 0
 160 0004 0360     		str	r3, [r0, #0]
 315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 161              		.loc 1 315 0
 162 0006 0371     		strb	r3, [r0, #4]
 318:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 163              		.loc 1 318 0
 164 0008 4371     		strb	r3, [r0, #5]
 321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 165              		.loc 1 321 0
 166 000a 8360     		str	r3, [r0, #8]
 324:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 167              		.loc 1 324 0
 168 000c C360     		str	r3, [r0, #12]
 327:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 169              		.loc 1 327 0
 170 000e 0361     		str	r3, [r0, #16]
 171              		.loc 1 330 0
 172 0010 0175     		strb	r1, [r0, #20]
 173 0012 7047     		bx	lr
 174              		.cfi_endproc
 175              	.LFE58:
 177              		.section	.text.ADC_CommonInit,"ax",%progbits
 178              		.align	1
 179              		.global	ADC_CommonInit
 180              		.thumb
 181              		.thumb_func
 183              	ADC_CommonInit:
 184              	.LFB59:
 331:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 332:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 334:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 335:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         in the ADC_CommonInitStruct.
 336:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 337:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 338:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 339:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 185              		.loc 1 341 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              	.LVL16:
 342:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
 343:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 344:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 345:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 348:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADC CCR value */
 350:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADC->CCR;
 190              		.loc 1 350 0
 191 0000 074A     		ldr	r2, .L7
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 352:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 353:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 192              		.loc 1 353 0
 193 0002 084B     		ldr	r3, .L7+4
 350:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADC->CCR;
 194              		.loc 1 350 0
 195 0004 5168     		ldr	r1, [r2, #4]
 196              	.LVL17:
 341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 197              		.loc 1 341 0
 198 0006 10B5     		push	{r4, lr}
 199              	.LCFI2:
 200              		.cfi_def_cfa_offset 8
 201              		.cfi_offset 4, -8
 202              		.cfi_offset 14, -4
 203              		.loc 1 353 0
 204 0008 0B40     		ands	r3, r3, r1
 205              	.LVL18:
 354:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 355:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 356:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      and DMA access mode for multimode */
 357:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 359:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 360:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 361:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 206              		.loc 1 361 0
 207 000a 90E81200 		ldmia	r0, {r1, r4}
 208 000e 0C43     		orrs	r4, r4, r1
 362:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 209              		.loc 1 362 0
 210 0010 8168     		ldr	r1, [r0, #8]
 361:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 211              		.loc 1 361 0
 212 0012 C068     		ldr	r0, [r0, #12]
 213              	.LVL19:
 214              		.loc 1 362 0
 215 0014 2143     		orrs	r1, r1, r4
 361:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 216              		.loc 1 361 0
 217 0016 0143     		orrs	r1, r1, r0
 218 0018 0B43     		orrs	r3, r3, r1
 219              	.LVL20:
 363:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 364:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                         
 366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Write to ADC CCR */
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC->CCR = tmpreg1;
 220              		.loc 1 367 0
 221 001a 5360     		str	r3, [r2, #4]
 222 001c 10BD     		pop	{r4, pc}
 223              	.L8:
 224 001e 00BF     		.align	2
 225              	.L7:
 226 0020 00230140 		.word	1073816320
 227 0024 E030FCFF 		.word	-249632
 228              		.cfi_endproc
 229              	.LFE59:
 231              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 232              		.align	1
 233              		.global	ADC_CommonStructInit
 234              		.thumb
 235              		.thumb_func
 237              	ADC_CommonStructInit:
 238              	.LFB60:
 368:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 369:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 371:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 372:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 373:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         which will be initialized.
 374:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 375:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 376:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 377:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 239              		.loc 1 377 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244              	.LVL21:
 378:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_Mode member */
 379:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 245              		.loc 1 379 0
 246 0000 0023     		movs	r3, #0
 247 0002 0360     		str	r3, [r0, #0]
 380:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* initialize the ADC_Prescaler member */
 382:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 248              		.loc 1 382 0
 249 0004 4360     		str	r3, [r0, #4]
 383:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 250              		.loc 1 385 0
 251 0006 8360     		str	r3, [r0, #8]
 386:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 387:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 388:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 252              		.loc 1 388 0
 253 0008 C360     		str	r3, [r0, #12]
 254 000a 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE60:
 258              		.section	.text.ADC_Cmd,"ax",%progbits
 259              		.align	1
 260              		.global	ADC_Cmd
 261              		.thumb
 262              		.thumb_func
 264              	ADC_Cmd:
 265              	.LFB61:
 389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 391:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 392:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 393:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 394:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 396:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 398:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 399:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 266              		.loc 1 399 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271              	.LVL22:
 400:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 402:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 403:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 404:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 405:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 406:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 272              		.loc 1 406 0
 273 0000 8368     		ldr	r3, [r0, #8]
 403:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 274              		.loc 1 403 0
 275 0002 11B1     		cbz	r1, .L11
 276              		.loc 1 406 0
 277 0004 43F00101 		orr	r1, r3, #1
 278              	.LVL23:
 279 0008 01E0     		b	.L13
 280              	.LVL24:
 281              	.L11:
 407:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 408:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 409:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 410:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC peripheral */
 411:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 282              		.loc 1 411 0
 283 000a 23F00101 		bic	r1, r3, #1
 284              	.LVL25:
 285              	.L13:
 286 000e 8160     		str	r1, [r0, #8]
 287 0010 7047     		bx	lr
 288              		.cfi_endproc
 289              	.LFE61:
 291              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 292              		.align	1
 293              		.global	ADC_AnalogWatchdogCmd
 294              		.thumb
 295              		.thumb_func
 297              	ADC_AnalogWatchdogCmd:
 298              	.LFB62:
 412:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 413:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 414:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 415:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @}
 416:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 417:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 418:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 419:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 420:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *
 421:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @verbatim   
 422:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================
 423:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                     Analog Watchdog configuration functions
 424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================  
 425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 426:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 427:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   (AWD) feature in the ADC.
 428:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 429:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 430:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 431:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 432:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 433:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 434:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 435:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 436:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 437:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @endverbatim
 438:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
 439:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 440:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 441:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 442:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 443:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         injected channels
 444:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 445:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 446:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         This parameter can be one of the following values:
 447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 448:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 449:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 450:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 451:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 452:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 453:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 454:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None	  
 455:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 456:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 457:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 299              		.loc 1 457 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 304              	.LVL26:
 458:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 460:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 462:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 463:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the old register value */
 464:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg = ADCx->CR1;
 305              		.loc 1 464 0
 306 0000 4368     		ldr	r3, [r0, #4]
 307              	.LVL27:
 465:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 466:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 467:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 308              		.loc 1 467 0
 309 0002 23F44002 		bic	r2, r3, #12582912
 310 0006 22F40073 		bic	r3, r2, #512
 311              	.LVL28:
 468:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 469:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the analog watchdog enable mode */
 470:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 312              		.loc 1 470 0
 313 000a 1943     		orrs	r1, r1, r3
 314              	.LVL29:
 471:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 472:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Store the new register value */
 473:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg;
 315              		.loc 1 473 0
 316 000c 4160     		str	r1, [r0, #4]
 317 000e 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE62:
 321              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 322              		.align	1
 323              		.global	ADC_AnalogWatchdogThresholdsConfig
 324              		.thumb
 325              		.thumb_func
 327              	ADC_AnalogWatchdogThresholdsConfig:
 328              	.LFB63:
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 475:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 477:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 478:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 480:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter must be a 12-bit value.
 481:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 482:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter must be a 12-bit value.
 483:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 484:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 485:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 486:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                                         uint16_t LowThreshold)
 487:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 329              		.loc 1 487 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 334              	.LVL30:
 488:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 489:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 490:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 491:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 492:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the ADCx high threshold */
 494:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->HTR = HighThreshold;
 335              		.loc 1 494 0
 336 0000 4162     		str	r1, [r0, #36]
 495:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 496:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the ADCx low threshold */
 497:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->LTR = LowThreshold;
 337              		.loc 1 497 0
 338 0002 8262     		str	r2, [r0, #40]
 339 0004 7047     		bx	lr
 340              		.cfi_endproc
 341              	.LFE63:
 343              		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 344              		.align	1
 345              		.global	ADC_AnalogWatchdogSingleChannelConfig
 346              		.thumb
 347              		.thumb_func
 349              	ADC_AnalogWatchdogSingleChannelConfig:
 350              	.LFB64:
 498:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 499:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 500:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 501:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 502:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 503:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 504:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
 505:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 506:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 507:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 508:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 509:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 510:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 511:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 512:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 513:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 514:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 515:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 516:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 517:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 518:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 519:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 520:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 521:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 524:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 526:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 527:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 351              		.loc 1 527 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              		@ link register save eliminated.
 356              	.LVL31:
 528:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
 529:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 530:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 531:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 532:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 533:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the old register value */
 534:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg = ADCx->CR1;
 357              		.loc 1 534 0
 358 0000 4368     		ldr	r3, [r0, #4]
 359              	.LVL32:
 535:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 536:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 537:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 360              		.loc 1 537 0
 361 0002 23F01F02 		bic	r2, r3, #31
 362              	.LVL33:
 538:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the Analog watchdog channel */
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg |= ADC_Channel;
 363              		.loc 1 540 0
 364 0006 1143     		orrs	r1, r1, r2
 365              	.LVL34:
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 542:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Store the new register value */
 543:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg;
 366              		.loc 1 543 0
 367 0008 4160     		str	r1, [r0, #4]
 368 000a 7047     		bx	lr
 369              		.cfi_endproc
 370              	.LFE64:
 372              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 373              		.align	1
 374              		.global	ADC_TempSensorVrefintCmd
 375              		.thumb
 376              		.thumb_func
 378              	ADC_TempSensorVrefintCmd:
 379              	.LFB65:
 544:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 545:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 546:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @}
 547:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 548:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 549:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 552:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *
 553:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @verbatim   
 554:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================
 555:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 556:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================  
 557:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 558:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 559:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 560:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Vbat sources.
 561:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      
 562:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 563:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   voltages is done following these steps :
 564:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 565:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 566:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 567:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 568:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 569:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       ADC_GetInjectedConversionValue().
 570:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 571:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 572:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   these steps :
 573:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 574:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       ADC_VBATCmd() function. 
 575:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 576:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 577:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 578:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       ADC_GetInjectedConversionValue().
 579:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  
 580:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @endverbatim
 581:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
 582:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 583:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 584:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 585:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 586:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 587:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 588:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 589:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 590:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 591:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 592:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 380              		.loc 1 592 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 385              	.LVL35:
 386 0000 044B     		ldr	r3, .L22
 593:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 594:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 595:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 596:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 597:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 598:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 387              		.loc 1 598 0
 388 0002 5A68     		ldr	r2, [r3, #4]
 595:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 389              		.loc 1 595 0
 390 0004 10B1     		cbz	r0, .L19
 391              		.loc 1 598 0
 392 0006 42F40000 		orr	r0, r2, #8388608
 393              	.LVL36:
 394 000a 01E0     		b	.L21
 395              	.LVL37:
 396              	.L19:
 599:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 600:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 601:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 602:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 603:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 397              		.loc 1 603 0
 398 000c 22F40000 		bic	r0, r2, #8388608
 399              	.LVL38:
 400              	.L21:
 401 0010 5860     		str	r0, [r3, #4]
 402 0012 7047     		bx	lr
 403              	.L23:
 404              		.align	2
 405              	.L22:
 406 0014 00230140 		.word	1073816320
 407              		.cfi_endproc
 408              	.LFE65:
 410              		.section	.text.ADC_VBATCmd,"ax",%progbits
 411              		.align	1
 412              		.global	ADC_VBATCmd
 413              		.thumb
 414              		.thumb_func
 416              	ADC_VBATCmd:
 417              	.LFB66:
 604:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 605:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 607:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 609:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 610:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 611:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 612:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 613:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 614:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 418              		.loc 1 614 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 423              	.LVL39:
 424 0000 044B     		ldr	r3, .L28
 615:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 616:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 617:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 618:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 619:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the VBAT channel*/
 620:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 425              		.loc 1 620 0
 426 0002 5A68     		ldr	r2, [r3, #4]
 617:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 427              		.loc 1 617 0
 428 0004 10B1     		cbz	r0, .L25
 429              		.loc 1 620 0
 430 0006 42F48000 		orr	r0, r2, #4194304
 431              	.LVL40:
 432 000a 01E0     		b	.L27
 433              	.LVL41:
 434              	.L25:
 621:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 622:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 623:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 624:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the VBAT channel*/
 625:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 435              		.loc 1 625 0
 436 000c 22F48000 		bic	r0, r2, #4194304
 437              	.LVL42:
 438              	.L27:
 439 0010 5860     		str	r0, [r3, #4]
 440 0012 7047     		bx	lr
 441              	.L29:
 442              		.align	2
 443              	.L28:
 444 0014 00230140 		.word	1073816320
 445              		.cfi_endproc
 446              	.LFE66:
 448              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 449              		.align	1
 450              		.global	ADC_RegularChannelConfig
 451              		.thumb
 452              		.thumb_func
 454              	ADC_RegularChannelConfig:
 455              	.LFB67:
 626:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 628:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 629:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 630:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @}
 631:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 632:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 633:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 634:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 635:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *
 636:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @verbatim   
 637:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================
 638:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                   Regular Channels Configuration functions
 639:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================  
 640:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 641:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   it is composed of 2 sub sections : 
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 644:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 645:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 646:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 647:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - Configure the sampling time for each channel
 648:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - select the conversion Trigger for regular channels
 649:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - select the desired EOC event behavior configuration
 650:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - Activate the continuous Mode  (*)
 651:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - Activate the Discontinuous Mode 
 652:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      Please Note that the following features for regular channels are configurated
 653:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      using the ADC_Init() function : 
 654:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - scan mode activation 
 655:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - continuous mode activation (**) 
 656:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - External trigger source  
 657:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - External trigger edge 
 658:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 659:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      
 660:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      @note (*) and (**) are performing the same configuration
 661:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      
 662:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 663:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 664:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 665:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      automatically cleared.
 666:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      
 667:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 668:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 669:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 670:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****        
 671:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 672:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @endverbatim
 673:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
 674:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 675:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 676:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 677:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         rank in the sequencer and its sample time.
 678:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 679:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 680:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
 681:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 682:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 683:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 684:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 685:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 686:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 687:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 688:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 689:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 690:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 691:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 692:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 693:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 694:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 695:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 697:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 698:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 699:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 700:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 701:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter must be between 1 to 16.
 702:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 703:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
 704:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 705:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 706:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 707:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 708:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 709:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 710:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 711:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 712:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 713:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 714:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 715:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 456              		.loc 1 715 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL43:
 716:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 717:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 718:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 719:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 720:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 721:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 722:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 723:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 724:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 461              		.loc 1 724 0
 462 0000 0929     		cmp	r1, #9
 715:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 463              		.loc 1 715 0
 464 0002 70B5     		push	{r4, r5, r6, lr}
 465              	.LCFI3:
 466              		.cfi_def_cfa_offset 16
 467              		.cfi_offset 4, -16
 468              		.cfi_offset 5, -12
 469              		.cfi_offset 6, -8
 470              		.cfi_offset 14, -4
 471 0004 4FF00304 		mov	r4, #3
 472              		.loc 1 724 0
 473 0008 0CD9     		bls	.L31
 725:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 726:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Get the old register value */
 727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 728:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 729:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 730:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 474              		.loc 1 730 0
 475 000a 4C43     		muls	r4, r1, r4
 476 000c 0725     		movs	r5, #7
 477 000e 1E3C     		subs	r4, r4, #30
 478 0010 05FA04F5 		lsl	r5, r5, r4
 731:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 732:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Clear the old sample time */
 733:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 734:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 735:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to set */
 736:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 479              		.loc 1 736 0
 480 0014 03FA04F3 		lsl	r3, r3, r4
 481              	.LVL44:
 727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 482              		.loc 1 727 0
 483 0018 C668     		ldr	r6, [r0, #12]
 484              	.LVL45:
 733:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 485              		.loc 1 733 0
 486 001a 26EA0505 		bic	r5, r6, r5
 487              	.LVL46:
 737:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 738:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the new sample time */
 739:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 488              		.loc 1 739 0
 489 001e 2B43     		orrs	r3, r3, r5
 490              	.LVL47:
 740:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 741:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Store the new register value */
 742:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 491              		.loc 1 742 0
 492 0020 C360     		str	r3, [r0, #12]
 493 0022 0BE0     		b	.L32
 494              	.LVL48:
 495              	.L31:
 743:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 744:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 745:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 746:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Get the old register value */
 747:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 748:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 749:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 750:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 496              		.loc 1 750 0
 497 0024 4C43     		muls	r4, r1, r4
 498 0026 0725     		movs	r5, #7
 499 0028 05FA04F5 		lsl	r5, r5, r4
 751:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 752:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Clear the old sample time */
 753:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 754:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 755:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to set */
 756:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 500              		.loc 1 756 0
 501 002c 03FA04F3 		lsl	r3, r3, r4
 502              	.LVL49:
 747:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 503              		.loc 1 747 0
 504 0030 0669     		ldr	r6, [r0, #16]
 505              	.LVL50:
 753:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 506              		.loc 1 753 0
 507 0032 26EA0505 		bic	r5, r6, r5
 508              	.LVL51:
 757:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 758:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the new sample time */
 759:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 509              		.loc 1 759 0
 510 0036 45EA0304 		orr	r4, r5, r3
 511              	.LVL52:
 760:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 761:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Store the new register value */
 762:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 512              		.loc 1 762 0
 513 003a 0461     		str	r4, [r0, #16]
 514              	.LVL53:
 515              	.L32:
 763:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 764:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* For Rank 1 to 6 */
 765:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (Rank < 7)
 516              		.loc 1 765 0
 517 003c 062A     		cmp	r2, #6
 518 003e 4FF00503 		mov	r3, #5
 519 0042 0DD8     		bhi	.L33
 766:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 767:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Get the old register value */
 768:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 769:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 770:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 771:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 520              		.loc 1 771 0
 521 0044 013A     		subs	r2, r2, #1
 522              	.LVL54:
 523 0046 5343     		muls	r3, r2, r3
 524 0048 1F22     		movs	r2, #31
 525 004a 02FA03F2 		lsl	r2, r2, r3
 772:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 773:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 774:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 775:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 776:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to set */
 777:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 526              		.loc 1 777 0
 527 004e 01FA03F1 		lsl	r1, r1, r3
 528              	.LVL55:
 768:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 529              		.loc 1 768 0
 530 0052 446B     		ldr	r4, [r0, #52]
 531              	.LVL56:
 774:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 532              		.loc 1 774 0
 533 0054 24EA0202 		bic	r2, r4, r2
 534              	.LVL57:
 778:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 779:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the SQx bits for the selected rank */
 780:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 535              		.loc 1 780 0
 536 0058 42EA0103 		orr	r3, r2, r1
 537              	.LVL58:
 781:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 782:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Store the new register value */
 783:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 538              		.loc 1 783 0
 539 005c 4363     		str	r3, [r0, #52]
 540 005e 70BD     		pop	{r4, r5, r6, pc}
 541              	.LVL59:
 542              	.L33:
 784:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 785:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* For Rank 7 to 12 */
 786:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else if (Rank < 13)
 543              		.loc 1 786 0
 544 0060 0C2A     		cmp	r2, #12
 545 0062 0DD8     		bhi	.L35
 787:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 788:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Get the old register value */
 789:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 790:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 791:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 792:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 546              		.loc 1 792 0
 547 0064 5343     		muls	r3, r2, r3
 548 0066 1F22     		movs	r2, #31
 549              	.LVL60:
 550 0068 233B     		subs	r3, r3, #35
 551 006a 02FA03F2 		lsl	r2, r2, r3
 793:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 794:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 795:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 796:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 797:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to set */
 798:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 552              		.loc 1 798 0
 553 006e 01FA03F1 		lsl	r1, r1, r3
 554              	.LVL61:
 789:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 555              		.loc 1 789 0
 556 0072 046B     		ldr	r4, [r0, #48]
 557              	.LVL62:
 795:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 558              		.loc 1 795 0
 559 0074 24EA0202 		bic	r2, r4, r2
 560              	.LVL63:
 799:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 800:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the SQx bits for the selected rank */
 801:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 561              		.loc 1 801 0
 562 0078 42EA0103 		orr	r3, r2, r1
 563              	.LVL64:
 802:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 803:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Store the new register value */
 804:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 564              		.loc 1 804 0
 565 007c 0363     		str	r3, [r0, #48]
 566 007e 70BD     		pop	{r4, r5, r6, pc}
 567              	.LVL65:
 568              	.L35:
 805:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 806:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* For Rank 13 to 16 */
 807:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 808:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 809:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Get the old register value */
 810:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 811:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 812:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to clear */
 813:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 569              		.loc 1 813 0
 570 0080 5343     		muls	r3, r2, r3
 571 0082 1F22     		movs	r2, #31
 572              	.LVL66:
 573 0084 413B     		subs	r3, r3, #65
 574 0086 02FA03F2 		lsl	r2, r2, r3
 814:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 815:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 816:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 817:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 818:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to set */
 819:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 575              		.loc 1 819 0
 576 008a 01FA03F1 		lsl	r1, r1, r3
 577              	.LVL67:
 810:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 578              		.loc 1 810 0
 579 008e C46A     		ldr	r4, [r0, #44]
 580              	.LVL68:
 816:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 581              		.loc 1 816 0
 582 0090 24EA0202 		bic	r2, r4, r2
 583              	.LVL69:
 820:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 821:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the SQx bits for the selected rank */
 822:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 584              		.loc 1 822 0
 585 0094 1143     		orrs	r1, r1, r2
 586              	.LVL70:
 823:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
 824:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Store the new register value */
 825:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 587              		.loc 1 825 0
 588 0096 C162     		str	r1, [r0, #44]
 589 0098 70BD     		pop	{r4, r5, r6, pc}
 590              		.cfi_endproc
 591              	.LFE67:
 593              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 594              		.align	1
 595              		.global	ADC_SoftwareStartConv
 596              		.thumb
 597              		.thumb_func
 599              	ADC_SoftwareStartConv:
 600              	.LFB68:
 826:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 827:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 828:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 829:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 830:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 831:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 832:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 833:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 834:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 835:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 601              		.loc 1 835 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 606              	.LVL71:
 836:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 837:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 838:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 839:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 840:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 607              		.loc 1 840 0
 608 0000 8368     		ldr	r3, [r0, #8]
 609 0002 43F08041 		orr	r1, r3, #1073741824
 610 0006 8160     		str	r1, [r0, #8]
 611 0008 7047     		bx	lr
 612              		.cfi_endproc
 613              	.LFE68:
 615              		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 616              		.align	1
 617              		.global	ADC_GetSoftwareStartConvStatus
 618              		.thumb
 619              		.thumb_func
 621              	ADC_GetSoftwareStartConvStatus:
 622              	.LFB69:
 841:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 842:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 843:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 844:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 845:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 846:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 847:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 848:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 849:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 623              		.loc 1 849 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628              	.LVL72:
 850:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   FlagStatus bitstatus = RESET;
 851:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 852:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 854:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the status of SWSTART bit */
 855:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 629              		.loc 1 855 0
 630 0000 8068     		ldr	r0, [r0, #8]
 631              	.LVL73:
 856:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 857:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* SWSTART bit is set */
 858:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = SET;
 859:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 860:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 861:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 862:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* SWSTART bit is reset */
 863:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = RESET;
 864:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 865:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 866:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Return the SWSTART bit status */
 867:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   return  bitstatus;
 868:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 632              		.loc 1 868 0
 633 0002 C0F38050 		ubfx	r0, r0, #22, #1
 634              	.LVL74:
 635 0006 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE69:
 639              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 640              		.align	1
 641              		.global	ADC_EOCOnEachRegularChannelCmd
 642              		.thumb
 643              		.thumb_func
 645              	ADC_EOCOnEachRegularChannelCmd:
 646              	.LFB70:
 869:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 870:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 871:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 872:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 873:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 874:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 875:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 876:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 877:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 878:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 879:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 647              		.loc 1 879 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652              	.LVL75:
 880:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 881:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 882:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 883:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 884:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 885:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 886:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 887:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 653              		.loc 1 887 0
 654 0000 8368     		ldr	r3, [r0, #8]
 884:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 655              		.loc 1 884 0
 656 0002 11B1     		cbz	r1, .L39
 657              		.loc 1 887 0
 658 0004 43F48061 		orr	r1, r3, #1024
 659              	.LVL76:
 660 0008 01E0     		b	.L41
 661              	.LVL77:
 662              	.L39:
 888:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 889:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 890:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 891:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 892:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 663              		.loc 1 892 0
 664 000a 23F48061 		bic	r1, r3, #1024
 665              	.LVL78:
 666              	.L41:
 667 000e 8160     		str	r1, [r0, #8]
 668 0010 7047     		bx	lr
 669              		.cfi_endproc
 670              	.LFE70:
 672              		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 673              		.align	1
 674              		.global	ADC_ContinuousModeCmd
 675              		.thumb
 676              		.thumb_func
 678              	ADC_ContinuousModeCmd:
 679              	.LFB71:
 893:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 894:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 895:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 896:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 897:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 898:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 899:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 900:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 901:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 902:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 903:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 904:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 680              		.loc 1 904 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              		@ link register save eliminated.
 685              	.LVL79:
 905:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 906:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 907:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 908:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 909:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 910:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 911:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 912:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 686              		.loc 1 912 0
 687 0000 8368     		ldr	r3, [r0, #8]
 909:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 688              		.loc 1 909 0
 689 0002 11B1     		cbz	r1, .L43
 690              		.loc 1 912 0
 691 0004 43F00201 		orr	r1, r3, #2
 692              	.LVL80:
 693 0008 01E0     		b	.L45
 694              	.LVL81:
 695              	.L43:
 913:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 914:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 915:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 916:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 917:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 696              		.loc 1 917 0
 697 000a 23F00201 		bic	r1, r3, #2
 698              	.LVL82:
 699              	.L45:
 700 000e 8160     		str	r1, [r0, #8]
 701 0010 7047     		bx	lr
 702              		.cfi_endproc
 703              	.LFE71:
 705              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 706              		.align	1
 707              		.global	ADC_DiscModeChannelCountConfig
 708              		.thumb
 709              		.thumb_func
 711              	ADC_DiscModeChannelCountConfig:
 712              	.LFB72:
 918:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 919:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 920:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 921:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 922:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 923:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         channel.
 924:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 925:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 926:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This number must be between 1 and 8.
 927:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 928:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 929:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 930:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 713              		.loc 1 930 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 717              		@ link register save eliminated.
 718              	.LVL83:
 931:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
 932:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg2 = 0;
 933:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 934:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 935:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 936:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 937:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 938:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the old register value */
 939:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->CR1;
 719              		.loc 1 939 0
 720 0000 4368     		ldr	r3, [r0, #4]
 721              	.LVL84:
 940:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 941:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 942:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 943:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 944:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the discontinuous mode channel count */
 945:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg2 = Number - 1;
 722              		.loc 1 945 0
 723 0002 0139     		subs	r1, r1, #1
 724              	.LVL85:
 942:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 725              		.loc 1 942 0
 726 0004 23F46042 		bic	r2, r3, #57344
 727              	.LVL86:
 946:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 728              		.loc 1 946 0
 729 0008 42EA4133 		orr	r3, r2, r1, lsl #13
 730              	.LVL87:
 947:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 948:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Store the new register value */
 949:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR1 = tmpreg1;
 731              		.loc 1 949 0
 732 000c 4360     		str	r3, [r0, #4]
 733 000e 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE72:
 737              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 738              		.align	1
 739              		.global	ADC_DiscModeCmd
 740              		.thumb
 741              		.thumb_func
 743              	ADC_DiscModeCmd:
 744              	.LFB73:
 950:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 951:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 952:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 953:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 954:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         for the specified ADC
 955:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 956:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 957:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         regular group channel.
 958:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 959:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
 960:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 961:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 962:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 745              		.loc 1 962 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 750              	.LVL88:
 963:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 964:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 965:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 966:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 967:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 968:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 969:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 970:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 751              		.loc 1 970 0
 752 0000 4368     		ldr	r3, [r0, #4]
 967:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 753              		.loc 1 967 0
 754 0002 11B1     		cbz	r1, .L48
 755              		.loc 1 970 0
 756 0004 43F40061 		orr	r1, r3, #2048
 757              	.LVL89:
 758 0008 01E0     		b	.L50
 759              	.LVL90:
 760              	.L48:
 971:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 972:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
 973:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
 974:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 975:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 761              		.loc 1 975 0
 762 000a 23F40061 		bic	r1, r3, #2048
 763              	.LVL91:
 764              	.L50:
 765 000e 4160     		str	r1, [r0, #4]
 766 0010 7047     		bx	lr
 767              		.cfi_endproc
 768              	.LFE73:
 770              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 771              		.align	1
 772              		.global	ADC_GetConversionValue
 773              		.thumb
 774              		.thumb_func
 776              	ADC_GetConversionValue:
 777              	.LFB74:
 976:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
 977:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 978:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 979:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 980:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 981:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 982:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval The Data conversion value.
 983:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
 984:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 985:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 778              		.loc 1 985 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 783              	.LVL92:
 986:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
 987:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 988:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
 989:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Return the selected ADC conversion value */
 990:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   return (uint16_t) ADCx->DR;
 784              		.loc 1 990 0
 785 0000 C06C     		ldr	r0, [r0, #76]
 786              	.LVL93:
 991:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 787              		.loc 1 991 0
 788 0002 80B2     		uxth	r0, r0
 789 0004 7047     		bx	lr
 790              		.cfi_endproc
 791              	.LFE74:
 793              		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 794              		.align	1
 795              		.global	ADC_GetMultiModeConversionValue
 796              		.thumb
 797              		.thumb_func
 799              	ADC_GetMultiModeConversionValue:
 800              	.LFB75:
 992:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
 993:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
 994:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 995:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         data in the selected multi mode.
 996:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  None  
 997:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval The Data conversion value.
 998:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 999:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
1000:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
1001:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
1002:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
1003:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
1004:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1005:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1006:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 801              		.loc 1 1006 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805              		@ link register save eliminated.
1007:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Return the multi mode conversion value */
1008:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 806              		.loc 1 1008 0
 807 0000 014B     		ldr	r3, .L53
 808 0002 1868     		ldr	r0, [r3, #0]
1009:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 809              		.loc 1 1009 0
 810 0004 7047     		bx	lr
 811              	.L54:
 812 0006 00BF     		.align	2
 813              	.L53:
 814 0008 08230140 		.word	1073816328
 815              		.cfi_endproc
 816              	.LFE75:
 818              		.section	.text.ADC_DMACmd,"ax",%progbits
 819              		.align	1
 820              		.global	ADC_DMACmd
 821              		.thumb
 822              		.thumb_func
 824              	ADC_DMACmd:
 825              	.LFB76:
1010:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1011:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @}
1012:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1013:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1014:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1015:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1016:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *
1017:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @verbatim   
1018:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================
1019:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                    Regular Channels DMA Configuration functions
1020:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================  
1021:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1022:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1023:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   channels.
1024:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1025:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1026:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1027:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1028:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1029:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1030:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1031:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1032:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1033:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1037:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1038:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1039:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1040:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1041:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1042:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1043:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @endverbatim
1044:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
1045:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1046:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1047:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  /**
1048:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1049:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1050:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1051:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1052:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1053:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1054:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1055:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 826              		.loc 1 1055 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              		@ link register save eliminated.
 831              	.LVL94:
1056:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1057:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1058:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1059:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
1060:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1061:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC DMA request */
1062:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 832              		.loc 1 1062 0
 833 0000 8368     		ldr	r3, [r0, #8]
1059:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 834              		.loc 1 1059 0
 835 0002 11B1     		cbz	r1, .L56
 836              		.loc 1 1062 0
 837 0004 43F48071 		orr	r1, r3, #256
 838              	.LVL95:
 839 0008 01E0     		b	.L58
 840              	.LVL96:
 841              	.L56:
1063:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1064:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1065:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1066:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC DMA request */
1067:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 842              		.loc 1 1067 0
 843 000a 23F48071 		bic	r1, r3, #256
 844              	.LVL97:
 845              	.L58:
 846 000e 8160     		str	r1, [r0, #8]
 847 0010 7047     		bx	lr
 848              		.cfi_endproc
 849              	.LFE76:
 851              		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 852              		.align	1
 853              		.global	ADC_DMARequestAfterLastTransferCmd
 854              		.thumb
 855              		.thumb_func
 857              	ADC_DMARequestAfterLastTransferCmd:
 858              	.LFB77:
1068:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1069:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1070:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1071:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1072:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1073:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1074:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1075:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1076:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1077:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1078:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1079:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 859              		.loc 1 1079 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864              	.LVL98:
1080:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1081:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1082:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1083:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
1084:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1085:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1086:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 865              		.loc 1 1086 0
 866 0000 8368     		ldr	r3, [r0, #8]
1083:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 867              		.loc 1 1083 0
 868 0002 11B1     		cbz	r1, .L60
 869              		.loc 1 1086 0
 870 0004 43F40071 		orr	r1, r3, #512
 871              	.LVL99:
 872 0008 01E0     		b	.L62
 873              	.LVL100:
 874              	.L60:
1087:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1088:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1089:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1090:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1091:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 875              		.loc 1 1091 0
 876 000a 23F40071 		bic	r1, r3, #512
 877              	.LVL101:
 878              	.L62:
 879 000e 8160     		str	r1, [r0, #8]
 880 0010 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE77:
 884              		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 885              		.align	1
 886              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 887              		.thumb
 888              		.thumb_func
 890              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 891              	.LFB78:
1092:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1093:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1094:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1095:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1096:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1097:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1098:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1099:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1100:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1101:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1102:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1103:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1104:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1105:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1106:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 892              		.loc 1 1106 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 897              	.LVL102:
 898 0000 044B     		ldr	r3, .L67
1107:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1108:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1109:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
1110:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1111:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1112:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 899              		.loc 1 1112 0
 900 0002 5A68     		ldr	r2, [r3, #4]
1109:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 901              		.loc 1 1109 0
 902 0004 10B1     		cbz	r0, .L64
 903              		.loc 1 1112 0
 904 0006 42F40050 		orr	r0, r2, #8192
 905              	.LVL103:
 906 000a 01E0     		b	.L66
 907              	.LVL104:
 908              	.L64:
1113:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1114:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1115:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1116:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1117:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 909              		.loc 1 1117 0
 910 000c 22F40050 		bic	r0, r2, #8192
 911              	.LVL105:
 912              	.L66:
 913 0010 5860     		str	r0, [r3, #4]
 914 0012 7047     		bx	lr
 915              	.L68:
 916              		.align	2
 917              	.L67:
 918 0014 00230140 		.word	1073816320
 919              		.cfi_endproc
 920              	.LFE78:
 922              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 923              		.align	1
 924              		.global	ADC_InjectedChannelConfig
 925              		.thumb
 926              		.thumb_func
 928              	ADC_InjectedChannelConfig:
 929              	.LFB79:
1118:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1119:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1120:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1121:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @}
1122:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1123:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1124:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1125:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1126:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *
1127:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @verbatim   
1128:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================
1129:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                      Injected channels Configuration functions
1130:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================  
1131:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1132:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1133:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   it is composed of 2 sub sections : 
1134:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
1135:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1136:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1137:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1138:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - Configure the sampling time for each channel    
1139:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - Activate the Auto injected Mode  
1140:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - Activate the Discontinuous Mode 
1141:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - scan mode activation  
1142:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - External/software trigger source   
1143:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - External trigger edge 
1144:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     - injected channels sequencer.
1145:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     
1146:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1147:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1148:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       converted data of the specific injected channel.
1149:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1150:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @endverbatim
1151:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
1152:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */ 
1153:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1154:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1155:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         rank in the sequencer and its sample time.
1156:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1157:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1158:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1159:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1160:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1161:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1162:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1163:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1164:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1165:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1166:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1167:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1168:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1169:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1170:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1171:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1172:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1173:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1174:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1175:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1176:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1177:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1178:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1179:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter must be between 1 to 4.
1180:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1181:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1182:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1183:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1184:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1185:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1186:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1187:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1188:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1189:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1190:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1191:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1192:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1193:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 930              		.loc 1 1193 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              	.LVL106:
1194:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
1195:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1196:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1197:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1198:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1199:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1200:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1201:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 935              		.loc 1 1201 0
 936 0000 0929     		cmp	r1, #9
1193:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 937              		.loc 1 1193 0
 938 0002 70B5     		push	{r4, r5, r6, lr}
 939              	.LCFI4:
 940              		.cfi_def_cfa_offset 16
 941              		.cfi_offset 4, -16
 942              		.cfi_offset 5, -12
 943              		.cfi_offset 6, -8
 944              		.cfi_offset 14, -4
 945 0004 4FF00304 		mov	r4, #3
 946              		.loc 1 1201 0
 947 0008 0CD9     		bls	.L70
1202:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1203:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Get the old register value */
1204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
1205:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to clear */
1206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 948              		.loc 1 1206 0
 949 000a 4C43     		muls	r4, r1, r4
 950 000c 0725     		movs	r5, #7
 951 000e 1E3C     		subs	r4, r4, #30
 952 0010 05FA04F5 		lsl	r5, r5, r4
1207:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Clear the old sample time */
1208:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
1209:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to set */
1210:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 953              		.loc 1 1210 0
 954 0014 03FA04F3 		lsl	r3, r3, r4
 955              	.LVL107:
1204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 956              		.loc 1 1204 0
 957 0018 C668     		ldr	r6, [r0, #12]
 958              	.LVL108:
1208:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 959              		.loc 1 1208 0
 960 001a 26EA0505 		bic	r5, r6, r5
 961              	.LVL109:
1211:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the new sample time */
1212:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 962              		.loc 1 1212 0
 963 001e 2B43     		orrs	r3, r3, r5
 964              	.LVL110:
1213:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Store the new register value */
1214:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 965              		.loc 1 1214 0
 966 0020 C360     		str	r3, [r0, #12]
 967 0022 0BE0     		b	.L71
 968              	.LVL111:
 969              	.L70:
1215:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1216:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1217:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Get the old register value */
1219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
1220:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to clear */
1221:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 970              		.loc 1 1221 0
 971 0024 4C43     		muls	r4, r1, r4
 972 0026 0725     		movs	r5, #7
 973 0028 05FA04F5 		lsl	r5, r5, r4
1222:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Clear the old sample time */
1223:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
1224:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Calculate the mask to set */
1225:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 974              		.loc 1 1225 0
 975 002c 03FA04F3 		lsl	r3, r3, r4
 976              	.LVL112:
1219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 977              		.loc 1 1219 0
 978 0030 0669     		ldr	r6, [r0, #16]
 979              	.LVL113:
1223:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 980              		.loc 1 1223 0
 981 0032 26EA0505 		bic	r5, r6, r5
 982              	.LVL114:
1226:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Set the new sample time */
1227:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     tmpreg1 |= tmpreg2;
 983              		.loc 1 1227 0
 984 0036 45EA0304 		orr	r4, r5, r3
 985              	.LVL115:
1228:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Store the new register value */
1229:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 986              		.loc 1 1229 0
 987 003a 0461     		str	r4, [r0, #16]
 988              	.LVL116:
 989              	.L71:
1230:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1231:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Rank configuration */
1232:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the old register value */
1233:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 990              		.loc 1 1233 0
 991 003c 846B     		ldr	r4, [r0, #56]
 992              	.LVL117:
1234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get JL value: Number = JL+1 */
1235:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 993              		.loc 1 1235 0
 994 003e C4F30153 		ubfx	r3, r4, #20, #2
1236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1237:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 995              		.loc 1 1237 0
 996 0042 D21A     		subs	r2, r2, r3
 997              	.LVL118:
 998 0044 931C     		adds	r3, r2, #2
 999 0046 DBB2     		uxtb	r3, r3
 1000 0048 0522     		movs	r2, #5
 1001 004a 5343     		muls	r3, r2, r3
 1002              	.LVL119:
 1003 004c 1F22     		movs	r2, #31
 1004 004e 02FA03F2 		lsl	r2, r2, r3
 1005              	.LVL120:
1238:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1239:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= ~tmpreg2;
1240:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1241:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1006              		.loc 1 1241 0
 1007 0052 01FA03F1 		lsl	r1, r1, r3
 1008              	.LVL121:
1239:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1009              		.loc 1 1239 0
 1010 0056 24EA0204 		bic	r4, r4, r2
 1011              	.LVL122:
1242:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1243:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= tmpreg2;
 1012              		.loc 1 1243 0
 1013 005a 2143     		orrs	r1, r1, r4
 1014              	.LVL123:
1244:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Store the new register value */
1245:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1015              		.loc 1 1245 0
 1016 005c 8163     		str	r1, [r0, #56]
 1017 005e 70BD     		pop	{r4, r5, r6, pc}
 1018              		.cfi_endproc
 1019              	.LFE79:
 1021              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1022              		.align	1
 1023              		.global	ADC_InjectedSequencerLengthConfig
 1024              		.thumb
 1025              		.thumb_func
 1027              	ADC_InjectedSequencerLengthConfig:
 1028              	.LFB80:
1246:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1247:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1248:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1249:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1250:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1251:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  Length: The sequencer length. 
1252:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1253:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1254:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1255:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1256:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1029              		.loc 1 1256 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 1034              	.LVL124:
1257:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg1 = 0;
1258:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg2 = 0;
1259:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1260:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1261:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1262:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1263:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the old register value */
1264:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1035              		.loc 1 1264 0
 1036 0000 836B     		ldr	r3, [r0, #56]
 1037              	.LVL125:
1265:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1266:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
1268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the injected sequence length JL bits */
1270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg2 = Length - 1; 
 1038              		.loc 1 1270 0
 1039 0002 0139     		subs	r1, r1, #1
 1040              	.LVL126:
1267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1041              		.loc 1 1267 0
 1042 0004 23F44012 		bic	r2, r3, #3145728
 1043              	.LVL127:
1271:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1044              		.loc 1 1271 0
 1045 0008 42EA0153 		orr	r3, r2, r1, lsl #20
 1046              	.LVL128:
1272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1273:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Store the new register value */
1274:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1047              		.loc 1 1274 0
 1048 000c 8363     		str	r3, [r0, #56]
 1049 000e 7047     		bx	lr
 1050              		.cfi_endproc
 1051              	.LFE80:
 1053              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1054              		.align	1
 1055              		.global	ADC_SetInjectedOffset
 1056              		.thumb
 1057              		.thumb_func
 1059              	ADC_SetInjectedOffset:
 1060              	.LFB81:
1275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1277:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1278:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1279:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1280:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1282:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1286:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1287:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter must be a 12bit value.
1288:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1290:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1061              		.loc 1 1291 0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 8
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 1066              	.LVL129:
 1067 0000 82B0     		sub	sp, sp, #8
 1068              	.LCFI5:
 1069              		.cfi_def_cfa_offset 8
1292:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     __IO uint32_t tmp = 0;
 1070              		.loc 1 1292 0
 1071 0002 0023     		movs	r3, #0
 1072 0004 0193     		str	r3, [sp, #4]
 1073              	.LVL130:
1293:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1294:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1295:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1296:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1297:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1298:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmp = (uint32_t)ADCx;
 1074              		.loc 1 1298 0
 1075 0006 0190     		str	r0, [sp, #4]
1299:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmp += ADC_InjectedChannel;
 1076              		.loc 1 1299 0
 1077 0008 0198     		ldr	r0, [sp, #4]
 1078              	.LVL131:
 1079 000a 0918     		adds	r1, r1, r0
 1080              	.LVL132:
 1081 000c 0191     		str	r1, [sp, #4]
 1082              	.LVL133:
1300:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1301:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the selected injected channel data offset */
1302:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1083              		.loc 1 1302 0
 1084 000e 019B     		ldr	r3, [sp, #4]
 1085 0010 1A60     		str	r2, [r3, #0]
1303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 1086              		.loc 1 1303 0
 1087 0012 02B0     		add	sp, sp, #8
 1088 0014 7047     		bx	lr
 1089              		.cfi_endproc
 1090              	.LFE81:
 1092              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1093              		.align	1
 1094              		.global	ADC_ExternalTrigInjectedConvConfig
 1095              		.thumb
 1096              		.thumb_func
 1098              	ADC_ExternalTrigInjectedConvConfig:
 1099              	.LFB82:
1304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  /**
1306:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1308:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1309:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:                    
1310:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1312:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1313:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1316:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1317:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1318:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1319:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1322:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1323:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1324:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1325:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1326:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1327:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1328:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1100              		.loc 1 1329 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL134:
1330:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
1331:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1332:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1334:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1335:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the old register value */
1336:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg = ADCx->CR2;
 1106              		.loc 1 1336 0
 1107 0000 8368     		ldr	r3, [r0, #8]
 1108              	.LVL135:
1337:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1338:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the old external event selection for injected group */
1339:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1109              		.loc 1 1339 0
 1110 0002 23F47022 		bic	r2, r3, #983040
 1111              	.LVL136:
1340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the external event selection for injected group */
1342:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1112              		.loc 1 1342 0
 1113 0006 1143     		orrs	r1, r1, r2
 1114              	.LVL137:
1343:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1344:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Store the new register value */
1345:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR2 = tmpreg;
 1115              		.loc 1 1345 0
 1116 0008 8160     		str	r1, [r0, #8]
 1117 000a 7047     		bx	lr
 1118              		.cfi_endproc
 1119              	.LFE82:
 1121              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1122              		.align	1
 1123              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1124              		.thumb
 1125              		.thumb_func
 1127              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1128              	.LFB83:
1346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1348:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1350:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1352:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         to start injected conversion. 
1353:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1354:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1355:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *                                                     injected conversion
1356:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1357:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1359:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *                                                               and falling edge
1360:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1361:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1362:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1363:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1129              		.loc 1 1363 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134              	.LVL138:
1364:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t tmpreg = 0;
1365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1368:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the old register value */
1369:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg = ADCx->CR2;
 1135              		.loc 1 1369 0
 1136 0000 8368     		ldr	r3, [r0, #8]
 1137              	.LVL139:
1370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1371:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1138              		.loc 1 1371 0
 1139 0002 23F44012 		bic	r2, r3, #3145728
 1140              	.LVL140:
1372:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Set the new external trigger edge for injected group */
1373:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1141              		.loc 1 1373 0
 1142 0006 1143     		orrs	r1, r1, r2
 1143              	.LVL141:
1374:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Store the new register value */
1375:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR2 = tmpreg;
 1144              		.loc 1 1375 0
 1145 0008 8160     		str	r1, [r0, #8]
 1146 000a 7047     		bx	lr
 1147              		.cfi_endproc
 1148              	.LFE83:
 1150              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1151              		.align	1
 1152              		.global	ADC_SoftwareStartInjectedConv
 1153              		.thumb
 1154              		.thumb_func
 1156              	ADC_SoftwareStartInjectedConv:
 1157              	.LFB84:
1376:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1377:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1378:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1379:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1380:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1382:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1383:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1158              		.loc 1 1384 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 0
 1161              		@ frame_needed = 0, uses_anonymous_args = 0
 1162              		@ link register save eliminated.
 1163              	.LVL142:
1385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1386:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1387:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1388:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1164              		.loc 1 1388 0
 1165 0000 8368     		ldr	r3, [r0, #8]
 1166 0002 43F48001 		orr	r1, r3, #4194304
 1167 0006 8160     		str	r1, [r0, #8]
 1168 0008 7047     		bx	lr
 1169              		.cfi_endproc
 1170              	.LFE84:
 1172              		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1173              		.align	1
 1174              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1175              		.thumb
 1176              		.thumb_func
 1178              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1179              	.LFB85:
1389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1391:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1392:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1393:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1394:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1396:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1180              		.loc 1 1397 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185              	.LVL143:
1398:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   FlagStatus bitstatus = RESET;
1399:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1400:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1402:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the status of JSWSTART bit */
1403:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1186              		.loc 1 1403 0
 1187 0000 8068     		ldr	r0, [r0, #8]
 1188              	.LVL144:
1404:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1405:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* JSWSTART bit is set */
1406:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = SET;
1407:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1408:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1409:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1410:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* JSWSTART bit is reset */
1411:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = RESET;
1412:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1413:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Return the JSWSTART bit status */
1414:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   return  bitstatus;
1415:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 1189              		.loc 1 1415 0
 1190 0002 C0F38050 		ubfx	r0, r0, #22, #1
 1191              	.LVL145:
 1192 0006 7047     		bx	lr
 1193              		.cfi_endproc
 1194              	.LFE85:
 1196              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1197              		.align	1
 1198              		.global	ADC_AutoInjectedConvCmd
 1199              		.thumb
 1200              		.thumb_func
 1202              	ADC_AutoInjectedConvCmd:
 1203              	.LFB86:
1416:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1417:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1418:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1419:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         conversion after regular one.
1420:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1421:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1422:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1423:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1426:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1204              		.loc 1 1426 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              		@ link register save eliminated.
 1209              	.LVL146:
1427:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1428:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1429:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1430:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
1431:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1432:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1433:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1210              		.loc 1 1433 0
 1211 0000 4368     		ldr	r3, [r0, #4]
1430:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 1212              		.loc 1 1430 0
 1213 0002 11B1     		cbz	r1, .L79
 1214              		.loc 1 1433 0
 1215 0004 43F48061 		orr	r1, r3, #1024
 1216              	.LVL147:
 1217 0008 01E0     		b	.L81
 1218              	.LVL148:
 1219              	.L79:
1434:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1435:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1436:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1437:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1438:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1220              		.loc 1 1438 0
 1221 000a 23F48061 		bic	r1, r3, #1024
 1222              	.LVL149:
 1223              	.L81:
 1224 000e 4160     		str	r1, [r0, #4]
 1225 0010 7047     		bx	lr
 1226              		.cfi_endproc
 1227              	.LFE86:
 1229              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1230              		.align	1
 1231              		.global	ADC_InjectedDiscModeCmd
 1232              		.thumb
 1233              		.thumb_func
 1235              	ADC_InjectedDiscModeCmd:
 1236              	.LFB87:
1439:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1440:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1441:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1442:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1443:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1444:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         channel for the specified ADC
1445:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1446:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *         group channel.
1448:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1449:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1450:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1451:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1452:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1237              		.loc 1 1452 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242              	.LVL150:
1453:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1454:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1455:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1456:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
1457:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1458:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 1243              		.loc 1 1459 0
 1244 0000 4368     		ldr	r3, [r0, #4]
1456:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 1245              		.loc 1 1456 0
 1246 0002 11B1     		cbz	r1, .L83
 1247              		.loc 1 1459 0
 1248 0004 43F48051 		orr	r1, r3, #4096
 1249              	.LVL151:
 1250 0008 01E0     		b	.L85
 1251              	.LVL152:
 1252              	.L83:
1460:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1462:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1463:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1464:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 1253              		.loc 1 1464 0
 1254 000a 23F48051 		bic	r1, r3, #4096
 1255              	.LVL153:
 1256              	.L85:
 1257 000e 4160     		str	r1, [r0, #4]
 1258 0010 7047     		bx	lr
 1259              		.cfi_endproc
 1260              	.LFE87:
 1262              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1263              		.align	1
 1264              		.global	ADC_GetInjectedConversionValue
 1265              		.thumb
 1266              		.thumb_func
 1268              	ADC_GetInjectedConversionValue:
 1269              	.LFB88:
1465:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1466:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1467:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1468:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1469:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1470:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1471:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1472:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1473:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1475:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1477:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval The Data conversion value.
1478:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1479:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1480:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1270              		.loc 1 1480 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 8
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 1274              		@ link register save eliminated.
 1275              	.LVL154:
 1276 0000 82B0     		sub	sp, sp, #8
 1277              	.LCFI6:
 1278              		.cfi_def_cfa_offset 8
1481:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   __IO uint32_t tmp = 0;
 1279              		.loc 1 1481 0
 1280 0002 0023     		movs	r3, #0
 1281 0004 0193     		str	r3, [sp, #4]
 1282              	.LVL155:
1482:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1483:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1484:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1485:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1486:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1487:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmp = (uint32_t)ADCx;
 1283              		.loc 1 1487 0
 1284 0006 0190     		str	r0, [sp, #4]
1488:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 1285              		.loc 1 1488 0
 1286 0008 0198     		ldr	r0, [sp, #4]
 1287              	.LVL156:
 1288 000a 2830     		adds	r0, r0, #40
 1289 000c 4118     		adds	r1, r0, r1
 1290              	.LVL157:
 1291 000e 0191     		str	r1, [sp, #4]
 1292              	.LVL158:
1489:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1490:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1491:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 1293              		.loc 1 1491 0
 1294 0010 019A     		ldr	r2, [sp, #4]
 1295 0012 1368     		ldr	r3, [r2, #0]
1492:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 1296              		.loc 1 1492 0
 1297 0014 98B2     		uxth	r0, r3
 1298 0016 02B0     		add	sp, sp, #8
 1299 0018 7047     		bx	lr
 1300              		.cfi_endproc
 1301              	.LFE88:
 1303              		.section	.text.ADC_ITConfig,"ax",%progbits
 1304              		.align	1
 1305              		.global	ADC_ITConfig
 1306              		.thumb
 1307              		.thumb_func
 1309              	ADC_ITConfig:
 1310              	.LFB89:
1493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1494:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @}
1495:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1496:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1497:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1498:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *  @brief   Interrupts and flags management functions
1499:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  *
1500:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @verbatim   
1501:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================
1502:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                    Interrupts and flags management functions
1503:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****  ===============================================================================  
1504:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1505:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1506:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1507:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1508:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1509:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   3 groups:
1510:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1511:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1512:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   =================================================
1513:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Flags :
1514:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ---------- 
1515:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1516:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1517:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1518:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1519:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                ==> a regular CHANNEL conversion 
1520:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                ==> sequence of regular GROUP conversions .
1521:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****               conversion starts.
1524:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Interrupts :
1526:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ------------
1527:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1528:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1529:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                      conversion event.
1530:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1531:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1532:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1533:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   =================================================
1534:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Flags :
1535:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ---------- 
1536:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1537:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                the end of injected GROUP conversion  
1538:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****               
1539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                injected GROUP conversion starts.
1541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1542:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Interrupts :
1543:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ------------
1544:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1545:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                       conversion event.     
1546:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1547:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   III. General Flags and Interrupts for the ADC
1548:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ================================================= 
1549:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Flags :
1550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ---------- 
1551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1552:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****               crosses the programmed thresholds values.
1553:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****               
1554:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   Interrupts :
1555:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ------------
1556:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1557:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1558:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1559:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1560:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1561:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   
1562:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1563:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1564:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1565:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****       
1566:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1567:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1568:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1569:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1570:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****                                  (corresponding Flag). 
1571:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** @endverbatim
1572:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @{
1573:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */ 
1574:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1575:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1576:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1577:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1578:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1579:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1580:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1581:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1582:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1583:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1584:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1585:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1586:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1587:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1588:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1311              		.loc 1 1588 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              		@ link register save eliminated.
 1316              	.LVL159:
1589:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t itmask = 0;
1590:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1591:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1592:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1593:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1594:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1595:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADC IT index */
1596:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   itmask = (uint8_t)ADC_IT;
1597:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 1317              		.loc 1 1597 0
 1318 0000 0123     		movs	r3, #1
 1319 0002 C9B2     		uxtb	r1, r1
 1320              	.LVL160:
 1321 0004 03FA01F1 		lsl	r1, r3, r1
 1322              	.LVL161:
1598:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1599:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
1600:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1601:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Enable the selected ADC interrupts */
1602:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 |= itmask;
 1323              		.loc 1 1602 0
 1324 0008 4368     		ldr	r3, [r0, #4]
1599:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (NewState != DISABLE)
 1325              		.loc 1 1599 0
 1326 000a 0AB1     		cbz	r2, .L88
 1327              		.loc 1 1602 0
 1328 000c 1943     		orrs	r1, r1, r3
 1329              	.LVL162:
 1330 000e 01E0     		b	.L90
 1331              	.LVL163:
 1332              	.L88:
1603:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1604:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1605:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* Disable the selected ADC interrupts */
1607:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 1333              		.loc 1 1607 0
 1334 0010 23EA0101 		bic	r1, r3, r1
 1335              	.LVL164:
 1336              	.L90:
 1337 0014 4160     		str	r1, [r0, #4]
 1338 0016 7047     		bx	lr
 1339              		.cfi_endproc
 1340              	.LFE89:
 1342              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1343              		.align	1
 1344              		.global	ADC_GetFlagStatus
 1345              		.thumb
 1346              		.thumb_func
 1348              	ADC_GetFlagStatus:
 1349              	.LFB90:
1608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1609:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1610:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1611:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1612:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1613:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1614:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1615:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1616:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1617:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1618:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1619:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1620:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1621:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1622:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1623:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1624:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1625:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1350              		.loc 1 1625 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 0
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              		@ link register save eliminated.
 1355              	.LVL165:
1626:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   FlagStatus bitstatus = RESET;
1627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1628:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1629:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1630:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1631:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the status of the specified ADC flag */
1632:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 1356              		.loc 1 1632 0
 1357 0000 0368     		ldr	r3, [r0, #0]
 1358              	.LVL166:
 1359 0002 1942     		tst	r1, r3
1633:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1634:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* ADC_FLAG is set */
1635:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = SET;
1636:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1637:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1638:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1639:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* ADC_FLAG is reset */
1640:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = RESET;
1641:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Return the ADC_FLAG status */
1643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   return  bitstatus;
1644:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 1360              		.loc 1 1644 0
 1361 0004 0CBF     		ite	eq
 1362 0006 0020     		moveq	r0, #0
 1363 0008 0120     		movne	r0, #1
 1364              	.LVL167:
 1365 000a 7047     		bx	lr
 1366              		.cfi_endproc
 1367              	.LFE90:
 1369              		.section	.text.ADC_ClearFlag,"ax",%progbits
 1370              		.align	1
 1371              		.global	ADC_ClearFlag
 1372              		.thumb
 1373              		.thumb_func
 1375              	ADC_ClearFlag:
 1376              	.LFB91:
1645:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1646:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1647:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1648:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1649:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1650:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be any combination of the following values:
1651:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1652:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1653:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1654:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1655:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1656:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1657:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1658:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1659:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1660:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1377              		.loc 1 1660 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381              		@ link register save eliminated.
 1382              	.LVL168:
1661:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1662:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1663:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1664:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1665:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the selected ADC flags */
1666:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 1383              		.loc 1 1666 0
 1384 0000 C943     		mvns	r1, r1
 1385              	.LVL169:
 1386 0002 0160     		str	r1, [r0, #0]
 1387 0004 7047     		bx	lr
 1388              		.cfi_endproc
 1389              	.LFE91:
 1391              		.section	.text.ADC_GetITStatus,"ax",%progbits
 1392              		.align	1
 1393              		.global	ADC_GetITStatus
 1394              		.thumb
 1395              		.thumb_func
 1397              	ADC_GetITStatus:
 1398              	.LFB92:
1667:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
1668:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1669:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1670:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1671:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1672:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1673:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1674:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1675:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1676:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1677:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1678:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1679:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1680:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1681:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1399              		.loc 1 1681 0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 1404              	.LVL170:
1682:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ITStatus bitstatus = RESET;
1683:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
1684:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1685:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1686:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1687:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1688:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1689:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADC IT index */
1690:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   itmask = ADC_IT >> 8;
1691:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1692:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADC_IT enable bit status */
1693:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1405              		.loc 1 1693 0
 1406 0000 4368     		ldr	r3, [r0, #4]
 1407              	.LVL171:
1694:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1695:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 1408              		.loc 1 1696 0
 1409 0002 0068     		ldr	r0, [r0, #0]
 1410              	.LVL172:
 1411 0004 10EA1120 		ands	r0, r0, r1, lsr #8
 1412 0008 07D0     		beq	.L94
1693:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1413              		.loc 1 1693 0 discriminator 1
 1414 000a 0122     		movs	r2, #1
 1415 000c C9B2     		uxtb	r1, r1
 1416              	.LVL173:
 1417 000e 02FA01F0 		lsl	r0, r2, r1
 1418              		.loc 1 1696 0 discriminator 1
 1419 0012 1842     		tst	r0, r3
1697:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1698:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* ADC_IT is set */
1699:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = SET;
 1420              		.loc 1 1699 0 discriminator 1
 1421 0014 0CBF     		ite	eq
 1422 0016 0020     		moveq	r0, #0
 1423 0018 0120     		movne	r0, #1
 1424              	.L94:
 1425              	.LVL174:
1700:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1701:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   else
1702:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   {
1703:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     /* ADC_IT is reset */
1704:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****     bitstatus = RESET;
1705:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   }
1706:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Return the ADC_IT status */
1707:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   return  bitstatus;
1708:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** }
 1426              		.loc 1 1708 0
 1427 001a 7047     		bx	lr
 1428              		.cfi_endproc
 1429              	.LFE92:
 1431              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1432              		.align	1
 1433              		.global	ADC_ClearITPendingBit
 1434              		.thumb
 1435              		.thumb_func
 1437              	ADC_ClearITPendingBit:
 1438              	.LFB93:
1709:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** 
1710:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** /**
1711:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1712:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1713:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1714:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *          This parameter can be one of the following values:
1715:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1716:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1717:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1718:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1719:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   * @retval None
1720:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   */
1721:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1722:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c **** {
 1439              		.loc 1 1722 0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443              		@ link register save eliminated.
 1444              	.LVL175:
1723:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   uint8_t itmask = 0;
1724:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Check the parameters */
1725:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1726:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Get the ADC IT index */
1728:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
1729:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1730:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 1445              		.loc 1 1730 0
 1446 0000 6FEA1121 		mvn	r1, r1, lsr #8
 1447              	.LVL176:
 1448 0004 0160     		str	r1, [r0, #0]
 1449 0006 7047     		bx	lr
 1450              		.cfi_endproc
 1451              	.LFE93:
 1453              		.text
 1454              	.Letext0:
 1455              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q1\\bin\\../lib/gcc/arm-none-eab
 1456              		.file 3 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx.h"
 1457              		.file 4 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_adc.h"
 1458              		.file 5 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/core_cm3.h"
 1459              		.file 6 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_adc.c
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:19     .text.ADC_DeInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:24     .text.ADC_DeInit:00000000 ADC_DeInit
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:55     .text.ADC_Init:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:60     .text.ADC_Init:00000000 ADC_Init
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:137    .text.ADC_Init:00000048 $d
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:142    .text.ADC_StructInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:147    .text.ADC_StructInit:00000000 ADC_StructInit
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:178    .text.ADC_CommonInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:183    .text.ADC_CommonInit:00000000 ADC_CommonInit
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:226    .text.ADC_CommonInit:00000020 $d
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:232    .text.ADC_CommonStructInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:237    .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:259    .text.ADC_Cmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:264    .text.ADC_Cmd:00000000 ADC_Cmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:292    .text.ADC_AnalogWatchdogCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:297    .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:322    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:327    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:344    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:349    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:373    .text.ADC_TempSensorVrefintCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:378    .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:406    .text.ADC_TempSensorVrefintCmd:00000014 $d
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:411    .text.ADC_VBATCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:416    .text.ADC_VBATCmd:00000000 ADC_VBATCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:444    .text.ADC_VBATCmd:00000014 $d
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:449    .text.ADC_RegularChannelConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:454    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:594    .text.ADC_SoftwareStartConv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:599    .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:616    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:621    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:640    .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:645    .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:673    .text.ADC_ContinuousModeCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:678    .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:706    .text.ADC_DiscModeChannelCountConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:711    .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:738    .text.ADC_DiscModeCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:743    .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:771    .text.ADC_GetConversionValue:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:776    .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:794    .text.ADC_GetMultiModeConversionValue:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:799    .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:814    .text.ADC_GetMultiModeConversionValue:00000008 $d
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:819    .text.ADC_DMACmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:824    .text.ADC_DMACmd:00000000 ADC_DMACmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:852    .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:857    .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:885    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:890    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:918    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000014 $d
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:923    .text.ADC_InjectedChannelConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:928    .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1022   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1027   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1054   .text.ADC_SetInjectedOffset:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1059   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1093   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1098   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1122   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1127   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1151   .text.ADC_SoftwareStartInjectedConv:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1156   .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1173   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1178   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1197   .text.ADC_AutoInjectedConvCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1202   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1230   .text.ADC_InjectedDiscModeCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1235   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1263   .text.ADC_GetInjectedConversionValue:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1268   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1304   .text.ADC_ITConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1309   .text.ADC_ITConfig:00000000 ADC_ITConfig
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1343   .text.ADC_GetFlagStatus:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1348   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1370   .text.ADC_ClearFlag:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1375   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1392   .text.ADC_GetITStatus:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1397   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1432   .text.ADC_ClearITPendingBit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccvBEQdf.s:1437   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
