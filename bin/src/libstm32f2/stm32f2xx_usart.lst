   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f2xx_usart.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.USART_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	USART_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	USART_DeInit:
  25              	.LFB56:
  26              		.file 1 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_usart.c"
   1:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
   2:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   ******************************************************************************
   3:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @file    stm32f2xx_usart.c
   4:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @author  MCD Application Team
   5:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @version V1.1.2
   6:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @date    05-March-2012 
   7:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          transmitter (USART):           
  10:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - Initialization and Configuration
  11:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - Data transfers
  12:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - Multi-Processor Communication
  13:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - LIN mode
  14:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - Half-duplex mode
  15:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - Smartcard mode
  16:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - IrDA mode
  17:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - DMA transfers management
  18:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           - Interrupts and flags management 
  19:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *           
  20:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *  @verbatim
  21:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *      
  22:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          ===================================================================
  23:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                                 How to use this driver
  24:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          ===================================================================
  25:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  29:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *              or/and SCLK). 
  32:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  33:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                 - Call GPIO_Init() function
  41:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *        
  42:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *             function.
  45:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  46:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  49:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  52:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          6. When using the DMA mode 
  53:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * 
  56:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * 
  58:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  60:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          for more details
  62:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          
  63:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          and before calling the function USART_Init().
  67:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          
  68:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *  @endverbatim
  69:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *        
  70:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   ******************************************************************************
  71:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @attention
  72:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  73:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  74:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  75:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  76:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * You may not use this file except in compliance with the License.
  77:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * You may obtain a copy of the License at:
  78:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  79:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  80:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  81:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  82:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  83:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  84:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * See the License for the specific language governing permissions and
  85:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * limitations under the License.
  86:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
  87:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   ******************************************************************************
  88:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
  89:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
  90:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  91:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** #include "stm32f2xx_usart.h"
  92:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** #include "stm32f2xx_rcc.h"
  93:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
  94:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @addtogroup STM32F2xx_StdPeriph_Driver
  95:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
  96:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
  97:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
  98:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART 
  99:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief USART driver modules
 100:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 101:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 102:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 103:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 104:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /* Private define ------------------------------------------------------------*/
 105:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 106:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 107:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 108:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 109:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                                               USART_CR1_RE))
 110:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 111:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 112:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 113:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 114:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 115:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 116:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 117:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 118:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*!< USART Interrupts mask */
 119:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 120:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 121:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 122:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 123:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 124:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 125:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 126:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Private_Functions
 127:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 128:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 129:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 130:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 131:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 132:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
 133:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
 134:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
 135:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                   Initialization and Configuration functions
 136:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
 137:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 138:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 139:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   in asynchronous and in synchronous modes.
 140:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 141:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Baud Rate
 142:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Word Length 
 143:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Stop Bit
 144:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 145:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 146:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 147:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 148:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    +-------------------------------------------------------------+     
 149:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 150:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |---------------------|---------------------------------------|             
 151:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 152:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |---------|-----------|---------------------------------------|  
 153:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 154:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |---------|-----------|---------------------------------------|  
 155:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 156:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |---------|-----------|---------------------------------------|  
 157:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 158:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****    +-------------------------------------------------------------+            
 159:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Hardware flow control
 160:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Receiver/transmitter modes
 161:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 162:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 163:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   (details for the procedure are available in reference manual (RM0033)).
 164:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 165:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 166:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     parameters should be also configured:
 167:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART Clock Enabled
 168:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART polarity
 169:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART phase
 170:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART LastBit
 171:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 172:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 173:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 174:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
 175:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 176:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 177:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 178:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 179:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 180:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 181:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 182:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 183:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 184:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 185:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
  27              		.loc 1 185 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 186:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 187:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 188:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 189:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (USARTx == USART1)
  37              		.loc 1 189 0
  38 0002 234B     		ldr	r3, .L11
  39 0004 9842     		cmp	r0, r3
  40 0006 05D1     		bne	.L2
 190:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 191:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  41              		.loc 1 191 0
  42 0008 1020     		movs	r0, #16
  43              	.LVL1:
  44 000a 0121     		movs	r1, #1
  45 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  46              	.LVL2:
 192:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  47              		.loc 1 192 0
  48 0010 1020     		movs	r0, #16
  49 0012 37E0     		b	.L8
  50              	.LVL3:
  51              	.L2:
 193:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 194:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (USARTx == USART2)
  52              		.loc 1 194 0
  53 0014 1F49     		ldr	r1, .L11+4
  54 0016 8842     		cmp	r0, r1
  55 0018 07D1     		bne	.L3
 195:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 196:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  56              		.loc 1 196 0
  57 001a 4FF40030 		mov	r0, #131072
  58              	.LVL4:
  59 001e 0121     		movs	r1, #1
  60 0020 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  61              	.LVL5:
 197:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  62              		.loc 1 197 0
  63 0024 4FF40030 		mov	r0, #131072
  64 0028 09E0     		b	.L9
  65              	.LVL6:
  66              	.L3:
 198:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 199:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (USARTx == USART3)
  67              		.loc 1 199 0
  68 002a 1B4A     		ldr	r2, .L11+8
  69 002c 9042     		cmp	r0, r2
  70 002e 0BD1     		bne	.L4
 200:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 201:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  71              		.loc 1 201 0
  72 0030 4FF48020 		mov	r0, #262144
  73              	.LVL7:
  74 0034 0121     		movs	r1, #1
  75 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  76              	.LVL8:
 202:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  77              		.loc 1 202 0
  78 003a 4FF48020 		mov	r0, #262144
  79              	.L9:
  80 003e 0021     		movs	r1, #0
 203:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }    
 204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (USARTx == UART4)
 205:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 207:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 208:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 209:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (USARTx == UART5)
 210:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 211:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 212:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 213:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }     
 214:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 215:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 216:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     if (USARTx == USART6)
 217:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     { 
 218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 220:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     }
 221:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 222:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
  81              		.loc 1 222 0
  82 0040 BDE80840 		pop	{r3, lr}
 202:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  83              		.loc 1 202 0
  84 0044 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  85              	.LVL9:
  86              	.L4:
 204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (USARTx == UART4)
  87              		.loc 1 204 0
  88 0048 144B     		ldr	r3, .L11+12
  89 004a 9842     		cmp	r0, r3
  90 004c 07D1     		bne	.L5
 206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  91              		.loc 1 206 0
  92 004e 4FF40020 		mov	r0, #524288
  93              	.LVL10:
  94 0052 0121     		movs	r1, #1
  95 0054 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  96              	.LVL11:
 207:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  97              		.loc 1 207 0
  98 0058 4FF40020 		mov	r0, #524288
  99 005c EFE7     		b	.L9
 100              	.LVL12:
 101              	.L5:
 209:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (USARTx == UART5)
 102              		.loc 1 209 0
 103 005e 1049     		ldr	r1, .L11+16
 104 0060 8842     		cmp	r0, r1
 105 0062 07D1     		bne	.L6
 211:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 106              		.loc 1 211 0
 107 0064 4FF48010 		mov	r0, #1048576
 108              	.LVL13:
 109 0068 0121     		movs	r1, #1
 110 006a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 111              	.LVL14:
 212:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 112              		.loc 1 212 0
 113 006e 4FF48010 		mov	r0, #1048576
 114 0072 E4E7     		b	.L9
 115              	.LVL15:
 116              	.L6:
 216:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     if (USARTx == USART6)
 117              		.loc 1 216 0
 118 0074 0B4A     		ldr	r2, .L11+20
 119 0076 9042     		cmp	r0, r2
 120 0078 09D1     		bne	.L1
 218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 121              		.loc 1 218 0
 122 007a 2020     		movs	r0, #32
 123              	.LVL16:
 124 007c 0121     		movs	r1, #1
 125 007e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 126              	.LVL17:
 219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 127              		.loc 1 219 0
 128 0082 2020     		movs	r0, #32
 129              	.L8:
 130 0084 0021     		movs	r1, #0
 131              		.loc 1 222 0
 132 0086 BDE80840 		pop	{r3, lr}
 219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 133              		.loc 1 219 0
 134 008a FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 135              	.LVL18:
 136              	.L1:
 137 008e 08BD     		pop	{r3, pc}
 138              	.L12:
 139              		.align	2
 140              	.L11:
 141 0090 00100140 		.word	1073811456
 142 0094 00440040 		.word	1073759232
 143 0098 00480040 		.word	1073760256
 144 009c 004C0040 		.word	1073761280
 145 00a0 00500040 		.word	1073762304
 146 00a4 00140140 		.word	1073812480
 147              		.cfi_endproc
 148              	.LFE56:
 150              		.section	.text.USART_Init,"ax",%progbits
 151              		.align	1
 152              		.global	USART_Init
 153              		.thumb
 154              		.thumb_func
 156              	USART_Init:
 157              	.LFB57:
 223:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 224:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 225:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 226:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         parameters in the USART_InitStruct .
 227:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 228:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 229:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 230:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 231:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 232:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 233:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 158              		.loc 1 234 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 16
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              	.LVL19:
 235:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint32_t integerdivider = 0x00;
 237:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 238:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 239:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 240:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 241:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 242:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 243:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 244:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 245:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 246:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 247:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 248:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 249:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 250:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 251:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 252:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 253:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 254:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 255:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 256:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg = USARTx->CR2;
 163              		.loc 1 256 0
 164 0000 038A     		ldrh	r3, [r0, #16]
 234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 165              		.loc 1 234 0
 166 0002 30B5     		push	{r4, r5, lr}
 167              	.LCFI1:
 168              		.cfi_def_cfa_offset 12
 169              		.cfi_offset 4, -12
 170              		.cfi_offset 5, -8
 171              		.cfi_offset 14, -4
 172 0004 0D46     		mov	r5, r1
 173 0006 0446     		mov	r4, r0
 257:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 258:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Clear STOP[13:12] bits */
 259:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 260:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 261:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 262:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 263:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 174              		.loc 1 263 0
 175 0008 EA88     		ldrh	r2, [r5, #6]
 256:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg = USARTx->CR2;
 176              		.loc 1 256 0
 177 000a 98B2     		uxth	r0, r3
 178              	.LVL20:
 259:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 179              		.loc 1 259 0
 180 000c 20F44051 		bic	r1, r0, #12288
 181              	.LVL21:
 264:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 265:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Write to USART CR2 */
 266:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 182              		.loc 1 266 0
 183 0010 1143     		orrs	r1, r1, r2
 184              	.LVL22:
 185 0012 2182     		strh	r1, [r4, #16]	@ movhi
 267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg = USARTx->CR1;
 186              		.loc 1 269 0
 187 0014 A389     		ldrh	r3, [r4, #12]
 188              	.LVL23:
 234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 189              		.loc 1 234 0
 190 0016 85B0     		sub	sp, sp, #20
 191              	.LCFI2:
 192              		.cfi_def_cfa_offset 32
 270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 271:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 193              		.loc 1 272 0
 194 0018 23F4B050 		bic	r0, r3, #5632
 195 001c 20F00C01 		bic	r1, r0, #12
 196 0020 0A04     		lsls	r2, r1, #16
 273:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 274:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      Set the M bits according to USART_WordLength value 
 276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 277:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 278:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 197              		.loc 1 278 0
 198 0022 2889     		ldrh	r0, [r5, #8]
 199 0024 A988     		ldrh	r1, [r5, #4]
 272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 200              		.loc 1 272 0
 201 0026 130C     		lsrs	r3, r2, #16
 202              	.LVL24:
 203              		.loc 1 278 0
 204 0028 40EA0102 		orr	r2, r0, r1
 205 002c 6889     		ldrh	r0, [r5, #10]
 206 002e 0243     		orrs	r2, r2, r0
 207 0030 91B2     		uxth	r1, r2
 279:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****             USART_InitStruct->USART_Mode;
 280:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Write to USART CR1 */
 282:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 208              		.loc 1 282 0
 209 0032 0B43     		orrs	r3, r3, r1
 210              	.LVL25:
 211 0034 A381     		strh	r3, [r4, #12]	@ movhi
 283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg = USARTx->CR3;
 212              		.loc 1 285 0
 213 0036 A28A     		ldrh	r2, [r4, #20]
 286:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 287:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Clear CTSE and RTSE bits */
 288:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 290:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Configure the USART HFC : 
 291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 292:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 214              		.loc 1 292 0
 215 0038 AB89     		ldrh	r3, [r5, #12]
 285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg = USARTx->CR3;
 216              		.loc 1 285 0
 217 003a 90B2     		uxth	r0, r2
 218              	.LVL26:
 288:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 219              		.loc 1 288 0
 220 003c 20F44071 		bic	r1, r0, #768
 221              	.LVL27:
 293:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 294:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Write to USART CR3 */
 295:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 222              		.loc 1 295 0
 223 0040 1943     		orrs	r1, r1, r3
 224              	.LVL28:
 225 0042 A182     		strh	r1, [r4, #20]	@ movhi
 296:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 297:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 298:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Configure the USART Baud Rate */
 299:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 226              		.loc 1 299 0
 227 0044 6846     		mov	r0, sp
 228 0046 FFF7FEFF 		bl	RCC_GetClocksFreq
 229              	.LVL29:
 300:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 301:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 230              		.loc 1 301 0
 231 004a 1A4A     		ldr	r2, .L23
 232 004c 9442     		cmp	r4, r2
 233 004e 03D0     		beq	.L14
 234              		.loc 1 301 0 is_stmt 0 discriminator 1
 235 0050 02F58060 		add	r0, r2, #1024
 236 0054 8442     		cmp	r4, r0
 237 0056 01D1     		bne	.L15
 238              	.L14:
 302:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 239              		.loc 1 303 0 is_stmt 1
 240 0058 039B     		ldr	r3, [sp, #12]
 241              	.LVL30:
 242 005a 00E0     		b	.L16
 243              	.LVL31:
 244              	.L15:
 304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 306:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 245              		.loc 1 307 0
 246 005c 029B     		ldr	r3, [sp, #8]
 247              	.LVL32:
 248              	.L16:
 308:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 309:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 310:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Determine the integer part */
 311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 249              		.loc 1 311 0
 250 005e A189     		ldrh	r1, [r4, #12]
 251 0060 4FF01900 		mov	r0, #25
 252 0064 0AB2     		sxth	r2, r1
 253 0066 002A     		cmp	r2, #0
 312:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 313:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 254              		.loc 1 314 0
 255 0068 00FB03F3 		mul	r3, r0, r3
 256              	.LVL33:
 257 006c 2A68     		ldr	r2, [r5, #0]
 311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 258              		.loc 1 311 0
 259 006e 01DA     		bge	.L17
 260              		.loc 1 314 0
 261 0070 5100     		lsls	r1, r2, #1
 262 0072 00E0     		b	.L21
 263              	.L17:
 315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 316:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 317:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 318:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 319:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 264              		.loc 1 319 0
 265 0074 9100     		lsls	r1, r2, #2
 266              	.L21:
 267 0076 B3FBF1F1 		udiv	r1, r3, r1
 268              	.LVL34:
 320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 269              		.loc 1 321 0
 270 007a 6423     		movs	r3, #100
 271 007c B1FBF3F0 		udiv	r0, r1, r3
 272 0080 0201     		lsls	r2, r0, #4
 273              	.LVL35:
 322:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 323:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Determine the fractional part */
 324:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 274              		.loc 1 324 0
 275 0082 1009     		lsrs	r0, r2, #4
 276 0084 03FB1011 		mls	r1, r3, r0, r1
 277              	.LVL36:
 325:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 326:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Implement the fractional part in the register */
 327:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 278              		.loc 1 327 0
 279 0088 A089     		ldrh	r0, [r4, #12]
 280 008a 00B2     		sxth	r0, r0
 281 008c 0028     		cmp	r0, #0
 282 008e 06DA     		bge	.L19
 328:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 283              		.loc 1 329 0
 284 0090 C900     		lsls	r1, r1, #3
 285              	.LVL37:
 286 0092 3231     		adds	r1, r1, #50
 287 0094 B1FBF3F3 		udiv	r3, r1, r3
 288 0098 03F00700 		and	r0, r3, #7
 289 009c 05E0     		b	.L22
 290              	.LVL38:
 291              	.L19:
 330:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 331:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 332:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 292              		.loc 1 333 0
 293 009e 0901     		lsls	r1, r1, #4
 294              	.LVL39:
 295 00a0 3231     		adds	r1, r1, #50
 296 00a2 B1FBF3F3 		udiv	r3, r1, r3
 297 00a6 03F00F00 		and	r0, r3, #15
 298              	.L22:
 299 00aa 0243     		orrs	r2, r2, r0
 300              	.LVL40:
 334:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 335:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 336:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Write to USART BRR register */
 337:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 301              		.loc 1 337 0
 302 00ac 90B2     		uxth	r0, r2
 303 00ae 2081     		strh	r0, [r4, #8]	@ movhi
 338:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 304              		.loc 1 338 0
 305 00b0 05B0     		add	sp, sp, #20
 306 00b2 30BD     		pop	{r4, r5, pc}
 307              	.L24:
 308              		.align	2
 309              	.L23:
 310 00b4 00100140 		.word	1073811456
 311              		.cfi_endproc
 312              	.LFE57:
 314              		.section	.text.USART_StructInit,"ax",%progbits
 315              		.align	1
 316              		.global	USART_StructInit
 317              		.thumb
 318              		.thumb_func
 320              	USART_StructInit:
 321              	.LFB58:
 339:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 342:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 343:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         be initialized.
 344:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 345:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 322              		.loc 1 347 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327              	.LVL41:
 348:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* USART_InitStruct members default value */
 349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 350:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 328              		.loc 1 350 0
 329 0000 0021     		movs	r1, #0
 349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 330              		.loc 1 349 0
 331 0002 4FF41653 		mov	r3, #9600
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 352:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 353:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 332              		.loc 1 353 0
 333 0006 0C22     		movs	r2, #12
 349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 334              		.loc 1 349 0
 335 0008 0360     		str	r3, [r0, #0]
 350:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 336              		.loc 1 350 0
 337 000a 8180     		strh	r1, [r0, #4]	@ movhi
 351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 338              		.loc 1 351 0
 339 000c C180     		strh	r1, [r0, #6]	@ movhi
 352:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 340              		.loc 1 352 0
 341 000e 0181     		strh	r1, [r0, #8]	@ movhi
 342              		.loc 1 353 0
 343 0010 4281     		strh	r2, [r0, #10]	@ movhi
 354:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 344              		.loc 1 354 0
 345 0012 8181     		strh	r1, [r0, #12]	@ movhi
 346 0014 7047     		bx	lr
 347              		.cfi_endproc
 348              	.LFE58:
 350              		.section	.text.USART_ClockInit,"ax",%progbits
 351              		.align	1
 352              		.global	USART_ClockInit
 353              		.thumb
 354              		.thumb_func
 356              	USART_ClockInit:
 357              	.LFB59:
 355:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 356:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 357:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 359:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 360:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 361:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 362:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 363:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 364:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 358              		.loc 1 367 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              	.LVL42:
 368:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint32_t tmpreg = 0x00;
 369:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 371:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 372:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 373:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 374:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 375:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 376:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 377:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg = USARTx->CR2;
 363              		.loc 1 377 0
 364 0000 028A     		ldrh	r2, [r0, #16]
 367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 365              		.loc 1 367 0
 366 0002 10B5     		push	{r4, lr}
 367              	.LCFI3:
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 4, -8
 370              		.cfi_offset 14, -4
 371              		.loc 1 377 0
 372 0004 93B2     		uxth	r3, r2
 373              	.LVL43:
 378:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 379:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 380:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 382:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 383:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 386:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 374              		.loc 1 386 0
 375 0006 4C88     		ldrh	r4, [r1, #2]
 379:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 376              		.loc 1 379 0
 377 0008 23F47062 		bic	r2, r3, #3840
 378              	.LVL44:
 379              		.loc 1 386 0
 380 000c 0B88     		ldrh	r3, [r1, #0]
 381 000e 2343     		orrs	r3, r3, r4
 382 0010 8C88     		ldrh	r4, [r1, #4]
 383 0012 C988     		ldrh	r1, [r1, #6]
 384              	.LVL45:
 385 0014 2343     		orrs	r3, r3, r4
 386 0016 0B43     		orrs	r3, r3, r1
 387 0018 9BB2     		uxth	r3, r3
 387:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Write to USART CR2 */
 388:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 388              		.loc 1 388 0
 389 001a 1343     		orrs	r3, r3, r2
 390 001c 0382     		strh	r3, [r0, #16]	@ movhi
 391 001e 10BD     		pop	{r4, pc}
 392              		.cfi_endproc
 393              	.LFE59:
 395              		.section	.text.USART_ClockStructInit,"ax",%progbits
 396              		.align	1
 397              		.global	USART_ClockStructInit
 398              		.thumb
 399              		.thumb_func
 401              	USART_ClockStructInit:
 402              	.LFB60:
 389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 391:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 392:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 393:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 394:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         which will be initialized.
 395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 396:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 398:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 403              		.loc 1 398 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408              	.LVL46:
 399:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* USART_ClockInitStruct members default value */
 400:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 409              		.loc 1 400 0
 410 0000 0023     		movs	r3, #0
 411 0002 0380     		strh	r3, [r0, #0]	@ movhi
 401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 412              		.loc 1 401 0
 413 0004 4380     		strh	r3, [r0, #2]	@ movhi
 402:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 414              		.loc 1 402 0
 415 0006 8380     		strh	r3, [r0, #4]	@ movhi
 403:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 416              		.loc 1 403 0
 417 0008 C380     		strh	r3, [r0, #6]	@ movhi
 418 000a 7047     		bx	lr
 419              		.cfi_endproc
 420              	.LFE60:
 422              		.section	.text.USART_Cmd,"ax",%progbits
 423              		.align	1
 424              		.global	USART_Cmd
 425              		.thumb
 426              		.thumb_func
 428              	USART_Cmd:
 429              	.LFB61:
 404:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 405:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 406:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 407:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 408:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 409:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 410:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 411:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 412:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 413:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 414:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 415:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 430              		.loc 1 415 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435              	.LVL47:
 416:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 417:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 418:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 419:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 420:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 421:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 422:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 423:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 436              		.loc 1 423 0
 437 0000 8389     		ldrh	r3, [r0, #12]
 420:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 438              		.loc 1 420 0
 439 0002 19B1     		cbz	r1, .L29
 440              		.loc 1 423 0
 441 0004 99B2     		uxth	r1, r3
 442              	.LVL48:
 443 0006 41F40053 		orr	r3, r1, #8192
 444 000a 03E0     		b	.L31
 445              	.LVL49:
 446              	.L29:
 424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 426:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 427:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 428:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 447              		.loc 1 428 0
 448 000c 23F40051 		bic	r1, r3, #8192
 449              	.LVL50:
 450 0010 0A04     		lsls	r2, r1, #16
 451 0012 130C     		lsrs	r3, r2, #16
 452              	.L31:
 453 0014 8381     		strh	r3, [r0, #12]	@ movhi
 454 0016 7047     		bx	lr
 455              		.cfi_endproc
 456              	.LFE61:
 458              		.section	.text.USART_SetPrescaler,"ax",%progbits
 459              		.align	1
 460              		.global	USART_SetPrescaler
 461              		.thumb
 462              		.thumb_func
 464              	USART_SetPrescaler:
 465              	.LFB62:
 429:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 430:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 431:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 432:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 433:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Sets the system clock prescaler.
 434:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 435:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 436:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 437:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 438:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 439:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 440:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 441:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** { 
 466              		.loc 1 441 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		@ link register save eliminated.
 471              	.LVL51:
 442:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 443:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 444:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 445:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Clear the USART prescaler */
 446:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 472              		.loc 1 446 0
 473 0000 038B     		ldrh	r3, [r0, #24]
 474 0002 03F47F42 		and	r2, r3, #65280
 475 0006 0283     		strh	r2, [r0, #24]	@ movhi
 447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Set the USART prescaler */
 448:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 476              		.loc 1 448 0
 477 0008 038B     		ldrh	r3, [r0, #24]
 478 000a 9AB2     		uxth	r2, r3
 479 000c 1143     		orrs	r1, r1, r2
 480              	.LVL52:
 481 000e 0183     		strh	r1, [r0, #24]	@ movhi
 482 0010 7047     		bx	lr
 483              		.cfi_endproc
 484              	.LFE62:
 486              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 487              		.align	1
 488              		.global	USART_OverSampling8Cmd
 489              		.thumb
 490              		.thumb_func
 492              	USART_OverSampling8Cmd:
 493              	.LFB63:
 449:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 450:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 451:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 452:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 453:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 454:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         in order to have correct baudrate Divider value.
 455:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 456:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 457:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 458:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 460:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 461:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 462:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 494              		.loc 1 462 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 499              	.LVL53:
 463:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 464:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 465:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 467:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 468:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 469:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 470:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 500              		.loc 1 470 0
 501 0000 8389     		ldrh	r3, [r0, #12]
 467:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 502              		.loc 1 467 0
 503 0002 29B1     		cbz	r1, .L34
 504              		.loc 1 470 0
 505 0004 6FEA4343 		mvn	r3, r3, lsl #17
 506 0008 6FEA5341 		mvn	r1, r3, lsr #17
 507              	.LVL54:
 508 000c 8AB2     		uxth	r2, r1
 509 000e 01E0     		b	.L36
 510              	.LVL55:
 511              	.L34:
 471:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 472:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 473:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 474:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 475:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 512              		.loc 1 475 0
 513 0010 5904     		lsls	r1, r3, #17
 514              	.LVL56:
 515 0012 4A0C     		lsrs	r2, r1, #17
 516              	.L36:
 517 0014 8281     		strh	r2, [r0, #12]	@ movhi
 518 0016 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE63:
 522              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 523              		.align	1
 524              		.global	USART_OneBitMethodCmd
 525              		.thumb
 526              		.thumb_func
 528              	USART_OneBitMethodCmd:
 529              	.LFB64:
 476:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 477:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }  
 478:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 479:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 480:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 481:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 482:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 483:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 484:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 485:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 486:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 487:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 488:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 530              		.loc 1 488 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535              	.LVL57:
 489:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 490:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 491:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 492:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 494:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 495:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 496:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 536              		.loc 1 496 0
 537 0000 838A     		ldrh	r3, [r0, #20]
 493:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 538              		.loc 1 493 0
 539 0002 19B1     		cbz	r1, .L38
 540              		.loc 1 496 0
 541 0004 99B2     		uxth	r1, r3
 542              	.LVL58:
 543 0006 41F40063 		orr	r3, r1, #2048
 544 000a 03E0     		b	.L40
 545              	.LVL59:
 546              	.L38:
 497:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 498:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 499:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 500:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 501:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 547              		.loc 1 501 0
 548 000c 23F40061 		bic	r1, r3, #2048
 549              	.LVL60:
 550 0010 0A04     		lsls	r2, r1, #16
 551 0012 130C     		lsrs	r3, r2, #16
 552              	.L40:
 553 0014 8382     		strh	r3, [r0, #20]	@ movhi
 554 0016 7047     		bx	lr
 555              		.cfi_endproc
 556              	.LFE64:
 558              		.section	.text.USART_SendData,"ax",%progbits
 559              		.align	1
 560              		.global	USART_SendData
 561              		.thumb
 562              		.thumb_func
 564              	USART_SendData:
 565              	.LFB65:
 502:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 503:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 504:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 505:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 506:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
 507:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 508:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 509:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 510:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   Data transfers functions 
 511:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
 512:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
 513:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
 514:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                             Data transfers functions
 515:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
 516:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 517:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 518:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   transfers.
 519:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 520:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 521:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 522:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   between the internal bus and the received shift register.
 523:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 524:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 525:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 526:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   at the end of the current transmission.
 527:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 528:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 529:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 530:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 531:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   TDR buffer.
 532:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 533:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
 534:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 535:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 536:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 537:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 538:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 539:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 540:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 541:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  Data: the data to transmit.
 542:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 543:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 544:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 545:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 566              		.loc 1 545 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571              	.LVL61:
 546:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 547:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 548:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 549:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
 550:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Transmit Data */
 551:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 572              		.loc 1 551 0
 573 0000 C905     		lsls	r1, r1, #23
 574              	.LVL62:
 575 0002 CA0D     		lsrs	r2, r1, #23
 576 0004 8280     		strh	r2, [r0, #4]	@ movhi
 577 0006 7047     		bx	lr
 578              		.cfi_endproc
 579              	.LFE65:
 581              		.section	.text.USART_ReceiveData,"ax",%progbits
 582              		.align	1
 583              		.global	USART_ReceiveData
 584              		.thumb
 585              		.thumb_func
 587              	USART_ReceiveData:
 588              	.LFB66:
 552:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 553:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 554:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 555:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 556:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 557:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 558:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval The received data.
 559:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 560:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 561:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 589              		.loc 1 561 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 594              	.LVL63:
 562:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 563:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 564:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 565:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Receive Data */
 566:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 595              		.loc 1 566 0
 596 0000 8088     		ldrh	r0, [r0, #4]
 597              	.LVL64:
 598 0002 C105     		lsls	r1, r0, #23
 567:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 599              		.loc 1 567 0
 600 0004 C80D     		lsrs	r0, r1, #23
 601 0006 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE66:
 605              		.section	.text.USART_SetAddress,"ax",%progbits
 606              		.align	1
 607              		.global	USART_SetAddress
 608              		.thumb
 609              		.thumb_func
 611              	USART_SetAddress:
 612              	.LFB67:
 568:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 569:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 570:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
 571:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 572:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 573:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 574:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 575:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
 576:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
 577:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
 578:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                     Multi-Processor Communication functions
 579:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
 580:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 581:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 582:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   multiprocessor communication.
 583:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 584:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 585:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 586:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 587:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 588:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 589:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 590:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 591:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         function.
 592:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 593:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 594:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 595:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 596:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 597:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 598:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 599:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 600:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
 601:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 602:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 603:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 604:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 605:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Sets the address of the USART node.
 606:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 607:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 608:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 609:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 610:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 611:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 612:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 613              		.loc 1 612 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 618              	.LVL65:
 613:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 614:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 615:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 616:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
 617:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Clear the USART address */
 618:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 619              		.loc 1 618 0
 620 0000 038A     		ldrh	r3, [r0, #16]
 621 0002 23F00F02 		bic	r2, r3, #15
 622 0006 1304     		lsls	r3, r2, #16
 623 0008 1A0C     		lsrs	r2, r3, #16
 624 000a 0282     		strh	r2, [r0, #16]	@ movhi
 619:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Set the USART address node */
 620:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR2 |= USART_Address;
 625              		.loc 1 620 0
 626 000c 038A     		ldrh	r3, [r0, #16]
 627 000e 9AB2     		uxth	r2, r3
 628 0010 1143     		orrs	r1, r1, r2
 629              	.LVL66:
 630 0012 0182     		strh	r1, [r0, #16]	@ movhi
 631 0014 7047     		bx	lr
 632              		.cfi_endproc
 633              	.LFE67:
 635              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 636              		.align	1
 637              		.global	USART_ReceiverWakeUpCmd
 638              		.thumb
 639              		.thumb_func
 641              	USART_ReceiverWakeUpCmd:
 642              	.LFB68:
 621:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 622:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 623:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 624:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 625:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 626:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 627:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 628:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 629:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 630:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 631:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 632:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 643              		.loc 1 632 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              		@ link register save eliminated.
 648              	.LVL67:
 633:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 634:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 635:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 636:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 637:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 638:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 639:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 640:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 649              		.loc 1 640 0
 650 0000 8389     		ldrh	r3, [r0, #12]
 637:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 651              		.loc 1 637 0
 652 0002 19B1     		cbz	r1, .L45
 653              		.loc 1 640 0
 654 0004 99B2     		uxth	r1, r3
 655              	.LVL68:
 656 0006 41F00203 		orr	r3, r1, #2
 657 000a 03E0     		b	.L47
 658              	.LVL69:
 659              	.L45:
 641:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 642:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 643:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 644:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 645:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 660              		.loc 1 645 0
 661 000c 23F00201 		bic	r1, r3, #2
 662              	.LVL70:
 663 0010 0A04     		lsls	r2, r1, #16
 664 0012 130C     		lsrs	r3, r2, #16
 665              	.L47:
 666 0014 8381     		strh	r3, [r0, #12]	@ movhi
 667 0016 7047     		bx	lr
 668              		.cfi_endproc
 669              	.LFE68:
 671              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 672              		.align	1
 673              		.global	USART_WakeUpConfig
 674              		.thumb
 675              		.thumb_func
 677              	USART_WakeUpConfig:
 678              	.LFB69:
 646:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 647:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 648:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 649:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 650:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 651:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 652:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 653:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
 654:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 655:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 656:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 657:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 658:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 659:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 679              		.loc 1 659 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684              	.LVL71:
 660:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 661:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 662:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 663:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 664:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 685              		.loc 1 664 0
 686 0000 8389     		ldrh	r3, [r0, #12]
 687 0002 23F40062 		bic	r2, r3, #2048
 688 0006 1304     		lsls	r3, r2, #16
 689 0008 1A0C     		lsrs	r2, r3, #16
 690 000a 8281     		strh	r2, [r0, #12]	@ movhi
 665:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 691              		.loc 1 665 0
 692 000c 8389     		ldrh	r3, [r0, #12]
 693 000e 9AB2     		uxth	r2, r3
 694 0010 1143     		orrs	r1, r1, r2
 695              	.LVL72:
 696 0012 8181     		strh	r1, [r0, #12]	@ movhi
 697 0014 7047     		bx	lr
 698              		.cfi_endproc
 699              	.LFE69:
 701              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 702              		.align	1
 703              		.global	USART_LINBreakDetectLengthConfig
 704              		.thumb
 705              		.thumb_func
 707              	USART_LINBreakDetectLengthConfig:
 708              	.LFB70:
 666:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 667:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 668:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 669:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
 670:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 671:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 672:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 673:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   LIN mode functions 
 674:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
 675:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
 676:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
 677:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                                 LIN mode functions
 678:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
 679:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 680:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 681:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Mode communication.
 682:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 683:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 684:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   the LIN standard.
 685:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 686:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 687:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 688:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 689:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 690:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 691:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 692:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 693:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 694:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         the USART_Init() function.
 695:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 696:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 697:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 698:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 699:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 700:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 701:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 702:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         the USART_Init() function.
 703:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 704:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 705:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         function.
 706:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 707:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 708:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 709:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 710:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - CLKEN in the USART_CR2 register,
 711:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 712:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 713:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
 714:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 715:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 716:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 717:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 718:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 719:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 720:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 721:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 722:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
 723:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 724:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 725:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 726:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 727:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 728:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 709              		.loc 1 728 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
 713              		@ link register save eliminated.
 714              	.LVL73:
 729:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 730:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 731:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 732:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 733:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 715              		.loc 1 733 0
 716 0000 038A     		ldrh	r3, [r0, #16]
 717 0002 23F02002 		bic	r2, r3, #32
 718 0006 1304     		lsls	r3, r2, #16
 719 0008 1A0C     		lsrs	r2, r3, #16
 720 000a 0282     		strh	r2, [r0, #16]	@ movhi
 734:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 721              		.loc 1 734 0
 722 000c 038A     		ldrh	r3, [r0, #16]
 723 000e 9AB2     		uxth	r2, r3
 724 0010 1143     		orrs	r1, r1, r2
 725              	.LVL74:
 726 0012 0182     		strh	r1, [r0, #16]	@ movhi
 727 0014 7047     		bx	lr
 728              		.cfi_endproc
 729              	.LFE70:
 731              		.section	.text.USART_LINCmd,"ax",%progbits
 732              		.align	1
 733              		.global	USART_LINCmd
 734              		.thumb
 735              		.thumb_func
 737              	USART_LINCmd:
 738              	.LFB71:
 735:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 736:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 737:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 738:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 739:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 740:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 741:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 742:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 743:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 744:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 745:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 746:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 739              		.loc 1 746 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744              	.LVL75:
 747:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 748:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 749:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 750:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 751:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 752:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 753:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 754:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 745              		.loc 1 754 0
 746 0000 038A     		ldrh	r3, [r0, #16]
 751:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 747              		.loc 1 751 0
 748 0002 19B1     		cbz	r1, .L51
 749              		.loc 1 754 0
 750 0004 99B2     		uxth	r1, r3
 751              	.LVL76:
 752 0006 41F48043 		orr	r3, r1, #16384
 753 000a 03E0     		b	.L53
 754              	.LVL77:
 755              	.L51:
 755:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 756:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 757:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 758:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 759:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 756              		.loc 1 759 0
 757 000c 23F48041 		bic	r1, r3, #16384
 758              	.LVL78:
 759 0010 0A04     		lsls	r2, r1, #16
 760 0012 130C     		lsrs	r3, r2, #16
 761              	.L53:
 762 0014 0382     		strh	r3, [r0, #16]	@ movhi
 763 0016 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE71:
 767              		.section	.text.USART_SendBreak,"ax",%progbits
 768              		.align	1
 769              		.global	USART_SendBreak
 770              		.thumb
 771              		.thumb_func
 773              	USART_SendBreak:
 774              	.LFB72:
 760:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 761:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 762:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 763:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 764:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Transmits break characters.
 765:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 766:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 767:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 768:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 769:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 770:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 775              		.loc 1 770 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780              	.LVL79:
 771:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 772:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 773:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 774:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Send break characters */
 775:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 781              		.loc 1 775 0
 782 0000 8389     		ldrh	r3, [r0, #12]
 783 0002 99B2     		uxth	r1, r3
 784 0004 41F00102 		orr	r2, r1, #1
 785 0008 8281     		strh	r2, [r0, #12]	@ movhi
 786 000a 7047     		bx	lr
 787              		.cfi_endproc
 788              	.LFE72:
 790              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 791              		.align	1
 792              		.global	USART_HalfDuplexCmd
 793              		.thumb
 794              		.thumb_func
 796              	USART_HalfDuplexCmd:
 797              	.LFB73:
 776:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 777:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 778:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 779:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
 780:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 781:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 782:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 783:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   Half-duplex mode function 
 784:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
 785:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
 786:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
 787:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                          Half-duplex mode function
 788:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
 789:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 790:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 791:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Half-duplex communication.
 792:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 793:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 794:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   the TX and RX lines are internally connected.
 795:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 796:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 797:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 798:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 799:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         function.
 800:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 801:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 802:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 803:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 804:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 805:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note The RX pin is no longer used
 806:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 807:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 808:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 809:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 810:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
 811:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 812:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 813:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 814:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 815:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 816:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 817:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 818:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 819:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 820:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 821:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 822:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 823:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 798              		.loc 1 823 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803              	.LVL80:
 824:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 825:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 826:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 827:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 828:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 829:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 830:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 831:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 804              		.loc 1 831 0
 805 0000 838A     		ldrh	r3, [r0, #20]
 828:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 806              		.loc 1 828 0
 807 0002 19B1     		cbz	r1, .L56
 808              		.loc 1 831 0
 809 0004 99B2     		uxth	r1, r3
 810              	.LVL81:
 811 0006 41F00803 		orr	r3, r1, #8
 812 000a 03E0     		b	.L58
 813              	.LVL82:
 814              	.L56:
 832:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 833:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 834:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 835:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 836:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 815              		.loc 1 836 0
 816 000c 23F00801 		bic	r1, r3, #8
 817              	.LVL83:
 818 0010 0A04     		lsls	r2, r1, #16
 819 0012 130C     		lsrs	r3, r2, #16
 820              	.L58:
 821 0014 8382     		strh	r3, [r0, #20]	@ movhi
 822 0016 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE73:
 826              		.section	.text.USART_SetGuardTime,"ax",%progbits
 827              		.align	1
 828              		.global	USART_SetGuardTime
 829              		.thumb
 830              		.thumb_func
 832              	USART_SetGuardTime:
 833              	.LFB74:
 837:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 838:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 839:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 840:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 841:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
 842:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 843:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 844:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 845:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 846:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   Smartcard mode functions 
 847:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
 848:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
 849:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
 850:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                                Smartcard mode functions
 851:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
 852:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 853:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 854:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Smartcard communication.
 855:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 856:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 857:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   defined in the ISO 7816-3 standard.
 858:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 859:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 860:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 861:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 862:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 863:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Smartcard communication is possible through the following procedure:
 864:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 865:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 866:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 867:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART Clock enabled
 868:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART CPOL Low
 869:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART CPHA on first edge
 870:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - USART Last Bit Clock Enabled
 871:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 872:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Word Length = 9 Bits
 873:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - 1.5 Stop Bit
 874:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Even parity
 875:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - BaudRate = 12096 baud
 876:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 877:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - Tx and Rx enabled
 878:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 879:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         function
 880:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 881:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 882:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 883:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 884:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 885:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 886:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 887:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 888:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 889:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       between the two configurations.
 890:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 891:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 892:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 893:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 894:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       and UART5 peripherals).
 895:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 896:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
 897:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
 898:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 899:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 900:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 901:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Sets the specified USART guard time.
 902:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 903:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 904:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 905:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 906:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 907:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 908:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {    
 834              		.loc 1 908 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839              	.LVL84:
 909:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 910:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 911:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 912:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Clear the USART Guard time */
 913:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 840              		.loc 1 913 0
 841 0000 038B     		ldrh	r3, [r0, #24]
 842 0002 DAB2     		uxtb	r2, r3
 843 0004 0283     		strh	r2, [r0, #24]	@ movhi
 914:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Set the USART guard time */
 915:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 844              		.loc 1 915 0
 845 0006 038B     		ldrh	r3, [r0, #24]
 846 0008 9AB2     		uxth	r2, r3
 847 000a 42EA0121 		orr	r1, r2, r1, lsl #8
 848              	.LVL85:
 849 000e 0183     		strh	r1, [r0, #24]	@ movhi
 850 0010 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE74:
 854              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 855              		.align	1
 856              		.global	USART_SmartCardCmd
 857              		.thumb
 858              		.thumb_func
 860              	USART_SmartCardCmd:
 861              	.LFB75:
 916:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 917:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 918:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 919:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 920:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 921:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 922:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 923:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 924:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 925:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 926:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 927:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 862              		.loc 1 927 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867              	.LVL86:
 928:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 929:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 930:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 931:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 932:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 933:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 934:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 868              		.loc 1 934 0
 869 0000 838A     		ldrh	r3, [r0, #20]
 931:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 870              		.loc 1 931 0
 871 0002 19B1     		cbz	r1, .L61
 872              		.loc 1 934 0
 873 0004 99B2     		uxth	r1, r3
 874              	.LVL87:
 875 0006 41F02003 		orr	r3, r1, #32
 876 000a 03E0     		b	.L63
 877              	.LVL88:
 878              	.L61:
 935:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 936:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 937:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 938:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 939:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 879              		.loc 1 939 0
 880 000c 23F02001 		bic	r1, r3, #32
 881              	.LVL89:
 882 0010 0A04     		lsls	r2, r1, #16
 883 0012 130C     		lsrs	r3, r2, #16
 884              	.L63:
 885 0014 8382     		strh	r3, [r0, #20]	@ movhi
 886 0016 7047     		bx	lr
 887              		.cfi_endproc
 888              	.LFE75:
 890              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 891              		.align	1
 892              		.global	USART_SmartCardNACKCmd
 893              		.thumb
 894              		.thumb_func
 896              	USART_SmartCardNACKCmd:
 897              	.LFB76:
 940:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 941:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 942:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 943:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 944:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 945:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 946:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
 947:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 948:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 949:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
 950:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 951:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 952:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 898              		.loc 1 952 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 903              	.LVL90:
 953:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
 954:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 955:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 956:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 957:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 958:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 959:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 904              		.loc 1 959 0
 905 0000 838A     		ldrh	r3, [r0, #20]
 956:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 906              		.loc 1 956 0
 907 0002 19B1     		cbz	r1, .L65
 908              		.loc 1 959 0
 909 0004 99B2     		uxth	r1, r3
 910              	.LVL91:
 911 0006 41F01003 		orr	r3, r1, #16
 912 000a 03E0     		b	.L67
 913              	.LVL92:
 914              	.L65:
 960:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 961:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
 962:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
 963:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 964:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 915              		.loc 1 964 0
 916 000c 23F01001 		bic	r1, r3, #16
 917              	.LVL93:
 918 0010 0A04     		lsls	r2, r1, #16
 919 0012 130C     		lsrs	r3, r2, #16
 920              	.L67:
 921 0014 8382     		strh	r3, [r0, #20]	@ movhi
 922 0016 7047     		bx	lr
 923              		.cfi_endproc
 924              	.LFE76:
 926              		.section	.text.USART_IrDAConfig,"ax",%progbits
 927              		.align	1
 928              		.global	USART_IrDAConfig
 929              		.thumb
 930              		.thumb_func
 932              	USART_IrDAConfig:
 933              	.LFB77:
 965:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
 966:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 967:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 968:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
 969:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
 970:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
 971:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 972:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 973:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   IrDA mode functions 
 974:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
 975:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
 976:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
 977:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                                 IrDA mode functions
 978:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
 979:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 980:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 981:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   IrDA communication.
 982:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
 983:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 984:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 985:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 986:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 987:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   could be corrupted.
 988:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 989:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   IrDA communication is possible through the following procedure:
 990:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 991:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 992:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 993:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 994:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         the USART_SetPrescaler() function.
 995:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 996:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         using the USART_IrDAConfig() function.
 997:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 998:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
 999:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
1000:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       not be rejected.
1001:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
1002:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
1003:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       reception (IrDA is a half duplex protocol).
1004:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
1005:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1006:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1007:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1008:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
1009:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
1010:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1011:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1012:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1013:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1014:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1015:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1016:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1017:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1018:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1019:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1020:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
1021:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1022:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1023:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 934              		.loc 1 1023 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 939              	.LVL94:
1024:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1025:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1026:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1027:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1028:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 940              		.loc 1 1028 0
 941 0000 838A     		ldrh	r3, [r0, #20]
 942 0002 23F00402 		bic	r2, r3, #4
 943 0006 1304     		lsls	r3, r2, #16
 944 0008 1A0C     		lsrs	r2, r3, #16
 945 000a 8282     		strh	r2, [r0, #20]	@ movhi
1029:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 946              		.loc 1 1029 0
 947 000c 838A     		ldrh	r3, [r0, #20]
 948 000e 9AB2     		uxth	r2, r3
 949 0010 1143     		orrs	r1, r1, r2
 950              	.LVL95:
 951 0012 8182     		strh	r1, [r0, #20]	@ movhi
 952 0014 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE77:
 956              		.section	.text.USART_IrDACmd,"ax",%progbits
 957              		.align	1
 958              		.global	USART_IrDACmd
 959              		.thumb
 960              		.thumb_func
 962              	USART_IrDACmd:
 963              	.LFB78:
1030:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
1031:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1032:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1033:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1034:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1035:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1036:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1037:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1038:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
1039:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1040:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1041:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 964              		.loc 1 1041 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              		@ link register save eliminated.
 969              	.LVL96:
1042:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1043:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1044:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1045:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1046:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
1047:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1048:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1049:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 970              		.loc 1 1049 0
 971 0000 838A     		ldrh	r3, [r0, #20]
1046:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 972              		.loc 1 1046 0
 973 0002 19B1     		cbz	r1, .L70
 974              		.loc 1 1049 0
 975 0004 99B2     		uxth	r1, r3
 976              	.LVL97:
 977 0006 41F00203 		orr	r3, r1, #2
 978 000a 03E0     		b	.L72
 979              	.LVL98:
 980              	.L70:
1050:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1051:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
1052:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1053:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1054:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 981              		.loc 1 1054 0
 982 000c 23F00201 		bic	r1, r3, #2
 983              	.LVL99:
 984 0010 0A04     		lsls	r2, r1, #16
 985 0012 130C     		lsrs	r3, r2, #16
 986              	.L72:
 987 0014 8382     		strh	r3, [r0, #20]	@ movhi
 988 0016 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE78:
 992              		.section	.text.USART_DMACmd,"ax",%progbits
 993              		.align	1
 994              		.global	USART_DMACmd
 995              		.thumb
 996              		.thumb_func
 998              	USART_DMACmd:
 999              	.LFB79:
1055:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1056:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
1057:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1058:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1059:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
1060:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1061:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1062:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1063:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   DMA transfers management functions
1064:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
1065:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
1066:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
1067:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                       DMA transfers management functions
1068:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
1069:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1070:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
1071:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
1072:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1073:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
1074:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1075:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1076:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1077:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1078:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1079:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be any combination of the following values:
1080:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1081:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1082:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1083:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1084:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
1085:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1086:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1087:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 1000              		.loc 1 1087 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 1005              	.LVL100:
1088:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1089:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1090:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1091:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1092:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1093:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
1094:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1095:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1096:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1006              		.loc 1 1097 0
 1007 0000 838A     		ldrh	r3, [r0, #20]
 1008 0002 9BB2     		uxth	r3, r3
1093:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 1009              		.loc 1 1093 0
 1010 0004 0AB1     		cbz	r2, .L74
 1011              		.loc 1 1097 0
 1012 0006 1943     		orrs	r1, r1, r3
 1013              	.LVL101:
 1014 0008 01E0     		b	.L76
 1015              	.LVL102:
 1016              	.L74:
1098:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1099:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
1100:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1101:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1102:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****        DMAR bits in the USART CR3 register */
1103:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1017              		.loc 1 1103 0
 1018 000a 23EA0101 		bic	r1, r3, r1
 1019              	.LVL103:
 1020              	.L76:
 1021 000e 8182     		strh	r1, [r0, #20]	@ movhi
 1022 0010 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE79:
 1026              		.section	.text.USART_ITConfig,"ax",%progbits
 1027              		.align	1
 1028              		.global	USART_ITConfig
 1029              		.thumb
 1030              		.thumb_func
 1032              	USART_ITConfig:
 1033              	.LFB80:
1104:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1105:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
1106:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1107:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1108:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @}
1109:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1110:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
1111:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1112:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1113:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  *
1114:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @verbatim   
1115:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================
1116:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                    Interrupts and flags management functions
1117:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****  ===============================================================================  
1118:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1119:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1120:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1121:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   pending bits status.
1122:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1123:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1124:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1125:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Polling Mode
1126:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   =============
1127:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1128:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1129:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1130:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1131:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1132:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1133:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1134:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1135:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1136:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1137:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1138:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1139:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In this Mode it is advised to use the following functions:
1140:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1141:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1142:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1143:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Interrupt Mode
1144:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   ===============
1145:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1146:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   and 10 pending bits: 
1147:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1148:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Pending Bits:
1149:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   ------------- 
1150:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1151:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1152:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1153:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1154:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1155:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1156:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1157:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1158:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1159:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1160:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1161:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   Interrupt Source:
1162:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   -----------------
1163:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1164:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                        interrupt. 
1165:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1166:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                         empty interrupt.
1167:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1168:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                        interrupt. 
1169:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1170:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1171:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1172:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****                        interrupt. 
1173:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1174:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1175:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1176:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1177:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1178:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In this Mode it is advised to use the following functions:
1179:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1180:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1181:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1182:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1183:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   DMA Mode
1184:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   ========
1185:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1186:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1187:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1188:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1189:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   In this Mode it is advised to use the following function:
1190:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1191:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1192:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** @endverbatim
1193:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @{
1194:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1195:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1196:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1197:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1198:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1199:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1200:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1201:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1202:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1203:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1204:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1205:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1206:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1207:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1208:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1209:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1210:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1211:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1212:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
1213:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1214:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1215:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 1034              		.loc 1 1215 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              	.LVL104:
1216:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
1217:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint32_t usartxbase = 0x00;
1218:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1219:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1220:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1221:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1222:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1223:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1224:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1225:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1226:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1227:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   } 
1228:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1229:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1230:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1231:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Get the USART register index */
1232:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1039              		.loc 1 1232 0
 1040 0000 C1F34213 		ubfx	r3, r1, #5, #3
 1041              	.LVL105:
1215:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 1042              		.loc 1 1215 0
 1043 0004 10B5     		push	{r4, lr}
 1044              	.LCFI4:
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 4, -8
 1047              		.cfi_offset 14, -4
1233:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1234:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Get the interrupt position */
1235:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   itpos = USART_IT & IT_MASK;
1236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1048              		.loc 1 1236 0
 1049 0006 0124     		movs	r4, #1
 1050 0008 01F01F01 		and	r1, r1, #31
 1051              	.LVL106:
1237:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1238:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1052              		.loc 1 1238 0
 1053 000c A342     		cmp	r3, r4
1236:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1054              		.loc 1 1236 0
 1055 000e 04FA01F1 		lsl	r1, r4, r1
 1056              	.LVL107:
 1057              		.loc 1 1238 0
 1058 0012 01D1     		bne	.L78
1239:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1240:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     usartxbase += 0x0C;
 1059              		.loc 1 1240 0
 1060 0014 0C30     		adds	r0, r0, #12
 1061              	.LVL108:
 1062 0016 04E0     		b	.L79
 1063              	.LVL109:
 1064              	.L78:
1241:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1242:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1065              		.loc 1 1242 0
 1066 0018 022B     		cmp	r3, #2
 1067 001a 01D1     		bne	.L80
1243:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1244:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     usartxbase += 0x10;
 1068              		.loc 1 1244 0
 1069 001c 1030     		adds	r0, r0, #16
 1070              	.LVL110:
 1071 001e 00E0     		b	.L79
 1072              	.LVL111:
 1073              	.L80:
1245:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1246:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else /* The IT is in CR3 register */
1247:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1248:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     usartxbase += 0x14; 
 1074              		.loc 1 1248 0
 1075 0020 1430     		adds	r0, r0, #20
 1076              	.LVL112:
 1077              	.L79:
1249:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1250:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
1251:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1252:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1078              		.loc 1 1252 0
 1079 0022 0368     		ldr	r3, [r0, #0]
 1080              	.LVL113:
1250:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (NewState != DISABLE)
 1081              		.loc 1 1250 0
 1082 0024 12B1     		cbz	r2, .L81
 1083              		.loc 1 1252 0
 1084 0026 43EA0102 		orr	r2, r3, r1
 1085              	.LVL114:
 1086 002a 01E0     		b	.L83
 1087              	.LVL115:
 1088              	.L81:
1253:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1254:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
1255:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1256:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1089              		.loc 1 1256 0
 1090 002c 23EA0102 		bic	r2, r3, r1
 1091              	.LVL116:
 1092              	.L83:
 1093 0030 0260     		str	r2, [r0, #0]
 1094 0032 10BD     		pop	{r4, pc}
 1095              		.cfi_endproc
 1096              	.LFE80:
 1098              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1099              		.align	1
 1100              		.global	USART_GetFlagStatus
 1101              		.thumb
 1102              		.thumb_func
 1104              	USART_GetFlagStatus:
 1105              	.LFB81:
1257:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1258:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
1259:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1260:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1261:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1262:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1263:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1264:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1265:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1266:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1267:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1268:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1269:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1270:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1271:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1272:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1273:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1274:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1275:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1276:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1277:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1278:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1279:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 1106              		.loc 1 1279 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
 1110              		@ link register save eliminated.
 1111              	.LVL117:
1280:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   FlagStatus bitstatus = RESET;
1281:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1282:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1283:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1284:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1285:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1286:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1287:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1288:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1289:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   } 
1290:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1291:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1112              		.loc 1 1291 0
 1113 0000 0388     		ldrh	r3, [r0, #0]
 1114              	.LVL118:
 1115 0002 1942     		tst	r1, r3
1292:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1293:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     bitstatus = SET;
1294:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1295:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
1296:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1297:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     bitstatus = RESET;
1298:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1299:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   return bitstatus;
1300:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 1116              		.loc 1 1300 0
 1117 0004 0CBF     		ite	eq
 1118 0006 0020     		moveq	r0, #0
 1119 0008 0120     		movne	r0, #1
 1120              	.LVL119:
 1121 000a 7047     		bx	lr
 1122              		.cfi_endproc
 1123              	.LFE81:
 1125              		.section	.text.USART_ClearFlag,"ax",%progbits
 1126              		.align	1
 1127              		.global	USART_ClearFlag
 1128              		.thumb
 1129              		.thumb_func
 1131              	USART_ClearFlag:
 1132              	.LFB82:
1301:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1302:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1303:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1304:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1305:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1306:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1307:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be any combination of the following values:
1308:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1309:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1310:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1311:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1312:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *   
1313:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1314:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1315:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1316:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1317:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1318:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          (USART_ReceiveData()).
1319:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1320:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1321:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1322:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1323:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          (USART_SendData()).
1324:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *   
1325:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
1326:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1327:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1328:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 1133              		.loc 1 1328 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              		@ link register save eliminated.
 1138              	.LVL120:
1329:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1330:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1331:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1332:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1333:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1334:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1335:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1336:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1337:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   } 
1338:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****        
1339:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1139              		.loc 1 1339 0
 1140 0000 C943     		mvns	r1, r1
 1141              	.LVL121:
 1142 0002 8AB2     		uxth	r2, r1
 1143 0004 0280     		strh	r2, [r0, #0]	@ movhi
 1144 0006 7047     		bx	lr
 1145              		.cfi_endproc
 1146              	.LFE82:
 1148              		.section	.text.USART_GetITStatus,"ax",%progbits
 1149              		.align	1
 1150              		.global	USART_GetITStatus
 1151              		.thumb
 1152              		.thumb_func
 1154              	USART_GetITStatus:
 1155              	.LFB83:
1340:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
1341:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1342:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1343:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1344:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1345:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1346:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1347:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1348:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_CTS    : CTS change interrupt (not available for UART4 and UART5)
1349:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_LBD    : LIN Break detection interrupt
1350:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_TXE    : Transmit Data Register empty interrupt
1351:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_TC     : Transmission complete interrupt
1352:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_RXNE   : Receive Data register not empty interrupt
1353:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_IDLE   : Idle line detection interrupt
1354:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1355:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1356:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_NE     : Noise Error interrupt
1357:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_FE     : Framing Error interrupt
1358:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_PE     : Parity Error interrupt
1359:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1360:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1361:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1362:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 1156              		.loc 1 1362 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              	.LVL122:
 1161 0000 10B5     		push	{r4, lr}
 1162              	.LCFI5:
 1163              		.cfi_def_cfa_offset 8
 1164              		.cfi_offset 4, -8
 1165              		.cfi_offset 14, -4
1363:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
1364:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   ITStatus bitstatus = RESET;
1365:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1366:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1367:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1368:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1369:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1370:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1371:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1372:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1373:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   } 
1374:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1375:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Get the USART register index */
1376:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1166              		.loc 1 1376 0
 1167 0002 C1F34214 		ubfx	r4, r1, #5, #3
 1168              	.LVL123:
1377:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Get the interrupt position */
1378:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   itmask = USART_IT & IT_MASK;
1379:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1169              		.loc 1 1379 0
 1170 0006 0122     		movs	r2, #1
 1171 0008 01F01F03 		and	r3, r1, #31
1380:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
1381:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1172              		.loc 1 1381 0
 1173 000c 012C     		cmp	r4, #1
1379:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1174              		.loc 1 1379 0
 1175 000e 02FA03F2 		lsl	r2, r2, r3
 1176              	.LVL124:
 1177              		.loc 1 1381 0
 1178 0012 01D1     		bne	.L87
1382:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1383:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     itmask &= USARTx->CR1;
 1179              		.loc 1 1383 0
 1180 0014 8389     		ldrh	r3, [r0, #12]
 1181 0016 03E0     		b	.L92
 1182              	.L87:
1384:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1385:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1183              		.loc 1 1385 0
 1184 0018 022C     		cmp	r4, #2
1386:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1387:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     itmask &= USARTx->CR2;
 1185              		.loc 1 1387 0
 1186 001a 0CBF     		ite	eq
 1187 001c 038A     		ldrheq	r3, [r0, #16]
1388:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1389:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else /* The IT  is in CR3 register */
1390:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1391:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     itmask &= USARTx->CR3;
 1188              		.loc 1 1391 0
 1189 001e 838A     		ldrhne	r3, [r0, #20]
 1190              	.L92:
 1191 0020 9BB2     		uxth	r3, r3
1392:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1393:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
1394:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   bitpos = USART_IT >> 0x08;
1395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
1396:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   bitpos &= USARTx->SR;
 1192              		.loc 1 1396 0
 1193 0022 0088     		ldrh	r0, [r0, #0]
 1194              	.LVL125:
1391:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     itmask &= USARTx->CR3;
 1195              		.loc 1 1391 0
 1196 0024 1340     		ands	r3, r3, r2
 1197              	.LVL126:
 1198              		.loc 1 1396 0
 1199 0026 82B2     		uxth	r2, r0
 1200              	.LVL127:
1397:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1201              		.loc 1 1397 0
 1202 0028 43B1     		cbz	r3, .L91
1395:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1203              		.loc 1 1395 0 discriminator 1
 1204 002a 090A     		lsrs	r1, r1, #8
 1205              	.LVL128:
 1206 002c 0123     		movs	r3, #1
 1207              	.LVL129:
 1208 002e 03FA01F0 		lsl	r0, r3, r1
 1209              		.loc 1 1397 0 discriminator 1
 1210 0032 1042     		tst	r0, r2
1398:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1399:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     bitstatus = SET;
 1211              		.loc 1 1399 0 discriminator 1
 1212 0034 0CBF     		ite	eq
 1213 0036 0020     		moveq	r0, #0
 1214 0038 0120     		movne	r0, #1
 1215 003a 10BD     		pop	{r4, pc}
 1216              	.LVL130:
 1217              	.L91:
1400:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1401:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   else
1402:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1403:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     bitstatus = RESET;
 1218              		.loc 1 1403 0
 1219 003c 1846     		mov	r0, r3
 1220              	.LVL131:
1404:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   }
1405:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   
1406:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   return bitstatus;  
1407:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** }
 1221              		.loc 1 1407 0
 1222 003e 10BD     		pop	{r4, pc}
 1223              		.cfi_endproc
 1224              	.LFE83:
 1226              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1227              		.align	1
 1228              		.global	USART_ClearITPendingBit
 1229              		.thumb
 1230              		.thumb_func
 1232              	USART_ClearITPendingBit:
 1233              	.LFB84:
1408:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1409:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** /**
1410:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1411:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1412:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *         UART peripheral.
1413:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1414:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          This parameter can be one of the following values:
1415:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1416:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1417:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1418:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1419:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *
1420:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1421:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1422:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1423:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1424:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          (USART_ReceiveData()).
1425:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1426:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          (USART_ReceiveData()).
1427:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1428:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1429:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1430:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1431:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *          (USART_SendData()).
1432:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   *  
1433:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   * @retval None
1434:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   */
1435:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1436:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** {
 1234              		.loc 1 1436 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 1238              		@ link register save eliminated.
 1239              	.LVL132:
1437:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1438:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* Check the parameters */
1439:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1440:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1441:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c **** 
1442:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1443:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1444:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   {
1445:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1446:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   } 
1447:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****     
1448:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   bitpos = USART_IT >> 0x08;
1449:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1240              		.loc 1 1449 0
 1241 0000 090A     		lsrs	r1, r1, #8
 1242              	.LVL133:
 1243 0002 0123     		movs	r3, #1
 1244 0004 03FA01F3 		lsl	r3, r3, r1
1450:c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2\stm32f2xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1245              		.loc 1 1450 0
 1246 0008 DA43     		mvns	r2, r3
 1247 000a 91B2     		uxth	r1, r2
 1248 000c 0180     		strh	r1, [r0, #0]	@ movhi
 1249 000e 7047     		bx	lr
 1250              		.cfi_endproc
 1251              	.LFE84:
 1253              		.text
 1254              	.Letext0:
 1255              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q1\\bin\\../lib/gcc/arm-none-eab
 1256              		.file 3 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx.h"
 1257              		.file 4 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_rcc.h"
 1258              		.file 5 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/stm32f2xx_usart.h"
 1259              		.file 6 "c:/Dropbox/AV_SmartWatch/toolchain_v3/src/libstm32f2/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f2xx_usart.c
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:19     .text.USART_DeInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:24     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:141    .text.USART_DeInit:00000090 $d
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:151    .text.USART_Init:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:156    .text.USART_Init:00000000 USART_Init
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:310    .text.USART_Init:000000b4 $d
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:315    .text.USART_StructInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:320    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:351    .text.USART_ClockInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:356    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:396    .text.USART_ClockStructInit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:401    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:423    .text.USART_Cmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:428    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:459    .text.USART_SetPrescaler:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:464    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:487    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:492    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:523    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:528    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:559    .text.USART_SendData:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:564    .text.USART_SendData:00000000 USART_SendData
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:582    .text.USART_ReceiveData:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:587    .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:606    .text.USART_SetAddress:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:611    .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:636    .text.USART_ReceiverWakeUpCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:641    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:672    .text.USART_WakeUpConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:677    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:702    .text.USART_LINBreakDetectLengthConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:707    .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:732    .text.USART_LINCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:737    .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:768    .text.USART_SendBreak:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:773    .text.USART_SendBreak:00000000 USART_SendBreak
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:791    .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:796    .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:827    .text.USART_SetGuardTime:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:832    .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:855    .text.USART_SmartCardCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:860    .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:891    .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:896    .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:927    .text.USART_IrDAConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:932    .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:957    .text.USART_IrDACmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:962    .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:993    .text.USART_DMACmd:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:998    .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1027   .text.USART_ITConfig:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1032   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1099   .text.USART_GetFlagStatus:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1104   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1126   .text.USART_ClearFlag:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1131   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1149   .text.USART_GetITStatus:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1154   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1227   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\STINA\AppData\Local\Temp\ccBb9LZe.s:1232   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
