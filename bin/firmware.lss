
bin/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08040000  08040000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d8  08040188  08040188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08048360  08048360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08048368  08048368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000d94  20000c00  0804836c  00010c00  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000060  20001994  08049100  00011994  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200019f4  08049100  000119f4  2**0
                  ALLOC
  7 .ARM.attributes 00000031  00000000  00000000  00011994  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000cfd3  00000000  00000000  000119c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000024c6  00000000  00000000  0001e998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000067a4  00000000  00000000  00020e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ab8  00000000  00000000  00027602  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c20  00000000  00000000  000280ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000347e  00000000  00000000  00028cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003856  00000000  00000000  0002c158  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0002f9ae  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000021e0  00000000  00000000  0002fa20  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000144  00000000  00000000  00031c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000051  00000000  00000000  00031d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08040188 <__aeabi_drsub>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8040188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 804018c:	e002      	b.n	8040194 <__adddf3>
 804018e:	bf00      	nop

08040190 <__aeabi_dsub>:
 8040190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08040194 <__adddf3>:
 8040194:	b530      	push	{r4, r5, lr}
 8040196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 804019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 804019e:	ea94 0f05 	teq	r4, r5
 80401a2:	bf08      	it	eq
 80401a4:	ea90 0f02 	teqeq	r0, r2
 80401a8:	bf1f      	itttt	ne
 80401aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80401ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80401b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80401b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80401ba:	f000 80e2 	beq.w	8040382 <__adddf3+0x1ee>
 80401be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80401c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80401c6:	bfb8      	it	lt
 80401c8:	426d      	neglt	r5, r5
 80401ca:	dd0c      	ble.n	80401e6 <__adddf3+0x52>
 80401cc:	442c      	add	r4, r5
 80401ce:	ea80 0202 	eor.w	r2, r0, r2
 80401d2:	ea81 0303 	eor.w	r3, r1, r3
 80401d6:	ea82 0000 	eor.w	r0, r2, r0
 80401da:	ea83 0101 	eor.w	r1, r3, r1
 80401de:	ea80 0202 	eor.w	r2, r0, r2
 80401e2:	ea81 0303 	eor.w	r3, r1, r3
 80401e6:	2d36      	cmp	r5, #54	; 0x36
 80401e8:	bf88      	it	hi
 80401ea:	bd30      	pophi	{r4, r5, pc}
 80401ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80401f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80401f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80401f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80401fc:	d002      	beq.n	8040204 <__adddf3+0x70>
 80401fe:	4240      	negs	r0, r0
 8040200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 804020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040210:	d002      	beq.n	8040218 <__adddf3+0x84>
 8040212:	4252      	negs	r2, r2
 8040214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040218:	ea94 0f05 	teq	r4, r5
 804021c:	f000 80a7 	beq.w	804036e <__adddf3+0x1da>
 8040220:	f1a4 0401 	sub.w	r4, r4, #1
 8040224:	f1d5 0e20 	rsbs	lr, r5, #32
 8040228:	db0d      	blt.n	8040246 <__adddf3+0xb2>
 804022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 804022e:	fa22 f205 	lsr.w	r2, r2, r5
 8040232:	1880      	adds	r0, r0, r2
 8040234:	f141 0100 	adc.w	r1, r1, #0
 8040238:	fa03 f20e 	lsl.w	r2, r3, lr
 804023c:	1880      	adds	r0, r0, r2
 804023e:	fa43 f305 	asr.w	r3, r3, r5
 8040242:	4159      	adcs	r1, r3
 8040244:	e00e      	b.n	8040264 <__adddf3+0xd0>
 8040246:	f1a5 0520 	sub.w	r5, r5, #32
 804024a:	f10e 0e20 	add.w	lr, lr, #32
 804024e:	2a01      	cmp	r2, #1
 8040250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8040254:	bf28      	it	cs
 8040256:	f04c 0c02 	orrcs.w	ip, ip, #2
 804025a:	fa43 f305 	asr.w	r3, r3, r5
 804025e:	18c0      	adds	r0, r0, r3
 8040260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8040264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040268:	d507      	bpl.n	804027a <__adddf3+0xe6>
 804026a:	f04f 0e00 	mov.w	lr, #0
 804026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8040272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8040276:	eb6e 0101 	sbc.w	r1, lr, r1
 804027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 804027e:	d31b      	bcc.n	80402b8 <__adddf3+0x124>
 8040280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8040284:	d30c      	bcc.n	80402a0 <__adddf3+0x10c>
 8040286:	0849      	lsrs	r1, r1, #1
 8040288:	ea5f 0030 	movs.w	r0, r0, rrx
 804028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040290:	f104 0401 	add.w	r4, r4, #1
 8040294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 804029c:	f080 809a 	bcs.w	80403d4 <__adddf3+0x240>
 80402a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80402a4:	bf08      	it	eq
 80402a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80402aa:	f150 0000 	adcs.w	r0, r0, #0
 80402ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80402b2:	ea41 0105 	orr.w	r1, r1, r5
 80402b6:	bd30      	pop	{r4, r5, pc}
 80402b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80402bc:	4140      	adcs	r0, r0
 80402be:	eb41 0101 	adc.w	r1, r1, r1
 80402c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80402c6:	f1a4 0401 	sub.w	r4, r4, #1
 80402ca:	d1e9      	bne.n	80402a0 <__adddf3+0x10c>
 80402cc:	f091 0f00 	teq	r1, #0
 80402d0:	bf04      	itt	eq
 80402d2:	4601      	moveq	r1, r0
 80402d4:	2000      	moveq	r0, #0
 80402d6:	fab1 f381 	clz	r3, r1
 80402da:	bf08      	it	eq
 80402dc:	3320      	addeq	r3, #32
 80402de:	f1a3 030b 	sub.w	r3, r3, #11
 80402e2:	f1b3 0220 	subs.w	r2, r3, #32
 80402e6:	da0c      	bge.n	8040302 <__adddf3+0x16e>
 80402e8:	320c      	adds	r2, #12
 80402ea:	dd08      	ble.n	80402fe <__adddf3+0x16a>
 80402ec:	f102 0c14 	add.w	ip, r2, #20
 80402f0:	f1c2 020c 	rsb	r2, r2, #12
 80402f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80402f8:	fa21 f102 	lsr.w	r1, r1, r2
 80402fc:	e00c      	b.n	8040318 <__adddf3+0x184>
 80402fe:	f102 0214 	add.w	r2, r2, #20
 8040302:	bfd8      	it	le
 8040304:	f1c2 0c20 	rsble	ip, r2, #32
 8040308:	fa01 f102 	lsl.w	r1, r1, r2
 804030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040310:	bfdc      	itt	le
 8040312:	ea41 010c 	orrle.w	r1, r1, ip
 8040316:	4090      	lslle	r0, r2
 8040318:	1ae4      	subs	r4, r4, r3
 804031a:	bfa2      	ittt	ge
 804031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040320:	4329      	orrge	r1, r5
 8040322:	bd30      	popge	{r4, r5, pc}
 8040324:	ea6f 0404 	mvn.w	r4, r4
 8040328:	3c1f      	subs	r4, #31
 804032a:	da1c      	bge.n	8040366 <__adddf3+0x1d2>
 804032c:	340c      	adds	r4, #12
 804032e:	dc0e      	bgt.n	804034e <__adddf3+0x1ba>
 8040330:	f104 0414 	add.w	r4, r4, #20
 8040334:	f1c4 0220 	rsb	r2, r4, #32
 8040338:	fa20 f004 	lsr.w	r0, r0, r4
 804033c:	fa01 f302 	lsl.w	r3, r1, r2
 8040340:	ea40 0003 	orr.w	r0, r0, r3
 8040344:	fa21 f304 	lsr.w	r3, r1, r4
 8040348:	ea45 0103 	orr.w	r1, r5, r3
 804034c:	bd30      	pop	{r4, r5, pc}
 804034e:	f1c4 040c 	rsb	r4, r4, #12
 8040352:	f1c4 0220 	rsb	r2, r4, #32
 8040356:	fa20 f002 	lsr.w	r0, r0, r2
 804035a:	fa01 f304 	lsl.w	r3, r1, r4
 804035e:	ea40 0003 	orr.w	r0, r0, r3
 8040362:	4629      	mov	r1, r5
 8040364:	bd30      	pop	{r4, r5, pc}
 8040366:	fa21 f004 	lsr.w	r0, r1, r4
 804036a:	4629      	mov	r1, r5
 804036c:	bd30      	pop	{r4, r5, pc}
 804036e:	f094 0f00 	teq	r4, #0
 8040372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8040376:	bf06      	itte	eq
 8040378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 804037c:	3401      	addeq	r4, #1
 804037e:	3d01      	subne	r5, #1
 8040380:	e74e      	b.n	8040220 <__adddf3+0x8c>
 8040382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8040386:	bf18      	it	ne
 8040388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804038c:	d029      	beq.n	80403e2 <__adddf3+0x24e>
 804038e:	ea94 0f05 	teq	r4, r5
 8040392:	bf08      	it	eq
 8040394:	ea90 0f02 	teqeq	r0, r2
 8040398:	d005      	beq.n	80403a6 <__adddf3+0x212>
 804039a:	ea54 0c00 	orrs.w	ip, r4, r0
 804039e:	bf04      	itt	eq
 80403a0:	4619      	moveq	r1, r3
 80403a2:	4610      	moveq	r0, r2
 80403a4:	bd30      	pop	{r4, r5, pc}
 80403a6:	ea91 0f03 	teq	r1, r3
 80403aa:	bf1e      	ittt	ne
 80403ac:	2100      	movne	r1, #0
 80403ae:	2000      	movne	r0, #0
 80403b0:	bd30      	popne	{r4, r5, pc}
 80403b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80403b6:	d105      	bne.n	80403c4 <__adddf3+0x230>
 80403b8:	0040      	lsls	r0, r0, #1
 80403ba:	4149      	adcs	r1, r1
 80403bc:	bf28      	it	cs
 80403be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80403c2:	bd30      	pop	{r4, r5, pc}
 80403c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80403c8:	bf3c      	itt	cc
 80403ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80403ce:	bd30      	popcc	{r4, r5, pc}
 80403d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80403d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80403d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80403dc:	f04f 0000 	mov.w	r0, #0
 80403e0:	bd30      	pop	{r4, r5, pc}
 80403e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80403e6:	bf1a      	itte	ne
 80403e8:	4619      	movne	r1, r3
 80403ea:	4610      	movne	r0, r2
 80403ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80403f0:	bf1c      	itt	ne
 80403f2:	460b      	movne	r3, r1
 80403f4:	4602      	movne	r2, r0
 80403f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80403fa:	bf06      	itte	eq
 80403fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040400:	ea91 0f03 	teqeq	r1, r3
 8040404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040408:	bd30      	pop	{r4, r5, pc}
 804040a:	bf00      	nop

0804040c <__aeabi_ui2d>:
 804040c:	f090 0f00 	teq	r0, #0
 8040410:	bf04      	itt	eq
 8040412:	2100      	moveq	r1, #0
 8040414:	4770      	bxeq	lr
 8040416:	b530      	push	{r4, r5, lr}
 8040418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 804041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040420:	f04f 0500 	mov.w	r5, #0
 8040424:	f04f 0100 	mov.w	r1, #0
 8040428:	e750      	b.n	80402cc <__adddf3+0x138>
 804042a:	bf00      	nop

0804042c <__aeabi_i2d>:
 804042c:	f090 0f00 	teq	r0, #0
 8040430:	bf04      	itt	eq
 8040432:	2100      	moveq	r1, #0
 8040434:	4770      	bxeq	lr
 8040436:	b530      	push	{r4, r5, lr}
 8040438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 804043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8040444:	bf48      	it	mi
 8040446:	4240      	negmi	r0, r0
 8040448:	f04f 0100 	mov.w	r1, #0
 804044c:	e73e      	b.n	80402cc <__adddf3+0x138>
 804044e:	bf00      	nop

08040450 <__aeabi_f2d>:
 8040450:	0042      	lsls	r2, r0, #1
 8040452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8040456:	ea4f 0131 	mov.w	r1, r1, rrx
 804045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 804045e:	bf1f      	itttt	ne
 8040460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8040464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 804046c:	4770      	bxne	lr
 804046e:	f092 0f00 	teq	r2, #0
 8040472:	bf14      	ite	ne
 8040474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040478:	4770      	bxeq	lr
 804047a:	b530      	push	{r4, r5, lr}
 804047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040488:	e720      	b.n	80402cc <__adddf3+0x138>
 804048a:	bf00      	nop

0804048c <__aeabi_ul2d>:
 804048c:	ea50 0201 	orrs.w	r2, r0, r1
 8040490:	bf08      	it	eq
 8040492:	4770      	bxeq	lr
 8040494:	b530      	push	{r4, r5, lr}
 8040496:	f04f 0500 	mov.w	r5, #0
 804049a:	e00a      	b.n	80404b2 <__aeabi_l2d+0x16>

0804049c <__aeabi_l2d>:
 804049c:	ea50 0201 	orrs.w	r2, r0, r1
 80404a0:	bf08      	it	eq
 80404a2:	4770      	bxeq	lr
 80404a4:	b530      	push	{r4, r5, lr}
 80404a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80404aa:	d502      	bpl.n	80404b2 <__aeabi_l2d+0x16>
 80404ac:	4240      	negs	r0, r0
 80404ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80404b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80404be:	f43f aedc 	beq.w	804027a <__adddf3+0xe6>
 80404c2:	f04f 0203 	mov.w	r2, #3
 80404c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80404ca:	bf18      	it	ne
 80404cc:	3203      	addne	r2, #3
 80404ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80404d2:	bf18      	it	ne
 80404d4:	3203      	addne	r2, #3
 80404d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80404da:	f1c2 0320 	rsb	r3, r2, #32
 80404de:	fa00 fc03 	lsl.w	ip, r0, r3
 80404e2:	fa20 f002 	lsr.w	r0, r0, r2
 80404e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80404ea:	ea40 000e 	orr.w	r0, r0, lr
 80404ee:	fa21 f102 	lsr.w	r1, r1, r2
 80404f2:	4414      	add	r4, r2
 80404f4:	e6c1      	b.n	804027a <__adddf3+0xe6>
 80404f6:	bf00      	nop

080404f8 <__aeabi_dmul>:
 80404f8:	b570      	push	{r4, r5, r6, lr}
 80404fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80404fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040506:	bf1d      	ittte	ne
 8040508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804050c:	ea94 0f0c 	teqne	r4, ip
 8040510:	ea95 0f0c 	teqne	r5, ip
 8040514:	f000 f8de 	bleq	80406d4 <__aeabi_dmul+0x1dc>
 8040518:	442c      	add	r4, r5
 804051a:	ea81 0603 	eor.w	r6, r1, r3
 804051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804052a:	bf18      	it	ne
 804052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040538:	d038      	beq.n	80405ac <__aeabi_dmul+0xb4>
 804053a:	fba0 ce02 	umull	ip, lr, r0, r2
 804053e:	f04f 0500 	mov.w	r5, #0
 8040542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 804054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804054e:	f04f 0600 	mov.w	r6, #0
 8040552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040556:	f09c 0f00 	teq	ip, #0
 804055a:	bf18      	it	ne
 804055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8040564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 804056c:	d204      	bcs.n	8040578 <__aeabi_dmul+0x80>
 804056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040572:	416d      	adcs	r5, r5
 8040574:	eb46 0606 	adc.w	r6, r6, r6
 8040578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8040584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 804058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040590:	bf88      	it	hi
 8040592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040596:	d81e      	bhi.n	80405d6 <__aeabi_dmul+0xde>
 8040598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 804059c:	bf08      	it	eq
 804059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80405a2:	f150 0000 	adcs.w	r0, r0, #0
 80405a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80405aa:	bd70      	pop	{r4, r5, r6, pc}
 80405ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80405b0:	ea46 0101 	orr.w	r1, r6, r1
 80405b4:	ea40 0002 	orr.w	r0, r0, r2
 80405b8:	ea81 0103 	eor.w	r1, r1, r3
 80405bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80405c0:	bfc2      	ittt	gt
 80405c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80405c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80405ca:	bd70      	popgt	{r4, r5, r6, pc}
 80405cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80405d0:	f04f 0e00 	mov.w	lr, #0
 80405d4:	3c01      	subs	r4, #1
 80405d6:	f300 80ab 	bgt.w	8040730 <__aeabi_dmul+0x238>
 80405da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80405de:	bfde      	ittt	le
 80405e0:	2000      	movle	r0, #0
 80405e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80405e6:	bd70      	pople	{r4, r5, r6, pc}
 80405e8:	f1c4 0400 	rsb	r4, r4, #0
 80405ec:	3c20      	subs	r4, #32
 80405ee:	da35      	bge.n	804065c <__aeabi_dmul+0x164>
 80405f0:	340c      	adds	r4, #12
 80405f2:	dc1b      	bgt.n	804062c <__aeabi_dmul+0x134>
 80405f4:	f104 0414 	add.w	r4, r4, #20
 80405f8:	f1c4 0520 	rsb	r5, r4, #32
 80405fc:	fa00 f305 	lsl.w	r3, r0, r5
 8040600:	fa20 f004 	lsr.w	r0, r0, r4
 8040604:	fa01 f205 	lsl.w	r2, r1, r5
 8040608:	ea40 0002 	orr.w	r0, r0, r2
 804060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040618:	fa21 f604 	lsr.w	r6, r1, r4
 804061c:	eb42 0106 	adc.w	r1, r2, r6
 8040620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040624:	bf08      	it	eq
 8040626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804062a:	bd70      	pop	{r4, r5, r6, pc}
 804062c:	f1c4 040c 	rsb	r4, r4, #12
 8040630:	f1c4 0520 	rsb	r5, r4, #32
 8040634:	fa00 f304 	lsl.w	r3, r0, r4
 8040638:	fa20 f005 	lsr.w	r0, r0, r5
 804063c:	fa01 f204 	lsl.w	r2, r1, r4
 8040640:	ea40 0002 	orr.w	r0, r0, r2
 8040644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804064c:	f141 0100 	adc.w	r1, r1, #0
 8040650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040654:	bf08      	it	eq
 8040656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804065a:	bd70      	pop	{r4, r5, r6, pc}
 804065c:	f1c4 0520 	rsb	r5, r4, #32
 8040660:	fa00 f205 	lsl.w	r2, r0, r5
 8040664:	ea4e 0e02 	orr.w	lr, lr, r2
 8040668:	fa20 f304 	lsr.w	r3, r0, r4
 804066c:	fa01 f205 	lsl.w	r2, r1, r5
 8040670:	ea43 0302 	orr.w	r3, r3, r2
 8040674:	fa21 f004 	lsr.w	r0, r1, r4
 8040678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 804067c:	fa21 f204 	lsr.w	r2, r1, r4
 8040680:	ea20 0002 	bic.w	r0, r0, r2
 8040684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804068c:	bf08      	it	eq
 804068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040692:	bd70      	pop	{r4, r5, r6, pc}
 8040694:	f094 0f00 	teq	r4, #0
 8040698:	d10f      	bne.n	80406ba <__aeabi_dmul+0x1c2>
 804069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 804069e:	0040      	lsls	r0, r0, #1
 80406a0:	eb41 0101 	adc.w	r1, r1, r1
 80406a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80406a8:	bf08      	it	eq
 80406aa:	3c01      	subeq	r4, #1
 80406ac:	d0f7      	beq.n	804069e <__aeabi_dmul+0x1a6>
 80406ae:	ea41 0106 	orr.w	r1, r1, r6
 80406b2:	f095 0f00 	teq	r5, #0
 80406b6:	bf18      	it	ne
 80406b8:	4770      	bxne	lr
 80406ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80406be:	0052      	lsls	r2, r2, #1
 80406c0:	eb43 0303 	adc.w	r3, r3, r3
 80406c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80406c8:	bf08      	it	eq
 80406ca:	3d01      	subeq	r5, #1
 80406cc:	d0f7      	beq.n	80406be <__aeabi_dmul+0x1c6>
 80406ce:	ea43 0306 	orr.w	r3, r3, r6
 80406d2:	4770      	bx	lr
 80406d4:	ea94 0f0c 	teq	r4, ip
 80406d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80406dc:	bf18      	it	ne
 80406de:	ea95 0f0c 	teqne	r5, ip
 80406e2:	d00c      	beq.n	80406fe <__aeabi_dmul+0x206>
 80406e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80406e8:	bf18      	it	ne
 80406ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80406ee:	d1d1      	bne.n	8040694 <__aeabi_dmul+0x19c>
 80406f0:	ea81 0103 	eor.w	r1, r1, r3
 80406f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80406f8:	f04f 0000 	mov.w	r0, #0
 80406fc:	bd70      	pop	{r4, r5, r6, pc}
 80406fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040702:	bf06      	itte	eq
 8040704:	4610      	moveq	r0, r2
 8040706:	4619      	moveq	r1, r3
 8040708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804070c:	d019      	beq.n	8040742 <__aeabi_dmul+0x24a>
 804070e:	ea94 0f0c 	teq	r4, ip
 8040712:	d102      	bne.n	804071a <__aeabi_dmul+0x222>
 8040714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040718:	d113      	bne.n	8040742 <__aeabi_dmul+0x24a>
 804071a:	ea95 0f0c 	teq	r5, ip
 804071e:	d105      	bne.n	804072c <__aeabi_dmul+0x234>
 8040720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040724:	bf1c      	itt	ne
 8040726:	4610      	movne	r0, r2
 8040728:	4619      	movne	r1, r3
 804072a:	d10a      	bne.n	8040742 <__aeabi_dmul+0x24a>
 804072c:	ea81 0103 	eor.w	r1, r1, r3
 8040730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804073c:	f04f 0000 	mov.w	r0, #0
 8040740:	bd70      	pop	{r4, r5, r6, pc}
 8040742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 804074a:	bd70      	pop	{r4, r5, r6, pc}

0804074c <__aeabi_ddiv>:
 804074c:	b570      	push	{r4, r5, r6, lr}
 804074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804075a:	bf1d      	ittte	ne
 804075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040760:	ea94 0f0c 	teqne	r4, ip
 8040764:	ea95 0f0c 	teqne	r5, ip
 8040768:	f000 f8a7 	bleq	80408ba <__aeabi_ddiv+0x16e>
 804076c:	eba4 0405 	sub.w	r4, r4, r5
 8040770:	ea81 0e03 	eor.w	lr, r1, r3
 8040774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804077c:	f000 8088 	beq.w	8040890 <__aeabi_ddiv+0x144>
 8040780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 804078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8040794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 804079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80407a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80407a4:	429d      	cmp	r5, r3
 80407a6:	bf08      	it	eq
 80407a8:	4296      	cmpeq	r6, r2
 80407aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80407ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80407b2:	d202      	bcs.n	80407ba <__aeabi_ddiv+0x6e>
 80407b4:	085b      	lsrs	r3, r3, #1
 80407b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80407ba:	1ab6      	subs	r6, r6, r2
 80407bc:	eb65 0503 	sbc.w	r5, r5, r3
 80407c0:	085b      	lsrs	r3, r3, #1
 80407c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80407c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80407ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80407ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80407d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80407d6:	bf22      	ittt	cs
 80407d8:	1ab6      	subcs	r6, r6, r2
 80407da:	4675      	movcs	r5, lr
 80407dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80407e0:	085b      	lsrs	r3, r3, #1
 80407e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80407e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80407ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80407ee:	bf22      	ittt	cs
 80407f0:	1ab6      	subcs	r6, r6, r2
 80407f2:	4675      	movcs	r5, lr
 80407f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80407f8:	085b      	lsrs	r3, r3, #1
 80407fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80407fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8040802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040806:	bf22      	ittt	cs
 8040808:	1ab6      	subcs	r6, r6, r2
 804080a:	4675      	movcs	r5, lr
 804080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040810:	085b      	lsrs	r3, r3, #1
 8040812:	ea4f 0232 	mov.w	r2, r2, rrx
 8040816:	ebb6 0e02 	subs.w	lr, r6, r2
 804081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804081e:	bf22      	ittt	cs
 8040820:	1ab6      	subcs	r6, r6, r2
 8040822:	4675      	movcs	r5, lr
 8040824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040828:	ea55 0e06 	orrs.w	lr, r5, r6
 804082c:	d018      	beq.n	8040860 <__aeabi_ddiv+0x114>
 804082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804084a:	d1c0      	bne.n	80407ce <__aeabi_ddiv+0x82>
 804084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040850:	d10b      	bne.n	804086a <__aeabi_ddiv+0x11e>
 8040852:	ea41 0100 	orr.w	r1, r1, r0
 8040856:	f04f 0000 	mov.w	r0, #0
 804085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 804085e:	e7b6      	b.n	80407ce <__aeabi_ddiv+0x82>
 8040860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040864:	bf04      	itt	eq
 8040866:	4301      	orreq	r1, r0
 8040868:	2000      	moveq	r0, #0
 804086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 804086e:	bf88      	it	hi
 8040870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040874:	f63f aeaf 	bhi.w	80405d6 <__aeabi_dmul+0xde>
 8040878:	ebb5 0c03 	subs.w	ip, r5, r3
 804087c:	bf04      	itt	eq
 804087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8040882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8040886:	f150 0000 	adcs.w	r0, r0, #0
 804088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 804088e:	bd70      	pop	{r4, r5, r6, pc}
 8040890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8040894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 804089c:	bfc2      	ittt	gt
 804089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80408a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80408a6:	bd70      	popgt	{r4, r5, r6, pc}
 80408a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80408ac:	f04f 0e00 	mov.w	lr, #0
 80408b0:	3c01      	subs	r4, #1
 80408b2:	e690      	b.n	80405d6 <__aeabi_dmul+0xde>
 80408b4:	ea45 0e06 	orr.w	lr, r5, r6
 80408b8:	e68d      	b.n	80405d6 <__aeabi_dmul+0xde>
 80408ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80408be:	ea94 0f0c 	teq	r4, ip
 80408c2:	bf08      	it	eq
 80408c4:	ea95 0f0c 	teqeq	r5, ip
 80408c8:	f43f af3b 	beq.w	8040742 <__aeabi_dmul+0x24a>
 80408cc:	ea94 0f0c 	teq	r4, ip
 80408d0:	d10a      	bne.n	80408e8 <__aeabi_ddiv+0x19c>
 80408d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80408d6:	f47f af34 	bne.w	8040742 <__aeabi_dmul+0x24a>
 80408da:	ea95 0f0c 	teq	r5, ip
 80408de:	f47f af25 	bne.w	804072c <__aeabi_dmul+0x234>
 80408e2:	4610      	mov	r0, r2
 80408e4:	4619      	mov	r1, r3
 80408e6:	e72c      	b.n	8040742 <__aeabi_dmul+0x24a>
 80408e8:	ea95 0f0c 	teq	r5, ip
 80408ec:	d106      	bne.n	80408fc <__aeabi_ddiv+0x1b0>
 80408ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80408f2:	f43f aefd 	beq.w	80406f0 <__aeabi_dmul+0x1f8>
 80408f6:	4610      	mov	r0, r2
 80408f8:	4619      	mov	r1, r3
 80408fa:	e722      	b.n	8040742 <__aeabi_dmul+0x24a>
 80408fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040900:	bf18      	it	ne
 8040902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040906:	f47f aec5 	bne.w	8040694 <__aeabi_dmul+0x19c>
 804090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 804090e:	f47f af0d 	bne.w	804072c <__aeabi_dmul+0x234>
 8040912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040916:	f47f aeeb 	bne.w	80406f0 <__aeabi_dmul+0x1f8>
 804091a:	e712      	b.n	8040742 <__aeabi_dmul+0x24a>

0804091c <__gedf2>:
 804091c:	f04f 3cff 	mov.w	ip, #4294967295
 8040920:	e006      	b.n	8040930 <__cmpdf2+0x4>
 8040922:	bf00      	nop

08040924 <__ledf2>:
 8040924:	f04f 0c01 	mov.w	ip, #1
 8040928:	e002      	b.n	8040930 <__cmpdf2+0x4>
 804092a:	bf00      	nop

0804092c <__cmpdf2>:
 804092c:	f04f 0c01 	mov.w	ip, #1
 8040930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 804093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040940:	bf18      	it	ne
 8040942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040946:	d01b      	beq.n	8040980 <__cmpdf2+0x54>
 8040948:	b001      	add	sp, #4
 804094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 804094e:	bf0c      	ite	eq
 8040950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040954:	ea91 0f03 	teqne	r1, r3
 8040958:	bf02      	ittt	eq
 804095a:	ea90 0f02 	teqeq	r0, r2
 804095e:	2000      	moveq	r0, #0
 8040960:	4770      	bxeq	lr
 8040962:	f110 0f00 	cmn.w	r0, #0
 8040966:	ea91 0f03 	teq	r1, r3
 804096a:	bf58      	it	pl
 804096c:	4299      	cmppl	r1, r3
 804096e:	bf08      	it	eq
 8040970:	4290      	cmpeq	r0, r2
 8040972:	bf2c      	ite	cs
 8040974:	17d8      	asrcs	r0, r3, #31
 8040976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 804097a:	f040 0001 	orr.w	r0, r0, #1
 804097e:	4770      	bx	lr
 8040980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040988:	d102      	bne.n	8040990 <__cmpdf2+0x64>
 804098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 804098e:	d107      	bne.n	80409a0 <__cmpdf2+0x74>
 8040990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040998:	d1d6      	bne.n	8040948 <__cmpdf2+0x1c>
 804099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 804099e:	d0d3      	beq.n	8040948 <__cmpdf2+0x1c>
 80409a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80409a4:	4770      	bx	lr
 80409a6:	bf00      	nop

080409a8 <__aeabi_cdrcmple>:
 80409a8:	4684      	mov	ip, r0
 80409aa:	4610      	mov	r0, r2
 80409ac:	4662      	mov	r2, ip
 80409ae:	468c      	mov	ip, r1
 80409b0:	4619      	mov	r1, r3
 80409b2:	4663      	mov	r3, ip
 80409b4:	e000      	b.n	80409b8 <__aeabi_cdcmpeq>
 80409b6:	bf00      	nop

080409b8 <__aeabi_cdcmpeq>:
 80409b8:	b501      	push	{r0, lr}
 80409ba:	f7ff ffb7 	bl	804092c <__cmpdf2>
 80409be:	2800      	cmp	r0, #0
 80409c0:	bf48      	it	mi
 80409c2:	f110 0f00 	cmnmi.w	r0, #0
 80409c6:	bd01      	pop	{r0, pc}

080409c8 <__aeabi_dcmpeq>:
 80409c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80409cc:	f7ff fff4 	bl	80409b8 <__aeabi_cdcmpeq>
 80409d0:	bf0c      	ite	eq
 80409d2:	2001      	moveq	r0, #1
 80409d4:	2000      	movne	r0, #0
 80409d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80409da:	bf00      	nop

080409dc <__aeabi_dcmplt>:
 80409dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80409e0:	f7ff ffea 	bl	80409b8 <__aeabi_cdcmpeq>
 80409e4:	bf34      	ite	cc
 80409e6:	2001      	movcc	r0, #1
 80409e8:	2000      	movcs	r0, #0
 80409ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80409ee:	bf00      	nop

080409f0 <__aeabi_dcmple>:
 80409f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80409f4:	f7ff ffe0 	bl	80409b8 <__aeabi_cdcmpeq>
 80409f8:	bf94      	ite	ls
 80409fa:	2001      	movls	r0, #1
 80409fc:	2000      	movhi	r0, #0
 80409fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a02:	bf00      	nop

08040a04 <__aeabi_dcmpge>:
 8040a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a08:	f7ff ffce 	bl	80409a8 <__aeabi_cdrcmple>
 8040a0c:	bf94      	ite	ls
 8040a0e:	2001      	movls	r0, #1
 8040a10:	2000      	movhi	r0, #0
 8040a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a16:	bf00      	nop

08040a18 <__aeabi_dcmpgt>:
 8040a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a1c:	f7ff ffc4 	bl	80409a8 <__aeabi_cdrcmple>
 8040a20:	bf34      	ite	cc
 8040a22:	2001      	movcc	r0, #1
 8040a24:	2000      	movcs	r0, #0
 8040a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8040a2a:	bf00      	nop

08040a2c <__aeabi_d2iz>:
 8040a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040a34:	d215      	bcs.n	8040a62 <__aeabi_d2iz+0x36>
 8040a36:	d511      	bpl.n	8040a5c <__aeabi_d2iz+0x30>
 8040a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040a40:	d912      	bls.n	8040a68 <__aeabi_d2iz+0x3c>
 8040a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040a52:	fa23 f002 	lsr.w	r0, r3, r2
 8040a56:	bf18      	it	ne
 8040a58:	4240      	negne	r0, r0
 8040a5a:	4770      	bx	lr
 8040a5c:	f04f 0000 	mov.w	r0, #0
 8040a60:	4770      	bx	lr
 8040a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040a66:	d105      	bne.n	8040a74 <__aeabi_d2iz+0x48>
 8040a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040a6c:	bf08      	it	eq
 8040a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040a72:	4770      	bx	lr
 8040a74:	f04f 0000 	mov.w	r0, #0
 8040a78:	4770      	bx	lr
 8040a7a:	bf00      	nop

08040a7c <__aeabi_frsub>:
 8040a7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8040a80:	e002      	b.n	8040a88 <__addsf3>
 8040a82:	bf00      	nop

08040a84 <__aeabi_fsub>:
 8040a84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08040a88 <__addsf3>:
 8040a88:	0042      	lsls	r2, r0, #1
 8040a8a:	bf1f      	itttt	ne
 8040a8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8040a90:	ea92 0f03 	teqne	r2, r3
 8040a94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8040a98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8040a9c:	d06a      	beq.n	8040b74 <__addsf3+0xec>
 8040a9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8040aa2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8040aa6:	bfc1      	itttt	gt
 8040aa8:	18d2      	addgt	r2, r2, r3
 8040aaa:	4041      	eorgt	r1, r0
 8040aac:	4048      	eorgt	r0, r1
 8040aae:	4041      	eorgt	r1, r0
 8040ab0:	bfb8      	it	lt
 8040ab2:	425b      	neglt	r3, r3
 8040ab4:	2b19      	cmp	r3, #25
 8040ab6:	bf88      	it	hi
 8040ab8:	4770      	bxhi	lr
 8040aba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8040abe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040ac2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8040ac6:	bf18      	it	ne
 8040ac8:	4240      	negne	r0, r0
 8040aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040ace:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8040ad2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8040ad6:	bf18      	it	ne
 8040ad8:	4249      	negne	r1, r1
 8040ada:	ea92 0f03 	teq	r2, r3
 8040ade:	d03f      	beq.n	8040b60 <__addsf3+0xd8>
 8040ae0:	f1a2 0201 	sub.w	r2, r2, #1
 8040ae4:	fa41 fc03 	asr.w	ip, r1, r3
 8040ae8:	eb10 000c 	adds.w	r0, r0, ip
 8040aec:	f1c3 0320 	rsb	r3, r3, #32
 8040af0:	fa01 f103 	lsl.w	r1, r1, r3
 8040af4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8040af8:	d502      	bpl.n	8040b00 <__addsf3+0x78>
 8040afa:	4249      	negs	r1, r1
 8040afc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8040b00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8040b04:	d313      	bcc.n	8040b2e <__addsf3+0xa6>
 8040b06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8040b0a:	d306      	bcc.n	8040b1a <__addsf3+0x92>
 8040b0c:	0840      	lsrs	r0, r0, #1
 8040b0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040b12:	f102 0201 	add.w	r2, r2, #1
 8040b16:	2afe      	cmp	r2, #254	; 0xfe
 8040b18:	d251      	bcs.n	8040bbe <__addsf3+0x136>
 8040b1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8040b1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8040b22:	bf08      	it	eq
 8040b24:	f020 0001 	biceq.w	r0, r0, #1
 8040b28:	ea40 0003 	orr.w	r0, r0, r3
 8040b2c:	4770      	bx	lr
 8040b2e:	0049      	lsls	r1, r1, #1
 8040b30:	eb40 0000 	adc.w	r0, r0, r0
 8040b34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8040b38:	f1a2 0201 	sub.w	r2, r2, #1
 8040b3c:	d1ed      	bne.n	8040b1a <__addsf3+0x92>
 8040b3e:	fab0 fc80 	clz	ip, r0
 8040b42:	f1ac 0c08 	sub.w	ip, ip, #8
 8040b46:	ebb2 020c 	subs.w	r2, r2, ip
 8040b4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8040b4e:	bfaa      	itet	ge
 8040b50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8040b54:	4252      	neglt	r2, r2
 8040b56:	4318      	orrge	r0, r3
 8040b58:	bfbc      	itt	lt
 8040b5a:	40d0      	lsrlt	r0, r2
 8040b5c:	4318      	orrlt	r0, r3
 8040b5e:	4770      	bx	lr
 8040b60:	f092 0f00 	teq	r2, #0
 8040b64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8040b68:	bf06      	itte	eq
 8040b6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8040b6e:	3201      	addeq	r2, #1
 8040b70:	3b01      	subne	r3, #1
 8040b72:	e7b5      	b.n	8040ae0 <__addsf3+0x58>
 8040b74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8040b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8040b7c:	bf18      	it	ne
 8040b7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8040b82:	d021      	beq.n	8040bc8 <__addsf3+0x140>
 8040b84:	ea92 0f03 	teq	r2, r3
 8040b88:	d004      	beq.n	8040b94 <__addsf3+0x10c>
 8040b8a:	f092 0f00 	teq	r2, #0
 8040b8e:	bf08      	it	eq
 8040b90:	4608      	moveq	r0, r1
 8040b92:	4770      	bx	lr
 8040b94:	ea90 0f01 	teq	r0, r1
 8040b98:	bf1c      	itt	ne
 8040b9a:	2000      	movne	r0, #0
 8040b9c:	4770      	bxne	lr
 8040b9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8040ba2:	d104      	bne.n	8040bae <__addsf3+0x126>
 8040ba4:	0040      	lsls	r0, r0, #1
 8040ba6:	bf28      	it	cs
 8040ba8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8040bac:	4770      	bx	lr
 8040bae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8040bb2:	bf3c      	itt	cc
 8040bb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8040bb8:	4770      	bxcc	lr
 8040bba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8040bbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8040bc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040bc6:	4770      	bx	lr
 8040bc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8040bcc:	bf16      	itet	ne
 8040bce:	4608      	movne	r0, r1
 8040bd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8040bd4:	4601      	movne	r1, r0
 8040bd6:	0242      	lsls	r2, r0, #9
 8040bd8:	bf06      	itte	eq
 8040bda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8040bde:	ea90 0f01 	teqeq	r0, r1
 8040be2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8040be6:	4770      	bx	lr

08040be8 <__aeabi_ui2f>:
 8040be8:	f04f 0300 	mov.w	r3, #0
 8040bec:	e004      	b.n	8040bf8 <__aeabi_i2f+0x8>
 8040bee:	bf00      	nop

08040bf0 <__aeabi_i2f>:
 8040bf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8040bf4:	bf48      	it	mi
 8040bf6:	4240      	negmi	r0, r0
 8040bf8:	ea5f 0c00 	movs.w	ip, r0
 8040bfc:	bf08      	it	eq
 8040bfe:	4770      	bxeq	lr
 8040c00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8040c04:	4601      	mov	r1, r0
 8040c06:	f04f 0000 	mov.w	r0, #0
 8040c0a:	e01c      	b.n	8040c46 <__aeabi_l2f+0x2a>

08040c0c <__aeabi_ul2f>:
 8040c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8040c10:	bf08      	it	eq
 8040c12:	4770      	bxeq	lr
 8040c14:	f04f 0300 	mov.w	r3, #0
 8040c18:	e00a      	b.n	8040c30 <__aeabi_l2f+0x14>
 8040c1a:	bf00      	nop

08040c1c <__aeabi_l2f>:
 8040c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8040c20:	bf08      	it	eq
 8040c22:	4770      	bxeq	lr
 8040c24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8040c28:	d502      	bpl.n	8040c30 <__aeabi_l2f+0x14>
 8040c2a:	4240      	negs	r0, r0
 8040c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040c30:	ea5f 0c01 	movs.w	ip, r1
 8040c34:	bf02      	ittt	eq
 8040c36:	4684      	moveq	ip, r0
 8040c38:	4601      	moveq	r1, r0
 8040c3a:	2000      	moveq	r0, #0
 8040c3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8040c40:	bf08      	it	eq
 8040c42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8040c46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8040c4a:	fabc f28c 	clz	r2, ip
 8040c4e:	3a08      	subs	r2, #8
 8040c50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8040c54:	db10      	blt.n	8040c78 <__aeabi_l2f+0x5c>
 8040c56:	fa01 fc02 	lsl.w	ip, r1, r2
 8040c5a:	4463      	add	r3, ip
 8040c5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8040c60:	f1c2 0220 	rsb	r2, r2, #32
 8040c64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8040c68:	fa20 f202 	lsr.w	r2, r0, r2
 8040c6c:	eb43 0002 	adc.w	r0, r3, r2
 8040c70:	bf08      	it	eq
 8040c72:	f020 0001 	biceq.w	r0, r0, #1
 8040c76:	4770      	bx	lr
 8040c78:	f102 0220 	add.w	r2, r2, #32
 8040c7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8040c80:	f1c2 0220 	rsb	r2, r2, #32
 8040c84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8040c88:	fa21 f202 	lsr.w	r2, r1, r2
 8040c8c:	eb43 0002 	adc.w	r0, r3, r2
 8040c90:	bf08      	it	eq
 8040c92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8040c96:	4770      	bx	lr

08040c98 <__aeabi_fmul>:
 8040c98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040c9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8040ca0:	bf1e      	ittt	ne
 8040ca2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8040ca6:	ea92 0f0c 	teqne	r2, ip
 8040caa:	ea93 0f0c 	teqne	r3, ip
 8040cae:	d06f      	beq.n	8040d90 <__aeabi_fmul+0xf8>
 8040cb0:	441a      	add	r2, r3
 8040cb2:	ea80 0c01 	eor.w	ip, r0, r1
 8040cb6:	0240      	lsls	r0, r0, #9
 8040cb8:	bf18      	it	ne
 8040cba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8040cbe:	d01e      	beq.n	8040cfe <__aeabi_fmul+0x66>
 8040cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8040cc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8040cc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8040ccc:	fba0 3101 	umull	r3, r1, r0, r1
 8040cd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8040cd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8040cd8:	bf3e      	ittt	cc
 8040cda:	0049      	lslcc	r1, r1, #1
 8040cdc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8040ce0:	005b      	lslcc	r3, r3, #1
 8040ce2:	ea40 0001 	orr.w	r0, r0, r1
 8040ce6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8040cea:	2afd      	cmp	r2, #253	; 0xfd
 8040cec:	d81d      	bhi.n	8040d2a <__aeabi_fmul+0x92>
 8040cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8040cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8040cf6:	bf08      	it	eq
 8040cf8:	f020 0001 	biceq.w	r0, r0, #1
 8040cfc:	4770      	bx	lr
 8040cfe:	f090 0f00 	teq	r0, #0
 8040d02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8040d06:	bf08      	it	eq
 8040d08:	0249      	lsleq	r1, r1, #9
 8040d0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8040d0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8040d12:	3a7f      	subs	r2, #127	; 0x7f
 8040d14:	bfc2      	ittt	gt
 8040d16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8040d1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8040d1e:	4770      	bxgt	lr
 8040d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040d24:	f04f 0300 	mov.w	r3, #0
 8040d28:	3a01      	subs	r2, #1
 8040d2a:	dc5d      	bgt.n	8040de8 <__aeabi_fmul+0x150>
 8040d2c:	f112 0f19 	cmn.w	r2, #25
 8040d30:	bfdc      	itt	le
 8040d32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8040d36:	4770      	bxle	lr
 8040d38:	f1c2 0200 	rsb	r2, r2, #0
 8040d3c:	0041      	lsls	r1, r0, #1
 8040d3e:	fa21 f102 	lsr.w	r1, r1, r2
 8040d42:	f1c2 0220 	rsb	r2, r2, #32
 8040d46:	fa00 fc02 	lsl.w	ip, r0, r2
 8040d4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8040d4e:	f140 0000 	adc.w	r0, r0, #0
 8040d52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8040d56:	bf08      	it	eq
 8040d58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8040d5c:	4770      	bx	lr
 8040d5e:	f092 0f00 	teq	r2, #0
 8040d62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8040d66:	bf02      	ittt	eq
 8040d68:	0040      	lsleq	r0, r0, #1
 8040d6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8040d6e:	3a01      	subeq	r2, #1
 8040d70:	d0f9      	beq.n	8040d66 <__aeabi_fmul+0xce>
 8040d72:	ea40 000c 	orr.w	r0, r0, ip
 8040d76:	f093 0f00 	teq	r3, #0
 8040d7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040d7e:	bf02      	ittt	eq
 8040d80:	0049      	lsleq	r1, r1, #1
 8040d82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8040d86:	3b01      	subeq	r3, #1
 8040d88:	d0f9      	beq.n	8040d7e <__aeabi_fmul+0xe6>
 8040d8a:	ea41 010c 	orr.w	r1, r1, ip
 8040d8e:	e78f      	b.n	8040cb0 <__aeabi_fmul+0x18>
 8040d90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8040d94:	ea92 0f0c 	teq	r2, ip
 8040d98:	bf18      	it	ne
 8040d9a:	ea93 0f0c 	teqne	r3, ip
 8040d9e:	d00a      	beq.n	8040db6 <__aeabi_fmul+0x11e>
 8040da0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8040da4:	bf18      	it	ne
 8040da6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8040daa:	d1d8      	bne.n	8040d5e <__aeabi_fmul+0xc6>
 8040dac:	ea80 0001 	eor.w	r0, r0, r1
 8040db0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8040db4:	4770      	bx	lr
 8040db6:	f090 0f00 	teq	r0, #0
 8040dba:	bf17      	itett	ne
 8040dbc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8040dc0:	4608      	moveq	r0, r1
 8040dc2:	f091 0f00 	teqne	r1, #0
 8040dc6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8040dca:	d014      	beq.n	8040df6 <__aeabi_fmul+0x15e>
 8040dcc:	ea92 0f0c 	teq	r2, ip
 8040dd0:	d101      	bne.n	8040dd6 <__aeabi_fmul+0x13e>
 8040dd2:	0242      	lsls	r2, r0, #9
 8040dd4:	d10f      	bne.n	8040df6 <__aeabi_fmul+0x15e>
 8040dd6:	ea93 0f0c 	teq	r3, ip
 8040dda:	d103      	bne.n	8040de4 <__aeabi_fmul+0x14c>
 8040ddc:	024b      	lsls	r3, r1, #9
 8040dde:	bf18      	it	ne
 8040de0:	4608      	movne	r0, r1
 8040de2:	d108      	bne.n	8040df6 <__aeabi_fmul+0x15e>
 8040de4:	ea80 0001 	eor.w	r0, r0, r1
 8040de8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8040dec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040df0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040df4:	4770      	bx	lr
 8040df6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040dfa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8040dfe:	4770      	bx	lr

08040e00 <__aeabi_fdiv>:
 8040e00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040e04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8040e08:	bf1e      	ittt	ne
 8040e0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8040e0e:	ea92 0f0c 	teqne	r2, ip
 8040e12:	ea93 0f0c 	teqne	r3, ip
 8040e16:	d069      	beq.n	8040eec <__aeabi_fdiv+0xec>
 8040e18:	eba2 0203 	sub.w	r2, r2, r3
 8040e1c:	ea80 0c01 	eor.w	ip, r0, r1
 8040e20:	0249      	lsls	r1, r1, #9
 8040e22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8040e26:	d037      	beq.n	8040e98 <__aeabi_fdiv+0x98>
 8040e28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8040e2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8040e30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8040e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8040e38:	428b      	cmp	r3, r1
 8040e3a:	bf38      	it	cc
 8040e3c:	005b      	lslcc	r3, r3, #1
 8040e3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8040e42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8040e46:	428b      	cmp	r3, r1
 8040e48:	bf24      	itt	cs
 8040e4a:	1a5b      	subcs	r3, r3, r1
 8040e4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8040e50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8040e54:	bf24      	itt	cs
 8040e56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8040e5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040e5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8040e62:	bf24      	itt	cs
 8040e64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8040e68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040e6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8040e70:	bf24      	itt	cs
 8040e72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8040e76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040e7a:	011b      	lsls	r3, r3, #4
 8040e7c:	bf18      	it	ne
 8040e7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8040e82:	d1e0      	bne.n	8040e46 <__aeabi_fdiv+0x46>
 8040e84:	2afd      	cmp	r2, #253	; 0xfd
 8040e86:	f63f af50 	bhi.w	8040d2a <__aeabi_fmul+0x92>
 8040e8a:	428b      	cmp	r3, r1
 8040e8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8040e90:	bf08      	it	eq
 8040e92:	f020 0001 	biceq.w	r0, r0, #1
 8040e96:	4770      	bx	lr
 8040e98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8040e9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8040ea0:	327f      	adds	r2, #127	; 0x7f
 8040ea2:	bfc2      	ittt	gt
 8040ea4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8040ea8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8040eac:	4770      	bxgt	lr
 8040eae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040eb2:	f04f 0300 	mov.w	r3, #0
 8040eb6:	3a01      	subs	r2, #1
 8040eb8:	e737      	b.n	8040d2a <__aeabi_fmul+0x92>
 8040eba:	f092 0f00 	teq	r2, #0
 8040ebe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8040ec2:	bf02      	ittt	eq
 8040ec4:	0040      	lsleq	r0, r0, #1
 8040ec6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8040eca:	3a01      	subeq	r2, #1
 8040ecc:	d0f9      	beq.n	8040ec2 <__aeabi_fdiv+0xc2>
 8040ece:	ea40 000c 	orr.w	r0, r0, ip
 8040ed2:	f093 0f00 	teq	r3, #0
 8040ed6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040eda:	bf02      	ittt	eq
 8040edc:	0049      	lsleq	r1, r1, #1
 8040ede:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8040ee2:	3b01      	subeq	r3, #1
 8040ee4:	d0f9      	beq.n	8040eda <__aeabi_fdiv+0xda>
 8040ee6:	ea41 010c 	orr.w	r1, r1, ip
 8040eea:	e795      	b.n	8040e18 <__aeabi_fdiv+0x18>
 8040eec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8040ef0:	ea92 0f0c 	teq	r2, ip
 8040ef4:	d108      	bne.n	8040f08 <__aeabi_fdiv+0x108>
 8040ef6:	0242      	lsls	r2, r0, #9
 8040ef8:	f47f af7d 	bne.w	8040df6 <__aeabi_fmul+0x15e>
 8040efc:	ea93 0f0c 	teq	r3, ip
 8040f00:	f47f af70 	bne.w	8040de4 <__aeabi_fmul+0x14c>
 8040f04:	4608      	mov	r0, r1
 8040f06:	e776      	b.n	8040df6 <__aeabi_fmul+0x15e>
 8040f08:	ea93 0f0c 	teq	r3, ip
 8040f0c:	d104      	bne.n	8040f18 <__aeabi_fdiv+0x118>
 8040f0e:	024b      	lsls	r3, r1, #9
 8040f10:	f43f af4c 	beq.w	8040dac <__aeabi_fmul+0x114>
 8040f14:	4608      	mov	r0, r1
 8040f16:	e76e      	b.n	8040df6 <__aeabi_fmul+0x15e>
 8040f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8040f1c:	bf18      	it	ne
 8040f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8040f22:	d1ca      	bne.n	8040eba <__aeabi_fdiv+0xba>
 8040f24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8040f28:	f47f af5c 	bne.w	8040de4 <__aeabi_fmul+0x14c>
 8040f2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8040f30:	f47f af3c 	bne.w	8040dac <__aeabi_fmul+0x114>
 8040f34:	e75f      	b.n	8040df6 <__aeabi_fmul+0x15e>
 8040f36:	bf00      	nop

08040f38 <__aeabi_uldivmod>:
 8040f38:	b94b      	cbnz	r3, 8040f4e <__aeabi_uldivmod+0x16>
 8040f3a:	b942      	cbnz	r2, 8040f4e <__aeabi_uldivmod+0x16>
 8040f3c:	2900      	cmp	r1, #0
 8040f3e:	bf08      	it	eq
 8040f40:	2800      	cmpeq	r0, #0
 8040f42:	d002      	beq.n	8040f4a <__aeabi_uldivmod+0x12>
 8040f44:	f04f 31ff 	mov.w	r1, #4294967295
 8040f48:	4608      	mov	r0, r1
 8040f4a:	f000 b83b 	b.w	8040fc4 <__aeabi_idiv0>
 8040f4e:	b082      	sub	sp, #8
 8040f50:	46ec      	mov	ip, sp
 8040f52:	e92d 5000 	stmdb	sp!, {ip, lr}
 8040f56:	f000 f81d 	bl	8040f94 <__gnu_uldivmod_helper>
 8040f5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040f5e:	b002      	add	sp, #8
 8040f60:	bc0c      	pop	{r2, r3}
 8040f62:	4770      	bx	lr

08040f64 <__gnu_ldivmod_helper>:
 8040f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8040f68:	4616      	mov	r6, r2
 8040f6a:	4698      	mov	r8, r3
 8040f6c:	4604      	mov	r4, r0
 8040f6e:	460d      	mov	r5, r1
 8040f70:	f000 f82a 	bl	8040fc8 <__divdi3>
 8040f74:	fb06 fc01 	mul.w	ip, r6, r1
 8040f78:	fba6 2300 	umull	r2, r3, r6, r0
 8040f7c:	fb00 c708 	mla	r7, r0, r8, ip
 8040f80:	18fb      	adds	r3, r7, r3
 8040f82:	1aa2      	subs	r2, r4, r2
 8040f84:	eb65 0303 	sbc.w	r3, r5, r3
 8040f88:	9c06      	ldr	r4, [sp, #24]
 8040f8a:	e9c4 2300 	strd	r2, r3, [r4]
 8040f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8040f92:	bf00      	nop

08040f94 <__gnu_uldivmod_helper>:
 8040f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8040f98:	4690      	mov	r8, r2
 8040f9a:	4606      	mov	r6, r0
 8040f9c:	460f      	mov	r7, r1
 8040f9e:	461d      	mov	r5, r3
 8040fa0:	f000 f970 	bl	8041284 <__udivdi3>
 8040fa4:	fb00 f305 	mul.w	r3, r0, r5
 8040fa8:	fba0 4508 	umull	r4, r5, r0, r8
 8040fac:	fb08 3801 	mla	r8, r8, r1, r3
 8040fb0:	9b06      	ldr	r3, [sp, #24]
 8040fb2:	4445      	add	r5, r8
 8040fb4:	1b34      	subs	r4, r6, r4
 8040fb6:	eb67 0505 	sbc.w	r5, r7, r5
 8040fba:	e9c3 4500 	strd	r4, r5, [r3]
 8040fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8040fc2:	bf00      	nop

08040fc4 <__aeabi_idiv0>:
 8040fc4:	4770      	bx	lr
 8040fc6:	bf00      	nop

08040fc8 <__divdi3>:
 8040fc8:	2900      	cmp	r1, #0
 8040fca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8040fce:	461d      	mov	r5, r3
 8040fd0:	f2c0 809d 	blt.w	804110e <__divdi3+0x146>
 8040fd4:	2400      	movs	r4, #0
 8040fd6:	2d00      	cmp	r5, #0
 8040fd8:	f2c0 8094 	blt.w	8041104 <__divdi3+0x13c>
 8040fdc:	4680      	mov	r8, r0
 8040fde:	460f      	mov	r7, r1
 8040fe0:	4694      	mov	ip, r2
 8040fe2:	461e      	mov	r6, r3
 8040fe4:	bbe3      	cbnz	r3, 8041060 <__divdi3+0x98>
 8040fe6:	428a      	cmp	r2, r1
 8040fe8:	d955      	bls.n	8041096 <__divdi3+0xce>
 8040fea:	fab2 f782 	clz	r7, r2
 8040fee:	b147      	cbz	r7, 8041002 <__divdi3+0x3a>
 8040ff0:	f1c7 0520 	rsb	r5, r7, #32
 8040ff4:	fa20 f605 	lsr.w	r6, r0, r5
 8040ff8:	fa01 f107 	lsl.w	r1, r1, r7
 8040ffc:	40ba      	lsls	r2, r7
 8040ffe:	40b8      	lsls	r0, r7
 8041000:	4331      	orrs	r1, r6
 8041002:	0c17      	lsrs	r7, r2, #16
 8041004:	fbb1 f6f7 	udiv	r6, r1, r7
 8041008:	fa1f fc82 	uxth.w	ip, r2
 804100c:	fb07 1116 	mls	r1, r7, r6, r1
 8041010:	fb0c f506 	mul.w	r5, ip, r6
 8041014:	0c03      	lsrs	r3, r0, #16
 8041016:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804101a:	429d      	cmp	r5, r3
 804101c:	d908      	bls.n	8041030 <__divdi3+0x68>
 804101e:	1e71      	subs	r1, r6, #1
 8041020:	189b      	adds	r3, r3, r2
 8041022:	f080 8113 	bcs.w	804124c <__divdi3+0x284>
 8041026:	429d      	cmp	r5, r3
 8041028:	f240 8110 	bls.w	804124c <__divdi3+0x284>
 804102c:	3e02      	subs	r6, #2
 804102e:	189b      	adds	r3, r3, r2
 8041030:	1b59      	subs	r1, r3, r5
 8041032:	fbb1 f5f7 	udiv	r5, r1, r7
 8041036:	fb07 1315 	mls	r3, r7, r5, r1
 804103a:	fb0c fc05 	mul.w	ip, ip, r5
 804103e:	b280      	uxth	r0, r0
 8041040:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8041044:	458c      	cmp	ip, r1
 8041046:	d907      	bls.n	8041058 <__divdi3+0x90>
 8041048:	1e6b      	subs	r3, r5, #1
 804104a:	188a      	adds	r2, r1, r2
 804104c:	f080 8100 	bcs.w	8041250 <__divdi3+0x288>
 8041050:	4594      	cmp	ip, r2
 8041052:	f240 80fd 	bls.w	8041250 <__divdi3+0x288>
 8041056:	3d02      	subs	r5, #2
 8041058:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 804105c:	2500      	movs	r5, #0
 804105e:	e003      	b.n	8041068 <__divdi3+0xa0>
 8041060:	428b      	cmp	r3, r1
 8041062:	d90c      	bls.n	804107e <__divdi3+0xb6>
 8041064:	2500      	movs	r5, #0
 8041066:	4629      	mov	r1, r5
 8041068:	460a      	mov	r2, r1
 804106a:	462b      	mov	r3, r5
 804106c:	b114      	cbz	r4, 8041074 <__divdi3+0xac>
 804106e:	4252      	negs	r2, r2
 8041070:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8041074:	4610      	mov	r0, r2
 8041076:	4619      	mov	r1, r3
 8041078:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 804107c:	4770      	bx	lr
 804107e:	fab3 f583 	clz	r5, r3
 8041082:	2d00      	cmp	r5, #0
 8041084:	f040 8087 	bne.w	8041196 <__divdi3+0x1ce>
 8041088:	428b      	cmp	r3, r1
 804108a:	d301      	bcc.n	8041090 <__divdi3+0xc8>
 804108c:	4282      	cmp	r2, r0
 804108e:	d8ea      	bhi.n	8041066 <__divdi3+0x9e>
 8041090:	2500      	movs	r5, #0
 8041092:	2101      	movs	r1, #1
 8041094:	e7e8      	b.n	8041068 <__divdi3+0xa0>
 8041096:	b912      	cbnz	r2, 804109e <__divdi3+0xd6>
 8041098:	2601      	movs	r6, #1
 804109a:	fbb6 f2f2 	udiv	r2, r6, r2
 804109e:	fab2 f682 	clz	r6, r2
 80410a2:	2e00      	cmp	r6, #0
 80410a4:	d139      	bne.n	804111a <__divdi3+0x152>
 80410a6:	1a8e      	subs	r6, r1, r2
 80410a8:	0c13      	lsrs	r3, r2, #16
 80410aa:	fa1f fc82 	uxth.w	ip, r2
 80410ae:	2501      	movs	r5, #1
 80410b0:	fbb6 f7f3 	udiv	r7, r6, r3
 80410b4:	fb03 6117 	mls	r1, r3, r7, r6
 80410b8:	fb0c f807 	mul.w	r8, ip, r7
 80410bc:	ea4f 4910 	mov.w	r9, r0, lsr #16
 80410c0:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 80410c4:	45b0      	cmp	r8, r6
 80410c6:	d906      	bls.n	80410d6 <__divdi3+0x10e>
 80410c8:	1e79      	subs	r1, r7, #1
 80410ca:	18b6      	adds	r6, r6, r2
 80410cc:	d202      	bcs.n	80410d4 <__divdi3+0x10c>
 80410ce:	45b0      	cmp	r8, r6
 80410d0:	f200 80d3 	bhi.w	804127a <__divdi3+0x2b2>
 80410d4:	460f      	mov	r7, r1
 80410d6:	ebc8 0606 	rsb	r6, r8, r6
 80410da:	fbb6 f1f3 	udiv	r1, r6, r3
 80410de:	fb03 6311 	mls	r3, r3, r1, r6
 80410e2:	fb0c fc01 	mul.w	ip, ip, r1
 80410e6:	b280      	uxth	r0, r0
 80410e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80410ec:	459c      	cmp	ip, r3
 80410ee:	d906      	bls.n	80410fe <__divdi3+0x136>
 80410f0:	1e4e      	subs	r6, r1, #1
 80410f2:	189a      	adds	r2, r3, r2
 80410f4:	d202      	bcs.n	80410fc <__divdi3+0x134>
 80410f6:	4594      	cmp	ip, r2
 80410f8:	f200 80c2 	bhi.w	8041280 <__divdi3+0x2b8>
 80410fc:	4631      	mov	r1, r6
 80410fe:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8041102:	e7b1      	b.n	8041068 <__divdi3+0xa0>
 8041104:	43e4      	mvns	r4, r4
 8041106:	4252      	negs	r2, r2
 8041108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 804110c:	e766      	b.n	8040fdc <__divdi3+0x14>
 804110e:	4240      	negs	r0, r0
 8041110:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8041114:	f04f 34ff 	mov.w	r4, #4294967295
 8041118:	e75d      	b.n	8040fd6 <__divdi3+0xe>
 804111a:	40b2      	lsls	r2, r6
 804111c:	f1c6 0920 	rsb	r9, r6, #32
 8041120:	fa21 f709 	lsr.w	r7, r1, r9
 8041124:	fa20 f909 	lsr.w	r9, r0, r9
 8041128:	fa01 f106 	lsl.w	r1, r1, r6
 804112c:	0c13      	lsrs	r3, r2, #16
 804112e:	fbb7 f8f3 	udiv	r8, r7, r3
 8041132:	fa1f fc82 	uxth.w	ip, r2
 8041136:	fb03 7718 	mls	r7, r3, r8, r7
 804113a:	fb0c f508 	mul.w	r5, ip, r8
 804113e:	ea49 0901 	orr.w	r9, r9, r1
 8041142:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8041146:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 804114a:	40b0      	lsls	r0, r6
 804114c:	42bd      	cmp	r5, r7
 804114e:	d90a      	bls.n	8041166 <__divdi3+0x19e>
 8041150:	18bf      	adds	r7, r7, r2
 8041152:	f108 36ff 	add.w	r6, r8, #4294967295
 8041156:	f080 808e 	bcs.w	8041276 <__divdi3+0x2ae>
 804115a:	42bd      	cmp	r5, r7
 804115c:	f240 808b 	bls.w	8041276 <__divdi3+0x2ae>
 8041160:	f1a8 0802 	sub.w	r8, r8, #2
 8041164:	18bf      	adds	r7, r7, r2
 8041166:	1b79      	subs	r1, r7, r5
 8041168:	fbb1 f5f3 	udiv	r5, r1, r3
 804116c:	fb03 1715 	mls	r7, r3, r5, r1
 8041170:	fb0c f605 	mul.w	r6, ip, r5
 8041174:	fa1f f989 	uxth.w	r9, r9
 8041178:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 804117c:	428e      	cmp	r6, r1
 804117e:	d906      	bls.n	804118e <__divdi3+0x1c6>
 8041180:	1e6f      	subs	r7, r5, #1
 8041182:	1889      	adds	r1, r1, r2
 8041184:	d271      	bcs.n	804126a <__divdi3+0x2a2>
 8041186:	428e      	cmp	r6, r1
 8041188:	d96f      	bls.n	804126a <__divdi3+0x2a2>
 804118a:	3d02      	subs	r5, #2
 804118c:	1889      	adds	r1, r1, r2
 804118e:	1b8e      	subs	r6, r1, r6
 8041190:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8041194:	e78c      	b.n	80410b0 <__divdi3+0xe8>
 8041196:	f1c5 0120 	rsb	r1, r5, #32
 804119a:	fa22 f301 	lsr.w	r3, r2, r1
 804119e:	fa06 f605 	lsl.w	r6, r6, r5
 80411a2:	fa27 f201 	lsr.w	r2, r7, r1
 80411a6:	fa07 f705 	lsl.w	r7, r7, r5
 80411aa:	fa20 f101 	lsr.w	r1, r0, r1
 80411ae:	431e      	orrs	r6, r3
 80411b0:	ea4f 4916 	mov.w	r9, r6, lsr #16
 80411b4:	fbb2 f8f9 	udiv	r8, r2, r9
 80411b8:	fa1f fa86 	uxth.w	sl, r6
 80411bc:	fb09 2218 	mls	r2, r9, r8, r2
 80411c0:	fb0a fb08 	mul.w	fp, sl, r8
 80411c4:	430f      	orrs	r7, r1
 80411c6:	0c3b      	lsrs	r3, r7, #16
 80411c8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80411cc:	4593      	cmp	fp, r2
 80411ce:	fa0c fc05 	lsl.w	ip, ip, r5
 80411d2:	d908      	bls.n	80411e6 <__divdi3+0x21e>
 80411d4:	1992      	adds	r2, r2, r6
 80411d6:	f108 31ff 	add.w	r1, r8, #4294967295
 80411da:	d24a      	bcs.n	8041272 <__divdi3+0x2aa>
 80411dc:	4593      	cmp	fp, r2
 80411de:	d948      	bls.n	8041272 <__divdi3+0x2aa>
 80411e0:	f1a8 0802 	sub.w	r8, r8, #2
 80411e4:	1992      	adds	r2, r2, r6
 80411e6:	ebcb 0302 	rsb	r3, fp, r2
 80411ea:	fbb3 f1f9 	udiv	r1, r3, r9
 80411ee:	fb09 3211 	mls	r2, r9, r1, r3
 80411f2:	fb0a fa01 	mul.w	sl, sl, r1
 80411f6:	b2bf      	uxth	r7, r7
 80411f8:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 80411fc:	459a      	cmp	sl, r3
 80411fe:	d906      	bls.n	804120e <__divdi3+0x246>
 8041200:	1e4a      	subs	r2, r1, #1
 8041202:	199b      	adds	r3, r3, r6
 8041204:	d233      	bcs.n	804126e <__divdi3+0x2a6>
 8041206:	459a      	cmp	sl, r3
 8041208:	d931      	bls.n	804126e <__divdi3+0x2a6>
 804120a:	3902      	subs	r1, #2
 804120c:	199b      	adds	r3, r3, r6
 804120e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8041212:	0c0f      	lsrs	r7, r1, #16
 8041214:	fa1f f88c 	uxth.w	r8, ip
 8041218:	fb08 f607 	mul.w	r6, r8, r7
 804121c:	b28a      	uxth	r2, r1
 804121e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8041222:	fb08 f802 	mul.w	r8, r8, r2
 8041226:	fb0c 6202 	mla	r2, ip, r2, r6
 804122a:	fb0c fc07 	mul.w	ip, ip, r7
 804122e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8041232:	4296      	cmp	r6, r2
 8041234:	bf88      	it	hi
 8041236:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 804123a:	ebca 0303 	rsb	r3, sl, r3
 804123e:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 8041242:	4563      	cmp	r3, ip
 8041244:	d30e      	bcc.n	8041264 <__divdi3+0x29c>
 8041246:	d005      	beq.n	8041254 <__divdi3+0x28c>
 8041248:	2500      	movs	r5, #0
 804124a:	e70d      	b.n	8041068 <__divdi3+0xa0>
 804124c:	460e      	mov	r6, r1
 804124e:	e6ef      	b.n	8041030 <__divdi3+0x68>
 8041250:	461d      	mov	r5, r3
 8041252:	e701      	b.n	8041058 <__divdi3+0x90>
 8041254:	fa00 f005 	lsl.w	r0, r0, r5
 8041258:	fa1f f888 	uxth.w	r8, r8
 804125c:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 8041260:	42a8      	cmp	r0, r5
 8041262:	d2f1      	bcs.n	8041248 <__divdi3+0x280>
 8041264:	3901      	subs	r1, #1
 8041266:	2500      	movs	r5, #0
 8041268:	e6fe      	b.n	8041068 <__divdi3+0xa0>
 804126a:	463d      	mov	r5, r7
 804126c:	e78f      	b.n	804118e <__divdi3+0x1c6>
 804126e:	4611      	mov	r1, r2
 8041270:	e7cd      	b.n	804120e <__divdi3+0x246>
 8041272:	4688      	mov	r8, r1
 8041274:	e7b7      	b.n	80411e6 <__divdi3+0x21e>
 8041276:	46b0      	mov	r8, r6
 8041278:	e775      	b.n	8041166 <__divdi3+0x19e>
 804127a:	3f02      	subs	r7, #2
 804127c:	18b6      	adds	r6, r6, r2
 804127e:	e72a      	b.n	80410d6 <__divdi3+0x10e>
 8041280:	3902      	subs	r1, #2
 8041282:	e73c      	b.n	80410fe <__divdi3+0x136>

08041284 <__udivdi3>:
 8041284:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8041288:	4614      	mov	r4, r2
 804128a:	4605      	mov	r5, r0
 804128c:	460e      	mov	r6, r1
 804128e:	2b00      	cmp	r3, #0
 8041290:	d13d      	bne.n	804130e <__udivdi3+0x8a>
 8041292:	428a      	cmp	r2, r1
 8041294:	d949      	bls.n	804132a <__udivdi3+0xa6>
 8041296:	fab2 f782 	clz	r7, r2
 804129a:	b147      	cbz	r7, 80412ae <__udivdi3+0x2a>
 804129c:	f1c7 0120 	rsb	r1, r7, #32
 80412a0:	fa20 f201 	lsr.w	r2, r0, r1
 80412a4:	fa06 f607 	lsl.w	r6, r6, r7
 80412a8:	40bc      	lsls	r4, r7
 80412aa:	40bd      	lsls	r5, r7
 80412ac:	4316      	orrs	r6, r2
 80412ae:	0c22      	lsrs	r2, r4, #16
 80412b0:	fbb6 f0f2 	udiv	r0, r6, r2
 80412b4:	b2a1      	uxth	r1, r4
 80412b6:	fb02 6610 	mls	r6, r2, r0, r6
 80412ba:	fb01 f300 	mul.w	r3, r1, r0
 80412be:	0c2f      	lsrs	r7, r5, #16
 80412c0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80412c4:	42b3      	cmp	r3, r6
 80412c6:	d908      	bls.n	80412da <__udivdi3+0x56>
 80412c8:	1e47      	subs	r7, r0, #1
 80412ca:	1936      	adds	r6, r6, r4
 80412cc:	f080 80fa 	bcs.w	80414c4 <__udivdi3+0x240>
 80412d0:	42b3      	cmp	r3, r6
 80412d2:	f240 80f7 	bls.w	80414c4 <__udivdi3+0x240>
 80412d6:	3802      	subs	r0, #2
 80412d8:	1936      	adds	r6, r6, r4
 80412da:	1af6      	subs	r6, r6, r3
 80412dc:	fbb6 f3f2 	udiv	r3, r6, r2
 80412e0:	fb02 6213 	mls	r2, r2, r3, r6
 80412e4:	fb01 f103 	mul.w	r1, r1, r3
 80412e8:	b2ad      	uxth	r5, r5
 80412ea:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80412ee:	4291      	cmp	r1, r2
 80412f0:	d907      	bls.n	8041302 <__udivdi3+0x7e>
 80412f2:	1e5e      	subs	r6, r3, #1
 80412f4:	1912      	adds	r2, r2, r4
 80412f6:	f080 80e7 	bcs.w	80414c8 <__udivdi3+0x244>
 80412fa:	4291      	cmp	r1, r2
 80412fc:	f240 80e4 	bls.w	80414c8 <__udivdi3+0x244>
 8041300:	3b02      	subs	r3, #2
 8041302:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8041306:	2100      	movs	r1, #0
 8041308:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 804130c:	4770      	bx	lr
 804130e:	428b      	cmp	r3, r1
 8041310:	d843      	bhi.n	804139a <__udivdi3+0x116>
 8041312:	fab3 f483 	clz	r4, r3
 8041316:	2c00      	cmp	r4, #0
 8041318:	d142      	bne.n	80413a0 <__udivdi3+0x11c>
 804131a:	428b      	cmp	r3, r1
 804131c:	d302      	bcc.n	8041324 <__udivdi3+0xa0>
 804131e:	4282      	cmp	r2, r0
 8041320:	f200 80e1 	bhi.w	80414e6 <__udivdi3+0x262>
 8041324:	2100      	movs	r1, #0
 8041326:	2001      	movs	r0, #1
 8041328:	e7ee      	b.n	8041308 <__udivdi3+0x84>
 804132a:	b912      	cbnz	r2, 8041332 <__udivdi3+0xae>
 804132c:	2701      	movs	r7, #1
 804132e:	fbb7 f4f2 	udiv	r4, r7, r2
 8041332:	fab4 f284 	clz	r2, r4
 8041336:	2a00      	cmp	r2, #0
 8041338:	f040 8089 	bne.w	804144e <__udivdi3+0x1ca>
 804133c:	1b0a      	subs	r2, r1, r4
 804133e:	0c23      	lsrs	r3, r4, #16
 8041340:	b2a7      	uxth	r7, r4
 8041342:	2101      	movs	r1, #1
 8041344:	fbb2 f6f3 	udiv	r6, r2, r3
 8041348:	fb03 2216 	mls	r2, r3, r6, r2
 804134c:	fb07 f006 	mul.w	r0, r7, r6
 8041350:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8041354:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 8041358:	4290      	cmp	r0, r2
 804135a:	d907      	bls.n	804136c <__udivdi3+0xe8>
 804135c:	1912      	adds	r2, r2, r4
 804135e:	f106 3cff 	add.w	ip, r6, #4294967295
 8041362:	d202      	bcs.n	804136a <__udivdi3+0xe6>
 8041364:	4290      	cmp	r0, r2
 8041366:	f200 80d0 	bhi.w	804150a <__udivdi3+0x286>
 804136a:	4666      	mov	r6, ip
 804136c:	1a12      	subs	r2, r2, r0
 804136e:	fbb2 f0f3 	udiv	r0, r2, r3
 8041372:	fb03 2310 	mls	r3, r3, r0, r2
 8041376:	fb07 f700 	mul.w	r7, r7, r0
 804137a:	b2ad      	uxth	r5, r5
 804137c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8041380:	429f      	cmp	r7, r3
 8041382:	d907      	bls.n	8041394 <__udivdi3+0x110>
 8041384:	1e42      	subs	r2, r0, #1
 8041386:	191b      	adds	r3, r3, r4
 8041388:	f080 80a0 	bcs.w	80414cc <__udivdi3+0x248>
 804138c:	429f      	cmp	r7, r3
 804138e:	f240 809d 	bls.w	80414cc <__udivdi3+0x248>
 8041392:	3802      	subs	r0, #2
 8041394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8041398:	e7b6      	b.n	8041308 <__udivdi3+0x84>
 804139a:	2100      	movs	r1, #0
 804139c:	4608      	mov	r0, r1
 804139e:	e7b3      	b.n	8041308 <__udivdi3+0x84>
 80413a0:	f1c4 0620 	rsb	r6, r4, #32
 80413a4:	fa22 f706 	lsr.w	r7, r2, r6
 80413a8:	fa03 f304 	lsl.w	r3, r3, r4
 80413ac:	fa21 f506 	lsr.w	r5, r1, r6
 80413b0:	fa01 f104 	lsl.w	r1, r1, r4
 80413b4:	fa20 f606 	lsr.w	r6, r0, r6
 80413b8:	433b      	orrs	r3, r7
 80413ba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80413be:	fbb5 f7fc 	udiv	r7, r5, ip
 80413c2:	fa1f f883 	uxth.w	r8, r3
 80413c6:	fb0c 5517 	mls	r5, ip, r7, r5
 80413ca:	fb08 f907 	mul.w	r9, r8, r7
 80413ce:	ea46 0a01 	orr.w	sl, r6, r1
 80413d2:	ea4f 411a 	mov.w	r1, sl, lsr #16
 80413d6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80413da:	45a9      	cmp	r9, r5
 80413dc:	fa02 f204 	lsl.w	r2, r2, r4
 80413e0:	d904      	bls.n	80413ec <__udivdi3+0x168>
 80413e2:	1e7e      	subs	r6, r7, #1
 80413e4:	18ed      	adds	r5, r5, r3
 80413e6:	f0c0 8081 	bcc.w	80414ec <__udivdi3+0x268>
 80413ea:	4637      	mov	r7, r6
 80413ec:	ebc9 0105 	rsb	r1, r9, r5
 80413f0:	fbb1 f6fc 	udiv	r6, r1, ip
 80413f4:	fb0c 1516 	mls	r5, ip, r6, r1
 80413f8:	fb08 f806 	mul.w	r8, r8, r6
 80413fc:	fa1f fa8a 	uxth.w	sl, sl
 8041400:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 8041404:	4588      	cmp	r8, r1
 8041406:	d903      	bls.n	8041410 <__udivdi3+0x18c>
 8041408:	1e75      	subs	r5, r6, #1
 804140a:	18c9      	adds	r1, r1, r3
 804140c:	d374      	bcc.n	80414f8 <__udivdi3+0x274>
 804140e:	462e      	mov	r6, r5
 8041410:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8041414:	0c37      	lsrs	r7, r6, #16
 8041416:	fa1f fc82 	uxth.w	ip, r2
 804141a:	fb0c f507 	mul.w	r5, ip, r7
 804141e:	0c12      	lsrs	r2, r2, #16
 8041420:	b2b3      	uxth	r3, r6
 8041422:	fb0c fc03 	mul.w	ip, ip, r3
 8041426:	fb02 5303 	mla	r3, r2, r3, r5
 804142a:	fb02 f207 	mul.w	r2, r2, r7
 804142e:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 8041432:	429d      	cmp	r5, r3
 8041434:	bf88      	it	hi
 8041436:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 804143a:	ebc8 0101 	rsb	r1, r8, r1
 804143e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8041442:	4291      	cmp	r1, r2
 8041444:	d34c      	bcc.n	80414e0 <__udivdi3+0x25c>
 8041446:	d043      	beq.n	80414d0 <__udivdi3+0x24c>
 8041448:	4630      	mov	r0, r6
 804144a:	2100      	movs	r1, #0
 804144c:	e75c      	b.n	8041308 <__udivdi3+0x84>
 804144e:	4094      	lsls	r4, r2
 8041450:	f1c2 0520 	rsb	r5, r2, #32
 8041454:	fa21 f605 	lsr.w	r6, r1, r5
 8041458:	fa20 f505 	lsr.w	r5, r0, r5
 804145c:	fa01 f102 	lsl.w	r1, r1, r2
 8041460:	0c23      	lsrs	r3, r4, #16
 8041462:	fbb6 fcf3 	udiv	ip, r6, r3
 8041466:	b2a7      	uxth	r7, r4
 8041468:	fb03 661c 	mls	r6, r3, ip, r6
 804146c:	fb07 f80c 	mul.w	r8, r7, ip
 8041470:	4329      	orrs	r1, r5
 8041472:	0c0d      	lsrs	r5, r1, #16
 8041474:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8041478:	45b0      	cmp	r8, r6
 804147a:	fa00 f502 	lsl.w	r5, r0, r2
 804147e:	d908      	bls.n	8041492 <__udivdi3+0x20e>
 8041480:	1936      	adds	r6, r6, r4
 8041482:	f10c 30ff 	add.w	r0, ip, #4294967295
 8041486:	d23e      	bcs.n	8041506 <__udivdi3+0x282>
 8041488:	45b0      	cmp	r8, r6
 804148a:	d93c      	bls.n	8041506 <__udivdi3+0x282>
 804148c:	f1ac 0c02 	sub.w	ip, ip, #2
 8041490:	1936      	adds	r6, r6, r4
 8041492:	ebc8 0206 	rsb	r2, r8, r6
 8041496:	fbb2 f0f3 	udiv	r0, r2, r3
 804149a:	fb03 2610 	mls	r6, r3, r0, r2
 804149e:	fb07 f800 	mul.w	r8, r7, r0
 80414a2:	b289      	uxth	r1, r1
 80414a4:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 80414a8:	4590      	cmp	r8, r2
 80414aa:	d906      	bls.n	80414ba <__udivdi3+0x236>
 80414ac:	1e46      	subs	r6, r0, #1
 80414ae:	1912      	adds	r2, r2, r4
 80414b0:	d227      	bcs.n	8041502 <__udivdi3+0x27e>
 80414b2:	4590      	cmp	r8, r2
 80414b4:	d925      	bls.n	8041502 <__udivdi3+0x27e>
 80414b6:	3802      	subs	r0, #2
 80414b8:	1912      	adds	r2, r2, r4
 80414ba:	ebc8 0202 	rsb	r2, r8, r2
 80414be:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 80414c2:	e73f      	b.n	8041344 <__udivdi3+0xc0>
 80414c4:	4638      	mov	r0, r7
 80414c6:	e708      	b.n	80412da <__udivdi3+0x56>
 80414c8:	4633      	mov	r3, r6
 80414ca:	e71a      	b.n	8041302 <__udivdi3+0x7e>
 80414cc:	4610      	mov	r0, r2
 80414ce:	e761      	b.n	8041394 <__udivdi3+0x110>
 80414d0:	fa00 f004 	lsl.w	r0, r0, r4
 80414d4:	fa1f fc8c 	uxth.w	ip, ip
 80414d8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 80414dc:	4298      	cmp	r0, r3
 80414de:	d2b3      	bcs.n	8041448 <__udivdi3+0x1c4>
 80414e0:	1e70      	subs	r0, r6, #1
 80414e2:	2100      	movs	r1, #0
 80414e4:	e710      	b.n	8041308 <__udivdi3+0x84>
 80414e6:	4621      	mov	r1, r4
 80414e8:	4620      	mov	r0, r4
 80414ea:	e70d      	b.n	8041308 <__udivdi3+0x84>
 80414ec:	45a9      	cmp	r9, r5
 80414ee:	f67f af7c 	bls.w	80413ea <__udivdi3+0x166>
 80414f2:	3f02      	subs	r7, #2
 80414f4:	18ed      	adds	r5, r5, r3
 80414f6:	e779      	b.n	80413ec <__udivdi3+0x168>
 80414f8:	4588      	cmp	r8, r1
 80414fa:	d988      	bls.n	804140e <__udivdi3+0x18a>
 80414fc:	3e02      	subs	r6, #2
 80414fe:	18c9      	adds	r1, r1, r3
 8041500:	e786      	b.n	8041410 <__udivdi3+0x18c>
 8041502:	4630      	mov	r0, r6
 8041504:	e7d9      	b.n	80414ba <__udivdi3+0x236>
 8041506:	4684      	mov	ip, r0
 8041508:	e7c3      	b.n	8041492 <__udivdi3+0x20e>
 804150a:	3e02      	subs	r6, #2
 804150c:	1912      	adds	r2, r2, r4
 804150e:	e72d      	b.n	804136c <__udivdi3+0xe8>

08041510 <oled_wait_dma>:
#include <stm32f2xx_dma.h>
#include <stm32f2xx_spi.h>
#include <string.h>

// Waits for DMA transfer to complete
static void oled_wait_dma(void) {
 8041510:	b510      	push	{r4, lr}
  while(!DMA_GetFlagStatus(DMA2_Stream3, DMA_FLAG_TCIF3)) {
 8041512:	4c0c      	ldr	r4, [pc, #48]	; (8041544 <oled_wait_dma+0x34>)
 8041514:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
 8041518:	4620      	mov	r0, r4
 804151a:	f000 fe45 	bl	80421a8 <DMA_GetFlagStatus>
 804151e:	b910      	cbnz	r0, 8041526 <oled_wait_dma+0x16>
    if(!DMA2_Stream3->NDTR) break;
 8041520:	6863      	ldr	r3, [r4, #4]
 8041522:	2b00      	cmp	r3, #0
 8041524:	d1f5      	bne.n	8041512 <oled_wait_dma+0x2>
  }
  DMA_ClearITPendingBit(DMA2_Stream3, DMA_IT_TCIF3);
 8041526:	4807      	ldr	r0, [pc, #28]	; (8041544 <oled_wait_dma+0x34>)
 8041528:	4907      	ldr	r1, [pc, #28]	; (8041548 <oled_wait_dma+0x38>)
 804152a:	f000 fe59 	bl	80421e0 <DMA_ClearITPendingBit>
  DMA_Cmd(DMA2_Stream3, DISABLE);
 804152e:	2100      	movs	r1, #0
 8041530:	4804      	ldr	r0, [pc, #16]	; (8041544 <oled_wait_dma+0x34>)
 8041532:	f000 fe2f 	bl	8042194 <DMA_Cmd>
  SPI_I2S_DMACmd(OLED_SPI, SPI_I2S_DMAReq_Tx, DISABLE);
 8041536:	4805      	ldr	r0, [pc, #20]	; (804154c <oled_wait_dma+0x3c>)
 8041538:	2102      	movs	r1, #2
 804153a:	2200      	movs	r2, #0
}
 804153c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(!DMA_GetFlagStatus(DMA2_Stream3, DMA_FLAG_TCIF3)) {
    if(!DMA2_Stream3->NDTR) break;
  }
  DMA_ClearITPendingBit(DMA2_Stream3, DMA_IT_TCIF3);
  DMA_Cmd(DMA2_Stream3, DISABLE);
  SPI_I2S_DMACmd(OLED_SPI, SPI_I2S_DMAReq_Tx, DISABLE);
 8041540:	f001 b937 	b.w	80427b2 <SPI_I2S_DMACmd>
 8041544:	40026458 	.word	0x40026458
 8041548:	18008000 	.word	0x18008000
 804154c:	40013000 	.word	0x40013000

08041550 <oled_wait_spi>:
}

// Waits for SPI transfer to complete
static void oled_wait_spi(void) {
 8041550:	b508      	push	{r3, lr}
  while(SPI_I2S_GetFlagStatus(OLED_SPI, SPI_I2S_FLAG_TXE) == 0);
 8041552:	4806      	ldr	r0, [pc, #24]	; (804156c <oled_wait_spi+0x1c>)
 8041554:	2102      	movs	r1, #2
 8041556:	f001 f935 	bl	80427c4 <SPI_I2S_GetFlagStatus>
 804155a:	2800      	cmp	r0, #0
 804155c:	d0f9      	beq.n	8041552 <oled_wait_spi+0x2>
  while(SPI_I2S_GetFlagStatus(OLED_SPI, SPI_I2S_FLAG_BSY) == 1);
 804155e:	2180      	movs	r1, #128	; 0x80
 8041560:	4802      	ldr	r0, [pc, #8]	; (804156c <oled_wait_spi+0x1c>)
 8041562:	f001 f92f 	bl	80427c4 <SPI_I2S_GetFlagStatus>
 8041566:	2801      	cmp	r0, #1
 8041568:	d0f9      	beq.n	804155e <oled_wait_spi+0xe>
}
 804156a:	bd08      	pop	{r3, pc}
 804156c:	40013000 	.word	0x40013000

08041570 <oled_cmd>:
  DMA_Cmd(DMA2_Stream3, ENABLE);
  SPI_I2S_DMACmd(OLED_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
}

// Sends a command to OLED
static void oled_cmd(uint8_t cmd, uint32_t count, uint8_t *data) {
 8041570:	b570      	push	{r4, r5, r6, lr}
 8041572:	4606      	mov	r6, r0
 8041574:	460c      	mov	r4, r1
  digitalWrite(OLED_NCS, LOW);
 8041576:	4814      	ldr	r0, [pc, #80]	; (80415c8 <oled_cmd+0x58>)
 8041578:	2100      	movs	r1, #0
  DMA_Cmd(DMA2_Stream3, ENABLE);
  SPI_I2S_DMACmd(OLED_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
}

// Sends a command to OLED
static void oled_cmd(uint8_t cmd, uint32_t count, uint8_t *data) {
 804157a:	4615      	mov	r5, r2
  digitalWrite(OLED_NCS, LOW);
 804157c:	f000 fcea 	bl	8041f54 <digitalWrite>
  digitalWrite(OLED_A0, LOW);
 8041580:	4812      	ldr	r0, [pc, #72]	; (80415cc <oled_cmd+0x5c>)
 8041582:	2100      	movs	r1, #0
 8041584:	f000 fce6 	bl	8041f54 <digitalWrite>
  SPI_I2S_SendData(OLED_SPI, cmd);
 8041588:	4811      	ldr	r0, [pc, #68]	; (80415d0 <oled_cmd+0x60>)
 804158a:	4631      	mov	r1, r6
 804158c:	f001 f90f 	bl	80427ae <SPI_I2S_SendData>
  oled_wait_spi();
 8041590:	f7ff ffde 	bl	8041550 <oled_wait_spi>
  digitalWrite(OLED_A0, HIGH);
 8041594:	480d      	ldr	r0, [pc, #52]	; (80415cc <oled_cmd+0x5c>)
 8041596:	2101      	movs	r1, #1
 8041598:	f000 fcdc 	bl	8041f54 <digitalWrite>
  if(count) {
 804159c:	b174      	cbz	r4, 80415bc <oled_cmd+0x4c>
  while(SPI_I2S_GetFlagStatus(OLED_SPI, SPI_I2S_FLAG_BSY) == 1);
}

// Starts a DMA transfer to OLED
static void oled_dma(uint8_t *data, uint32_t count) {
  DMA2_Stream3->NDTR = count;
 804159e:	480d      	ldr	r0, [pc, #52]	; (80415d4 <oled_cmd+0x64>)
  DMA2_Stream3->M0AR = (uint32_t)data;
  DMA_Cmd(DMA2_Stream3, ENABLE);
 80415a0:	2101      	movs	r1, #1
  while(SPI_I2S_GetFlagStatus(OLED_SPI, SPI_I2S_FLAG_BSY) == 1);
}

// Starts a DMA transfer to OLED
static void oled_dma(uint8_t *data, uint32_t count) {
  DMA2_Stream3->NDTR = count;
 80415a2:	6044      	str	r4, [r0, #4]
  DMA2_Stream3->M0AR = (uint32_t)data;
 80415a4:	60c5      	str	r5, [r0, #12]
  DMA_Cmd(DMA2_Stream3, ENABLE);
 80415a6:	f000 fdf5 	bl	8042194 <DMA_Cmd>
  SPI_I2S_DMACmd(OLED_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
 80415aa:	4809      	ldr	r0, [pc, #36]	; (80415d0 <oled_cmd+0x60>)
 80415ac:	2102      	movs	r1, #2
 80415ae:	2201      	movs	r2, #1
 80415b0:	f001 f8ff 	bl	80427b2 <SPI_I2S_DMACmd>
  SPI_I2S_SendData(OLED_SPI, cmd);
  oled_wait_spi();
  digitalWrite(OLED_A0, HIGH);
  if(count) {
    oled_dma(data, count);
    oled_wait_dma();
 80415b4:	f7ff ffac 	bl	8041510 <oled_wait_dma>
    oled_wait_spi();
 80415b8:	f7ff ffca 	bl	8041550 <oled_wait_spi>
  }
  digitalWrite(OLED_NCS, HIGH);
 80415bc:	4802      	ldr	r0, [pc, #8]	; (80415c8 <oled_cmd+0x58>)
 80415be:	2101      	movs	r1, #1
}
 80415c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(count) {
    oled_dma(data, count);
    oled_wait_dma();
    oled_wait_spi();
  }
  digitalWrite(OLED_NCS, HIGH);
 80415c4:	f000 bcc6 	b.w	8041f54 <digitalWrite>
 80415c8:	08047e68 	.word	0x08047e68
 80415cc:	08047e90 	.word	0x08047e90
 80415d0:	40013000 	.word	0x40013000
 80415d4:	40026458 	.word	0x40026458

080415d8 <oled_window>:
  digitalWrite(ENABLE_2V8, LOW);
  digitalWrite(OLED_RESET, LOW);
}

// Sets the memory window
void oled_window(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80415d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t window[8];
  y0 += 0x1C; // TODO: Pretty sure it's possible to configure the display
  y1 += 0x1C; // to get rid of this offset... but at least it works now!
 80415da:	331c      	adds	r3, #28
  window[0] = x0 >> 4; window[1] = x0 & 15;
 80415dc:	0904      	lsrs	r4, r0, #4
}

// Sets the memory window
void oled_window(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
  uint8_t window[8];
  y0 += 0x1C; // TODO: Pretty sure it's possible to configure the display
 80415de:	311c      	adds	r1, #28
  y1 += 0x1C; // to get rid of this offset... but at least it works now!
  window[0] = x0 >> 4; window[1] = x0 & 15;
 80415e0:	f000 000f 	and.w	r0, r0, #15
}

// Sets the memory window
void oled_window(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
  uint8_t window[8];
  y0 += 0x1C; // TODO: Pretty sure it's possible to configure the display
 80415e4:	b2c9      	uxtb	r1, r1
  y1 += 0x1C; // to get rid of this offset... but at least it works now!
 80415e6:	b2db      	uxtb	r3, r3
  window[0] = x0 >> 4; window[1] = x0 & 15;
 80415e8:	f88d 0001 	strb.w	r0, [sp, #1]
  window[2] = x1 >> 4; window[3] = x1 & 15;
 80415ec:	0910      	lsrs	r0, r2, #4
 80415ee:	f002 020f 	and.w	r2, r2, #15
 80415f2:	f88d 0002 	strb.w	r0, [sp, #2]
 80415f6:	f88d 2003 	strb.w	r2, [sp, #3]
  window[4] = y0 >> 4; window[5] = y0 & 15;
 80415fa:	0908      	lsrs	r0, r1, #4
  window[6] = y1 >> 4; window[7] = y1 & 15;
 80415fc:	091a      	lsrs	r2, r3, #4
  uint8_t window[8];
  y0 += 0x1C; // TODO: Pretty sure it's possible to configure the display
  y1 += 0x1C; // to get rid of this offset... but at least it works now!
  window[0] = x0 >> 4; window[1] = x0 & 15;
  window[2] = x1 >> 4; window[3] = x1 & 15;
  window[4] = y0 >> 4; window[5] = y0 & 15;
 80415fe:	f001 010f 	and.w	r1, r1, #15
 8041602:	f88d 0004 	strb.w	r0, [sp, #4]
 8041606:	f88d 1005 	strb.w	r1, [sp, #5]
  window[6] = y1 >> 4; window[7] = y1 & 15;
 804160a:	f88d 2006 	strb.w	r2, [sp, #6]
 804160e:	f003 030f 	and.w	r3, r3, #15
  oled_cmd(0x0A, 0x08, window);
 8041612:	200a      	movs	r0, #10
 8041614:	2108      	movs	r1, #8
 8041616:	466a      	mov	r2, sp
// Sets the memory window
void oled_window(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
  uint8_t window[8];
  y0 += 0x1C; // TODO: Pretty sure it's possible to configure the display
  y1 += 0x1C; // to get rid of this offset... but at least it works now!
  window[0] = x0 >> 4; window[1] = x0 & 15;
 8041618:	f88d 4000 	strb.w	r4, [sp]
  window[2] = x1 >> 4; window[3] = x1 & 15;
  window[4] = y0 >> 4; window[5] = y0 & 15;
  window[6] = y1 >> 4; window[7] = y1 & 15;
 804161c:	f88d 3007 	strb.w	r3, [sp, #7]
  oled_cmd(0x0A, 0x08, window);
 8041620:	f7ff ffa6 	bl	8041570 <oled_cmd>
}
 8041624:	bd1c      	pop	{r2, r3, r4, pc}
 8041626:	0000      	movs	r0, r0

08041628 <oled_push>:

// Pushes n pixels of specific color (to the window)
void oled_push(uint16_t pixel, uint16_t count) {
 8041628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804162a:	4605      	mov	r5, r0
 804162c:	460e      	mov	r6, r1
  digitalWrite(OLED_NCS, LOW);
 804162e:	4815      	ldr	r0, [pc, #84]	; (8041684 <oled_push+0x5c>)
 8041630:	2100      	movs	r1, #0
 8041632:	f000 fc8f 	bl	8041f54 <digitalWrite>
  digitalWrite(OLED_A0, LOW);
 8041636:	4814      	ldr	r0, [pc, #80]	; (8041688 <oled_push+0x60>)
 8041638:	2100      	movs	r1, #0
 804163a:	f000 fc8b 	bl	8041f54 <digitalWrite>
  SPI_I2S_SendData(OLED_SPI, 0xC);
 804163e:	4813      	ldr	r0, [pc, #76]	; (804168c <oled_push+0x64>)
 8041640:	210c      	movs	r1, #12
 8041642:	f001 f8b4 	bl	80427ae <SPI_I2S_SendData>
  oled_wait_spi();
 8041646:	f7ff ff83 	bl	8041550 <oled_wait_spi>
  digitalWrite(OLED_A0, HIGH);
 804164a:	480f      	ldr	r0, [pc, #60]	; (8041688 <oled_push+0x60>)
 804164c:	2101      	movs	r1, #1
 804164e:	f000 fc81 	bl	8041f54 <digitalWrite>
  for(uint16_t n = 0; n < count; n++) {
    SPI_I2S_SendData(OLED_SPI, pixel >> 8);
 8041652:	0a2f      	lsrs	r7, r5, #8
  digitalWrite(OLED_NCS, LOW);
  digitalWrite(OLED_A0, LOW);
  SPI_I2S_SendData(OLED_SPI, 0xC);
  oled_wait_spi();
  digitalWrite(OLED_A0, HIGH);
  for(uint16_t n = 0; n < count; n++) {
 8041654:	2400      	movs	r4, #0
 8041656:	42b4      	cmp	r4, r6
 8041658:	d00e      	beq.n	8041678 <oled_push+0x50>
    SPI_I2S_SendData(OLED_SPI, pixel >> 8);
 804165a:	480c      	ldr	r0, [pc, #48]	; (804168c <oled_push+0x64>)
 804165c:	4639      	mov	r1, r7
 804165e:	f001 f8a6 	bl	80427ae <SPI_I2S_SendData>
  digitalWrite(OLED_NCS, LOW);
  digitalWrite(OLED_A0, LOW);
  SPI_I2S_SendData(OLED_SPI, 0xC);
  oled_wait_spi();
  digitalWrite(OLED_A0, HIGH);
  for(uint16_t n = 0; n < count; n++) {
 8041662:	3401      	adds	r4, #1
    SPI_I2S_SendData(OLED_SPI, pixel >> 8);
    oled_wait_spi();
 8041664:	f7ff ff74 	bl	8041550 <oled_wait_spi>
    SPI_I2S_SendData(OLED_SPI, pixel & 255);
 8041668:	4808      	ldr	r0, [pc, #32]	; (804168c <oled_push+0x64>)
 804166a:	b2e9      	uxtb	r1, r5
 804166c:	f001 f89f 	bl	80427ae <SPI_I2S_SendData>
  digitalWrite(OLED_NCS, LOW);
  digitalWrite(OLED_A0, LOW);
  SPI_I2S_SendData(OLED_SPI, 0xC);
  oled_wait_spi();
  digitalWrite(OLED_A0, HIGH);
  for(uint16_t n = 0; n < count; n++) {
 8041670:	b2a4      	uxth	r4, r4
    SPI_I2S_SendData(OLED_SPI, pixel >> 8);
    oled_wait_spi();
    SPI_I2S_SendData(OLED_SPI, pixel & 255);
    oled_wait_spi();
 8041672:	f7ff ff6d 	bl	8041550 <oled_wait_spi>
 8041676:	e7ee      	b.n	8041656 <oled_push+0x2e>
  }
  digitalWrite(OLED_NCS, HIGH);
 8041678:	4802      	ldr	r0, [pc, #8]	; (8041684 <oled_push+0x5c>)
 804167a:	2101      	movs	r1, #1
}
 804167c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SPI_I2S_SendData(OLED_SPI, pixel >> 8);
    oled_wait_spi();
    SPI_I2S_SendData(OLED_SPI, pixel & 255);
    oled_wait_spi();
  }
  digitalWrite(OLED_NCS, HIGH);
 8041680:	f000 bc68 	b.w	8041f54 <digitalWrite>
 8041684:	08047e68 	.word	0x08047e68
 8041688:	08047e90 	.word	0x08047e90
 804168c:	40013000 	.word	0x40013000

08041690 <oled_blit>:
}

// Blit a sprite to screen
void oled_blit(uint8_t x, uint8_t y, uint8_t w, uint8_t h, void *buffer) {
 8041690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8041694:	4614      	mov	r4, r2
  oled_window(x, y, x + w - 1, y + h - 1);
 8041696:	1e42      	subs	r2, r0, #1
  }
  digitalWrite(OLED_NCS, HIGH);
}

// Blit a sprite to screen
void oled_blit(uint8_t x, uint8_t y, uint8_t w, uint8_t h, void *buffer) {
 8041698:	461d      	mov	r5, r3
  oled_window(x, y, x + w - 1, y + h - 1);
 804169a:	18a6      	adds	r6, r4, r2
 804169c:	1e4b      	subs	r3, r1, #1
 804169e:	b2f2      	uxtb	r2, r6
 80416a0:	18ef      	adds	r7, r5, r3

  digitalWrite(OLED_NCS, LOW);
 80416a2:	4e19      	ldr	r6, [pc, #100]	; (8041708 <oled_blit+0x78>)
  digitalWrite(OLED_NCS, HIGH);
}

// Blit a sprite to screen
void oled_blit(uint8_t x, uint8_t y, uint8_t w, uint8_t h, void *buffer) {
  oled_window(x, y, x + w - 1, y + h - 1);
 80416a4:	b2fb      	uxtb	r3, r7

  digitalWrite(OLED_NCS, LOW);

  digitalWrite(OLED_A0, LOW);
 80416a6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8041714 <oled_blit+0x84>
  }
  digitalWrite(OLED_NCS, HIGH);
}

// Blit a sprite to screen
void oled_blit(uint8_t x, uint8_t y, uint8_t w, uint8_t h, void *buffer) {
 80416aa:	f8dd 9020 	ldr.w	r9, [sp, #32]
  oled_window(x, y, x + w - 1, y + h - 1);

  digitalWrite(OLED_NCS, LOW);

  digitalWrite(OLED_A0, LOW);
  SPI_I2S_SendData(OLED_SPI, 0xC);
 80416ae:	4f17      	ldr	r7, [pc, #92]	; (804170c <oled_blit+0x7c>)
  digitalWrite(OLED_NCS, HIGH);
}

// Blit a sprite to screen
void oled_blit(uint8_t x, uint8_t y, uint8_t w, uint8_t h, void *buffer) {
  oled_window(x, y, x + w - 1, y + h - 1);
 80416b0:	f7ff ff92 	bl	80415d8 <oled_window>

  digitalWrite(OLED_NCS, LOW);
 80416b4:	4630      	mov	r0, r6
 80416b6:	2100      	movs	r1, #0
 80416b8:	f000 fc4c 	bl	8041f54 <digitalWrite>
  digitalWrite(OLED_A0, LOW);
  SPI_I2S_SendData(OLED_SPI, 0xC);
  oled_wait_spi();
  digitalWrite(OLED_A0, HIGH);

  oled_dma((uint8_t*)buffer, (w * h) << 1);
 80416bc:	436c      	muls	r4, r5
void oled_blit(uint8_t x, uint8_t y, uint8_t w, uint8_t h, void *buffer) {
  oled_window(x, y, x + w - 1, y + h - 1);

  digitalWrite(OLED_NCS, LOW);

  digitalWrite(OLED_A0, LOW);
 80416be:	4640      	mov	r0, r8
 80416c0:	2100      	movs	r1, #0
 80416c2:	f000 fc47 	bl	8041f54 <digitalWrite>
  SPI_I2S_SendData(OLED_SPI, 0xC);
 80416c6:	4638      	mov	r0, r7
 80416c8:	210c      	movs	r1, #12
 80416ca:	f001 f870 	bl	80427ae <SPI_I2S_SendData>
  oled_wait_spi();
 80416ce:	f7ff ff3f 	bl	8041550 <oled_wait_spi>
  digitalWrite(OLED_A0, HIGH);
 80416d2:	4640      	mov	r0, r8
 80416d4:	2101      	movs	r1, #1
 80416d6:	f000 fc3d 	bl	8041f54 <digitalWrite>
  while(SPI_I2S_GetFlagStatus(OLED_SPI, SPI_I2S_FLAG_BSY) == 1);
}

// Starts a DMA transfer to OLED
static void oled_dma(uint8_t *data, uint32_t count) {
  DMA2_Stream3->NDTR = count;
 80416da:	480d      	ldr	r0, [pc, #52]	; (8041710 <oled_blit+0x80>)
  digitalWrite(OLED_A0, LOW);
  SPI_I2S_SendData(OLED_SPI, 0xC);
  oled_wait_spi();
  digitalWrite(OLED_A0, HIGH);

  oled_dma((uint8_t*)buffer, (w * h) << 1);
 80416dc:	0064      	lsls	r4, r4, #1
  while(SPI_I2S_GetFlagStatus(OLED_SPI, SPI_I2S_FLAG_BSY) == 1);
}

// Starts a DMA transfer to OLED
static void oled_dma(uint8_t *data, uint32_t count) {
  DMA2_Stream3->NDTR = count;
 80416de:	6044      	str	r4, [r0, #4]
  DMA2_Stream3->M0AR = (uint32_t)data;
  DMA_Cmd(DMA2_Stream3, ENABLE);
 80416e0:	2101      	movs	r1, #1
}

// Starts a DMA transfer to OLED
static void oled_dma(uint8_t *data, uint32_t count) {
  DMA2_Stream3->NDTR = count;
  DMA2_Stream3->M0AR = (uint32_t)data;
 80416e2:	f8c0 900c 	str.w	r9, [r0, #12]
  DMA_Cmd(DMA2_Stream3, ENABLE);
 80416e6:	f000 fd55 	bl	8042194 <DMA_Cmd>
  SPI_I2S_DMACmd(OLED_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
 80416ea:	4638      	mov	r0, r7
 80416ec:	2102      	movs	r1, #2
 80416ee:	2201      	movs	r2, #1
 80416f0:	f001 f85f 	bl	80427b2 <SPI_I2S_DMACmd>
  SPI_I2S_SendData(OLED_SPI, 0xC);
  oled_wait_spi();
  digitalWrite(OLED_A0, HIGH);

  oled_dma((uint8_t*)buffer, (w * h) << 1);
  oled_wait_dma();
 80416f4:	f7ff ff0c 	bl	8041510 <oled_wait_dma>
  oled_wait_spi();
 80416f8:	f7ff ff2a 	bl	8041550 <oled_wait_spi>

  digitalWrite(OLED_NCS, HIGH);
 80416fc:	4630      	mov	r0, r6
 80416fe:	2101      	movs	r1, #1
}
 8041700:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  oled_dma((uint8_t*)buffer, (w * h) << 1);
  oled_wait_dma();
  oled_wait_spi();

  digitalWrite(OLED_NCS, HIGH);
 8041704:	f000 bc26 	b.w	8041f54 <digitalWrite>
 8041708:	08047e68 	.word	0x08047e68
 804170c:	40013000 	.word	0x40013000
 8041710:	40026458 	.word	0x40026458
 8041714:	08047e90 	.word	0x08047e90

08041718 <oled_power>:
}

// Changes OLED power (brightness)
void oled_power(uint8_t level) {
 8041718:	b507      	push	{r0, r1, r2, lr}
 804171a:	285a      	cmp	r0, #90	; 0x5a
 804171c:	bf28      	it	cs
 804171e:	205a      	movcs	r0, #90	; 0x5a
  uint8_t p[6];
  if(level > 90) level = 90;
  p[0] = p[2] = p[4] = level >> 4;
 8041720:	0903      	lsrs	r3, r0, #4
  p[1] = p[3] = p[5] = level & 15;
 8041722:	f000 000f 	and.w	r0, r0, #15
 8041726:	f88d 0005 	strb.w	r0, [sp, #5]
 804172a:	f88d 0003 	strb.w	r0, [sp, #3]
 804172e:	f88d 0001 	strb.w	r0, [sp, #1]
  oled_cmd(0x0E, 6, p);
 8041732:	2106      	movs	r1, #6
 8041734:	200e      	movs	r0, #14
 8041736:	466a      	mov	r2, sp

// Changes OLED power (brightness)
void oled_power(uint8_t level) {
  uint8_t p[6];
  if(level > 90) level = 90;
  p[0] = p[2] = p[4] = level >> 4;
 8041738:	f88d 3004 	strb.w	r3, [sp, #4]
 804173c:	f88d 3002 	strb.w	r3, [sp, #2]
 8041740:	f88d 3000 	strb.w	r3, [sp]
  p[1] = p[3] = p[5] = level & 15;
  oled_cmd(0x0E, 6, p);
 8041744:	f7ff ff14 	bl	8041570 <oled_cmd>
}
 8041748:	bd0e      	pop	{r1, r2, r3, pc}
 804174a:	0000      	movs	r0, r0

0804174c <oled_deinit>:
  oled_vramp();

}

// Shut down display completely (lowest power mode)
void oled_deinit(void) {
 804174c:	b508      	push	{r3, lr}
  oled_power(0);
 804174e:	2000      	movs	r0, #0
 8041750:	f7ff ffe2 	bl	8041718 <oled_power>
  digitalWrite(OLED_VEN, LOW);
 8041754:	2100      	movs	r1, #0
 8041756:	4806      	ldr	r0, [pc, #24]	; (8041770 <oled_deinit+0x24>)
 8041758:	f000 fbfc 	bl	8041f54 <digitalWrite>
  digitalWrite(ENABLE_2V8, LOW);
 804175c:	2100      	movs	r1, #0
 804175e:	4805      	ldr	r0, [pc, #20]	; (8041774 <oled_deinit+0x28>)
 8041760:	f000 fbf8 	bl	8041f54 <digitalWrite>
  digitalWrite(OLED_RESET, LOW);
 8041764:	4804      	ldr	r0, [pc, #16]	; (8041778 <oled_deinit+0x2c>)
 8041766:	2100      	movs	r1, #0
}
 8041768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// Shut down display completely (lowest power mode)
void oled_deinit(void) {
  oled_power(0);
  digitalWrite(OLED_VEN, LOW);
  digitalWrite(ENABLE_2V8, LOW);
  digitalWrite(OLED_RESET, LOW);
 804176c:	f000 bbf2 	b.w	8041f54 <digitalWrite>
 8041770:	08048090 	.word	0x08048090
 8041774:	08047ffc 	.word	0x08047ffc
 8041778:	08048024 	.word	0x08048024

0804177c <oled_init>:
  }
  digitalWrite(OLED_VEN, HIGH);
}

// Initializes and turns on screen
void oled_init(void) {
 804177c:	b570      	push	{r4, r5, r6, lr}

  // Set initial pin states
  digitalWrite(OLED_VEN, LOW);
 804177e:	4862      	ldr	r0, [pc, #392]	; (8041908 <oled_init+0x18c>)
  }
  digitalWrite(OLED_VEN, HIGH);
}

// Initializes and turns on screen
void oled_init(void) {
 8041780:	b0d6      	sub	sp, #344	; 0x158

  // Set initial pin states
  digitalWrite(OLED_VEN, LOW);
 8041782:	2100      	movs	r1, #0
 8041784:	f000 fbe6 	bl	8041f54 <digitalWrite>
  digitalWrite(ENABLE_2V8, HIGH);
 8041788:	4860      	ldr	r0, [pc, #384]	; (804190c <oled_init+0x190>)
 804178a:	2101      	movs	r1, #1
 804178c:	f000 fbe2 	bl	8041f54 <digitalWrite>
  digitalWrite(OLED_RESET, HIGH);
 8041790:	485f      	ldr	r0, [pc, #380]	; (8041910 <oled_init+0x194>)
 8041792:	2101      	movs	r1, #1
 8041794:	f000 fbde 	bl	8041f54 <digitalWrite>
  digitalWrite(OLED_A0, HIGH);
 8041798:	485e      	ldr	r0, [pc, #376]	; (8041914 <oled_init+0x198>)
 804179a:	2101      	movs	r1, #1
 804179c:	f000 fbda 	bl	8041f54 <digitalWrite>
  
  // SPI config
  {
    // Enable peripheral clock
    RCC_AHB1PeriphClockCmd(OLED_SPI_SCK->clock | OLED_SPI_MOSI->clock, ENABLE);
 80417a0:	4a5d      	ldr	r2, [pc, #372]	; (8041918 <oled_init+0x19c>)
 80417a2:	4b5e      	ldr	r3, [pc, #376]	; (804191c <oled_init+0x1a0>)
 80417a4:	68d0      	ldr	r0, [r2, #12]
 80417a6:	68d9      	ldr	r1, [r3, #12]
    SPI_InitTypeDef ConfigSPI;
  
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
    ConfigSPI.SPI_DataSize = SPI_DataSize_8b;
    ConfigSPI.SPI_CPOL = SPI_CPOL_High;
 80417a8:	2502      	movs	r5, #2
  digitalWrite(OLED_A0, HIGH);
  
  // SPI config
  {
    // Enable peripheral clock
    RCC_AHB1PeriphClockCmd(OLED_SPI_SCK->clock | OLED_SPI_MOSI->clock, ENABLE);
 80417aa:	4308      	orrs	r0, r1
 80417ac:	2101      	movs	r1, #1
 80417ae:	f000 ff3b 	bl	8042628 <RCC_AHB1PeriphClockCmd>
    
    // Enable SPI clock
    RCC_APB2PeriphClockCmd(OLED_SPI_CLK, ENABLE);
 80417b2:	2101      	movs	r1, #1
 80417b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80417b8:	f000 ff4e 	bl	8042658 <RCC_APB2PeriphClockCmd>

    //pinInit(OLED_SPI_SCK);
    //pinInit(OLED_SPI_MOSI);
    
    SPI_I2S_DeInit(OLED_SPI);
 80417bc:	4858      	ldr	r0, [pc, #352]	; (8041920 <oled_init+0x1a4>)
 80417be:	f000 ff99 	bl	80426f4 <SPI_I2S_DeInit>
    
    SPI_InitTypeDef ConfigSPI;
  
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
 80417c2:	f44f 7082 	mov.w	r0, #260	; 0x104
    
    SPI_I2S_DeInit(OLED_SPI);
    
    SPI_InitTypeDef ConfigSPI;
  
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80417c6:	2400      	movs	r4, #0
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
    ConfigSPI.SPI_DataSize = SPI_DataSize_8b;
    ConfigSPI.SPI_CPOL = SPI_CPOL_High;
    ConfigSPI.SPI_CPHA = SPI_CPHA_2Edge;
    ConfigSPI.SPI_NSS = SPI_NSS_Soft;
 80417c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    SPI_I2S_DeInit(OLED_SPI);
    
    SPI_InitTypeDef ConfigSPI;
  
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
 80417cc:	f8ad 000a 	strh.w	r0, [sp, #10]
    ConfigSPI.SPI_DataSize = SPI_DataSize_8b;
    ConfigSPI.SPI_CPOL = SPI_CPOL_High;
 80417d0:	f8ad 500e 	strh.w	r5, [sp, #14]
    ConfigSPI.SPI_CPHA = SPI_CPHA_2Edge;
    ConfigSPI.SPI_NSS = SPI_NSS_Soft;
    ConfigSPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
    ConfigSPI.SPI_FirstBit = SPI_FirstBit_MSB;
    
    SPI_Init(OLED_SPI, &ConfigSPI);
 80417d4:	4852      	ldr	r0, [pc, #328]	; (8041920 <oled_init+0x1a4>)
  
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
    ConfigSPI.SPI_DataSize = SPI_DataSize_8b;
    ConfigSPI.SPI_CPOL = SPI_CPOL_High;
    ConfigSPI.SPI_CPHA = SPI_CPHA_2Edge;
 80417d6:	2501      	movs	r5, #1
    ConfigSPI.SPI_NSS = SPI_NSS_Soft;
    ConfigSPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
    ConfigSPI.SPI_FirstBit = SPI_FirstBit_MSB;
    
    SPI_Init(OLED_SPI, &ConfigSPI);
 80417d8:	a902      	add	r1, sp, #8
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
    ConfigSPI.SPI_DataSize = SPI_DataSize_8b;
    ConfigSPI.SPI_CPOL = SPI_CPOL_High;
    ConfigSPI.SPI_CPHA = SPI_CPHA_2Edge;
    ConfigSPI.SPI_NSS = SPI_NSS_Soft;
 80417da:	f8ad 3012 	strh.w	r3, [sp, #18]
  
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
    ConfigSPI.SPI_DataSize = SPI_DataSize_8b;
    ConfigSPI.SPI_CPOL = SPI_CPOL_High;
    ConfigSPI.SPI_CPHA = SPI_CPHA_2Edge;
 80417de:	f8ad 5010 	strh.w	r5, [sp, #16]
    
    SPI_I2S_DeInit(OLED_SPI);
    
    SPI_InitTypeDef ConfigSPI;
  
    ConfigSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80417e2:	f8ad 4008 	strh.w	r4, [sp, #8]
    ConfigSPI.SPI_Mode = SPI_Mode_Master;
    ConfigSPI.SPI_DataSize = SPI_DataSize_8b;
 80417e6:	f8ad 400c 	strh.w	r4, [sp, #12]
    ConfigSPI.SPI_CPOL = SPI_CPOL_High;
    ConfigSPI.SPI_CPHA = SPI_CPHA_2Edge;
    ConfigSPI.SPI_NSS = SPI_NSS_Soft;
    ConfigSPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80417ea:	f8ad 4014 	strh.w	r4, [sp, #20]
    ConfigSPI.SPI_FirstBit = SPI_FirstBit_MSB;
 80417ee:	f8ad 4016 	strh.w	r4, [sp, #22]
    
    SPI_Init(OLED_SPI, &ConfigSPI);
 80417f2:	f000 ffb1 	bl	8042758 <SPI_Init>
    
    SPI_Cmd(OLED_SPI, ENABLE);
 80417f6:	4629      	mov	r1, r5
 80417f8:	4849      	ldr	r0, [pc, #292]	; (8041920 <oled_init+0x1a4>)
 80417fa:	f000 ffcc 	bl	8042796 <SPI_Cmd>
  }
  
  // DMA config
  {
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80417fe:	4629      	mov	r1, r5
 8041800:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8041804:	f000 ff10 	bl	8042628 <RCC_AHB1PeriphClockCmd>
    DMA_InitTypeDef ConfigDMA;
    
    ConfigDMA.DMA_Channel = DMA_Channel_3;
 8041808:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
    ConfigDMA.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
 804180c:	4a45      	ldr	r2, [pc, #276]	; (8041924 <oled_init+0x1a8>)
  // DMA config
  {
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
    DMA_InitTypeDef ConfigDMA;
    
    ConfigDMA.DMA_Channel = DMA_Channel_3;
 804180e:	9107      	str	r1, [sp, #28]
    ConfigDMA.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
    ConfigDMA.DMA_Memory0BaseAddr = 0;
    ConfigDMA.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8041810:	2040      	movs	r0, #64	; 0x40
    ConfigDMA.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    ConfigDMA.DMA_MemoryInc = DMA_MemoryInc_Enable;
    ConfigDMA.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    ConfigDMA.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    ConfigDMA.DMA_Mode = DMA_Mode_Normal;
    ConfigDMA.DMA_Priority = DMA_Priority_High;
 8041812:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ConfigDMA.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
    ConfigDMA.DMA_Memory0BaseAddr = 0;
    ConfigDMA.DMA_DIR = DMA_DIR_MemoryToPeripheral;
    ConfigDMA.DMA_BufferSize = 0;
    ConfigDMA.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    ConfigDMA.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8041816:	f44f 6380 	mov.w	r3, #1024	; 0x400
  {
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
    DMA_InitTypeDef ConfigDMA;
    
    ConfigDMA.DMA_Channel = DMA_Channel_3;
    ConfigDMA.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
 804181a:	9208      	str	r2, [sp, #32]
    ConfigDMA.DMA_Memory0BaseAddr = 0;
    ConfigDMA.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 804181c:	900a      	str	r0, [sp, #40]	; 0x28
    ConfigDMA.DMA_MemoryInc = DMA_MemoryInc_Enable;
    ConfigDMA.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    ConfigDMA.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    ConfigDMA.DMA_Mode = DMA_Mode_Normal;
    ConfigDMA.DMA_Priority = DMA_Priority_High;
    ConfigDMA.DMA_FIFOMode = DMA_FIFOMode_Enable;
 804181e:	2204      	movs	r2, #4
    ConfigDMA.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    ConfigDMA.DMA_MemoryInc = DMA_MemoryInc_Enable;
    ConfigDMA.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    ConfigDMA.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    ConfigDMA.DMA_Mode = DMA_Mode_Normal;
    ConfigDMA.DMA_Priority = DMA_Priority_High;
 8041820:	9111      	str	r1, [sp, #68]	; 0x44
    ConfigDMA.DMA_FIFOMode = DMA_FIFOMode_Enable;
    ConfigDMA.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
    ConfigDMA.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    ConfigDMA.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

    DMA_Init(DMA2_Stream3, &ConfigDMA);    
 8041822:	4841      	ldr	r0, [pc, #260]	; (8041928 <oled_init+0x1ac>)
 8041824:	a907      	add	r1, sp, #28
    ConfigDMA.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
    ConfigDMA.DMA_Memory0BaseAddr = 0;
    ConfigDMA.DMA_DIR = DMA_DIR_MemoryToPeripheral;
    ConfigDMA.DMA_BufferSize = 0;
    ConfigDMA.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    ConfigDMA.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8041826:	930d      	str	r3, [sp, #52]	; 0x34
    ConfigDMA.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    ConfigDMA.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    ConfigDMA.DMA_Mode = DMA_Mode_Normal;
    ConfigDMA.DMA_Priority = DMA_Priority_High;
    ConfigDMA.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8041828:	9212      	str	r2, [sp, #72]	; 0x48
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
    DMA_InitTypeDef ConfigDMA;
    
    ConfigDMA.DMA_Channel = DMA_Channel_3;
    ConfigDMA.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
    ConfigDMA.DMA_Memory0BaseAddr = 0;
 804182a:	9409      	str	r4, [sp, #36]	; 0x24
    ConfigDMA.DMA_DIR = DMA_DIR_MemoryToPeripheral;
    ConfigDMA.DMA_BufferSize = 0;
 804182c:	940b      	str	r4, [sp, #44]	; 0x2c
    ConfigDMA.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 804182e:	940c      	str	r4, [sp, #48]	; 0x30
    ConfigDMA.DMA_MemoryInc = DMA_MemoryInc_Enable;
    ConfigDMA.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8041830:	940e      	str	r4, [sp, #56]	; 0x38
    ConfigDMA.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8041832:	940f      	str	r4, [sp, #60]	; 0x3c
    ConfigDMA.DMA_Mode = DMA_Mode_Normal;
 8041834:	9410      	str	r4, [sp, #64]	; 0x40
    ConfigDMA.DMA_Priority = DMA_Priority_High;
    ConfigDMA.DMA_FIFOMode = DMA_FIFOMode_Enable;
    ConfigDMA.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8041836:	9413      	str	r4, [sp, #76]	; 0x4c
    ConfigDMA.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8041838:	9414      	str	r4, [sp, #80]	; 0x50
    ConfigDMA.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 804183a:	9415      	str	r4, [sp, #84]	; 0x54

    DMA_Init(DMA2_Stream3, &ConfigDMA);    
 804183c:	f000 fc80 	bl	8042140 <DMA_Init>
  }

  // Cycle reset
  digitalWrite(OLED_RESET, LOW);
 8041840:	4621      	mov	r1, r4
 8041842:	4833      	ldr	r0, [pc, #204]	; (8041910 <oled_init+0x194>)
 8041844:	f000 fb86 	bl	8041f54 <digitalWrite>
  delay(10);
 8041848:	200a      	movs	r0, #10
 804184a:	f000 fbb2 	bl	8041fb2 <delay>
  digitalWrite(OLED_RESET, HIGH);
 804184e:	4629      	mov	r1, r5
 8041850:	482f      	ldr	r0, [pc, #188]	; (8041910 <oled_init+0x194>)
 8041852:	f000 fb7f 	bl	8041f54 <digitalWrite>
  delay(10);
 8041856:	200a      	movs	r0, #10
 8041858:	f000 fbab 	bl	8041fb2 <delay>

  // Do software reset
  oled_cmd(0x01, 0, 0);
 804185c:	4628      	mov	r0, r5
 804185e:	4621      	mov	r1, r4
 8041860:	4622      	mov	r2, r4
 8041862:	f7ff fe85 	bl	8041570 <oled_cmd>
  delay(10);
 8041866:	200a      	movs	r0, #10
 8041868:	f000 fba3 	bl	8041fb2 <delay>
  
  // Initialization command list
  uint8_t init_cmds[] = {
 804186c:	4b2f      	ldr	r3, [pc, #188]	; (804192c <oled_init+0x1b0>)
 804186e:	a807      	add	r0, sp, #28
 8041870:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8041874:	4604      	mov	r4, r0
 8041876:	6859      	ldr	r1, [r3, #4]
 8041878:	6818      	ldr	r0, [r3, #0]
 804187a:	3308      	adds	r3, #8
 804187c:	c403      	stmia	r4!, {r0, r1}
 804187e:	42ab      	cmp	r3, r5
 8041880:	4620      	mov	r0, r4
 8041882:	d1f7      	bne.n	8041874 <oled_init+0xf8>
    0x08, 0x01, 0x01, // Set interface type to 8-bit
    0x00 // END
  };

  // Send initializiation commands
  uint8_t *p_cmds = init_cmds;
 8041884:	ab07      	add	r3, sp, #28
  while(*p_cmds != 0x00) {
 8041886:	781c      	ldrb	r4, [r3, #0]
 8041888:	b144      	cbz	r4, 804189c <oled_init+0x120>
    uint8_t cmd = *p_cmds++;
    uint8_t args = *p_cmds++;
    oled_cmd(cmd, args, p_cmds);
 804188a:	785d      	ldrb	r5, [r3, #1]

  // Send initializiation commands
  uint8_t *p_cmds = init_cmds;
  while(*p_cmds != 0x00) {
    uint8_t cmd = *p_cmds++;
    uint8_t args = *p_cmds++;
 804188c:	1c9e      	adds	r6, r3, #2
    oled_cmd(cmd, args, p_cmds);
 804188e:	4620      	mov	r0, r4
 8041890:	4629      	mov	r1, r5
 8041892:	4632      	mov	r2, r6
 8041894:	f7ff fe6c 	bl	8041570 <oled_cmd>
    p_cmds += args;
 8041898:	1973      	adds	r3, r6, r5
 804189a:	e7f4      	b.n	8041886 <oled_init+0x10a>
  }
  
  // Set initial power
  oled_power(40);
 804189c:	2028      	movs	r0, #40	; 0x28
 804189e:	f7ff ff3b 	bl	8041718 <oled_power>
  
  // Clear screen
  uint16_t blank_line[128];
  memset(blank_line, 0, sizeof(blank_line));
 80418a2:	a816      	add	r0, sp, #88	; 0x58
 80418a4:	4621      	mov	r1, r4
 80418a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80418aa:	f001 fc35 	bl	8043118 <memset>
  for(uint8_t y = 0; y < 128; y++) {
    oled_blit(0, y, 128, 1, blank_line);
 80418ae:	a916      	add	r1, sp, #88	; 0x58
 80418b0:	2280      	movs	r2, #128	; 0x80
 80418b2:	9100      	str	r1, [sp, #0]
 80418b4:	2000      	movs	r0, #0
 80418b6:	4621      	mov	r1, r4
 80418b8:	2301      	movs	r3, #1
 80418ba:	f7ff fee9 	bl	8041690 <oled_blit>
  oled_power(40);
  
  // Clear screen
  uint16_t blank_line[128];
  memset(blank_line, 0, sizeof(blank_line));
  for(uint8_t y = 0; y < 128; y++) {
 80418be:	1c62      	adds	r2, r4, #1
 80418c0:	b2d4      	uxtb	r4, r2
 80418c2:	2c80      	cmp	r4, #128	; 0x80
 80418c4:	d1f3      	bne.n	80418ae <oled_init+0x132>
    oled_blit(0, y, 128, 1, blank_line);
  }
  
  
  // Turn on display
  uint8_t init_on[] = {0x01};
 80418c6:	2101      	movs	r1, #1
  oled_cmd(0x02, 1, init_on);
 80418c8:	2002      	movs	r0, #2
 80418ca:	aa02      	add	r2, sp, #8
    oled_blit(0, y, 128, 1, blank_line);
  }
  
  
  // Turn on display
  uint8_t init_on[] = {0x01};
 80418cc:	f88d 1008 	strb.w	r1, [sp, #8]
  oled_cmd(0x02, 1, init_on);
 80418d0:	f7ff fe4e 	bl	8041570 <oled_cmd>
}

// Ramps up the 1.8V (directly on = unstable behaviour)
static void oled_vramp(void) {
  const uint32_t count = 2000; // Sony says minimum 500
  for(uint32_t outer = 0; outer < count; outer++) {
 80418d4:	2400      	movs	r4, #0
    digitalWrite(OLED_VEN, HIGH);
 80418d6:	480c      	ldr	r0, [pc, #48]	; (8041908 <oled_init+0x18c>)
 80418d8:	2101      	movs	r1, #1
 80418da:	f000 fb3b 	bl	8041f54 <digitalWrite>
    for(uint32_t inner = 0; inner < count; inner++) {
 80418de:	2500      	movs	r5, #0
      if(inner == outer) digitalWrite(OLED_VEN, LOW);
 80418e0:	42a5      	cmp	r5, r4
 80418e2:	d103      	bne.n	80418ec <oled_init+0x170>
 80418e4:	4808      	ldr	r0, [pc, #32]	; (8041908 <oled_init+0x18c>)
 80418e6:	2100      	movs	r1, #0
 80418e8:	f000 fb34 	bl	8041f54 <digitalWrite>
// Ramps up the 1.8V (directly on = unstable behaviour)
static void oled_vramp(void) {
  const uint32_t count = 2000; // Sony says minimum 500
  for(uint32_t outer = 0; outer < count; outer++) {
    digitalWrite(OLED_VEN, HIGH);
    for(uint32_t inner = 0; inner < count; inner++) {
 80418ec:	3501      	adds	r5, #1
 80418ee:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80418f2:	d1f5      	bne.n	80418e0 <oled_init+0x164>
}

// Ramps up the 1.8V (directly on = unstable behaviour)
static void oled_vramp(void) {
  const uint32_t count = 2000; // Sony says minimum 500
  for(uint32_t outer = 0; outer < count; outer++) {
 80418f4:	3401      	adds	r4, #1
 80418f6:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80418fa:	d1ec      	bne.n	80418d6 <oled_init+0x15a>
    digitalWrite(OLED_VEN, HIGH);
    for(uint32_t inner = 0; inner < count; inner++) {
      if(inner == outer) digitalWrite(OLED_VEN, LOW);
    }
  }
  digitalWrite(OLED_VEN, HIGH);
 80418fc:	4802      	ldr	r0, [pc, #8]	; (8041908 <oled_init+0x18c>)
 80418fe:	2101      	movs	r1, #1
 8041900:	f000 fb28 	bl	8041f54 <digitalWrite>
  oled_cmd(0x02, 1, init_on);

  // Power up LEDs
  oled_vramp();

}
 8041904:	b056      	add	sp, #344	; 0x158
 8041906:	bd70      	pop	{r4, r5, r6, pc}
 8041908:	08048090 	.word	0x08048090
 804190c:	08047ffc 	.word	0x08047ffc
 8041910:	08048024 	.word	0x08048024
 8041914:	08047e90 	.word	0x08047e90
 8041918:	080480d0 	.word	0x080480d0
 804191c:	08047e7c 	.word	0x08047e7c
 8041920:	40013000 	.word	0x40013000
 8041924:	4001300c 	.word	0x4001300c
 8041928:	40026458 	.word	0x40026458
 804192c:	08047cfc 	.word	0x08047cfc

08041930 <i2c_reset>:
      break; \
    } \
  } \
  if(timeout)

static uint8_t i2c_reset(uint8_t errorcode) {
 8041930:	b538      	push	{r3, r4, r5, lr}
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8041932:	4c06      	ldr	r4, [pc, #24]	; (804194c <i2c_reset+0x1c>)
      break; \
    } \
  } \
  if(timeout)

static uint8_t i2c_reset(uint8_t errorcode) {
 8041934:	4605      	mov	r5, r0
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8041936:	2101      	movs	r1, #1
 8041938:	4620      	mov	r0, r4
 804193a:	f000 fd8f 	bl	804245c <I2C_AcknowledgeConfig>
  I2C_GenerateSTOP(I2C1, ENABLE);
 804193e:	4620      	mov	r0, r4
 8041940:	2101      	movs	r1, #1
 8041942:	f000 fd77 	bl	8042434 <I2C_GenerateSTOP>
  return errorcode;
}
 8041946:	4628      	mov	r0, r5
 8041948:	bd38      	pop	{r3, r4, r5, pc}
 804194a:	bf00      	nop
 804194c:	40005400 	.word	0x40005400

08041950 <i2c_init>:

#include <stm32f2xx_i2c.h>
#include <stm32f2xx_dma.h>
#include "driver_i2c.h"

void i2c_init(void) {    
 8041950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Enable I2C & pin clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8041952:	2101      	movs	r1, #1
 8041954:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8041958:	f000 fe72 	bl	8042640 <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(I2C_SDA->clock | I2C_SCL->clock, ENABLE);
 804195c:	4b17      	ldr	r3, [pc, #92]	; (80419bc <i2c_init+0x6c>)
 804195e:	4918      	ldr	r1, [pc, #96]	; (80419c0 <i2c_init+0x70>)
 8041960:	68d8      	ldr	r0, [r3, #12]
 8041962:	68ca      	ldr	r2, [r1, #12]
 8041964:	2101      	movs	r1, #1
 8041966:	4310      	orrs	r0, r2
 8041968:	f000 fe5e 	bl	8042628 <RCC_AHB1PeriphClockCmd>
  // Reset I2C
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);

  // Enable I2C
  I2C_Cmd(I2C1, ENABLE);
 804196c:	4c15      	ldr	r4, [pc, #84]	; (80419c4 <i2c_init+0x74>)
  // Enable I2C & pin clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
  RCC_AHB1PeriphClockCmd(I2C_SDA->clock | I2C_SCL->clock, ENABLE);

  // Reset I2C
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 804196e:	2101      	movs	r1, #1
 8041970:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8041974:	f000 fe7c 	bl	8042670 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8041978:	2100      	movs	r1, #0
 804197a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 804197e:	f000 fe77 	bl	8042670 <RCC_APB1PeriphResetCmd>

  // Enable I2C
  I2C_Cmd(I2C1, ENABLE);
 8041982:	4620      	mov	r0, r4
 8041984:	2101      	movs	r1, #1
 8041986:	f000 fd3d 	bl	8042404 <I2C_Cmd>

  // I2C Configuration
  I2C_InitTypeDef  ConfigI2C;
  ConfigI2C.I2C_Mode                = I2C_Mode_I2C;
 804198a:	2000      	movs	r0, #0
 804198c:	f8ad 0004 	strh.w	r0, [sp, #4]
  ConfigI2C.I2C_DutyCycle           = I2C_DUTYCYCLE;
  ConfigI2C.I2C_OwnAddress1         = 0xA0;
  ConfigI2C.I2C_Ack                 = I2C_Ack_Enable;
  ConfigI2C.I2C_ClockSpeed          = I2C_SPEED;
 8041990:	480d      	ldr	r0, [pc, #52]	; (80419c8 <i2c_init+0x78>)

  // I2C Configuration
  I2C_InitTypeDef  ConfigI2C;
  ConfigI2C.I2C_Mode                = I2C_Mode_I2C;
  ConfigI2C.I2C_DutyCycle           = I2C_DUTYCYCLE;
  ConfigI2C.I2C_OwnAddress1         = 0xA0;
 8041992:	21a0      	movs	r1, #160	; 0xa0
  I2C_Cmd(I2C1, ENABLE);

  // I2C Configuration
  I2C_InitTypeDef  ConfigI2C;
  ConfigI2C.I2C_Mode                = I2C_Mode_I2C;
  ConfigI2C.I2C_DutyCycle           = I2C_DUTYCYCLE;
 8041994:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8041998:	f8ad 3006 	strh.w	r3, [sp, #6]
  ConfigI2C.I2C_OwnAddress1         = 0xA0;
 804199c:	f8ad 1008 	strh.w	r1, [sp, #8]
  ConfigI2C.I2C_Ack                 = I2C_Ack_Enable;
 80419a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  ConfigI2C.I2C_ClockSpeed          = I2C_SPEED;
 80419a4:	9000      	str	r0, [sp, #0]
  ConfigI2C.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80419a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  
  // Initialize I2C
  I2C_Init(I2C1, &ConfigI2C);
 80419aa:	4620      	mov	r0, r4
 80419ac:	4669      	mov	r1, sp
  // I2C Configuration
  I2C_InitTypeDef  ConfigI2C;
  ConfigI2C.I2C_Mode                = I2C_Mode_I2C;
  ConfigI2C.I2C_DutyCycle           = I2C_DUTYCYCLE;
  ConfigI2C.I2C_OwnAddress1         = 0xA0;
  ConfigI2C.I2C_Ack                 = I2C_Ack_Enable;
 80419ae:	f8ad 200a 	strh.w	r2, [sp, #10]
  ConfigI2C.I2C_ClockSpeed          = I2C_SPEED;
  ConfigI2C.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80419b2:	f8ad 300c 	strh.w	r3, [sp, #12]
  
  // Initialize I2C
  I2C_Init(I2C1, &ConfigI2C);
 80419b6:	f000 fcbb 	bl	8042330 <I2C_Init>

}
 80419ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80419bc:	08048110 	.word	0x08048110
 80419c0:	0804804c 	.word	0x0804804c
 80419c4:	40005400 	.word	0x40005400
 80419c8:	000186a0 	.word	0x000186a0

080419cc <i2c_write>:
	I2C_AcknowledgeConfig(I2C1, ENABLE);
  I2C_GenerateSTOP(I2C1, ENABLE);
  return errorcode;
}

uint8_t i2c_write(uint8_t device, uint8_t reg, void *buffer, uint32_t bytes) {
 80419cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80419d0:	4607      	mov	r7, r0
 80419d2:	460d      	mov	r5, r1
  uses_timeout

	// START
	I2C_GenerateSTART(I2C1, ENABLE); 
 80419d4:	482e      	ldr	r0, [pc, #184]	; (8041a90 <i2c_write+0xc4>)
 80419d6:	2101      	movs	r1, #1
	I2C_AcknowledgeConfig(I2C1, ENABLE);
  I2C_GenerateSTOP(I2C1, ENABLE);
  return errorcode;
}

uint8_t i2c_write(uint8_t device, uint8_t reg, void *buffer, uint32_t bytes) {
 80419d8:	4614      	mov	r4, r2
 80419da:	461e      	mov	r6, r3
  uses_timeout

	// START
	I2C_GenerateSTART(I2C1, ENABLE); 
 80419dc:	f000 fd1e 	bl	804241c <I2C_GenerateSTART>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)) return i2c_reset(2);
 80419e0:	f000 faca 	bl	8041f78 <millis>
 80419e4:	4680      	mov	r8, r0
 80419e6:	482a      	ldr	r0, [pc, #168]	; (8041a90 <i2c_write+0xc4>)
 80419e8:	492a      	ldr	r1, [pc, #168]	; (8041a94 <i2c_write+0xc8>)
 80419ea:	f000 fd48 	bl	804247e <I2C_CheckEvent>
 80419ee:	b938      	cbnz	r0, 8041a00 <i2c_write+0x34>
 80419f0:	f000 fac2 	bl	8041f78 <millis>
 80419f4:	ebc8 0300 	rsb	r3, r8, r0
 80419f8:	2b63      	cmp	r3, #99	; 0x63
 80419fa:	d9f4      	bls.n	80419e6 <i2c_write+0x1a>
 80419fc:	2002      	movs	r0, #2
 80419fe:	e03c      	b.n	8041a7a <i2c_write+0xae>

	// Address
	I2C_Send7bitAddress(I2C1, device, I2C_Direction_Transmitter); 
 8041a00:	4639      	mov	r1, r7
 8041a02:	4823      	ldr	r0, [pc, #140]	; (8041a90 <i2c_write+0xc4>)
 8041a04:	2200      	movs	r2, #0
 8041a06:	f000 fd21 	bl	804244c <I2C_Send7bitAddress>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) return i2c_reset(3);
 8041a0a:	f000 fab5 	bl	8041f78 <millis>
 8041a0e:	4607      	mov	r7, r0
 8041a10:	481f      	ldr	r0, [pc, #124]	; (8041a90 <i2c_write+0xc4>)
 8041a12:	4921      	ldr	r1, [pc, #132]	; (8041a98 <i2c_write+0xcc>)
 8041a14:	f000 fd33 	bl	804247e <I2C_CheckEvent>
 8041a18:	b930      	cbnz	r0, 8041a28 <i2c_write+0x5c>
 8041a1a:	f000 faad 	bl	8041f78 <millis>
 8041a1e:	1bc2      	subs	r2, r0, r7
 8041a20:	2a63      	cmp	r2, #99	; 0x63
 8041a22:	d9f5      	bls.n	8041a10 <i2c_write+0x44>
 8041a24:	2003      	movs	r0, #3
 8041a26:	e028      	b.n	8041a7a <i2c_write+0xae>

	// Register
	I2C_SendData(I2C1, reg); 
 8041a28:	4629      	mov	r1, r5
 8041a2a:	4819      	ldr	r0, [pc, #100]	; (8041a90 <i2c_write+0xc4>)
 8041a2c:	f000 fd22 	bl	8042474 <I2C_SendData>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) return i2c_reset(4);
 8041a30:	f000 faa2 	bl	8041f78 <millis>
 8041a34:	4605      	mov	r5, r0
 8041a36:	4816      	ldr	r0, [pc, #88]	; (8041a90 <i2c_write+0xc4>)
 8041a38:	4918      	ldr	r1, [pc, #96]	; (8041a9c <i2c_write+0xd0>)
 8041a3a:	f000 fd20 	bl	804247e <I2C_CheckEvent>
 8041a3e:	b928      	cbnz	r0, 8041a4c <i2c_write+0x80>
 8041a40:	f000 fa9a 	bl	8041f78 <millis>
 8041a44:	1b41      	subs	r1, r0, r5
 8041a46:	2963      	cmp	r1, #99	; 0x63
 8041a48:	d9f5      	bls.n	8041a36 <i2c_write+0x6a>
 8041a4a:	e015      	b.n	8041a78 <i2c_write+0xac>
	I2C_AcknowledgeConfig(I2C1, ENABLE);
  I2C_GenerateSTOP(I2C1, ENABLE);
  return errorcode;
}

uint8_t i2c_write(uint8_t device, uint8_t reg, void *buffer, uint32_t bytes) {
 8041a4c:	19a6      	adds	r6, r4, r6
	// Register
	I2C_SendData(I2C1, reg); 
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) return i2c_reset(4);

	// Data
	while(bytes--) {
 8041a4e:	42b4      	cmp	r4, r6
 8041a50:	d017      	beq.n	8041a82 <i2c_write+0xb6>
  	I2C_SendData(I2C1, *(uint8_t*)buffer); 
 8041a52:	480f      	ldr	r0, [pc, #60]	; (8041a90 <i2c_write+0xc4>)
 8041a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8041a58:	f000 fd0c 	bl	8042474 <I2C_SendData>
  	buffer = ((uint8_t*)buffer) + 1;
  	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) return i2c_reset(4);
 8041a5c:	f000 fa8c 	bl	8041f78 <millis>
 8041a60:	4605      	mov	r5, r0
 8041a62:	480b      	ldr	r0, [pc, #44]	; (8041a90 <i2c_write+0xc4>)
 8041a64:	490d      	ldr	r1, [pc, #52]	; (8041a9c <i2c_write+0xd0>)
 8041a66:	f000 fd0a 	bl	804247e <I2C_CheckEvent>
 8041a6a:	2800      	cmp	r0, #0
 8041a6c:	d1ef      	bne.n	8041a4e <i2c_write+0x82>
 8041a6e:	f000 fa83 	bl	8041f78 <millis>
 8041a72:	1b40      	subs	r0, r0, r5
 8041a74:	2863      	cmp	r0, #99	; 0x63
 8041a76:	d9f4      	bls.n	8041a62 <i2c_write+0x96>
 8041a78:	2004      	movs	r0, #4

	// STOP
	I2C_GenerateSTOP(I2C1, ENABLE);
	
	return 0;
}
 8041a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	// Data
	while(bytes--) {
  	I2C_SendData(I2C1, *(uint8_t*)buffer); 
  	buffer = ((uint8_t*)buffer) + 1;
  	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) return i2c_reset(4);
 8041a7e:	f7ff bf57 	b.w	8041930 <i2c_reset>
  }

	// STOP
	I2C_GenerateSTOP(I2C1, ENABLE);
 8041a82:	4803      	ldr	r0, [pc, #12]	; (8041a90 <i2c_write+0xc4>)
 8041a84:	2101      	movs	r1, #1
 8041a86:	f000 fcd5 	bl	8042434 <I2C_GenerateSTOP>
	
	return 0;
}
 8041a8a:	2000      	movs	r0, #0
 8041a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8041a90:	40005400 	.word	0x40005400
 8041a94:	00030001 	.word	0x00030001
 8041a98:	00070082 	.word	0x00070082
 8041a9c:	00070084 	.word	0x00070084

08041aa0 <i2c_read>:

uint8_t i2c_read(uint8_t device, uint8_t reg, void *buffer, uint32_t bytes) {
 8041aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8041aa4:	4606      	mov	r6, r0
 8041aa6:	460f      	mov	r7, r1
 8041aa8:	4615      	mov	r5, r2
 8041aaa:	461c      	mov	r4, r3
  uses_timeout
  
  // While the bus is busy
	timeout(100, I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)) return 1;
 8041aac:	f000 fa64 	bl	8041f78 <millis>
 8041ab0:	4680      	mov	r8, r0
 8041ab2:	4851      	ldr	r0, [pc, #324]	; (8041bf8 <i2c_read+0x158>)
 8041ab4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8041ab8:	f000 fced 	bl	8042496 <I2C_GetFlagStatus>
 8041abc:	b140      	cbz	r0, 8041ad0 <i2c_read+0x30>
 8041abe:	f000 fa5b 	bl	8041f78 <millis>
 8041ac2:	ebc8 0200 	rsb	r2, r8, r0
 8041ac6:	2a63      	cmp	r2, #99	; 0x63
 8041ac8:	d9f3      	bls.n	8041ab2 <i2c_read+0x12>
 8041aca:	2001      	movs	r0, #1
 8041acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/// START
	I2C_GenerateSTART(I2C1, ENABLE);
 8041ad0:	4849      	ldr	r0, [pc, #292]	; (8041bf8 <i2c_read+0x158>)
 8041ad2:	2101      	movs	r1, #1
 8041ad4:	f000 fca2 	bl	804241c <I2C_GenerateSTART>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)) return i2c_reset(2);
 8041ad8:	f000 fa4e 	bl	8041f78 <millis>
 8041adc:	4680      	mov	r8, r0
 8041ade:	4846      	ldr	r0, [pc, #280]	; (8041bf8 <i2c_read+0x158>)
 8041ae0:	4946      	ldr	r1, [pc, #280]	; (8041bfc <i2c_read+0x15c>)
 8041ae2:	f000 fccc 	bl	804247e <I2C_CheckEvent>
 8041ae6:	b938      	cbnz	r0, 8041af8 <i2c_read+0x58>
 8041ae8:	f000 fa46 	bl	8041f78 <millis>
 8041aec:	ebc8 0100 	rsb	r1, r8, r0
 8041af0:	2963      	cmp	r1, #99	; 0x63
 8041af2:	d9f4      	bls.n	8041ade <i2c_read+0x3e>
 8041af4:	2002      	movs	r0, #2
 8041af6:	e07b      	b.n	8041bf0 <i2c_read+0x150>

	// Address:WRITE
	I2C_Send7bitAddress(I2C1, device, I2C_Direction_Transmitter); 
 8041af8:	483f      	ldr	r0, [pc, #252]	; (8041bf8 <i2c_read+0x158>)
 8041afa:	4631      	mov	r1, r6
 8041afc:	2200      	movs	r2, #0
 8041afe:	f000 fca5 	bl	804244c <I2C_Send7bitAddress>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) return i2c_reset(3);
 8041b02:	f000 fa39 	bl	8041f78 <millis>
 8041b06:	4680      	mov	r8, r0
 8041b08:	483b      	ldr	r0, [pc, #236]	; (8041bf8 <i2c_read+0x158>)
 8041b0a:	493d      	ldr	r1, [pc, #244]	; (8041c00 <i2c_read+0x160>)
 8041b0c:	f000 fcb7 	bl	804247e <I2C_CheckEvent>
 8041b10:	b938      	cbnz	r0, 8041b22 <i2c_read+0x82>
 8041b12:	f000 fa31 	bl	8041f78 <millis>
 8041b16:	ebc8 0000 	rsb	r0, r8, r0
 8041b1a:	2863      	cmp	r0, #99	; 0x63
 8041b1c:	d9f4      	bls.n	8041b08 <i2c_read+0x68>
 8041b1e:	2003      	movs	r0, #3
 8041b20:	e066      	b.n	8041bf0 <i2c_read+0x150>

	I2C_Cmd(I2C1, ENABLE); // ???
 8041b22:	4835      	ldr	r0, [pc, #212]	; (8041bf8 <i2c_read+0x158>)
 8041b24:	2101      	movs	r1, #1
 8041b26:	f000 fc6d 	bl	8042404 <I2C_Cmd>

	// Register
	I2C_SendData(I2C1, reg);
 8041b2a:	4639      	mov	r1, r7
 8041b2c:	4832      	ldr	r0, [pc, #200]	; (8041bf8 <i2c_read+0x158>)
 8041b2e:	f000 fca1 	bl	8042474 <I2C_SendData>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) return i2c_reset(4);
 8041b32:	f000 fa21 	bl	8041f78 <millis>
 8041b36:	4607      	mov	r7, r0
 8041b38:	482f      	ldr	r0, [pc, #188]	; (8041bf8 <i2c_read+0x158>)
 8041b3a:	4932      	ldr	r1, [pc, #200]	; (8041c04 <i2c_read+0x164>)
 8041b3c:	f000 fc9f 	bl	804247e <I2C_CheckEvent>
 8041b40:	b930      	cbnz	r0, 8041b50 <i2c_read+0xb0>
 8041b42:	f000 fa19 	bl	8041f78 <millis>
 8041b46:	1bc3      	subs	r3, r0, r7
 8041b48:	2b63      	cmp	r3, #99	; 0x63
 8041b4a:	d9f5      	bls.n	8041b38 <i2c_read+0x98>
 8041b4c:	2004      	movs	r0, #4
 8041b4e:	e04f      	b.n	8041bf0 <i2c_read+0x150>

	// REPEATED-START
	I2C_GenerateSTART(I2C1, ENABLE);
 8041b50:	4829      	ldr	r0, [pc, #164]	; (8041bf8 <i2c_read+0x158>)
 8041b52:	2101      	movs	r1, #1
 8041b54:	f000 fc62 	bl	804241c <I2C_GenerateSTART>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)) return i2c_reset(5);
 8041b58:	f000 fa0e 	bl	8041f78 <millis>
 8041b5c:	4607      	mov	r7, r0
 8041b5e:	4826      	ldr	r0, [pc, #152]	; (8041bf8 <i2c_read+0x158>)
 8041b60:	4926      	ldr	r1, [pc, #152]	; (8041bfc <i2c_read+0x15c>)
 8041b62:	f000 fc8c 	bl	804247e <I2C_CheckEvent>
 8041b66:	b930      	cbnz	r0, 8041b76 <i2c_read+0xd6>
 8041b68:	f000 fa06 	bl	8041f78 <millis>
 8041b6c:	1bc2      	subs	r2, r0, r7
 8041b6e:	2a63      	cmp	r2, #99	; 0x63
 8041b70:	d9f5      	bls.n	8041b5e <i2c_read+0xbe>
 8041b72:	2005      	movs	r0, #5
 8041b74:	e03c      	b.n	8041bf0 <i2c_read+0x150>

  // Address:READ
	I2C_Send7bitAddress(I2C1, device, I2C_Direction_Receiver);
 8041b76:	4631      	mov	r1, r6
 8041b78:	481f      	ldr	r0, [pc, #124]	; (8041bf8 <i2c_read+0x158>)
 8041b7a:	2201      	movs	r2, #1
 8041b7c:	f000 fc66 	bl	804244c <I2C_Send7bitAddress>
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) return i2c_reset(6);
 8041b80:	f000 f9fa 	bl	8041f78 <millis>
 8041b84:	4606      	mov	r6, r0
 8041b86:	481c      	ldr	r0, [pc, #112]	; (8041bf8 <i2c_read+0x158>)
 8041b88:	491f      	ldr	r1, [pc, #124]	; (8041c08 <i2c_read+0x168>)
 8041b8a:	f000 fc78 	bl	804247e <I2C_CheckEvent>
 8041b8e:	b9e0      	cbnz	r0, 8041bca <i2c_read+0x12a>
 8041b90:	f000 f9f2 	bl	8041f78 <millis>
 8041b94:	1b81      	subs	r1, r0, r6
 8041b96:	2963      	cmp	r1, #99	; 0x63
 8041b98:	d9f5      	bls.n	8041b86 <i2c_read+0xe6>
 8041b9a:	2006      	movs	r0, #6
 8041b9c:	e028      	b.n	8041bf0 <i2c_read+0x150>

	// Data
	while(bytes--) {
		if(!bytes) {
 8041b9e:	b93c      	cbnz	r4, 8041bb0 <i2c_read+0x110>
		  // Disable ACK
		  I2C_AcknowledgeConfig(I2C1, DISABLE);
 8041ba0:	4815      	ldr	r0, [pc, #84]	; (8041bf8 <i2c_read+0x158>)
 8041ba2:	4621      	mov	r1, r4
 8041ba4:	f000 fc5a 	bl	804245c <I2C_AcknowledgeConfig>
		  I2C_GenerateSTOP(I2C1, ENABLE);
 8041ba8:	4813      	ldr	r0, [pc, #76]	; (8041bf8 <i2c_read+0x158>)
 8041baa:	2101      	movs	r1, #1
 8041bac:	f000 fc42 	bl	8042434 <I2C_GenerateSTOP>
		}
		timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED)) return i2c_reset(7);
 8041bb0:	f000 f9e2 	bl	8041f78 <millis>
 8041bb4:	4606      	mov	r6, r0
 8041bb6:	4810      	ldr	r0, [pc, #64]	; (8041bf8 <i2c_read+0x158>)
 8041bb8:	4914      	ldr	r1, [pc, #80]	; (8041c0c <i2c_read+0x16c>)
 8041bba:	f000 fc60 	bl	804247e <I2C_CheckEvent>
 8041bbe:	b148      	cbz	r0, 8041bd4 <i2c_read+0x134>
    *((uint8_t*)buffer) = I2C_ReceiveData(I2C1);
 8041bc0:	480d      	ldr	r0, [pc, #52]	; (8041bf8 <i2c_read+0x158>)
 8041bc2:	f000 fc59 	bl	8042478 <I2C_ReceiveData>
 8041bc6:	f805 0c01 	strb.w	r0, [r5, #-1]
 8041bca:	3c01      	subs	r4, #1
	I2C_GenerateSTOP(I2C1, ENABLE);
	
	return 0;
}

uint8_t i2c_read(uint8_t device, uint8_t reg, void *buffer, uint32_t bytes) {
 8041bcc:	3501      	adds	r5, #1
  // Address:READ
	I2C_Send7bitAddress(I2C1, device, I2C_Direction_Receiver);
	timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) return i2c_reset(6);

	// Data
	while(bytes--) {
 8041bce:	1c63      	adds	r3, r4, #1
 8041bd0:	d1e5      	bne.n	8041b9e <i2c_read+0xfe>
 8041bd2:	e006      	b.n	8041be2 <i2c_read+0x142>
		if(!bytes) {
		  // Disable ACK
		  I2C_AcknowledgeConfig(I2C1, DISABLE);
		  I2C_GenerateSTOP(I2C1, ENABLE);
		}
		timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED)) return i2c_reset(7);
 8041bd4:	f000 f9d0 	bl	8041f78 <millis>
 8041bd8:	1b80      	subs	r0, r0, r6
 8041bda:	2863      	cmp	r0, #99	; 0x63
 8041bdc:	d9eb      	bls.n	8041bb6 <i2c_read+0x116>
 8041bde:	2007      	movs	r0, #7
 8041be0:	e006      	b.n	8041bf0 <i2c_read+0x150>
    *((uint8_t*)buffer) = I2C_ReceiveData(I2C1);
    buffer = ((uint8_t*)buffer) + 1;
	}

	// Enable ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8041be2:	4805      	ldr	r0, [pc, #20]	; (8041bf8 <i2c_read+0x158>)
 8041be4:	2101      	movs	r1, #1
 8041be6:	f000 fc39 	bl	804245c <I2C_AcknowledgeConfig>
	
	return 0;
 8041bea:	2000      	movs	r0, #0
 8041bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		
 8041bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if(!bytes) {
		  // Disable ACK
		  I2C_AcknowledgeConfig(I2C1, DISABLE);
		  I2C_GenerateSTOP(I2C1, ENABLE);
		}
		timeout(100, !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED)) return i2c_reset(7);
 8041bf4:	f7ff be9c 	b.w	8041930 <i2c_reset>
 8041bf8:	40005400 	.word	0x40005400
 8041bfc:	00030001 	.word	0x00030001
 8041c00:	00070082 	.word	0x00070082
 8041c04:	00070084 	.word	0x00070084
 8041c08:	00030002 	.word	0x00030002
 8041c0c:	00030040 	.word	0x00030040

08041c10 <cpu_reclock>:
const ClockDef_t sysclock_3m25 = {  3250000, 0,     0, 0, 0, 0, RCC_SYSCLK_Div8, RCC_HCLK_Div1, RCC_HCLK_Div1}; //    3.250 MHz
const ClockDef_t sysclock_15m  = { 15000000, MHZ, 240, 2, 5, 0, RCC_SYSCLK_Div8, RCC_HCLK_Div1, RCC_HCLK_Div1}; //   15.000 Mhz with PLL
const ClockDef_t sysclock_26m  = { 26000000, 0,     0, 0, 0, 1, RCC_SYSCLK_Div1, RCC_HCLK_Div1, RCC_HCLK_Div1}; //   26.000 MHz
const ClockDef_t sysclock_120m = {120000000, MHZ, 240, 2, 5, 7, RCC_SYSCLK_Div1, RCC_HCLK_Div2, RCC_HCLK_Div4}; //  120.000 MHz with PLL 

void cpu_reclock(const ClockDef_t *clk) {
 8041c10:	b513      	push	{r0, r1, r4, lr}
 8041c12:	4604      	mov	r4, r0

extern volatile uint16_t int_ctr;

// Nested interrupt enable
__attribute__( ( always_inline ) ) __STATIC_INLINE void cli(void) {
  __ASM volatile ("cpsid i");
 8041c14:	b672      	cpsid	i
  int_ctr++;
 8041c16:	4b29      	ldr	r3, [pc, #164]	; (8041cbc <cpu_reclock+0xac>)
 8041c18:	881a      	ldrh	r2, [r3, #0]
 8041c1a:	1c50      	adds	r0, r2, #1
 8041c1c:	b281      	uxth	r1, r0
  // Disable interrupts
  cli();
  
  // Switch to HSE (as changing PLL while using it is asking for trouble)
  RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 8041c1e:	2001      	movs	r0, #1
 8041c20:	8019      	strh	r1, [r3, #0]
 8041c22:	f000 fc8b 	bl	804253c <RCC_SYSCLKConfig>
  while(RCC_GetSYSCLKSource() != (uint32_t)RCC_CFGR_SWS_HSE); // Wait for completion
 8041c26:	f000 fc93 	bl	8042550 <RCC_GetSYSCLKSource>
 8041c2a:	2804      	cmp	r0, #4
 8041c2c:	d1fb      	bne.n	8041c26 <cpu_reclock+0x16>

  // Disable PLL
  RCC_PLLCmd(DISABLE);
 8041c2e:	2000      	movs	r0, #0
 8041c30:	f000 fc7e 	bl	8042530 <RCC_PLLCmd>

  // Set HCLK & PCLK from table
  RCC_HCLKConfig(clk->hps);
 8041c34:	6920      	ldr	r0, [r4, #16]
 8041c36:	f000 fc93 	bl	8042560 <RCC_HCLKConfig>
  RCC_PCLK2Config(clk->pps2);
 8041c3a:	6960      	ldr	r0, [r4, #20]
 8041c3c:	f000 fca4 	bl	8042588 <RCC_PCLK2Config>
  RCC_PCLK1Config(clk->pps1);
 8041c40:	69a0      	ldr	r0, [r4, #24]
 8041c42:	f000 fc97 	bl	8042574 <RCC_PCLK1Config>

  // Set flash latency from table
  FLASH_SetLatency(clk->f_latency);
 8041c46:	68e0      	ldr	r0, [r4, #12]
 8041c48:	f000 fae2 	bl	8042210 <FLASH_SetLatency>

  // Use PLL?
  if(clk->m) {
 8041c4c:	88a1      	ldrh	r1, [r4, #4]
 8041c4e:	b9d9      	cbnz	r1, 8041c88 <cpu_reclock+0x78>
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    while (RCC_GetSYSCLKSource() != (uint32_t)RCC_CFGR_SWS_PLL); // Wait for completion
  }

  // Update system tick
  SystemCoreClockUpdate();
 8041c50:	f000 fe2a 	bl	80428a8 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock / 1000);
 8041c54:	4b1a      	ldr	r3, [pc, #104]	; (8041cc0 <cpu_reclock+0xb0>)
 8041c56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8041c5a:	681a      	ldr	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8041c5c:	4b19      	ldr	r3, [pc, #100]	; (8041cc4 <cpu_reclock+0xb4>)
 8041c5e:	fbb2 f0f1 	udiv	r0, r2, r1
 8041c62:	1e42      	subs	r2, r0, #1
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8041c64:	4818      	ldr	r0, [pc, #96]	; (8041cc8 <cpu_reclock+0xb8>)
 8041c66:	21f0      	movs	r1, #240	; 0xf0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8041c68:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8041c6a:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8041c6e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041c70:	2107      	movs	r1, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8041c72:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041c74:	6019      	str	r1, [r3, #0]
}
// Nested interrupt disable
__attribute__( ( always_inline ) ) __STATIC_INLINE void sei(void) {
  __ASM volatile ("cpsid i");
 8041c76:	b672      	cpsid	i
  if(!--int_ctr) {__ASM volatile ("cpsie i");}
 8041c78:	4810      	ldr	r0, [pc, #64]	; (8041cbc <cpu_reclock+0xac>)
 8041c7a:	8803      	ldrh	r3, [r0, #0]
 8041c7c:	1e5a      	subs	r2, r3, #1
 8041c7e:	b291      	uxth	r1, r2
 8041c80:	8001      	strh	r1, [r0, #0]
 8041c82:	b9c9      	cbnz	r1, 8041cb8 <cpu_reclock+0xa8>
 8041c84:	b662      	cpsie	i
 8041c86:	e017      	b.n	8041cb8 <cpu_reclock+0xa8>
  FLASH_SetLatency(clk->f_latency);

  // Use PLL?
  if(clk->m) {
    // Configure PLL
    RCC_PLLConfig(RCC_PLLCFGR_PLLSRC_HSE, clk->m, clk->n, clk->p, clk->q);
 8041c88:	8960      	ldrh	r0, [r4, #10]
 8041c8a:	88e2      	ldrh	r2, [r4, #6]
 8041c8c:	9000      	str	r0, [sp, #0]
 8041c8e:	8923      	ldrh	r3, [r4, #8]
 8041c90:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8041c94:	f000 fc3c 	bl	8042510 <RCC_PLLConfig>
    // Enable PLL
    RCC_PLLCmd(ENABLE);
 8041c98:	2001      	movs	r0, #1
 8041c9a:	f000 fc49 	bl	8042530 <RCC_PLLCmd>
    // Wait for PLL to become stable
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8041c9e:	2039      	movs	r0, #57	; 0x39
 8041ca0:	f000 fcfe 	bl	80426a0 <RCC_GetFlagStatus>
 8041ca4:	2800      	cmp	r0, #0
 8041ca6:	d0fa      	beq.n	8041c9e <cpu_reclock+0x8e>
    // Switch to PLL
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8041ca8:	2002      	movs	r0, #2
 8041caa:	f000 fc47 	bl	804253c <RCC_SYSCLKConfig>
    while (RCC_GetSYSCLKSource() != (uint32_t)RCC_CFGR_SWS_PLL); // Wait for completion
 8041cae:	f000 fc4f 	bl	8042550 <RCC_GetSYSCLKSource>
 8041cb2:	2808      	cmp	r0, #8
 8041cb4:	d1fb      	bne.n	8041cae <cpu_reclock+0x9e>
 8041cb6:	e7cb      	b.n	8041c50 <cpu_reclock+0x40>
  // Update system tick
  SystemCoreClockUpdate();
  SysTick_Config(SystemCoreClock / 1000);

  sei();
}
 8041cb8:	bd1c      	pop	{r2, r3, r4, pc}
 8041cba:	bf00      	nop
 8041cbc:	200019ec 	.word	0x200019ec
 8041cc0:	20000c20 	.word	0x20000c20
 8041cc4:	e000e010 	.word	0xe000e010
 8041cc8:	e000ed00 	.word	0xe000ed00

08041ccc <cpu_init>:

void cpu_init(void) {
 8041ccc:	b510      	push	{r4, lr}
  RCC_DeInit();
 8041cce:	f000 fbfd 	bl	80424cc <RCC_DeInit>

  RCC_HSEConfig(RCC_HSE_ON);
 8041cd2:	2001      	movs	r0, #1
 8041cd4:	f000 fc14 	bl	8042500 <RCC_HSEConfig>
  ErrorStatus HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8041cd8:	f000 fcf6 	bl	80426c8 <RCC_WaitForHSEStartUp>

  if (HSEStartUpStatus == SUCCESS) {
 8041cdc:	2801      	cmp	r0, #1

void cpu_init(void) {
  RCC_DeInit();

  RCC_HSEConfig(RCC_HSE_ON);
  ErrorStatus HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8041cde:	4604      	mov	r4, r0

  if (HSEStartUpStatus == SUCCESS) {
 8041ce0:	d10c      	bne.n	8041cfc <cpu_init+0x30>
    
    // Enable flash buffers and prefetching
    FLASH_PrefetchBufferCmd(ENABLE);
 8041ce2:	f000 fa9b 	bl	804221c <FLASH_PrefetchBufferCmd>
    FLASH_InstructionCacheCmd(ENABLE);
 8041ce6:	4620      	mov	r0, r4
 8041ce8:	f000 faa4 	bl	8042234 <FLASH_InstructionCacheCmd>
    FLASH_DataCacheCmd(ENABLE);
 8041cec:	4620      	mov	r0, r4
 8041cee:	f000 faad 	bl	804224c <FLASH_DataCacheCmd>

    // Set startup speed
    cpu_reclock(&sysclock_120m);
 8041cf2:	4803      	ldr	r0, [pc, #12]	; (8041d00 <cpu_init+0x34>)
  }
}
 8041cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    FLASH_PrefetchBufferCmd(ENABLE);
    FLASH_InstructionCacheCmd(ENABLE);
    FLASH_DataCacheCmd(ENABLE);

    // Set startup speed
    cpu_reclock(&sysclock_120m);
 8041cf8:	f7ff bf8a 	b.w	8041c10 <cpu_reclock>
 8041cfc:	bd10      	pop	{r4, pc}
 8041cfe:	bf00      	nop
 8041d00:	08047dc4 	.word	0x08047dc4

08041d04 <pmu_init>:
}

static bool pmu_init_ok;

// Initializes PMU (Power Management Unit)
bool pmu_init(void) {
 8041d04:	b513      	push	{r0, r1, r4, lr}
    // Only initialize once
    if(pmu_init_ok) return false;
 8041d06:	4c1b      	ldr	r4, [pc, #108]	; (8041d74 <pmu_init+0x70>)
 8041d08:	7823      	ldrb	r3, [r4, #0]
 8041d0a:	b10b      	cbz	r3, 8041d10 <pmu_init+0xc>
 8041d0c:	2000      	movs	r0, #0
 8041d0e:	e030      	b.n	8041d72 <pmu_init+0x6e>
    
    // Write default configuration
    uint8_t config0 = VSYS_4_4V | ACIC_100mA_DPPM_ENABLE | TH_LOOP | DYN_TMR | TERM_EN | CH_EN;
 8041d10:	204f      	movs	r0, #79	; 0x4f
    uint8_t config1 = I_TERM_10 | ISET_100 | I_PRE_10;
 8041d12:	2174      	movs	r1, #116	; 0x74
    uint8_t config2 = SFTY_TMR_5h | PRE_TMR_30m | NTC_10k | V_DPPM_4_3_V | VBAT_COMP_ENABLE;
 8041d14:	224e      	movs	r2, #78	; 0x4e
    uint8_t defdcdc = DCDC_DISCH | DCDC1_DEFAULT;
 8041d16:	2369      	movs	r3, #105	; 0x69
bool pmu_init(void) {
    // Only initialize once
    if(pmu_init_ok) return false;
    
    // Write default configuration
    uint8_t config0 = VSYS_4_4V | ACIC_100mA_DPPM_ENABLE | TH_LOOP | DYN_TMR | TERM_EN | CH_EN;
 8041d18:	f88d 0004 	strb.w	r0, [sp, #4]
    uint8_t config1 = I_TERM_10 | ISET_100 | I_PRE_10;
 8041d1c:	f88d 1005 	strb.w	r1, [sp, #5]
    uint8_t config2 = SFTY_TMR_5h | PRE_TMR_30m | NTC_10k | V_DPPM_4_3_V | VBAT_COMP_ENABLE;
 8041d20:	f88d 2006 	strb.w	r2, [sp, #6]
    uint8_t defdcdc = DCDC_DISCH | DCDC1_DEFAULT;
 8041d24:	f88d 3007 	strb.w	r3, [sp, #7]
    if(i2c_write(PMU_ADDRESS, CHGCONFIG0, &config0, 1)) return false;
 8041d28:	2090      	movs	r0, #144	; 0x90
 8041d2a:	2102      	movs	r1, #2
 8041d2c:	aa01      	add	r2, sp, #4
 8041d2e:	2301      	movs	r3, #1
 8041d30:	f7ff fe4c 	bl	80419cc <i2c_write>
 8041d34:	2800      	cmp	r0, #0
 8041d36:	d1e9      	bne.n	8041d0c <pmu_init+0x8>
    if(i2c_write(PMU_ADDRESS, CHGCONFIG1, &config1, 1)) return false;
 8041d38:	2090      	movs	r0, #144	; 0x90
 8041d3a:	2103      	movs	r1, #3
 8041d3c:	f10d 0205 	add.w	r2, sp, #5
 8041d40:	2301      	movs	r3, #1
 8041d42:	f7ff fe43 	bl	80419cc <i2c_write>
 8041d46:	2800      	cmp	r0, #0
 8041d48:	d1e0      	bne.n	8041d0c <pmu_init+0x8>
    if(i2c_write(PMU_ADDRESS, CHGCONFIG2, &config2, 1)) return false;
 8041d4a:	2090      	movs	r0, #144	; 0x90
 8041d4c:	2104      	movs	r1, #4
 8041d4e:	f10d 0206 	add.w	r2, sp, #6
 8041d52:	2301      	movs	r3, #1
 8041d54:	f7ff fe3a 	bl	80419cc <i2c_write>
 8041d58:	2800      	cmp	r0, #0
 8041d5a:	d1d7      	bne.n	8041d0c <pmu_init+0x8>
    if(i2c_write(PMU_ADDRESS, DEFDCDC,    &defdcdc, 1)) return false;
 8041d5c:	2107      	movs	r1, #7
 8041d5e:	2090      	movs	r0, #144	; 0x90
 8041d60:	eb0d 0201 	add.w	r2, sp, r1
 8041d64:	2301      	movs	r3, #1
 8041d66:	f7ff fe31 	bl	80419cc <i2c_write>
 8041d6a:	2800      	cmp	r0, #0
 8041d6c:	d1ce      	bne.n	8041d0c <pmu_init+0x8>
      
    // Success
    return pmu_init_ok = true;
 8041d6e:	2001      	movs	r0, #1
 8041d70:	7020      	strb	r0, [r4, #0]
}
 8041d72:	bd1c      	pop	{r2, r3, r4, pc}
 8041d74:	20001995 	.word	0x20001995

08041d78 <pmu_charge>:
// Enables or disables charging of the battery
// Enabling ALLOWS the PMU to charge the battery, to find out if it actually IS
// actively charging the battery, you need to call pmu_charging.
bool pmu_charge(bool enable) {
  // Only if initialized
  if(!pmu_init_ok) return false;
 8041d78:	4b12      	ldr	r3, [pc, #72]	; (8041dc4 <pmu_charge+0x4c>)
}

// Enables or disables charging of the battery
// Enabling ALLOWS the PMU to charge the battery, to find out if it actually IS
// actively charging the battery, you need to call pmu_charging.
bool pmu_charge(bool enable) {
 8041d7a:	b513      	push	{r0, r1, r4, lr}
 8041d7c:	4604      	mov	r4, r0
  // Only if initialized
  if(!pmu_init_ok) return false;
 8041d7e:	7818      	ldrb	r0, [r3, #0]
 8041d80:	b908      	cbnz	r0, 8041d86 <pmu_charge+0xe>
 8041d82:	2000      	movs	r0, #0
 8041d84:	e01c      	b.n	8041dc0 <pmu_charge+0x48>
  
  // Read current configuration
  uint8_t config0;
  if(i2c_read(PMU_ADDRESS, CHGSTATUS, &config0, 1)) return false;
 8041d86:	2101      	movs	r1, #1
 8041d88:	2090      	movs	r0, #144	; 0x90
 8041d8a:	f10d 0207 	add.w	r2, sp, #7
 8041d8e:	460b      	mov	r3, r1
 8041d90:	f7ff fe86 	bl	8041aa0 <i2c_read>
 8041d94:	2800      	cmp	r0, #0
 8041d96:	d1f4      	bne.n	8041d82 <pmu_charge+0xa>
 8041d98:	f89d 1007 	ldrb.w	r1, [sp, #7]
    
  // Set/clear charge enable and write configuration
  config0 = enable ? (config0 | CH_EN) : (config0 & ~CH_EN);
 8041d9c:	b114      	cbz	r4, 8041da4 <pmu_charge+0x2c>
 8041d9e:	f041 0301 	orr.w	r3, r1, #1
 8041da2:	e001      	b.n	8041da8 <pmu_charge+0x30>
 8041da4:	f001 03fe 	and.w	r3, r1, #254	; 0xfe
 8041da8:	aa02      	add	r2, sp, #8
 8041daa:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(i2c_write(PMU_ADDRESS, CHGCONFIG0, &config0, 1)) return false;
 8041dae:	2090      	movs	r0, #144	; 0x90
 8041db0:	2102      	movs	r1, #2
 8041db2:	2301      	movs	r3, #1
 8041db4:	f7ff fe0a 	bl	80419cc <i2c_write>
 8041db8:	f1d0 0001 	rsbs	r0, r0, #1
 8041dbc:	bf38      	it	cc
 8041dbe:	2000      	movcc	r0, #0
    
  // Success
  return true;
}
 8041dc0:	bd1c      	pop	{r2, r3, r4, pc}
 8041dc2:	bf00      	nop
 8041dc4:	20001995 	.word	0x20001995

08041dc8 <pmu_charging>:

// Checks if the PMU is actively charging the battery
bool pmu_charging(bool *charging) {
  if(!pmu_init_ok) return false;
 8041dc8:	4b11      	ldr	r3, [pc, #68]	; (8041e10 <pmu_charging+0x48>)
  // Success
  return true;
}

// Checks if the PMU is actively charging the battery
bool pmu_charging(bool *charging) {
 8041dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8041dcc:	4604      	mov	r4, r0
  if(!pmu_init_ok) return false;
 8041dce:	7818      	ldrb	r0, [r3, #0]
 8041dd0:	b908      	cbnz	r0, 8041dd6 <pmu_charging+0xe>
 8041dd2:	2000      	movs	r0, #0
 8041dd4:	e01b      	b.n	8041e0e <pmu_charging+0x46>

  static bool last_charging;
  uint8_t config0, status;
  
  *charging = last_charging;
 8041dd6:	4d0f      	ldr	r5, [pc, #60]	; (8041e14 <pmu_charging+0x4c>)
  if(i2c_read(PMU_ADDRESS, CHGCONFIG0, &config0, 1)) return false;
 8041dd8:	2090      	movs	r0, #144	; 0x90
  if(!pmu_init_ok) return false;

  static bool last_charging;
  uint8_t config0, status;
  
  *charging = last_charging;
 8041dda:	7829      	ldrb	r1, [r5, #0]
  if(i2c_read(PMU_ADDRESS, CHGCONFIG0, &config0, 1)) return false;
 8041ddc:	f10d 0206 	add.w	r2, sp, #6
  if(!pmu_init_ok) return false;

  static bool last_charging;
  uint8_t config0, status;
  
  *charging = last_charging;
 8041de0:	7021      	strb	r1, [r4, #0]
  if(i2c_read(PMU_ADDRESS, CHGCONFIG0, &config0, 1)) return false;
 8041de2:	2301      	movs	r3, #1
 8041de4:	2102      	movs	r1, #2
 8041de6:	f7ff fe5b 	bl	8041aa0 <i2c_read>
 8041dea:	2800      	cmp	r0, #0
 8041dec:	d1f1      	bne.n	8041dd2 <pmu_charging+0xa>
  if(i2c_read(PMU_ADDRESS, CHGSTATUS, &status, 1)) return false;
 8041dee:	2101      	movs	r1, #1
 8041df0:	2090      	movs	r0, #144	; 0x90
 8041df2:	f10d 0207 	add.w	r2, sp, #7
 8041df6:	460b      	mov	r3, r1
 8041df8:	f7ff fe52 	bl	8041aa0 <i2c_read>
 8041dfc:	2800      	cmp	r0, #0
 8041dfe:	d1e8      	bne.n	8041dd2 <pmu_charging+0xa>
 
  *charging = last_charging = (status & CH_ACTIVE_MSK) != 0;
 8041e00:	f89d 2007 	ldrb.w	r2, [sp, #7]
  return true;
 8041e04:	2001      	movs	r0, #1
  
  *charging = last_charging;
  if(i2c_read(PMU_ADDRESS, CHGCONFIG0, &config0, 1)) return false;
  if(i2c_read(PMU_ADDRESS, CHGSTATUS, &status, 1)) return false;
 
  *charging = last_charging = (status & CH_ACTIVE_MSK) != 0;
 8041e06:	f3c2 03c0 	ubfx	r3, r2, #3, #1
 8041e0a:	702b      	strb	r3, [r5, #0]
 8041e0c:	7023      	strb	r3, [r4, #0]
  return true;
 8041e0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8041e10:	20001995 	.word	0x20001995
 8041e14:	20001994 	.word	0x20001994

08041e18 <adc_init>:

#include <stm32f2xx_rcc.h>
#include "pins.h"
#include "driver_adc.h"
  
void adc_init(void) {
 8041e18:	b530      	push	{r4, r5, lr}
 8041e1a:	b08b      	sub	sp, #44	; 0x2c
  // Initialize ADC
  ADC_CommonInitTypeDef ConfigCADC;
  ADC_CommonStructInit(&ConfigCADC);
 8041e1c:	4668      	mov	r0, sp
 8041e1e:	f000 f927 	bl	8042070 <ADC_CommonStructInit>
  ADC_CommonInit(&ConfigCADC);
 8041e22:	4668      	mov	r0, sp
 8041e24:	f000 f910 	bl	8042048 <ADC_CommonInit>

  // Initialize ADC1 & ADC2
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
  ADC_InitTypeDef ConfigADC;
  ADC_StructInit(&ConfigADC);
  ADC_Init(ADC1, &ConfigADC);
 8041e28:	4d13      	ldr	r5, [pc, #76]	; (8041e78 <adc_init+0x60>)
  ADC_CommonInitTypeDef ConfigCADC;
  ADC_CommonStructInit(&ConfigCADC);
  ADC_CommonInit(&ConfigCADC);

  // Initialize ADC1 & ADC2
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 8041e2a:	2101      	movs	r1, #1
 8041e2c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8041e30:	f000 fc12 	bl	8042658 <RCC_APB2PeriphClockCmd>
  ADC_InitTypeDef ConfigADC;
  ADC_StructInit(&ConfigADC);
  ADC_Init(ADC1, &ConfigADC);
  ADC_Init(ADC2, &ConfigADC);
 8041e34:	4c11      	ldr	r4, [pc, #68]	; (8041e7c <adc_init+0x64>)
  ADC_CommonInit(&ConfigCADC);

  // Initialize ADC1 & ADC2
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
  ADC_InitTypeDef ConfigADC;
  ADC_StructInit(&ConfigADC);
 8041e36:	a804      	add	r0, sp, #16
 8041e38:	f000 f8fc 	bl	8042034 <ADC_StructInit>
  ADC_Init(ADC1, &ConfigADC);
 8041e3c:	4628      	mov	r0, r5
 8041e3e:	a904      	add	r1, sp, #16
 8041e40:	f000 f8d2 	bl	8041fe8 <ADC_Init>
  ADC_Init(ADC2, &ConfigADC);
 8041e44:	4620      	mov	r0, r4
 8041e46:	a904      	add	r1, sp, #16
 8041e48:	f000 f8ce 	bl	8041fe8 <ADC_Init>
/*#define ADC_Channel_TempSensor                      ((uint8_t)ADC_Channel_16)
#define ADC_Channel_Vrefint                         ((uint8_t)ADC_Channel_17)
#define ADC_Channel_Vbat                            ((uint8_t)ADC_Channel_18)
*/
  // Configure channels
  ADC_RegularChannelConfig(ADC1, ADC_Channel_2,  1, ADC_SampleTime_15Cycles); // Battery voltage
 8041e4c:	2201      	movs	r2, #1
 8041e4e:	4628      	mov	r0, r5
 8041e50:	2102      	movs	r1, #2
 8041e52:	4613      	mov	r3, r2
 8041e54:	f000 f91b 	bl	804208e <ADC_RegularChannelConfig>
  ADC_RegularChannelConfig(ADC2, ADC_Channel_14, 1, ADC_SampleTime_15Cycles); // Light sensor
 8041e58:	2201      	movs	r2, #1
 8041e5a:	4620      	mov	r0, r4
 8041e5c:	210e      	movs	r1, #14
 8041e5e:	4613      	mov	r3, r2
 8041e60:	f000 f915 	bl	804208e <ADC_RegularChannelConfig>

  // Enable ADC1 & 2
  ADC_Cmd(ADC1, ENABLE);
 8041e64:	4628      	mov	r0, r5
 8041e66:	2101      	movs	r1, #1
 8041e68:	f000 f908 	bl	804207c <ADC_Cmd>
  ADC_Cmd(ADC2, ENABLE);
 8041e6c:	4620      	mov	r0, r4
 8041e6e:	2101      	movs	r1, #1
 8041e70:	f000 f904 	bl	804207c <ADC_Cmd>

}
 8041e74:	b00b      	add	sp, #44	; 0x2c
 8041e76:	bd30      	pop	{r4, r5, pc}
 8041e78:	40012000 	.word	0x40012000
 8041e7c:	40012100 	.word	0x40012100

08041e80 <adc_battery>:

uint16_t adc_battery(void) {
  digitalWrite(ADC_BATTERY_ENABLE, HIGH);
 8041e80:	4808      	ldr	r0, [pc, #32]	; (8041ea4 <adc_battery+0x24>)
  ADC_Cmd(ADC1, ENABLE);
  ADC_Cmd(ADC2, ENABLE);

}

uint16_t adc_battery(void) {
 8041e82:	b508      	push	{r3, lr}
  digitalWrite(ADC_BATTERY_ENABLE, HIGH);
 8041e84:	2101      	movs	r1, #1
 8041e86:	f000 f865 	bl	8041f54 <digitalWrite>
  ADC_SoftwareStartConv(ADC1);
 8041e8a:	4807      	ldr	r0, [pc, #28]	; (8041ea8 <adc_battery+0x28>)
 8041e8c:	f000 f94c 	bl	8042128 <ADC_SoftwareStartConv>
  while(ADC_GetSoftwareStartConvStatus(ADC1));
 8041e90:	4805      	ldr	r0, [pc, #20]	; (8041ea8 <adc_battery+0x28>)
 8041e92:	f000 f94e 	bl	8042132 <ADC_GetSoftwareStartConvStatus>
 8041e96:	2800      	cmp	r0, #0
 8041e98:	d1fa      	bne.n	8041e90 <adc_battery+0x10>
  return ADC_GetConversionValue(ADC1);
 8041e9a:	4803      	ldr	r0, [pc, #12]	; (8041ea8 <adc_battery+0x28>)
  digitalWrite(ADC_BATTERY_ENABLE, LOW);
}
 8041e9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

uint16_t adc_battery(void) {
  digitalWrite(ADC_BATTERY_ENABLE, HIGH);
  ADC_SoftwareStartConv(ADC1);
  while(ADC_GetSoftwareStartConvStatus(ADC1));
  return ADC_GetConversionValue(ADC1);
 8041ea0:	f000 b94b 	b.w	804213a <ADC_GetConversionValue>
 8041ea4:	08047e40 	.word	0x08047e40
 8041ea8:	40012000 	.word	0x40012000

08041eac <adc_lightsensor>:
  digitalWrite(ADC_BATTERY_ENABLE, LOW);
}

uint16_t adc_lightsensor(void) {
  digitalWrite(ADC_LIGHTSENSOR_ENABLE, HIGH);
 8041eac:	4808      	ldr	r0, [pc, #32]	; (8041ed0 <adc_lightsensor+0x24>)
  while(ADC_GetSoftwareStartConvStatus(ADC1));
  return ADC_GetConversionValue(ADC1);
  digitalWrite(ADC_BATTERY_ENABLE, LOW);
}

uint16_t adc_lightsensor(void) {
 8041eae:	b508      	push	{r3, lr}
  digitalWrite(ADC_LIGHTSENSOR_ENABLE, HIGH);
 8041eb0:	2101      	movs	r1, #1
 8041eb2:	f000 f84f 	bl	8041f54 <digitalWrite>
  ADC_SoftwareStartConv(ADC2);
 8041eb6:	4807      	ldr	r0, [pc, #28]	; (8041ed4 <adc_lightsensor+0x28>)
 8041eb8:	f000 f936 	bl	8042128 <ADC_SoftwareStartConv>
  while(ADC_GetSoftwareStartConvStatus(ADC2));
 8041ebc:	4805      	ldr	r0, [pc, #20]	; (8041ed4 <adc_lightsensor+0x28>)
 8041ebe:	f000 f938 	bl	8042132 <ADC_GetSoftwareStartConvStatus>
 8041ec2:	2800      	cmp	r0, #0
 8041ec4:	d1fa      	bne.n	8041ebc <adc_lightsensor+0x10>
  return ADC_GetConversionValue(ADC2);
 8041ec6:	4803      	ldr	r0, [pc, #12]	; (8041ed4 <adc_lightsensor+0x28>)
  digitalWrite(ADC_LIGHTSENSOR_ENABLE, LOW);
}
 8041ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

uint16_t adc_lightsensor(void) {
  digitalWrite(ADC_LIGHTSENSOR_ENABLE, HIGH);
  ADC_SoftwareStartConv(ADC2);
  while(ADC_GetSoftwareStartConvStatus(ADC2));
  return ADC_GetConversionValue(ADC2);
 8041ecc:	f000 b935 	b.w	804213a <ADC_GetConversionValue>
 8041ed0:	08048010 	.word	0x08048010
 8041ed4:	40012100 	.word	0x40012100

08041ed8 <pinMode>:
const PinDef_t PIN_PC11 = {GPIOC, GPIO_Pin_11, GPIO_PinSource11, RCC_AHB1Periph_GPIOC, INPUT_PULLDOWN}; // SPI3_MISO_Pin
const PinDef_t PIN_PC12 = {GPIOC, GPIO_Pin_12, GPIO_PinSource12, RCC_AHB1Periph_GPIOC, OUTPUT_LOW};     // SPI3_MOSI_Pin
const PinDef_t PIN_PC13 = {GPIOC, GPIO_Pin_13, GPIO_PinSource13, RCC_AHB1Periph_GPIOC, INPUT};          // HOST_WAKE_UP_Pin

// Changes the "mode"/configuration of a pin
void pinMode(const PinDef_t *pin, const PinCfg_t *cfg) {
 8041ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  GPIO_InitTypeDef ConfigPin;
  ConfigPin.GPIO_Pin   = pin->pin;
 8041eda:	6843      	ldr	r3, [r0, #4]
const PinDef_t PIN_PC11 = {GPIOC, GPIO_Pin_11, GPIO_PinSource11, RCC_AHB1Periph_GPIOC, INPUT_PULLDOWN}; // SPI3_MISO_Pin
const PinDef_t PIN_PC12 = {GPIOC, GPIO_Pin_12, GPIO_PinSource12, RCC_AHB1Periph_GPIOC, OUTPUT_LOW};     // SPI3_MOSI_Pin
const PinDef_t PIN_PC13 = {GPIOC, GPIO_Pin_13, GPIO_PinSource13, RCC_AHB1Periph_GPIOC, INPUT};          // HOST_WAKE_UP_Pin

// Changes the "mode"/configuration of a pin
void pinMode(const PinDef_t *pin, const PinCfg_t *cfg) {
 8041edc:	460c      	mov	r4, r1
 8041ede:	4605      	mov	r5, r0
  GPIO_InitTypeDef ConfigPin;
  ConfigPin.GPIO_Pin   = pin->pin;
  ConfigPin.GPIO_Mode  = cfg->mode;
 8041ee0:	7808      	ldrb	r0, [r1, #0]
  ConfigPin.GPIO_Speed = cfg->speed;
 8041ee2:	7849      	ldrb	r1, [r1, #1]
const PinDef_t PIN_PC13 = {GPIOC, GPIO_Pin_13, GPIO_PinSource13, RCC_AHB1Periph_GPIOC, INPUT};          // HOST_WAKE_UP_Pin

// Changes the "mode"/configuration of a pin
void pinMode(const PinDef_t *pin, const PinCfg_t *cfg) {
  GPIO_InitTypeDef ConfigPin;
  ConfigPin.GPIO_Pin   = pin->pin;
 8041ee4:	9300      	str	r3, [sp, #0]
  ConfigPin.GPIO_Mode  = cfg->mode;
  ConfigPin.GPIO_Speed = cfg->speed;
  ConfigPin.GPIO_OType = cfg->type;
 8041ee6:	78a2      	ldrb	r2, [r4, #2]
  ConfigPin.GPIO_PuPd  = cfg->pupd;
 8041ee8:	78e3      	ldrb	r3, [r4, #3]

// Changes the "mode"/configuration of a pin
void pinMode(const PinDef_t *pin, const PinCfg_t *cfg) {
  GPIO_InitTypeDef ConfigPin;
  ConfigPin.GPIO_Pin   = pin->pin;
  ConfigPin.GPIO_Mode  = cfg->mode;
 8041eea:	f88d 0004 	strb.w	r0, [sp, #4]
  ConfigPin.GPIO_Speed = cfg->speed;
 8041eee:	f88d 1005 	strb.w	r1, [sp, #5]
  ConfigPin.GPIO_OType = cfg->type;
  ConfigPin.GPIO_PuPd  = cfg->pupd;
  GPIO_Init(pin->port, &ConfigPin);
 8041ef2:	6828      	ldr	r0, [r5, #0]
 8041ef4:	4669      	mov	r1, sp
void pinMode(const PinDef_t *pin, const PinCfg_t *cfg) {
  GPIO_InitTypeDef ConfigPin;
  ConfigPin.GPIO_Pin   = pin->pin;
  ConfigPin.GPIO_Mode  = cfg->mode;
  ConfigPin.GPIO_Speed = cfg->speed;
  ConfigPin.GPIO_OType = cfg->type;
 8041ef6:	f88d 2006 	strb.w	r2, [sp, #6]
  ConfigPin.GPIO_PuPd  = cfg->pupd;
 8041efa:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_Init(pin->port, &ConfigPin);
 8041efe:	f000 f9b1 	bl	8042264 <GPIO_Init>
  if(cfg->mode == GPIO_Mode_AF) {
 8041f02:	7820      	ldrb	r0, [r4, #0]
 8041f04:	2802      	cmp	r0, #2
 8041f06:	d105      	bne.n	8041f14 <pinMode+0x3c>
    GPIO_PinAFConfig(pin->port,  pin->source, cfg->af);
 8041f08:	6828      	ldr	r0, [r5, #0]
 8041f0a:	7a29      	ldrb	r1, [r5, #8]
 8041f0c:	7922      	ldrb	r2, [r4, #4]
 8041f0e:	f000 f9f7 	bl	8042300 <GPIO_PinAFConfig>
 8041f12:	e00a      	b.n	8041f2a <pinMode+0x52>
  } else if(cfg->set != NO_CHANGE) {
 8041f14:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8041f18:	1c53      	adds	r3, r2, #1
 8041f1a:	d006      	beq.n	8041f2a <pinMode+0x52>
    GPIO_WriteBit(pin->port, pin->pin, cfg->set ? Bit_SET : Bit_RESET);
 8041f1c:	3200      	adds	r2, #0
 8041f1e:	6828      	ldr	r0, [r5, #0]
 8041f20:	88a9      	ldrh	r1, [r5, #4]
 8041f22:	bf18      	it	ne
 8041f24:	2201      	movne	r2, #1
 8041f26:	f000 f9e6 	bl	80422f6 <GPIO_WriteBit>
  }
}
 8041f2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08041f2c <initializePins>:

// Initializes all pins to their default configuration
void initializePins() {
 8041f2c:	b510      	push	{r4, lr}
 8041f2e:	b0a6      	sub	sp, #152	; 0x98
  const PinDef_t * pins[38] = {
 8041f30:	4668      	mov	r0, sp
 8041f32:	4907      	ldr	r1, [pc, #28]	; (8041f50 <initializePins+0x24>)
 8041f34:	2298      	movs	r2, #152	; 0x98
 8041f36:	f001 f841 	bl	8042fbc <memcpy>
 8041f3a:	2400      	movs	r4, #0
    &PIN_PB11, &PIN_PB12, &PIN_PB13, &PIN_PB14, &PIN_PB15, &PIN_PC0,
    &PIN_PC1, &PIN_PC3, &PIN_PC4, &PIN_PC6, &PIN_PC7, &PIN_PC9,
    &PIN_PC10, &PIN_PC11, &PIN_PC12, &PIN_PC13
  };
  for(uint8_t n = 0; n < 38; n++) {
    pinMode(pins[n], pins[n]->cfg);
 8041f3c:	f85d 0004 	ldr.w	r0, [sp, r4]
 8041f40:	3404      	adds	r4, #4
 8041f42:	6901      	ldr	r1, [r0, #16]
 8041f44:	f7ff ffc8 	bl	8041ed8 <pinMode>
    &PIN_PB4, &PIN_PB5, &PIN_PB6, &PIN_PB7, &PIN_PB8, &PIN_PB9, &PIN_PB10,
    &PIN_PB11, &PIN_PB12, &PIN_PB13, &PIN_PB14, &PIN_PB15, &PIN_PC0,
    &PIN_PC1, &PIN_PC3, &PIN_PC4, &PIN_PC6, &PIN_PC7, &PIN_PC9,
    &PIN_PC10, &PIN_PC11, &PIN_PC12, &PIN_PC13
  };
  for(uint8_t n = 0; n < 38; n++) {
 8041f48:	2c98      	cmp	r4, #152	; 0x98
 8041f4a:	d1f7      	bne.n	8041f3c <initializePins+0x10>
    pinMode(pins[n], pins[n]->cfg);
  }
}
 8041f4c:	b026      	add	sp, #152	; 0x98
 8041f4e:	bd10      	pop	{r4, pc}
 8041f50:	08047d2c 	.word	0x08047d2c

08041f54 <digitalWrite>:

// Writes digital output
void digitalWrite(const PinDef_t *pin, uint8_t value) {
  GPIO_WriteBit(pin->port, pin->pin, value == HIGH ? Bit_SET : Bit_RESET);
 8041f54:	3901      	subs	r1, #1
    pinMode(pins[n], pins[n]->cfg);
  }
}

// Writes digital output
void digitalWrite(const PinDef_t *pin, uint8_t value) {
 8041f56:	4603      	mov	r3, r0
  GPIO_WriteBit(pin->port, pin->pin, value == HIGH ? Bit_SET : Bit_RESET);
 8041f58:	424a      	negs	r2, r1
 8041f5a:	414a      	adcs	r2, r1
 8041f5c:	6800      	ldr	r0, [r0, #0]
 8041f5e:	8899      	ldrh	r1, [r3, #4]
 8041f60:	f000 b9c9 	b.w	80422f6 <GPIO_WriteBit>

08041f64 <digitalRead>:
}

// Reads digital input
uint8_t digitalRead(const PinDef_t *pin) {
 8041f64:	b508      	push	{r3, lr}
 8041f66:	4603      	mov	r3, r0
  return GPIO_ReadInputDataBit(pin->port, pin->pin) ? HIGH : LOW;
 8041f68:	8899      	ldrh	r1, [r3, #4]
 8041f6a:	6800      	ldr	r0, [r0, #0]
 8041f6c:	f000 f9bd 	bl	80422ea <GPIO_ReadInputDataBit>
}
 8041f70:	3000      	adds	r0, #0
 8041f72:	bf18      	it	ne
 8041f74:	2001      	movne	r0, #1
 8041f76:	bd08      	pop	{r3, pc}

08041f78 <millis>:

extern volatile uint16_t int_ctr;

// Nested interrupt enable
__attribute__( ( always_inline ) ) __STATIC_INLINE void cli(void) {
  __ASM volatile ("cpsid i");
 8041f78:	b672      	cpsid	i
  int_ctr++;
 8041f7a:	4b07      	ldr	r3, [pc, #28]	; (8041f98 <millis+0x20>)
 8041f7c:	881a      	ldrh	r2, [r3, #0]
 8041f7e:	1c50      	adds	r0, r2, #1
 8041f80:	b281      	uxth	r1, r0
volatile uint16_t int_ctr;

uint32_t millis() {
  uint32_t copy;
  cli();
  copy = ticks;
 8041f82:	4a06      	ldr	r2, [pc, #24]	; (8041f9c <millis+0x24>)
 8041f84:	8019      	strh	r1, [r3, #0]
 8041f86:	6810      	ldr	r0, [r2, #0]
}
// Nested interrupt disable
__attribute__( ( always_inline ) ) __STATIC_INLINE void sei(void) {
  __ASM volatile ("cpsid i");
 8041f88:	b672      	cpsid	i
  if(!--int_ctr) {__ASM volatile ("cpsie i");}
 8041f8a:	8819      	ldrh	r1, [r3, #0]
 8041f8c:	1e4a      	subs	r2, r1, #1
 8041f8e:	b291      	uxth	r1, r2
 8041f90:	8019      	strh	r1, [r3, #0]
 8041f92:	b901      	cbnz	r1, 8041f96 <millis+0x1e>
 8041f94:	b662      	cpsie	i
  sei();
  return copy;
}
 8041f96:	4770      	bx	lr
 8041f98:	200019ec 	.word	0x200019ec
 8041f9c:	20001998 	.word	0x20001998

08041fa0 <delay_loop>:

// Soft loop, cpu speed dependent
void delay_loop(uint32_t volatile n) {
 8041fa0:	b082      	sub	sp, #8
 8041fa2:	9001      	str	r0, [sp, #4]
  while(n--);  
 8041fa4:	9b01      	ldr	r3, [sp, #4]
 8041fa6:	1e5a      	subs	r2, r3, #1
 8041fa8:	9201      	str	r2, [sp, #4]
 8041faa:	2b00      	cmp	r3, #0
 8041fac:	d1fa      	bne.n	8041fa4 <delay_loop+0x4>
}
 8041fae:	b002      	add	sp, #8
 8041fb0:	4770      	bx	lr

08041fb2 <delay>:

// Delay
void delay(uint32_t us) {
 8041fb2:	b538      	push	{r3, r4, r5, lr}
 8041fb4:	4604      	mov	r4, r0
  uint32_t start = millis();
 8041fb6:	f7ff ffdf 	bl	8041f78 <millis>
 8041fba:	4605      	mov	r5, r0
  while((millis() - start) < us);
 8041fbc:	f7ff ffdc 	bl	8041f78 <millis>
 8041fc0:	1b40      	subs	r0, r0, r5
 8041fc2:	42a0      	cmp	r0, r4
 8041fc4:	d3fa      	bcc.n	8041fbc <delay+0xa>
}
 8041fc6:	bd38      	pop	{r3, r4, r5, pc}

08041fc8 <SysTick_Handler>:

__attribute__ ((interrupt ("IRQ")))
void SysTick_Handler(void) {
  ticks++;
 8041fc8:	4b06      	ldr	r3, [pc, #24]	; (8041fe4 <SysTick_Handler+0x1c>)
  uint32_t start = millis();
  while((millis() - start) < us);
}

__attribute__ ((interrupt ("IRQ")))
void SysTick_Handler(void) {
 8041fca:	4668      	mov	r0, sp
 8041fcc:	f020 0107 	bic.w	r1, r0, #7
  ticks++;
 8041fd0:	681a      	ldr	r2, [r3, #0]
  uint32_t start = millis();
  while((millis() - start) < us);
}

__attribute__ ((interrupt ("IRQ")))
void SysTick_Handler(void) {
 8041fd2:	468d      	mov	sp, r1
 8041fd4:	b501      	push	{r0, lr}
  ticks++;
 8041fd6:	1c50      	adds	r0, r2, #1
 8041fd8:	6018      	str	r0, [r3, #0]
}
 8041fda:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8041fde:	4685      	mov	sp, r0
 8041fe0:	4770      	bx	lr
 8041fe2:	bf00      	nop
 8041fe4:	20001998 	.word	0x20001998

08041fe8 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8041fe8:	6842      	ldr	r2, [r0, #4]
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8041fea:	b510      	push	{r4, lr}
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8041fec:	f022 7340 	bic.w	r3, r2, #50331648	; 0x3000000
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8041ff0:	680a      	ldr	r2, [r1, #0]
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8041ff2:	f423 7480 	bic.w	r4, r3, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8041ff6:	ea44 0302 	orr.w	r3, r4, r2
 8041ffa:	790c      	ldrb	r4, [r1, #4]
 8041ffc:	ea43 2204 	orr.w	r2, r3, r4, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8042000:	6042      	str	r2, [r0, #4]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8042002:	690b      	ldr	r3, [r1, #16]
 8042004:	68ca      	ldr	r2, [r1, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8042006:	6884      	ldr	r4, [r0, #8]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8042008:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 804200a:	688b      	ldr	r3, [r1, #8]
 804200c:	431a      	orrs	r2, r3
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 804200e:	4b08      	ldr	r3, [pc, #32]	; (8042030 <ADC_Init+0x48>)
 8042010:	4023      	ands	r3, r4
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8042012:	4313      	orrs	r3, r2
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8042014:	794a      	ldrb	r2, [r1, #5]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8042016:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 804201a:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 804201c:	7d09      	ldrb	r1, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 804201e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8042020:	1e4b      	subs	r3, r1, #1
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8042022:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8042026:	b2d9      	uxtb	r1, r3
 8042028:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 804202c:	62c2      	str	r2, [r0, #44]	; 0x2c
 804202e:	bd10      	pop	{r4, pc}
 8042030:	c0fff7fd 	.word	0xc0fff7fd

08042034 <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8042034:	2300      	movs	r3, #0

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8042036:	2101      	movs	r1, #1
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8042038:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 804203a:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 804203c:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 804203e:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8042040:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8042042:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8042044:	7501      	strb	r1, [r0, #20]
 8042046:	4770      	bx	lr

08042048 <ADC_CommonInit>:
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8042048:	4a07      	ldr	r2, [pc, #28]	; (8042068 <ADC_CommonInit+0x20>)
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 804204a:	4b08      	ldr	r3, [pc, #32]	; (804206c <ADC_CommonInit+0x24>)
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 804204c:	6851      	ldr	r1, [r2, #4]
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 804204e:	b510      	push	{r4, lr}
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8042050:	400b      	ands	r3, r1
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8042052:	e890 0012 	ldmia.w	r0, {r1, r4}
 8042056:	430c      	orrs	r4, r1
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8042058:	6881      	ldr	r1, [r0, #8]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 804205a:	68c0      	ldr	r0, [r0, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 804205c:	4321      	orrs	r1, r4
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 804205e:	4301      	orrs	r1, r0
 8042060:	430b      	orrs	r3, r1
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8042062:	6053      	str	r3, [r2, #4]
 8042064:	bd10      	pop	{r4, pc}
 8042066:	bf00      	nop
 8042068:	40012300 	.word	0x40012300
 804206c:	fffc30e0 	.word	0xfffc30e0

08042070 <ADC_CommonStructInit>:
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8042070:	2300      	movs	r3, #0
 8042072:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8042074:	6043      	str	r3, [r0, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8042076:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8042078:	60c3      	str	r3, [r0, #12]
 804207a:	4770      	bx	lr

0804207c <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 804207c:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 804207e:	b111      	cbz	r1, 8042086 <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8042080:	f043 0101 	orr.w	r1, r3, #1
 8042084:	e001      	b.n	804208a <ADC_Cmd+0xe>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8042086:	f023 0101 	bic.w	r1, r3, #1
 804208a:	6081      	str	r1, [r0, #8]
 804208c:	4770      	bx	lr

0804208e <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 804208e:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8042090:	b570      	push	{r4, r5, r6, lr}
 8042092:	f04f 0403 	mov.w	r4, #3
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8042096:	d90c      	bls.n	80420b2 <ADC_RegularChannelConfig+0x24>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8042098:	434c      	muls	r4, r1
 804209a:	2507      	movs	r5, #7
 804209c:	3c1e      	subs	r4, #30
 804209e:	fa05 f504 	lsl.w	r5, r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80420a2:	fa03 f304 	lsl.w	r3, r3, r4
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80420a6:	68c6      	ldr	r6, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80420a8:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80420ac:	432b      	orrs	r3, r5
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80420ae:	60c3      	str	r3, [r0, #12]
 80420b0:	e00b      	b.n	80420ca <ADC_RegularChannelConfig+0x3c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80420b2:	434c      	muls	r4, r1
 80420b4:	2507      	movs	r5, #7
 80420b6:	fa05 f504 	lsl.w	r5, r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80420ba:	fa03 f304 	lsl.w	r3, r3, r4
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80420be:	6906      	ldr	r6, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80420c0:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80420c4:	ea45 0403 	orr.w	r4, r5, r3
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80420c8:	6104      	str	r4, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80420ca:	2a06      	cmp	r2, #6
 80420cc:	f04f 0305 	mov.w	r3, #5
 80420d0:	d80d      	bhi.n	80420ee <ADC_RegularChannelConfig+0x60>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80420d2:	3a01      	subs	r2, #1
 80420d4:	4353      	muls	r3, r2
 80420d6:	221f      	movs	r2, #31
 80420d8:	fa02 f203 	lsl.w	r2, r2, r3
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80420dc:	fa01 f103 	lsl.w	r1, r1, r3
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80420e0:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80420e2:	ea24 0202 	bic.w	r2, r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80420e6:	ea42 0301 	orr.w	r3, r2, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80420ea:	6343      	str	r3, [r0, #52]	; 0x34
 80420ec:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80420ee:	2a0c      	cmp	r2, #12
 80420f0:	d80d      	bhi.n	804210e <ADC_RegularChannelConfig+0x80>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80420f2:	4353      	muls	r3, r2
 80420f4:	221f      	movs	r2, #31
 80420f6:	3b23      	subs	r3, #35	; 0x23
 80420f8:	fa02 f203 	lsl.w	r2, r2, r3
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80420fc:	fa01 f103 	lsl.w	r1, r1, r3
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8042100:	6b04      	ldr	r4, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8042102:	ea24 0202 	bic.w	r2, r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8042106:	ea42 0301 	orr.w	r3, r2, r1
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 804210a:	6303      	str	r3, [r0, #48]	; 0x30
 804210c:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 804210e:	4353      	muls	r3, r2
 8042110:	221f      	movs	r2, #31
 8042112:	3b41      	subs	r3, #65	; 0x41
 8042114:	fa02 f203 	lsl.w	r2, r2, r3
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8042118:	fa01 f103 	lsl.w	r1, r1, r3
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 804211c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 804211e:	ea24 0202 	bic.w	r2, r4, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8042122:	4311      	orrs	r1, r2
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8042124:	62c1      	str	r1, [r0, #44]	; 0x2c
 8042126:	bd70      	pop	{r4, r5, r6, pc}

08042128 <ADC_SoftwareStartConv>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8042128:	6883      	ldr	r3, [r0, #8]
 804212a:	f043 4180 	orr.w	r1, r3, #1073741824	; 0x40000000
 804212e:	6081      	str	r1, [r0, #8]
 8042130:	4770      	bx	lr

08042132 <ADC_GetSoftwareStartConvStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8042132:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 8042134:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8042138:	4770      	bx	lr

0804213a <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 804213a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 804213c:	b280      	uxth	r0, r0
 804213e:	4770      	bx	lr

08042140 <DMA_Init>:
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8042140:	6802      	ldr	r2, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8042142:	4b13      	ldr	r3, [pc, #76]	; (8042190 <DMA_Init+0x50>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8042144:	b510      	push	{r4, lr}
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8042146:	4013      	ands	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8042148:	68cc      	ldr	r4, [r1, #12]
 804214a:	680a      	ldr	r2, [r1, #0]
 804214c:	4314      	orrs	r4, r2
 804214e:	694a      	ldr	r2, [r1, #20]
 8042150:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8042152:	698a      	ldr	r2, [r1, #24]
 8042154:	4314      	orrs	r4, r2
 8042156:	69ca      	ldr	r2, [r1, #28]
 8042158:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 804215a:	6a0a      	ldr	r2, [r1, #32]
 804215c:	4314      	orrs	r4, r2
 804215e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8042160:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8042162:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8042164:	4314      	orrs	r4, r2
 8042166:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8042168:	4314      	orrs	r4, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 804216a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 804216c:	4314      	orrs	r4, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 804216e:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8042170:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8042172:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8042174:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8042176:	f022 0407 	bic.w	r4, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 804217a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 804217c:	431a      	orrs	r2, r3
 804217e:	4322      	orrs	r2, r4

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8042180:	6142      	str	r2, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8042182:	690b      	ldr	r3, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8042184:	684a      	ldr	r2, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8042186:	6889      	ldr	r1, [r1, #8]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8042188:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 804218a:	6082      	str	r2, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 804218c:	60c1      	str	r1, [r0, #12]
 804218e:	bd10      	pop	{r4, pc}
 8042190:	f01c803f 	.word	0xf01c803f

08042194 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8042194:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8042196:	b111      	cbz	r1, 804219e <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8042198:	f043 0101 	orr.w	r1, r3, #1
 804219c:	e001      	b.n	80421a2 <DMA_Cmd+0xe>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 804219e:	f023 0101 	bic.w	r1, r3, #1
 80421a2:	6001      	str	r1, [r0, #0]
 80421a4:	4770      	bx	lr
 80421a6:	0000      	movs	r0, r0

080421a8 <DMA_GetFlagStatus>:

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80421a8:	4b0a      	ldr	r3, [pc, #40]	; (80421d4 <DMA_GetFlagStatus+0x2c>)
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80421aa:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80421ac:	4a0a      	ldr	r2, [pc, #40]	; (80421d8 <DMA_GetFlagStatus+0x30>)
 80421ae:	4c0b      	ldr	r4, [pc, #44]	; (80421dc <DMA_GetFlagStatus+0x34>)
 80421b0:	42a0      	cmp	r0, r4
 80421b2:	bf8c      	ite	hi
 80421b4:	4610      	movhi	r0, r2
 80421b6:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80421b8:	008b      	lsls	r3, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80421ba:	bf4c      	ite	mi
 80421bc:	6843      	ldrmi	r3, [r0, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80421be:	6803      	ldrpl	r3, [r0, #0]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80421c0:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80421c4:	f021 1282 	bic.w	r2, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80421c8:	421a      	tst	r2, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 80421ca:	bf0c      	ite	eq
 80421cc:	2000      	moveq	r0, #0
 80421ce:	2001      	movne	r0, #1
 80421d0:	bd10      	pop	{r4, pc}
 80421d2:	bf00      	nop
 80421d4:	40026000 	.word	0x40026000
 80421d8:	40026400 	.word	0x40026400
 80421dc:	4002640f 	.word	0x4002640f

080421e0 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80421e0:	b510      	push	{r4, lr}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80421e2:	4b08      	ldr	r3, [pc, #32]	; (8042204 <DMA_ClearITPendingBit+0x24>)
 80421e4:	4a08      	ldr	r2, [pc, #32]	; (8042208 <DMA_ClearITPendingBit+0x28>)
 80421e6:	4c09      	ldr	r4, [pc, #36]	; (804220c <DMA_ClearITPendingBit+0x2c>)
 80421e8:	42a0      	cmp	r0, r4
 80421ea:	bf8c      	ite	hi
 80421ec:	4610      	movhi	r0, r2
 80421ee:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80421f0:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 80421f4:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80421f8:	f021 1382 	bic.w	r3, r1, #8519810	; 0x820082
 80421fc:	bf14      	ite	ne
 80421fe:	60c3      	strne	r3, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8042200:	6083      	streq	r3, [r0, #8]
 8042202:	bd10      	pop	{r4, pc}
 8042204:	40026000 	.word	0x40026000
 8042208:	40026400 	.word	0x40026400
 804220c:	4002640f 	.word	0x4002640f

08042210 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8042210:	4b01      	ldr	r3, [pc, #4]	; (8042218 <FLASH_SetLatency+0x8>)
 8042212:	b2c0      	uxtb	r0, r0
 8042214:	7018      	strb	r0, [r3, #0]
 8042216:	4770      	bx	lr
 8042218:	40023c00 	.word	0x40023c00

0804221c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 804221c:	4b04      	ldr	r3, [pc, #16]	; (8042230 <FLASH_PrefetchBufferCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 804221e:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8042220:	b110      	cbz	r0, 8042228 <FLASH_PrefetchBufferCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8042222:	f442 7080 	orr.w	r0, r2, #256	; 0x100
 8042226:	e001      	b.n	804222c <FLASH_PrefetchBufferCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8042228:	f422 7080 	bic.w	r0, r2, #256	; 0x100
 804222c:	6018      	str	r0, [r3, #0]
 804222e:	4770      	bx	lr
 8042230:	40023c00 	.word	0x40023c00

08042234 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8042234:	4b04      	ldr	r3, [pc, #16]	; (8042248 <FLASH_InstructionCacheCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8042236:	681a      	ldr	r2, [r3, #0]
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8042238:	b110      	cbz	r0, 8042240 <FLASH_InstructionCacheCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 804223a:	f442 7000 	orr.w	r0, r2, #512	; 0x200
 804223e:	e001      	b.n	8042244 <FLASH_InstructionCacheCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8042240:	f422 7000 	bic.w	r0, r2, #512	; 0x200
 8042244:	6018      	str	r0, [r3, #0]
 8042246:	4770      	bx	lr
 8042248:	40023c00 	.word	0x40023c00

0804224c <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 804224c:	4b04      	ldr	r3, [pc, #16]	; (8042260 <FLASH_DataCacheCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 804224e:	681a      	ldr	r2, [r3, #0]
void FLASH_DataCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8042250:	b110      	cbz	r0, 8042258 <FLASH_DataCacheCmd+0xc>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8042252:	f442 6080 	orr.w	r0, r2, #1024	; 0x400
 8042256:	e001      	b.n	804225c <FLASH_DataCacheCmd+0x10>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8042258:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 804225c:	6018      	str	r0, [r3, #0]
 804225e:	4770      	bx	lr
 8042260:	40023c00 	.word	0x40023c00

08042264 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8042264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8042268:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 804226a:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 804226c:	2201      	movs	r2, #1
 804226e:	fa02 f203 	lsl.w	r2, r2, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8042272:	ea02 0507 	and.w	r5, r2, r7

    if (currentpin == pos)
 8042276:	4295      	cmp	r5, r2
 8042278:	d132      	bne.n	80422e0 <GPIO_Init+0x7c>
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 804227a:	005a      	lsls	r2, r3, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 804227c:	2403      	movs	r4, #3
 804227e:	fa04 f402 	lsl.w	r4, r4, r2
 8042282:	6806      	ldr	r6, [r0, #0]
 8042284:	43e4      	mvns	r4, r4
 8042286:	4026      	ands	r6, r4
 8042288:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 804228a:	790e      	ldrb	r6, [r1, #4]
 804228c:	f8d0 c000 	ldr.w	ip, [r0]
 8042290:	fa06 f802 	lsl.w	r8, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8042294:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8042296:	ea48 0c0c 	orr.w	ip, r8, ip

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 804229a:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 804229c:	f8c0 c000 	str.w	ip, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80422a0:	d815      	bhi.n	80422ce <GPIO_Init+0x6a>
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80422a2:	f891 c005 	ldrb.w	ip, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80422a6:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80422a8:	fa0c fc02 	lsl.w	ip, ip, r2
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80422ac:	4026      	ands	r6, r4
 80422ae:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80422b0:	6886      	ldr	r6, [r0, #8]
 80422b2:	ea4c 0606 	orr.w	r6, ip, r6
 80422b6:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80422b8:	6846      	ldr	r6, [r0, #4]
 80422ba:	ea26 0505 	bic.w	r5, r6, r5
 80422be:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80422c0:	798d      	ldrb	r5, [r1, #6]
 80422c2:	6846      	ldr	r6, [r0, #4]
 80422c4:	fa05 f503 	lsl.w	r5, r5, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80422c8:	b2ad      	uxth	r5, r5
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80422ca:	4335      	orrs	r5, r6
 80422cc:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80422ce:	68c5      	ldr	r5, [r0, #12]
 80422d0:	402c      	ands	r4, r5
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80422d2:	79cd      	ldrb	r5, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80422d4:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80422d6:	fa05 f202 	lsl.w	r2, r5, r2
 80422da:	68c4      	ldr	r4, [r0, #12]
 80422dc:	4322      	orrs	r2, r4
 80422de:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80422e0:	3301      	adds	r3, #1
 80422e2:	2b10      	cmp	r3, #16
 80422e4:	d1c2      	bne.n	804226c <GPIO_Init+0x8>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80422e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080422ea <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80422ea:	6903      	ldr	r3, [r0, #16]
 80422ec:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80422ee:	bf0c      	ite	eq
 80422f0:	2000      	moveq	r0, #0
 80422f2:	2001      	movne	r0, #1
 80422f4:	4770      	bx	lr

080422f6 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80422f6:	b10a      	cbz	r2, 80422fc <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80422f8:	8301      	strh	r1, [r0, #24]
 80422fa:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80422fc:	8341      	strh	r1, [r0, #26]
 80422fe:	4770      	bx	lr

08042300 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8042300:	f001 0307 	and.w	r3, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8042304:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8042306:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8042308:	240f      	movs	r4, #15
 804230a:	fa04 f403 	lsl.w	r4, r4, r3
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 804230e:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8042312:	08c9      	lsrs	r1, r1, #3
 8042314:	3108      	adds	r1, #8
 8042316:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 804231a:	ea25 0404 	bic.w	r4, r5, r4
 804231e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8042322:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8042326:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8042328:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 804232c:	bd30      	pop	{r4, r5, pc}
 804232e:	0000      	movs	r0, r0

08042330 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8042330:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8042332:	8886      	ldrh	r6, [r0, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8042334:	4604      	mov	r4, r0
 8042336:	b085      	sub	sp, #20

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8042338:	f026 003f 	bic.w	r0, r6, #63	; 0x3f
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 804233c:	460d      	mov	r5, r1

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 804233e:	0401      	lsls	r1, r0, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8042340:	4668      	mov	r0, sp

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8042342:	0c0e      	lsrs	r6, r1, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8042344:	f000 f92a 	bl	804259c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8042348:	4a2c      	ldr	r2, [pc, #176]	; (80423fc <I2C_Init+0xcc>)
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
 804234a:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 804234c:	fbb1 f0f2 	udiv	r0, r1, r2
 8042350:	b287      	uxth	r7, r0
  tmpreg |= freqrange;
 8042352:	433e      	orrs	r6, r7
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8042354:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8042356:	8823      	ldrh	r3, [r4, #0]
 8042358:	f023 0201 	bic.w	r2, r3, #1
 804235c:	0413      	lsls	r3, r2, #16
 804235e:	0c1a      	lsrs	r2, r3, #16
 8042360:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8042362:	682b      	ldr	r3, [r5, #0]
 8042364:	4a26      	ldr	r2, [pc, #152]	; (8042400 <I2C_Init+0xd0>)
 8042366:	4293      	cmp	r3, r2
 8042368:	d80a      	bhi.n	8042380 <I2C_Init+0x50>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 804236a:	005b      	lsls	r3, r3, #1
 804236c:	fbb1 f0f3 	udiv	r0, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8042370:	3701      	adds	r7, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8042372:	b283      	uxth	r3, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8042374:	b2bf      	uxth	r7, r7
 8042376:	8427      	strh	r7, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8042378:	2b03      	cmp	r3, #3
 804237a:	bf98      	it	ls
 804237c:	2304      	movls	r3, #4
 804237e:	e020      	b.n	80423c2 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8042380:	88ee      	ldrh	r6, [r5, #6]
 8042382:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8042386:	4296      	cmp	r6, r2
 8042388:	d104      	bne.n	8042394 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 804238a:	2203      	movs	r2, #3
 804238c:	4353      	muls	r3, r2
 804238e:	fbb1 f3f3 	udiv	r3, r1, r3
 8042392:	e005      	b.n	80423a0 <I2C_Init+0x70>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8042394:	2219      	movs	r2, #25
 8042396:	4353      	muls	r3, r2
 8042398:	fbb1 f1f3 	udiv	r1, r1, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 804239c:	f441 4380 	orr.w	r3, r1, #16384	; 0x4000
 80423a0:	b299      	uxth	r1, r3
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80423a2:	050a      	lsls	r2, r1, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80423a4:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80423a8:	bf08      	it	eq
 80423aa:	f041 0101 	orreq.w	r1, r1, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80423ae:	4350      	muls	r0, r2
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80423b0:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80423b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80423b8:	fb90 f0f1 	sdiv	r0, r0, r1
 80423bc:	1c42      	adds	r2, r0, #1
 80423be:	b291      	uxth	r1, r2
 80423c0:	8421      	strh	r1, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80423c2:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80423c4:	8822      	ldrh	r2, [r4, #0]
 80423c6:	b291      	uxth	r1, r2
 80423c8:	f041 0301 	orr.w	r3, r1, #1
 80423cc:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80423ce:	8820      	ldrh	r0, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80423d0:	f420 6281 	bic.w	r2, r0, #1032	; 0x408
 80423d4:	f022 0102 	bic.w	r1, r2, #2
 80423d8:	040b      	lsls	r3, r1, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80423da:	88aa      	ldrh	r2, [r5, #4]
 80423dc:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80423de:	0c18      	lsrs	r0, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80423e0:	ea41 0302 	orr.w	r3, r1, r2
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80423e4:	8929      	ldrh	r1, [r5, #8]
 80423e6:	89aa      	ldrh	r2, [r5, #12]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80423e8:	4318      	orrs	r0, r3
 80423ea:	b280      	uxth	r0, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80423ec:	ea41 0302 	orr.w	r3, r1, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80423f0:	8020      	strh	r0, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80423f2:	b298      	uxth	r0, r3
 80423f4:	8120      	strh	r0, [r4, #8]
}
 80423f6:	b005      	add	sp, #20
 80423f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80423fa:	bf00      	nop
 80423fc:	000f4240 	.word	0x000f4240
 8042400:	000186a0 	.word	0x000186a0

08042404 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8042404:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8042406:	b119      	cbz	r1, 8042410 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8042408:	b299      	uxth	r1, r3
 804240a:	f041 0301 	orr.w	r3, r1, #1
 804240e:	e003      	b.n	8042418 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8042410:	f023 0101 	bic.w	r1, r3, #1
 8042414:	040a      	lsls	r2, r1, #16
 8042416:	0c13      	lsrs	r3, r2, #16
 8042418:	8003      	strh	r3, [r0, #0]
 804241a:	4770      	bx	lr

0804241c <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 804241c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 804241e:	b119      	cbz	r1, 8042428 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8042420:	b299      	uxth	r1, r3
 8042422:	f441 7380 	orr.w	r3, r1, #256	; 0x100
 8042426:	e003      	b.n	8042430 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8042428:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 804242c:	040a      	lsls	r2, r1, #16
 804242e:	0c13      	lsrs	r3, r2, #16
 8042430:	8003      	strh	r3, [r0, #0]
 8042432:	4770      	bx	lr

08042434 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8042434:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8042436:	b119      	cbz	r1, 8042440 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8042438:	b299      	uxth	r1, r3
 804243a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 804243e:	e003      	b.n	8042448 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8042440:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8042444:	040a      	lsls	r2, r1, #16
 8042446:	0c13      	lsrs	r3, r2, #16
 8042448:	8003      	strh	r3, [r0, #0]
 804244a:	4770      	bx	lr

0804244c <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 804244c:	b112      	cbz	r2, 8042454 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 804244e:	f041 0101 	orr.w	r1, r1, #1
 8042452:	e001      	b.n	8042458 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8042454:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8042458:	8201      	strh	r1, [r0, #16]
 804245a:	4770      	bx	lr

0804245c <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 804245c:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 804245e:	b119      	cbz	r1, 8042468 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8042460:	b299      	uxth	r1, r3
 8042462:	f441 6380 	orr.w	r3, r1, #1024	; 0x400
 8042466:	e003      	b.n	8042470 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8042468:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 804246c:	040a      	lsls	r2, r1, #16
 804246e:	0c13      	lsrs	r3, r2, #16
 8042470:	8003      	strh	r3, [r0, #0]
 8042472:	4770      	bx	lr

08042474 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8042474:	8201      	strh	r1, [r0, #16]
 8042476:	4770      	bx	lr

08042478 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8042478:	8a00      	ldrh	r0, [r0, #16]
}
 804247a:	b2c0      	uxtb	r0, r0
 804247c:	4770      	bx	lr

0804247e <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 804247e:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8042480:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8042482:	b29a      	uxth	r2, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8042484:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8042488:	400b      	ands	r3, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 804248a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 804248e:	1a51      	subs	r1, r2, r1
 8042490:	4248      	negs	r0, r1
 8042492:	4148      	adcs	r0, r1
 8042494:	4770      	bx	lr

08042496 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8042496:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8042498:	2300      	movs	r3, #0
 804249a:	9300      	str	r3, [sp, #0]
 804249c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 804249e:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80424a0:	0f08      	lsrs	r0, r1, #28
 80424a2:	9000      	str	r0, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80424a4:	9a00      	ldr	r2, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80424a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80424aa:	b112      	cbz	r2, 80424b2 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80424ac:	9b01      	ldr	r3, [sp, #4]
 80424ae:	3314      	adds	r3, #20
 80424b0:	e002      	b.n	80424b8 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80424b2:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80424b4:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80424b6:	3318      	adds	r3, #24
 80424b8:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80424ba:	9801      	ldr	r0, [sp, #4]
 80424bc:	6802      	ldr	r2, [r0, #0]
 80424be:	4211      	tst	r1, r2
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 80424c0:	bf0c      	ite	eq
 80424c2:	2000      	moveq	r0, #0
 80424c4:	2001      	movne	r0, #1
 80424c6:	b002      	add	sp, #8
 80424c8:	4770      	bx	lr
 80424ca:	0000      	movs	r0, r0

080424cc <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80424cc:	4b0a      	ldr	r3, [pc, #40]	; (80424f8 <RCC_DeInit+0x2c>)
 80424ce:	681a      	ldr	r2, [r3, #0]
 80424d0:	f042 0001 	orr.w	r0, r2, #1

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80424d4:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80424d6:	6018      	str	r0, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80424d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80424da:	6819      	ldr	r1, [r3, #0]
 80424dc:	f021 7084 	bic.w	r0, r1, #17301504	; 0x1080000
 80424e0:	f420 3180 	bic.w	r1, r0, #65536	; 0x10000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80424e4:	4805      	ldr	r0, [pc, #20]	; (80424fc <RCC_DeInit+0x30>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80424e6:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80424e8:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80424ea:	6819      	ldr	r1, [r3, #0]
 80424ec:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 80424f0:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80424f2:	60da      	str	r2, [r3, #12]
 80424f4:	4770      	bx	lr
 80424f6:	bf00      	nop
 80424f8:	40023800 	.word	0x40023800
 80424fc:	24003010 	.word	0x24003010

08042500 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8042500:	4b02      	ldr	r3, [pc, #8]	; (804250c <RCC_HSEConfig+0xc>)
 8042502:	2200      	movs	r2, #0
 8042504:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8042506:	7018      	strb	r0, [r3, #0]
 8042508:	4770      	bx	lr
 804250a:	bf00      	nop
 804250c:	40023802 	.word	0x40023802

08042510 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8042510:	b510      	push	{r4, lr}
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8042512:	4301      	orrs	r1, r0
 8042514:	9c02      	ldr	r4, [sp, #8]
 8042516:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 804251a:	085b      	lsrs	r3, r3, #1
 804251c:	ea42 6004 	orr.w	r0, r2, r4, lsl #24
 8042520:	1e59      	subs	r1, r3, #1
 8042522:	4a02      	ldr	r2, [pc, #8]	; (804252c <RCC_PLLConfig+0x1c>)
 8042524:	ea40 4401 	orr.w	r4, r0, r1, lsl #16
 8042528:	6054      	str	r4, [r2, #4]
 804252a:	bd10      	pop	{r4, pc}
 804252c:	40023800 	.word	0x40023800

08042530 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8042530:	4b01      	ldr	r3, [pc, #4]	; (8042538 <RCC_PLLCmd+0x8>)
 8042532:	6018      	str	r0, [r3, #0]
 8042534:	4770      	bx	lr
 8042536:	bf00      	nop
 8042538:	42470060 	.word	0x42470060

0804253c <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 804253c:	4b03      	ldr	r3, [pc, #12]	; (804254c <RCC_SYSCLKConfig+0x10>)
 804253e:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8042540:	f022 0103 	bic.w	r1, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8042544:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8042546:	6098      	str	r0, [r3, #8]
 8042548:	4770      	bx	lr
 804254a:	bf00      	nop
 804254c:	40023800 	.word	0x40023800

08042550 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8042550:	4b02      	ldr	r3, [pc, #8]	; (804255c <RCC_GetSYSCLKSource+0xc>)
 8042552:	6898      	ldr	r0, [r3, #8]
}
 8042554:	f000 000c 	and.w	r0, r0, #12
 8042558:	4770      	bx	lr
 804255a:	bf00      	nop
 804255c:	40023800 	.word	0x40023800

08042560 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8042560:	4b03      	ldr	r3, [pc, #12]	; (8042570 <RCC_HCLKConfig+0x10>)
 8042562:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8042564:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8042568:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 804256a:	6098      	str	r0, [r3, #8]
 804256c:	4770      	bx	lr
 804256e:	bf00      	nop
 8042570:	40023800 	.word	0x40023800

08042574 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8042574:	4b03      	ldr	r3, [pc, #12]	; (8042584 <RCC_PCLK1Config+0x10>)
 8042576:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8042578:	f422 51e0 	bic.w	r1, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 804257c:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 804257e:	6098      	str	r0, [r3, #8]
 8042580:	4770      	bx	lr
 8042582:	bf00      	nop
 8042584:	40023800 	.word	0x40023800

08042588 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8042588:	4b03      	ldr	r3, [pc, #12]	; (8042598 <RCC_PCLK2Config+0x10>)
 804258a:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 804258c:	f422 4160 	bic.w	r1, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8042590:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8042594:	6098      	str	r0, [r3, #8]
 8042596:	4770      	bx	lr
 8042598:	40023800 	.word	0x40023800

0804259c <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 804259c:	4b1e      	ldr	r3, [pc, #120]	; (8042618 <RCC_GetClocksFreq+0x7c>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 804259e:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80425a0:	689a      	ldr	r2, [r3, #8]
 80425a2:	f002 010c 	and.w	r1, r2, #12

  switch (tmp)
 80425a6:	2904      	cmp	r1, #4
 80425a8:	d003      	beq.n	80425b2 <RCC_GetClocksFreq+0x16>
 80425aa:	2908      	cmp	r1, #8
 80425ac:	d003      	beq.n	80425b6 <RCC_GetClocksFreq+0x1a>
 80425ae:	4b1b      	ldr	r3, [pc, #108]	; (804261c <RCC_GetClocksFreq+0x80>)
 80425b0:	e018      	b.n	80425e4 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80425b2:	4b1b      	ldr	r3, [pc, #108]	; (8042620 <RCC_GetClocksFreq+0x84>)
 80425b4:	e016      	b.n	80425e4 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80425b6:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80425b8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80425ba:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80425be:	6859      	ldr	r1, [r3, #4]
 80425c0:	bf14      	ite	ne
 80425c2:	4b17      	ldrne	r3, [pc, #92]	; (8042620 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80425c4:	4b15      	ldreq	r3, [pc, #84]	; (804261c <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80425c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80425ca:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80425ce:	4a12      	ldr	r2, [pc, #72]	; (8042618 <RCC_GetClocksFreq+0x7c>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80425d0:	f3c1 1488 	ubfx	r4, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80425d4:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80425d6:	4363      	muls	r3, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80425d8:	f3c1 4401 	ubfx	r4, r1, #16, #2
 80425dc:	1c62      	adds	r2, r4, #1
 80425de:	0051      	lsls	r1, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80425e0:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80425e4:	490c      	ldr	r1, [pc, #48]	; (8042618 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80425e6:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80425e8:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80425ea:	4a0e      	ldr	r2, [pc, #56]	; (8042624 <RCC_GetClocksFreq+0x88>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 80425ec:	f3c4 1303 	ubfx	r3, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 80425f0:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80425f2:	6803      	ldr	r3, [r0, #0]
 80425f4:	fa23 f304 	lsr.w	r3, r3, r4
 80425f8:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80425fa:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 80425fc:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8042600:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8042602:	fa23 f404 	lsr.w	r4, r3, r4
 8042606:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8042608:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 804260a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 804260e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8042610:	fa23 f302 	lsr.w	r3, r3, r2
 8042614:	60c3      	str	r3, [r0, #12]
 8042616:	bd10      	pop	{r4, pc}
 8042618:	40023800 	.word	0x40023800
 804261c:	00f42400 	.word	0x00f42400
 8042620:	018cba80 	.word	0x018cba80
 8042624:	20000c00 	.word	0x20000c00

08042628 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8042628:	4b04      	ldr	r3, [pc, #16]	; (804263c <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 804262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 804262c:	b109      	cbz	r1, 8042632 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 804262e:	4310      	orrs	r0, r2
 8042630:	e001      	b.n	8042636 <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8042632:	ea22 0000 	bic.w	r0, r2, r0
 8042636:	6318      	str	r0, [r3, #48]	; 0x30
 8042638:	4770      	bx	lr
 804263a:	bf00      	nop
 804263c:	40023800 	.word	0x40023800

08042640 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8042640:	4b04      	ldr	r3, [pc, #16]	; (8042654 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8042642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8042644:	b109      	cbz	r1, 804264a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8042646:	4310      	orrs	r0, r2
 8042648:	e001      	b.n	804264e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 804264a:	ea22 0000 	bic.w	r0, r2, r0
 804264e:	6418      	str	r0, [r3, #64]	; 0x40
 8042650:	4770      	bx	lr
 8042652:	bf00      	nop
 8042654:	40023800 	.word	0x40023800

08042658 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8042658:	4b04      	ldr	r3, [pc, #16]	; (804266c <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 804265a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 804265c:	b109      	cbz	r1, 8042662 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 804265e:	4310      	orrs	r0, r2
 8042660:	e001      	b.n	8042666 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8042662:	ea22 0000 	bic.w	r0, r2, r0
 8042666:	6458      	str	r0, [r3, #68]	; 0x44
 8042668:	4770      	bx	lr
 804266a:	bf00      	nop
 804266c:	40023800 	.word	0x40023800

08042670 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8042670:	4b04      	ldr	r3, [pc, #16]	; (8042684 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8042672:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8042674:	b109      	cbz	r1, 804267a <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8042676:	4310      	orrs	r0, r2
 8042678:	e001      	b.n	804267e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 804267a:	ea22 0000 	bic.w	r0, r2, r0
 804267e:	6218      	str	r0, [r3, #32]
 8042680:	4770      	bx	lr
 8042682:	bf00      	nop
 8042684:	40023800 	.word	0x40023800

08042688 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8042688:	4b04      	ldr	r3, [pc, #16]	; (804269c <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 804268a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 804268c:	b109      	cbz	r1, 8042692 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 804268e:	4310      	orrs	r0, r2
 8042690:	e001      	b.n	8042696 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8042692:	ea22 0000 	bic.w	r0, r2, r0
 8042696:	6258      	str	r0, [r3, #36]	; 0x24
 8042698:	4770      	bx	lr
 804269a:	bf00      	nop
 804269c:	40023800 	.word	0x40023800

080426a0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80426a0:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80426a2:	2b01      	cmp	r3, #1
 80426a4:	4a07      	ldr	r2, [pc, #28]	; (80426c4 <RCC_GetFlagStatus+0x24>)
 80426a6:	d101      	bne.n	80426ac <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 80426a8:	6813      	ldr	r3, [r2, #0]
 80426aa:	e003      	b.n	80426b4 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80426ac:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80426ae:	bf0c      	ite	eq
 80426b0:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80426b2:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80426b4:	f000 001f 	and.w	r0, r0, #31
 80426b8:	fa23 f100 	lsr.w	r1, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80426bc:	f001 0001 	and.w	r0, r1, #1
 80426c0:	4770      	bx	lr
 80426c2:	bf00      	nop
 80426c4:	40023800 	.word	0x40023800

080426c8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80426c8:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 80426ca:	2300      	movs	r3, #0
 80426cc:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80426ce:	2031      	movs	r0, #49	; 0x31
 80426d0:	f7ff ffe6 	bl	80426a0 <RCC_GetFlagStatus>
    startupcounter++;
 80426d4:	9901      	ldr	r1, [sp, #4]
 80426d6:	1c4a      	adds	r2, r1, #1
 80426d8:	9201      	str	r2, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80426da:	9b01      	ldr	r3, [sp, #4]
 80426dc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80426e0:	d001      	beq.n	80426e6 <RCC_WaitForHSEStartUp+0x1e>
 80426e2:	2800      	cmp	r0, #0
 80426e4:	d0f3      	beq.n	80426ce <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80426e6:	2031      	movs	r0, #49	; 0x31
 80426e8:	f7ff ffda 	bl	80426a0 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 80426ec:	3000      	adds	r0, #0
 80426ee:	bf18      	it	ne
 80426f0:	2001      	movne	r0, #1
 80426f2:	bd0e      	pop	{r1, r2, r3, pc}

080426f4 <SPI_I2S_DeInit>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode.   
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80426f4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80426f6:	4b15      	ldr	r3, [pc, #84]	; (804274c <SPI_I2S_DeInit+0x58>)
 80426f8:	4298      	cmp	r0, r3
 80426fa:	d10b      	bne.n	8042714 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80426fc:	2101      	movs	r1, #1
 80426fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8042702:	f7ff ffc1 	bl	8042688 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8042706:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 804270a:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 804270c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8042710:	f7ff bfba 	b.w	8042688 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8042714:	490e      	ldr	r1, [pc, #56]	; (8042750 <SPI_I2S_DeInit+0x5c>)
 8042716:	4288      	cmp	r0, r1
 8042718:	d107      	bne.n	804272a <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 804271a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 804271e:	2101      	movs	r1, #1
 8042720:	f7ff ffa6 	bl	8042670 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8042724:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8042728:	e009      	b.n	804273e <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 804272a:	4a0a      	ldr	r2, [pc, #40]	; (8042754 <SPI_I2S_DeInit+0x60>)
 804272c:	4290      	cmp	r0, r2
 804272e:	d10b      	bne.n	8042748 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8042730:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8042734:	2101      	movs	r1, #1
 8042736:	f7ff ff9b 	bl	8042670 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 804273a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 804273e:	2100      	movs	r1, #0
    }
  }
}
 8042740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8042744:	f7ff bf94 	b.w	8042670 <RCC_APB1PeriphResetCmd>
 8042748:	bd08      	pop	{r3, pc}
 804274a:	bf00      	nop
 804274c:	40013000 	.word	0x40013000
 8042750:	40003800 	.word	0x40003800
 8042754:	40003c00 	.word	0x40003c00

08042758 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8042758:	880b      	ldrh	r3, [r1, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 804275a:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 804275c:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 804275e:	8802      	ldrh	r2, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8042760:	4323      	orrs	r3, r4
 8042762:	888c      	ldrh	r4, [r1, #4]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8042764:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8042768:	4323      	orrs	r3, r4
 804276a:	88cc      	ldrh	r4, [r1, #6]
 804276c:	4323      	orrs	r3, r4
 804276e:	890c      	ldrh	r4, [r1, #8]
 8042770:	4323      	orrs	r3, r4
 8042772:	894c      	ldrh	r4, [r1, #10]
 8042774:	4323      	orrs	r3, r4
 8042776:	898c      	ldrh	r4, [r1, #12]
 8042778:	4323      	orrs	r3, r4
 804277a:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 804277c:	8a09      	ldrh	r1, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 804277e:	4323      	orrs	r3, r4
 8042780:	431a      	orrs	r2, r3
 8042782:	b293      	uxth	r3, r2
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8042784:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8042786:	8b82      	ldrh	r2, [r0, #28]
 8042788:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 804278c:	041a      	lsls	r2, r3, #16
 804278e:	0c13      	lsrs	r3, r2, #16
 8042790:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8042792:	8201      	strh	r1, [r0, #16]
 8042794:	bd10      	pop	{r4, pc}

08042796 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8042796:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8042798:	b119      	cbz	r1, 80427a2 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 804279a:	b299      	uxth	r1, r3
 804279c:	f041 0340 	orr.w	r3, r1, #64	; 0x40
 80427a0:	e003      	b.n	80427aa <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80427a2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80427a6:	040a      	lsls	r2, r1, #16
 80427a8:	0c13      	lsrs	r3, r2, #16
 80427aa:	8003      	strh	r3, [r0, #0]
 80427ac:	4770      	bx	lr

080427ae <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80427ae:	8181      	strh	r1, [r0, #12]
 80427b0:	4770      	bx	lr

080427b2 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80427b2:	8883      	ldrh	r3, [r0, #4]
 80427b4:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80427b6:	b10a      	cbz	r2, 80427bc <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80427b8:	4319      	orrs	r1, r3
 80427ba:	e001      	b.n	80427c0 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80427bc:	ea23 0101 	bic.w	r1, r3, r1
 80427c0:	8081      	strh	r1, [r0, #4]
 80427c2:	4770      	bx	lr

080427c4 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80427c4:	8903      	ldrh	r3, [r0, #8]
 80427c6:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80427c8:	bf0c      	ite	eq
 80427ca:	2000      	moveq	r0, #0
 80427cc:	2001      	movne	r0, #1
 80427ce:	4770      	bx	lr

080427d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80427d0:	4b2f      	ldr	r3, [pc, #188]	; (8042890 <SystemInit+0xc0>)
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80427d2:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80427d4:	681a      	ldr	r2, [r3, #0]
 80427d6:	f042 0001 	orr.w	r0, r2, #1

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80427da:	2200      	movs	r2, #0
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80427dc:	6018      	str	r0, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80427de:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80427e0:	6819      	ldr	r1, [r3, #0]
 80427e2:	f021 7084 	bic.w	r0, r1, #17301504	; 0x1080000
 80427e6:	f420 3180 	bic.w	r1, r0, #65536	; 0x10000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80427ea:	482a      	ldr	r0, [pc, #168]	; (8042894 <SystemInit+0xc4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80427ec:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80427ee:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80427f0:	6819      	ldr	r1, [r3, #0]
 80427f2:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 80427f6:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80427f8:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80427fa:	9200      	str	r2, [sp, #0]
 80427fc:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80427fe:	681a      	ldr	r2, [r3, #0]
 8042800:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
 8042804:	6019      	str	r1, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8042806:	4b22      	ldr	r3, [pc, #136]	; (8042890 <SystemInit+0xc0>)
 8042808:	6818      	ldr	r0, [r3, #0]
 804280a:	f400 3200 	and.w	r2, r0, #131072	; 0x20000
 804280e:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8042810:	9900      	ldr	r1, [sp, #0]
 8042812:	1c48      	adds	r0, r1, #1
 8042814:	9000      	str	r0, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8042816:	9a01      	ldr	r2, [sp, #4]
 8042818:	b91a      	cbnz	r2, 8042822 <SystemInit+0x52>
 804281a:	9900      	ldr	r1, [sp, #0]
 804281c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8042820:	d1f1      	bne.n	8042806 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8042822:	681b      	ldr	r3, [r3, #0]
 8042824:	f413 3000 	ands.w	r0, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8042828:	bf18      	it	ne
 804282a:	2001      	movne	r0, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 804282c:	9001      	str	r0, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 804282e:	9a01      	ldr	r2, [sp, #4]
 8042830:	2a01      	cmp	r2, #1
 8042832:	d004      	beq.n	804283e <SystemInit+0x6e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8042834:	4918      	ldr	r1, [pc, #96]	; (8042898 <SystemInit+0xc8>)
 8042836:	4a19      	ldr	r2, [pc, #100]	; (804289c <SystemInit+0xcc>)
 8042838:	6091      	str	r1, [r2, #8]
#endif
}
 804283a:	b002      	add	sp, #8
 804283c:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 804283e:	4b14      	ldr	r3, [pc, #80]	; (8042890 <SystemInit+0xc0>)
 8042840:	6899      	ldr	r1, [r3, #8]
 8042842:	6099      	str	r1, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8042844:	6898      	ldr	r0, [r3, #8]
 8042846:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 804284a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 804284c:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 804284e:	4a14      	ldr	r2, [pc, #80]	; (80428a0 <SystemInit+0xd0>)
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8042850:	f441 50a0 	orr.w	r0, r1, #5120	; 0x1400
 8042854:	6098      	str	r0, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8042856:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8042858:	6819      	ldr	r1, [r3, #0]
 804285a:	f041 7080 	orr.w	r0, r1, #16777216	; 0x1000000
 804285e:	6018      	str	r0, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8042860:	6819      	ldr	r1, [r3, #0]
 8042862:	4a0b      	ldr	r2, [pc, #44]	; (8042890 <SystemInit+0xc0>)
 8042864:	0189      	lsls	r1, r1, #6
 8042866:	d5fb      	bpl.n	8042860 <SystemInit+0x90>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
 8042868:	4b0e      	ldr	r3, [pc, #56]	; (80428a4 <SystemInit+0xd4>)
 804286a:	f240 7003 	movw	r0, #1795	; 0x703
 804286e:	6018      	str	r0, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8042870:	6891      	ldr	r1, [r2, #8]
 8042872:	f021 0003 	bic.w	r0, r1, #3
 8042876:	6090      	str	r0, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8042878:	6893      	ldr	r3, [r2, #8]
 804287a:	f043 0102 	orr.w	r1, r3, #2
 804287e:	6091      	str	r1, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8042880:	4a03      	ldr	r2, [pc, #12]	; (8042890 <SystemInit+0xc0>)
 8042882:	6890      	ldr	r0, [r2, #8]
 8042884:	f000 030c 	and.w	r3, r0, #12
 8042888:	2b08      	cmp	r3, #8
 804288a:	d1f9      	bne.n	8042880 <SystemInit+0xb0>
 804288c:	e7d2      	b.n	8042834 <SystemInit+0x64>
 804288e:	bf00      	nop
 8042890:	40023800 	.word	0x40023800
 8042894:	24003010 	.word	0x24003010
 8042898:	08040000 	.word	0x08040000
 804289c:	e000ed00 	.word	0xe000ed00
 80428a0:	05403c19 	.word	0x05403c19
 80428a4:	40023c00 	.word	0x40023c00

080428a8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80428a8:	4b18      	ldr	r3, [pc, #96]	; (804290c <SystemCoreClockUpdate+0x64>)
 80428aa:	4a19      	ldr	r2, [pc, #100]	; (8042910 <SystemCoreClockUpdate+0x68>)
 80428ac:	6899      	ldr	r1, [r3, #8]
 80428ae:	f001 000c 	and.w	r0, r1, #12

  switch (tmp)
 80428b2:	2804      	cmp	r0, #4
 80428b4:	d003      	beq.n	80428be <SystemCoreClockUpdate+0x16>
 80428b6:	2808      	cmp	r0, #8
 80428b8:	d003      	beq.n	80428c2 <SystemCoreClockUpdate+0x1a>
 80428ba:	4b16      	ldr	r3, [pc, #88]	; (8042914 <SystemCoreClockUpdate+0x6c>)
 80428bc:	e019      	b.n	80428f2 <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80428be:	4b16      	ldr	r3, [pc, #88]	; (8042918 <SystemCoreClockUpdate+0x70>)
 80428c0:	e017      	b.n	80428f2 <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80428c2:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80428c4:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80428c6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80428ca:	6859      	ldr	r1, [r3, #4]
 80428cc:	bf14      	ite	ne
 80428ce:	4b12      	ldrne	r3, [pc, #72]	; (8042918 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80428d0:	4b10      	ldreq	r3, [pc, #64]	; (8042914 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80428d2:	f002 003f 	and.w	r0, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80428d6:	fbb3 f3f0 	udiv	r3, r3, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80428da:	480c      	ldr	r0, [pc, #48]	; (804290c <SystemCoreClockUpdate+0x64>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80428dc:	f3c1 1288 	ubfx	r2, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80428e0:	6841      	ldr	r1, [r0, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80428e2:	4353      	muls	r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80428e4:	f3c1 4201 	ubfx	r2, r1, #16, #2
 80428e8:	1c50      	adds	r0, r2, #1
 80428ea:	0041      	lsls	r1, r0, #1
      SystemCoreClock = pllvco/pllp;
 80428ec:	4a08      	ldr	r2, [pc, #32]	; (8042910 <SystemCoreClockUpdate+0x68>)
 80428ee:	fbb3 f3f1 	udiv	r3, r3, r1
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80428f2:	4806      	ldr	r0, [pc, #24]	; (804290c <SystemCoreClockUpdate+0x64>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80428f4:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80428f6:	6881      	ldr	r1, [r0, #8]
 80428f8:	4a08      	ldr	r2, [pc, #32]	; (804291c <SystemCoreClockUpdate+0x74>)
 80428fa:	f3c1 1303 	ubfx	r3, r1, #4, #4
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80428fe:	4904      	ldr	r1, [pc, #16]	; (8042910 <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8042900:	5cd0      	ldrb	r0, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8042902:	680b      	ldr	r3, [r1, #0]
 8042904:	fa23 f300 	lsr.w	r3, r3, r0
 8042908:	600b      	str	r3, [r1, #0]
 804290a:	4770      	bx	lr
 804290c:	40023800 	.word	0x40023800
 8042910:	20000c20 	.word	0x20000c20
 8042914:	00f42400 	.word	0x00f42400
 8042918:	018cba80 	.word	0x018cba80
 804291c:	20000c10 	.word	0x20000c10

08042920 <_sbrk>:
caddr_t _sbrk(int incr) {
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) heap_end = &end;
 8042920:	4b09      	ldr	r3, [pc, #36]	; (8042948 <_sbrk+0x28>)
 8042922:	681a      	ldr	r2, [r3, #0]
 8042924:	b90a      	cbnz	r2, 804292a <_sbrk+0xa>
 8042926:	4909      	ldr	r1, [pc, #36]	; (804294c <_sbrk+0x2c>)
 8042928:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 804292a:	681b      	ldr	r3, [r3, #0]

	if (heap_end + incr > stack_ptr) {
 804292c:	466a      	mov	r2, sp
 804292e:	1818      	adds	r0, r3, r0
 8042930:	4290      	cmp	r0, r2
 8042932:	d905      	bls.n	8042940 <_sbrk+0x20>
		errno = ENOMEM;
 8042934:	4b06      	ldr	r3, [pc, #24]	; (8042950 <_sbrk+0x30>)
 8042936:	200c      	movs	r0, #12
 8042938:	6018      	str	r0, [r3, #0]
		return (caddr_t)-1;
 804293a:	f04f 33ff 	mov.w	r3, #4294967295
 804293e:	e001      	b.n	8042944 <_sbrk+0x24>
	}

	heap_end += incr;
 8042940:	4901      	ldr	r1, [pc, #4]	; (8042948 <_sbrk+0x28>)
 8042942:	6008      	str	r0, [r1, #0]

	return (caddr_t)prev_heap_end;
}
 8042944:	4618      	mov	r0, r3
 8042946:	4770      	bx	lr
 8042948:	2000199c 	.word	0x2000199c
 804294c:	200019f4 	.word	0x200019f4
 8042950:	200019f0 	.word	0x200019f0

08042954 <_ZN12Arduino_OLED8fillRectEsssst>:
void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  oled_window(x, y, x + w - 1, y);
  oled_push(color, w);
}

void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8042954:	b570      	push	{r4, r5, r6, lr}
  oled_window(x, y, x + w - 1, y + h - 1);
 8042956:	b2c8      	uxtb	r0, r1
void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  oled_window(x, y, x + w - 1, y);
  oled_push(color, w);
}

void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8042958:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
  oled_window(x, y, x + w - 1, y + h - 1);
 804295c:	b2d1      	uxtb	r1, r2
 804295e:	1e42      	subs	r2, r0, #1
void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  oled_window(x, y, x + w - 1, y);
  oled_push(color, w);
}

void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8042960:	461d      	mov	r5, r3
  oled_window(x, y, x + w - 1, y + h - 1);
 8042962:	18d2      	adds	r2, r2, r3
 8042964:	1e4b      	subs	r3, r1, #1
 8042966:	191b      	adds	r3, r3, r4
 8042968:	b2d2      	uxtb	r2, r2
 804296a:	b2db      	uxtb	r3, r3
void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  oled_window(x, y, x + w - 1, y);
  oled_push(color, w);
}

void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 804296c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  oled_window(x, y, x + w - 1, y + h - 1);
 8042970:	f7fe fe32 	bl	80415d8 <oled_window>
  oled_push(color, w * h);
 8042974:	fb05 f104 	mul.w	r1, r5, r4
 8042978:	4630      	mov	r0, r6
 804297a:	b289      	uxth	r1, r1
}
 804297c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  oled_push(color, w);
}

void Arduino_OLED::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
  oled_window(x, y, x + w - 1, y + h - 1);
  oled_push(color, w * h);
 8042980:	f7fe be52 	b.w	8041628 <oled_push>

08042984 <_ZN12Arduino_OLED13drawFastHLineEssst>:
void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
  oled_window(x, y, x, y + h - 1);
  oled_push(color, h);
}

void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8042984:	b538      	push	{r3, r4, r5, lr}
  oled_window(x, y, x + w - 1, y);
 8042986:	b2c8      	uxtb	r0, r1
 8042988:	b2d1      	uxtb	r1, r2
 804298a:	1e42      	subs	r2, r0, #1
void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
  oled_window(x, y, x, y + h - 1);
  oled_push(color, h);
}

void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 804298c:	461c      	mov	r4, r3
  oled_window(x, y, x + w - 1, y);
 804298e:	18d3      	adds	r3, r2, r3
 8042990:	b2da      	uxtb	r2, r3
 8042992:	460b      	mov	r3, r1
void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
  oled_window(x, y, x, y + h - 1);
  oled_push(color, h);
}

void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8042994:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  oled_window(x, y, x + w - 1, y);
 8042998:	f7fe fe1e 	bl	80415d8 <oled_window>
  oled_push(color, w);
 804299c:	4628      	mov	r0, r5
 804299e:	b2a1      	uxth	r1, r4
}
 80429a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  oled_push(color, h);
}

void Arduino_OLED::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
  oled_window(x, y, x + w - 1, y);
  oled_push(color, w);
 80429a4:	f7fe be40 	b.w	8041628 <oled_push>

080429a8 <_ZN12Arduino_OLED13drawFastVLineEssst>:
void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  oled_window(x, y, x, y);
  oled_push(color, 1);
}

void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80429a8:	b538      	push	{r3, r4, r5, lr}
  oled_window(x, y, x, y + h - 1);
 80429aa:	b2c8      	uxtb	r0, r1
 80429ac:	b2d1      	uxtb	r1, r2
void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  oled_window(x, y, x, y);
  oled_push(color, 1);
}

void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80429ae:	461c      	mov	r4, r3
  oled_window(x, y, x, y + h - 1);
 80429b0:	1e4b      	subs	r3, r1, #1
 80429b2:	191b      	adds	r3, r3, r4
 80429b4:	4602      	mov	r2, r0
 80429b6:	b2db      	uxtb	r3, r3
void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  oled_window(x, y, x, y);
  oled_push(color, 1);
}

void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80429b8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  oled_window(x, y, x, y + h - 1);
 80429bc:	f7fe fe0c 	bl	80415d8 <oled_window>
  oled_push(color, h);
 80429c0:	4628      	mov	r0, r5
 80429c2:	b2a1      	uxth	r1, r4
}
 80429c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  oled_push(color, 1);
}

void Arduino_OLED::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
  oled_window(x, y, x, y + h - 1);
  oled_push(color, h);
 80429c8:	f7fe be2e 	b.w	8041628 <oled_push>

080429cc <_ZN12Arduino_OLED9drawPixelEsst>:
  oled_window(0, 0, 0x7F, 0x7F); 
  oled_push(color, 128 * 128);
}

void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  oled_window(x, y, x, y);
 80429cc:	b2c8      	uxtb	r0, r1
 80429ce:	b2d1      	uxtb	r1, r2
void Arduino_OLED::fillScreen(uint16_t color) {
  oled_window(0, 0, 0x7F, 0x7F); 
  oled_push(color, 128 * 128);
}

void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80429d0:	b510      	push	{r4, lr}
  oled_window(x, y, x, y);
 80429d2:	4602      	mov	r2, r0
void Arduino_OLED::fillScreen(uint16_t color) {
  oled_window(0, 0, 0x7F, 0x7F); 
  oled_push(color, 128 * 128);
}

void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80429d4:	461c      	mov	r4, r3
  oled_window(x, y, x, y);
 80429d6:	460b      	mov	r3, r1
 80429d8:	f7fe fdfe 	bl	80415d8 <oled_window>
  oled_push(color, 1);
 80429dc:	4620      	mov	r0, r4
 80429de:	2101      	movs	r1, #1
}
 80429e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  oled_push(color, 128 * 128);
}

void Arduino_OLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  oled_window(x, y, x, y);
  oled_push(color, 1);
 80429e4:	f7fe be20 	b.w	8041628 <oled_push>

080429e8 <_ZN12Arduino_OLED10fillScreenEt>:
void Arduino_OLED::pushColor(uint16_t color) {
  oled_push(color, 1);
}

void Arduino_OLED::fillScreen(uint16_t color) {
  oled_window(0, 0, 0x7F, 0x7F); 
 80429e8:	2000      	movs	r0, #0
 80429ea:	227f      	movs	r2, #127	; 0x7f

void Arduino_OLED::pushColor(uint16_t color) {
  oled_push(color, 1);
}

void Arduino_OLED::fillScreen(uint16_t color) {
 80429ec:	b510      	push	{r4, lr}
  oled_window(0, 0, 0x7F, 0x7F); 
 80429ee:	4613      	mov	r3, r2

void Arduino_OLED::pushColor(uint16_t color) {
  oled_push(color, 1);
}

void Arduino_OLED::fillScreen(uint16_t color) {
 80429f0:	460c      	mov	r4, r1
  oled_window(0, 0, 0x7F, 0x7F); 
 80429f2:	4601      	mov	r1, r0
 80429f4:	f7fe fdf0 	bl	80415d8 <oled_window>
  oled_push(color, 128 * 128);
 80429f8:	4620      	mov	r0, r4
 80429fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 80429fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  oled_push(color, 1);
}

void Arduino_OLED::fillScreen(uint16_t color) {
  oled_window(0, 0, 0x7F, 0x7F); 
  oled_push(color, 128 * 128);
 8042a02:	f7fe be11 	b.w	8041628 <oled_push>
 8042a06:	0000      	movs	r0, r0

08042a08 <_ZN11Arduino_GFX8drawCharEsshtth>:
  cursor_x = 0;
}

// draw a character
void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 8042a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042a0c:	4605      	mov	r5, r0
 8042a0e:	b08d      	sub	sp, #52	; 0x34
 8042a10:	4693      	mov	fp, r2

  if((x >= _width)            || // Clip right
 8042a12:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
  cursor_x = 0;
}

// draw a character
void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 8042a16:	468a      	mov	sl, r1
 8042a18:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8042a1c:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c

  if((x >= _width)            || // Clip right
 8042a20:	4552      	cmp	r2, sl
  cursor_x = 0;
}

// draw a character
void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 8042a22:	9006      	str	r0, [sp, #24]
 8042a24:	9107      	str	r1, [sp, #28]
 8042a26:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60

  if((x >= _width)            || // Clip right
 8042a2a:	f340 8089 	ble.w	8042b40 <_ZN11Arduino_GFX8drawCharEsshtth+0x138>
 8042a2e:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 8042a32:	4558      	cmp	r0, fp
 8042a34:	f340 8084 	ble.w	8042b40 <_ZN11Arduino_GFX8drawCharEsshtth+0x138>
 8042a38:	2205      	movs	r2, #5
 8042a3a:	fb02 a104 	mla	r1, r2, r4, sl
 8042a3e:	2900      	cmp	r1, #0
 8042a40:	dd7e      	ble.n	8042b40 <_ZN11Arduino_GFX8drawCharEsshtth+0x138>
 8042a42:	eb0b 00c4 	add.w	r0, fp, r4, lsl #3
 8042a46:	2800      	cmp	r0, #0
 8042a48:	dd7a      	ble.n	8042b40 <_ZN11Arduino_GFX8drawCharEsshtth+0x138>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = font[(c*5)+i];
 8042a4a:	435a      	muls	r2, r3
 8042a4c:	2306      	movs	r3, #6
 8042a4e:	920a      	str	r2, [sp, #40]	; 0x28
 8042a50:	9309      	str	r3, [sp, #36]	; 0x24
 8042a52:	f04f 0800 	mov.w	r8, #0
    return;

    
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 8042a56:	fa4f f688 	sxtb.w	r6, r8
 8042a5a:	2e05      	cmp	r6, #5
 8042a5c:	d005      	beq.n	8042a6a <_ZN11Arduino_GFX8drawCharEsshtth+0x62>
      line = 0x0;
    else 
      line = font[(c*5)+i];
 8042a5e:	4f3a      	ldr	r7, [pc, #232]	; (8042b48 <_ZN11Arduino_GFX8drawCharEsshtth+0x140>)
 8042a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8042a62:	18b9      	adds	r1, r7, r2
 8042a64:	f811 9006 	ldrb.w	r9, [r1, r6]
 8042a68:	e001      	b.n	8042a6e <_ZN11Arduino_GFX8drawCharEsshtth+0x66>

    
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 8042a6a:	f04f 0900 	mov.w	r9, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 8042a6e:	fa4f f388 	sxtb.w	r3, r8
 8042a72:	fa1f f08a 	uxth.w	r0, sl
 8042a76:	b29e      	uxth	r6, r3
 8042a78:	fb04 0706 	mla	r7, r4, r6, r0
 8042a7c:	9604      	str	r6, [sp, #16]
 8042a7e:	fa1f f68b 	uxth.w	r6, fp
  cursor_y += textsize*8;
  cursor_x = 0;
}

// draw a character
void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 8042a82:	f106 0108 	add.w	r1, r6, #8
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 8042a86:	b2ba      	uxth	r2, r7
 8042a88:	9003      	str	r0, [sp, #12]
  cursor_y += textsize*8;
  cursor_x = 0;
}

// draw a character
void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 8042a8a:	b288      	uxth	r0, r1
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 8042a8c:	9208      	str	r2, [sp, #32]
  cursor_y += textsize*8;
  cursor_x = 0;
}

// draw a character
void Arduino_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 8042a8e:	900b      	str	r0, [sp, #44]	; 0x2c
 8042a90:	4637      	mov	r7, r6
 8042a92:	9605      	str	r6, [sp, #20]
      line = 0x0;
    else 
      line = font[(c*5)+i];
//      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 8042a94:	f019 0f01 	tst.w	r9, #1
 8042a98:	d019      	beq.n	8042ace <_ZN11Arduino_GFX8drawCharEsshtth+0xc6>
        if (size == 1) // default size
 8042a9a:	2c01      	cmp	r4, #1
 8042a9c:	682a      	ldr	r2, [r5, #0]
 8042a9e:	d10b      	bne.n	8042ab8 <_ZN11Arduino_GFX8drawCharEsshtth+0xb0>
          drawPixel(x+i, y+j, color);
 8042aa0:	9804      	ldr	r0, [sp, #16]
 8042aa2:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8042aa6:	f8d2 c000 	ldr.w	ip, [r2]
 8042aaa:	eb00 030e 	add.w	r3, r0, lr
 8042aae:	b219      	sxth	r1, r3
 8042ab0:	4628      	mov	r0, r5
 8042ab2:	b23a      	sxth	r2, r7
 8042ab4:	9b06      	ldr	r3, [sp, #24]
 8042ab6:	e01c      	b.n	8042af2 <_ZN11Arduino_GFX8drawCharEsshtth+0xea>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 8042ab8:	9906      	ldr	r1, [sp, #24]
 8042aba:	b223      	sxth	r3, r4
 8042abc:	9101      	str	r1, [sp, #4]
 8042abe:	9300      	str	r3, [sp, #0]
 8042ac0:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8042ac4:	9a08      	ldr	r2, [sp, #32]
 8042ac6:	4628      	mov	r0, r5
 8042ac8:	b211      	sxth	r1, r2
 8042aca:	b232      	sxth	r2, r6
 8042acc:	e020      	b.n	8042b10 <_ZN11Arduino_GFX8drawCharEsshtth+0x108>
        } 
      } else if (bg != color) {
 8042ace:	9b07      	ldr	r3, [sp, #28]
 8042ad0:	9a06      	ldr	r2, [sp, #24]
 8042ad2:	4293      	cmp	r3, r2
 8042ad4:	d01d      	beq.n	8042b12 <_ZN11Arduino_GFX8drawCharEsshtth+0x10a>
        if (size == 1) // default size
 8042ad6:	2c01      	cmp	r4, #1
 8042ad8:	682a      	ldr	r2, [r5, #0]
 8042ada:	d10c      	bne.n	8042af6 <_ZN11Arduino_GFX8drawCharEsshtth+0xee>
          drawPixel(x+i, y+j, bg);
 8042adc:	9804      	ldr	r0, [sp, #16]
 8042ade:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8042ae2:	eb00 030c 	add.w	r3, r0, ip
 8042ae6:	b219      	sxth	r1, r3
 8042ae8:	9b07      	ldr	r3, [sp, #28]
 8042aea:	f8d2 c000 	ldr.w	ip, [r2]
 8042aee:	4628      	mov	r0, r5
 8042af0:	b23a      	sxth	r2, r7
 8042af2:	47e0      	blx	ip
 8042af4:	e00d      	b.n	8042b12 <_ZN11Arduino_GFX8drawCharEsshtth+0x10a>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 8042af6:	9907      	ldr	r1, [sp, #28]
 8042af8:	b223      	sxth	r3, r4
 8042afa:	9101      	str	r1, [sp, #4]
 8042afc:	9300      	str	r3, [sp, #0]
 8042afe:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8042b02:	f8dd e014 	ldr.w	lr, [sp, #20]
 8042b06:	9a08      	ldr	r2, [sp, #32]
 8042b08:	4628      	mov	r0, r5
 8042b0a:	b211      	sxth	r1, r2
 8042b0c:	fa0f f28e 	sxth.w	r2, lr
 8042b10:	47e0      	blx	ip
 8042b12:	9905      	ldr	r1, [sp, #20]
 8042b14:	3701      	adds	r7, #1
    if (i == 5) 
      line = 0x0;
    else 
      line = font[(c*5)+i];
//      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 8042b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8042b18:	190a      	adds	r2, r1, r4
 8042b1a:	b2bf      	uxth	r7, r7
 8042b1c:	1936      	adds	r6, r6, r4
 8042b1e:	b290      	uxth	r0, r2
 8042b20:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        } 	
      }
      line >>= 1;
 8042b22:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8042b26:	b2b6      	uxth	r6, r6
 8042b28:	9005      	str	r0, [sp, #20]
    if (i == 5) 
      line = 0x0;
    else 
      line = font[(c*5)+i];
//      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 8042b2a:	d1b3      	bne.n	8042a94 <_ZN11Arduino_GFX8drawCharEsshtth+0x8c>
 8042b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
     ((x + 5 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

    
  for (int8_t i=0; i<6; i++ ) {
 8042b2e:	f108 0801 	add.w	r8, r8, #1
 8042b32:	1e4a      	subs	r2, r1, #1
 8042b34:	f012 00ff 	ands.w	r0, r2, #255	; 0xff
 8042b38:	fa5f f888 	uxtb.w	r8, r8
 8042b3c:	9009      	str	r0, [sp, #36]	; 0x24
 8042b3e:	d18a      	bne.n	8042a56 <_ZN11Arduino_GFX8drawCharEsshtth+0x4e>
        } 	
      }
      line >>= 1;
    }
  }
}
 8042b40:	b00d      	add	sp, #52	; 0x34
 8042b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042b46:	bf00      	nop
 8042b48:	20000c24 	.word	0x20000c24

08042b4c <_ZN11Arduino_GFX5writeEh>:
    }
  }
}


uint32_t Arduino_GFX::write(uint8_t c) {
 8042b4c:	b530      	push	{r4, r5, lr}
  
  if (c == '\n') {
 8042b4e:	290a      	cmp	r1, #10
    }
  }
}


uint32_t Arduino_GFX::write(uint8_t c) {
 8042b50:	b085      	sub	sp, #20
 8042b52:	4604      	mov	r4, r0
 8042b54:	460b      	mov	r3, r1
  
  if (c == '\n') {
 8042b56:	d104      	bne.n	8042b62 <_ZN11Arduino_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 8042b58:	7d00      	ldrb	r0, [r0, #20]
 8042b5a:	89e1      	ldrh	r1, [r4, #14]
 8042b5c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8042b60:	e022      	b.n	8042ba8 <_ZN11Arduino_GFX5writeEh+0x5c>
    cursor_x = 0;
  } else if (c == '\r') {
 8042b62:	290d      	cmp	r1, #13
 8042b64:	d023      	beq.n	8042bae <_ZN11Arduino_GFX5writeEh+0x62>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8042b66:	8a05      	ldrh	r5, [r0, #16]
 8042b68:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8042b6c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8042b70:	9500      	str	r5, [sp, #0]
 8042b72:	8a45      	ldrh	r5, [r0, #18]
 8042b74:	9501      	str	r5, [sp, #4]
 8042b76:	7d05      	ldrb	r5, [r0, #20]
 8042b78:	9502      	str	r5, [sp, #8]
 8042b7a:	f7ff ff45 	bl	8042a08 <_ZN11Arduino_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 8042b7e:	89a2      	ldrh	r2, [r4, #12]
 8042b80:	7d23      	ldrb	r3, [r4, #20]
 8042b82:	2106      	movs	r1, #6
 8042b84:	fb01 2003 	mla	r0, r1, r3, r2
    if (wrap && (cursor_x > (_width - textsize*6))) {
 8042b88:	7d61      	ldrb	r1, [r4, #21]
    cursor_x = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 8042b8a:	b282      	uxth	r2, r0
 8042b8c:	81a2      	strh	r2, [r4, #12]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 8042b8e:	b171      	cbz	r1, 8042bae <_ZN11Arduino_GFX5writeEh+0x62>
 8042b90:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8042b94:	f06f 0005 	mvn.w	r0, #5
 8042b98:	fb00 1103 	mla	r1, r0, r3, r1
 8042b9c:	b212      	sxth	r2, r2
 8042b9e:	428a      	cmp	r2, r1
 8042ba0:	dd05      	ble.n	8042bae <_ZN11Arduino_GFX5writeEh+0x62>
      cursor_y += textsize*8;
 8042ba2:	89e2      	ldrh	r2, [r4, #14]
 8042ba4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
      cursor_x = 0;
 8042ba8:	2200      	movs	r2, #0
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
    if (wrap && (cursor_x > (_width - textsize*6))) {
      cursor_y += textsize*8;
 8042baa:	81e3      	strh	r3, [r4, #14]
      cursor_x = 0;
 8042bac:	81a2      	strh	r2, [r4, #12]
    }
  }
  return 1;
}
 8042bae:	2001      	movs	r0, #1
 8042bb0:	b005      	add	sp, #20
 8042bb2:	bd30      	pop	{r4, r5, pc}

08042bb4 <_ZN11Arduino_GFX5printEPc>:

void Arduino_GFX::print(char *str) {
 8042bb4:	b538      	push	{r3, r4, r5, lr}
 8042bb6:	4605      	mov	r5, r0
 8042bb8:	1e4c      	subs	r4, r1, #1
  while(*str != 0x00) write((uint8_t)*(str++));
 8042bba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8042bbe:	b119      	cbz	r1, 8042bc8 <_ZN11Arduino_GFX5printEPc+0x14>
 8042bc0:	4628      	mov	r0, r5
 8042bc2:	f7ff ffc3 	bl	8042b4c <_ZN11Arduino_GFX5writeEh>
 8042bc6:	e7f8      	b.n	8042bba <_ZN11Arduino_GFX5printEPc+0x6>
}
 8042bc8:	bd38      	pop	{r3, r4, r5, pc}

08042bca <_ZN11Arduino_GFX7printlnEPc>:

void Arduino_GFX::println(char *str) {
 8042bca:	b510      	push	{r4, lr}
 8042bcc:	4604      	mov	r4, r0
  print(str);
 8042bce:	f7ff fff1 	bl	8042bb4 <_ZN11Arduino_GFX5printEPc>
  cursor_y += textsize*8;
 8042bd2:	89e3      	ldrh	r3, [r4, #14]
 8042bd4:	7d22      	ldrb	r2, [r4, #20]
  cursor_x = 0;
 8042bd6:	2100      	movs	r1, #0
  while(*str != 0x00) write((uint8_t)*(str++));
}

void Arduino_GFX::println(char *str) {
  print(str);
  cursor_y += textsize*8;
 8042bd8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
 8042bdc:	81e0      	strh	r0, [r4, #14]
  cursor_x = 0;
 8042bde:	81a1      	strh	r1, [r4, #12]
 8042be0:	bd10      	pop	{r4, pc}
 8042be2:	0000      	movs	r0, r0

08042be4 <_ZN12Arduino_OLEDC1Ev>:
 
int16_t Arduino_GFX::height(void) { 
  return _height; 
}

Arduino_OLED::Arduino_OLED() {
 8042be4:	4a08      	ldr	r2, [pc, #32]	; (8042c08 <_ZN12Arduino_OLEDC1Ev+0x24>)
  _width = WIDTH = 128;
 8042be6:	2180      	movs	r1, #128	; 0x80
 
int16_t Arduino_GFX::height(void) { 
  return _height; 
}

Arduino_OLED::Arduino_OLED() {
 8042be8:	6002      	str	r2, [r0, #0]
  _width = WIDTH = 128;
  _height = HEIGHT = 128;

  cursor_y = cursor_x = 0;
 8042bea:	2200      	movs	r2, #0
int16_t Arduino_GFX::height(void) { 
  return _height; 
}

Arduino_OLED::Arduino_OLED() {
  _width = WIDTH = 128;
 8042bec:	8081      	strh	r1, [r0, #4]
 8042bee:	8101      	strh	r1, [r0, #8]
  _height = HEIGHT = 128;
 8042bf0:	80c1      	strh	r1, [r0, #6]
 8042bf2:	8141      	strh	r1, [r0, #10]

  cursor_y = cursor_x = 0;
 8042bf4:	8182      	strh	r2, [r0, #12]
  textsize = 1;
  textcolor = textbgcolor = 0xFFFF;
 8042bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff

Arduino_OLED::Arduino_OLED() {
  _width = WIDTH = 128;
  _height = HEIGHT = 128;

  cursor_y = cursor_x = 0;
 8042bfa:	81c2      	strh	r2, [r0, #14]
  textsize = 1;
 8042bfc:	2201      	movs	r2, #1
 8042bfe:	7502      	strb	r2, [r0, #20]
  textcolor = textbgcolor = 0xFFFF;
 8042c00:	8241      	strh	r1, [r0, #18]
 8042c02:	8201      	strh	r1, [r0, #16]
  wrap = true;
 8042c04:	7542      	strb	r2, [r0, #21]
}
 8042c06:	4770      	bx	lr
 8042c08:	08048158 	.word	0x08048158

08042c0c <_Z4initv>:
// This should eventually be moved to the makefile
#include "driver_display.cpp"
#include "driver_power.cpp"

// System initialization
void init() {
 8042c0c:	b510      	push	{r4, lr}
  // Tip from Sony:
  // Prevents hard-faults when booting from USB
  delay_loop(200000);
 8042c0e:	481a      	ldr	r0, [pc, #104]	; (8042c78 <_Z4initv+0x6c>)
 8042c10:	f7ff f9c6 	bl	8041fa0 <delay_loop>
  
  // Initializes all pins to their default settings (see pins.c)
  initializePins();
 8042c14:	f7ff f98a 	bl	8041f2c <initializePins>
  
  // Tip from Sony:
  // Not quite sure, but I believe a pullup on DP enables charging of a device even if
  // it does not do USB any communication by removing the pre-enum current limit
  if(digitalRead(USB_CONNECTED)) pinMode(USB_DP, INPUT_PULLUP);
 8042c18:	4818      	ldr	r0, [pc, #96]	; (8042c7c <_Z4initv+0x70>)
 8042c1a:	f7ff f9a3 	bl	8041f64 <digitalRead>
 8042c1e:	b118      	cbz	r0, 8042c28 <_Z4initv+0x1c>
 8042c20:	4817      	ldr	r0, [pc, #92]	; (8042c80 <_Z4initv+0x74>)
 8042c22:	4918      	ldr	r1, [pc, #96]	; (8042c84 <_Z4initv+0x78>)
 8042c24:	f7ff f958 	bl	8041ed8 <pinMode>
  
  // Initialize system clocks
  cpu_init();
 8042c28:	f7ff f850 	bl	8041ccc <cpu_init>

extern volatile uint16_t int_ctr;

// Nested interrupt enable
__attribute__( ( always_inline ) ) __STATIC_INLINE void cli(void) {
  __ASM volatile ("cpsid i");
 8042c2c:	b672      	cpsid	i
  int_ctr++;
 8042c2e:	4c16      	ldr	r4, [pc, #88]	; (8042c88 <_Z4initv+0x7c>)
 8042c30:	8823      	ldrh	r3, [r4, #0]
 8042c32:	1c58      	adds	r0, r3, #1
 8042c34:	b281      	uxth	r1, r0
 8042c36:	8021      	strh	r1, [r4, #0]

  // Disable interrupts until we are done setting everything up
  cli();

  // Start system tick (used for timing, delay, etc)
  SystemCoreClockUpdate();
 8042c38:	f7ff fe36 	bl	80428a8 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock / 1000);
 8042c3c:	4a13      	ldr	r2, [pc, #76]	; (8042c8c <_Z4initv+0x80>)
 8042c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8042c42:	6810      	ldr	r0, [r2, #0]
 8042c44:	fbb0 f1f3 	udiv	r1, r0, r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8042c48:	1e4a      	subs	r2, r1, #1
 8042c4a:	4811      	ldr	r0, [pc, #68]	; (8042c90 <_Z4initv+0x84>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8042c4c:	4911      	ldr	r1, [pc, #68]	; (8042c94 <_Z4initv+0x88>)
 8042c4e:	23f0      	movs	r3, #240	; 0xf0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8042c50:	6042      	str	r2, [r0, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8042c52:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8042c56:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8042c58:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8042c5a:	6082      	str	r2, [r0, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8042c5c:	6003      	str	r3, [r0, #0]
  
  // Initialize ADC
  adc_init();
 8042c5e:	f7ff f8db 	bl	8041e18 <adc_init>
}
// Nested interrupt disable
__attribute__( ( always_inline ) ) __STATIC_INLINE void sei(void) {
  __ASM volatile ("cpsid i");
 8042c62:	b672      	cpsid	i
  if(!--int_ctr) {__ASM volatile ("cpsie i");}
 8042c64:	8820      	ldrh	r0, [r4, #0]
 8042c66:	1e41      	subs	r1, r0, #1
 8042c68:	b28a      	uxth	r2, r1
 8042c6a:	8022      	strh	r2, [r4, #0]
 8042c6c:	b902      	cbnz	r2, 8042c70 <_Z4initv+0x64>
 8042c6e:	b662      	cpsie	i
  sei();

  // Initialize I2C
  i2c_init();

}
 8042c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  // Enable interrupts
  sei();

  // Initialize I2C
  i2c_init();
 8042c74:	f7fe be6c 	b.w	8041950 <i2c_init>
 8042c78:	00030d40 	.word	0x00030d40
 8042c7c:	080480f4 	.word	0x080480f4
 8042c80:	08047f34 	.word	0x08047f34
 8042c84:	080480e4 	.word	0x080480e4
 8042c88:	200019ec 	.word	0x200019ec
 8042c8c:	20000c20 	.word	0x20000c20
 8042c90:	e000e010 	.word	0xe000e010
 8042c94:	e000ed00 	.word	0xe000ed00

08042c98 <_Z5setupv>:
#include <stdio.h>

static const char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

void setup() {
  digitalWrite(BUZZER, HIGH);
 8042c98:	2101      	movs	r1, #1
#include <stdio.h>

static const char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

void setup() {
 8042c9a:	b538      	push	{r3, r4, r5, lr}
  digitalWrite(BUZZER, HIGH);
 8042c9c:	481f      	ldr	r0, [pc, #124]	; (8042d1c <_Z5setupv+0x84>)
 8042c9e:	f7ff f959 	bl	8041f54 <digitalWrite>
  delay(250);
 8042ca2:	20fa      	movs	r0, #250	; 0xfa
 8042ca4:	f7ff f985 	bl	8041fb2 <delay>
  digitalWrite(BUZZER, LOW);
 8042ca8:	481c      	ldr	r0, [pc, #112]	; (8042d1c <_Z5setupv+0x84>)
 8042caa:	2100      	movs	r1, #0
 8042cac:	f7ff f952 	bl	8041f54 <digitalWrite>
  while(digitalRead(BUTTON));
 8042cb0:	481b      	ldr	r0, [pc, #108]	; (8042d20 <_Z5setupv+0x88>)
 8042cb2:	f7ff f957 	bl	8041f64 <digitalRead>
 8042cb6:	4605      	mov	r5, r0
 8042cb8:	2800      	cmp	r0, #0
 8042cba:	d1f9      	bne.n	8042cb0 <_Z5setupv+0x18>


  OLED.begin();
  OLED.fillScreen(0x5555);
 8042cbc:	4c19      	ldr	r4, [pc, #100]	; (8042d24 <_Z5setupv+0x8c>)

void Arduino_OLED::begin() {
  oled_init();
 8042cbe:	f7fe fd5d 	bl	804177c <oled_init>
 8042cc2:	4620      	mov	r0, r4
 8042cc4:	f245 5155 	movw	r1, #21845	; 0x5555
 8042cc8:	f7ff fe8e 	bl	80429e8 <_ZN12Arduino_OLED10fillScreenEt>
  cursor_y = y;
}


void Arduino_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 8042ccc:	2001      	movs	r0, #1
}


void Arduino_GFX::setTextColor(uint16_t c) {
  textcolor = c;
 8042cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  cursor_y = y;
}


void Arduino_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 8042cd2:	7520      	strb	r0, [r4, #20]
  //OLED.setPower(100);

  //delay(1000);

  OLED.setCursor(0, 0);
  OLED.print((char*)"PMU init...   ");
 8042cd4:	4914      	ldr	r1, [pc, #80]	; (8042d28 <_Z5setupv+0x90>)
 8042cd6:	4620      	mov	r0, r4
}


void Arduino_GFX::setTextColor(uint16_t c) {
  textcolor = c;
 8042cd8:	8223      	strh	r3, [r4, #16]
  textbgcolor = c; 
 8042cda:	8263      	strh	r3, [r4, #18]
    }
  }
}

void Arduino_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 8042cdc:	81a5      	strh	r5, [r4, #12]
  cursor_y = y;
 8042cde:	81e5      	strh	r5, [r4, #14]
 8042ce0:	f7ff ff68 	bl	8042bb4 <_ZN11Arduino_GFX5printEPc>

class Arduino_Battery {
  public:
    // Initialize PMU (Power Management Unit)
    // The PMU is an I2C external circuit that manages battery charging
    inline boolean begin() { return pmu_init(); };
 8042ce4:	f7ff f80e 	bl	8041d04 <pmu_init>
  if(Battery.begin()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
 8042ce8:	b110      	cbz	r0, 8042cf0 <_Z5setupv+0x58>
 8042cea:	4620      	mov	r0, r4
 8042cec:	490f      	ldr	r1, [pc, #60]	; (8042d2c <_Z5setupv+0x94>)
 8042cee:	e001      	b.n	8042cf4 <_Z5setupv+0x5c>
 8042cf0:	490f      	ldr	r1, [pc, #60]	; (8042d30 <_Z5setupv+0x98>)
 8042cf2:	4620      	mov	r0, r4
 8042cf4:	f7ff ff69 	bl	8042bca <_ZN11Arduino_GFX7printlnEPc>
  OLED.print((char*)"PMU enable... ");
 8042cf8:	480a      	ldr	r0, [pc, #40]	; (8042d24 <_Z5setupv+0x8c>)
 8042cfa:	490e      	ldr	r1, [pc, #56]	; (8042d34 <_Z5setupv+0x9c>)
 8042cfc:	f7ff ff5a 	bl	8042bb4 <_ZN11Arduino_GFX5printEPc>
    // Returns true if charging is possible (means USB is connected)
    inline boolean canCharge() { return digitalRead(USB_CONNECTED) == HIGH; };
    // Allow the PMU to charge the battery (does not mean it will)
    inline boolean enableCharging() { return pmu_charge(true); };
 8042d00:	2001      	movs	r0, #1
 8042d02:	f7ff f839 	bl	8041d78 <pmu_charge>
  if(Battery.enableCharging()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
 8042d06:	b110      	cbz	r0, 8042d0e <_Z5setupv+0x76>
 8042d08:	4806      	ldr	r0, [pc, #24]	; (8042d24 <_Z5setupv+0x8c>)
 8042d0a:	4908      	ldr	r1, [pc, #32]	; (8042d2c <_Z5setupv+0x94>)
 8042d0c:	e001      	b.n	8042d12 <_Z5setupv+0x7a>
 8042d0e:	4805      	ldr	r0, [pc, #20]	; (8042d24 <_Z5setupv+0x8c>)
 8042d10:	4907      	ldr	r1, [pc, #28]	; (8042d30 <_Z5setupv+0x98>)
  
}
 8042d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OLED.setCursor(0, 0);
  OLED.print((char*)"PMU init...   ");
  if(Battery.begin()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
  OLED.print((char*)"PMU enable... ");
  if(Battery.enableCharging()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
 8042d16:	f7ff bf58 	b.w	8042bca <_ZN11Arduino_GFX7printlnEPc>
 8042d1a:	bf00      	nop
 8042d1c:	08048060 	.word	0x08048060
 8042d20:	08047f70 	.word	0x08047f70
 8042d24:	200019a0 	.word	0x200019a0
 8042d28:	08048170 	.word	0x08048170
 8042d2c:	0804817f 	.word	0x0804817f
 8042d30:	08048182 	.word	0x08048182
 8042d34:	08048187 	.word	0x08048187

08042d38 <_Z4loopv>:
  
}

void loop() {
 8042d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char text[32];

  OLED.fillRect(0, 24, 128, 40, 0x5555);
 8042d3c:	4c4f      	ldr	r4, [pc, #316]	; (8042e7c <_Z4loopv+0x144>)
  OLED.print((char*)"PMU enable... ");
  if(Battery.enableCharging()) OLED.println((char*)"OK"); else OLED.println((char*)"FAIL");
  
}

void loop() {
 8042d3e:	b08c      	sub	sp, #48	; 0x30
  char text[32];

  OLED.fillRect(0, 24, 128, 40, 0x5555);
 8042d40:	2528      	movs	r5, #40	; 0x28
 8042d42:	f245 5355 	movw	r3, #21845	; 0x5555
 8042d46:	2218      	movs	r2, #24
 8042d48:	4620      	mov	r0, r4
 8042d4a:	9301      	str	r3, [sp, #4]
 8042d4c:	2100      	movs	r1, #0
 8042d4e:	2380      	movs	r3, #128	; 0x80
 8042d50:	9500      	str	r5, [sp, #0]
 8042d52:	f7ff fdff 	bl	8042954 <_ZN12Arduino_OLED8fillRectEsssst>
    }
  }
}

void Arduino_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 8042d56:	2600      	movs	r6, #0
  cursor_y = y;
 8042d58:	2018      	movs	r0, #24
    }
  }
}

void Arduino_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 8042d5a:	81a6      	strh	r6, [r4, #12]
  cursor_y = y;
 8042d5c:	81e0      	strh	r0, [r4, #14]
  OLED.setCursor(0, 24);
  
  OLED.print("USB connected: ");
 8042d5e:	4948      	ldr	r1, [pc, #288]	; (8042e80 <_Z4loopv+0x148>)
 8042d60:	4620      	mov	r0, r4
 8042d62:	f7ff ff27 	bl	8042bb4 <_ZN11Arduino_GFX5printEPc>
  public:
    // Initialize PMU (Power Management Unit)
    // The PMU is an I2C external circuit that manages battery charging
    inline boolean begin() { return pmu_init(); };
    // Returns true if charging is possible (means USB is connected)
    inline boolean canCharge() { return digitalRead(USB_CONNECTED) == HIGH; };
 8042d66:	4847      	ldr	r0, [pc, #284]	; (8042e84 <_Z4loopv+0x14c>)
 8042d68:	f7ff f8fc 	bl	8041f64 <digitalRead>
  OLED.println((char*)(Battery.canCharge() ? "YES" : "NO"));
 8042d6c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8042eb0 <_Z4loopv+0x178>
 8042d70:	4f45      	ldr	r7, [pc, #276]	; (8042e88 <_Z4loopv+0x150>)
 8042d72:	2801      	cmp	r0, #1
 8042d74:	bf14      	ite	ne
 8042d76:	4641      	movne	r1, r8
 8042d78:	4639      	moveq	r1, r7
 8042d7a:	4620      	mov	r0, r4
 8042d7c:	f7ff ff25 	bl	8042bca <_ZN11Arduino_GFX7printlnEPc>
    
  OLED.print("PMU charging:  ");
 8042d80:	4620      	mov	r0, r4
 8042d82:	4942      	ldr	r1, [pc, #264]	; (8042e8c <_Z4loopv+0x154>)
 8042d84:	f7ff ff16 	bl	8042bb4 <_ZN11Arduino_GFX5printEPc>
    // Allow the PMU to charge the battery (does not mean it will)
    inline boolean enableCharging() { return pmu_charge(true); };
    // Prevent the PMU from charging the battery
    inline boolean disableCharging() { return pmu_charge(false); };
    // Check if the PMU is charging the battery (it will stop on errors, full battery, safety timeout, etc)
    inline boolean isCharging() { bool c; pmu_charging(&c); return c; };
 8042d88:	f10d 000f 	add.w	r0, sp, #15
 8042d8c:	f7ff f81c 	bl	8041dc8 <pmu_charging>
 8042d90:	f89d 100f 	ldrb.w	r1, [sp, #15]
  OLED.println((char*)(Battery.isCharging() ? "YES" : "NO"));
 8042d94:	4620      	mov	r0, r4
 8042d96:	42b1      	cmp	r1, r6
 8042d98:	bf0c      	ite	eq
 8042d9a:	4641      	moveq	r1, r8
 8042d9c:	4639      	movne	r1, r7
 8042d9e:	f7ff ff14 	bl	8042bca <_ZN11Arduino_GFX7printlnEPc>
 8042da2:	2230      	movs	r2, #48	; 0x30
 8042da4:	81e2      	strh	r2, [r4, #14]
    }
  }
}

void Arduino_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 8042da6:	81a6      	strh	r6, [r4, #12]
    // Return RAW battery level from ADC
    inline word readRaw() { return adc_battery(); };
    // Return battery voltage in millivolts
    inline word readMilliVolts() { return (adc_battery() * 4440) / 4095; };
 8042da8:	f7ff f86a 	bl	8041e80 <adc_battery>
 8042dac:	f241 1358 	movw	r3, #4440	; 0x1158
 8042db0:	4358      	muls	r0, r3
 8042db2:	f640 76ff 	movw	r6, #4095	; 0xfff
 8042db6:	fb90 f0f6 	sdiv	r0, r0, r6
  
  OLED.setCursor(0, 48);

  sprintf(text, "Battery: %.2fV", ((float)Battery.readMilliVolts()) / 1000.0);
 8042dba:	b280      	uxth	r0, r0
 8042dbc:	f7fd ff14 	bl	8040be8 <__aeabi_ui2f>
 8042dc0:	4933      	ldr	r1, [pc, #204]	; (8042e90 <_Z4loopv+0x158>)
 8042dc2:	f7fe f81d 	bl	8040e00 <__aeabi_fdiv>
 8042dc6:	f7fd fb43 	bl	8040450 <__aeabi_f2d>
 8042dca:	460b      	mov	r3, r1
 8042dcc:	4602      	mov	r2, r0
 8042dce:	4931      	ldr	r1, [pc, #196]	; (8042e94 <_Z4loopv+0x15c>)
 8042dd0:	a804      	add	r0, sp, #16
 8042dd2:	f000 fa37 	bl	8043244 <sprintf>
  OLED.println(text);
 8042dd6:	4620      	mov	r0, r4
 8042dd8:	a904      	add	r1, sp, #16
 8042dda:	f7ff fef6 	bl	8042bca <_ZN11Arduino_GFX7printlnEPc>
  private:
};

class Arduino_LightSensor {
  public:
    inline word readRaw() { return adc_lightsensor(); };
 8042dde:	f7ff f865 	bl	8041eac <adc_lightsensor>
  
  sprintf(text, "Sensor:  %u%%", (LightSensor.readRaw()*100)/4095);
 8042de2:	2264      	movs	r2, #100	; 0x64
 8042de4:	4342      	muls	r2, r0
 8042de6:	492c      	ldr	r1, [pc, #176]	; (8042e98 <_Z4loopv+0x160>)
 8042de8:	fb92 f2f6 	sdiv	r2, r2, r6
 8042dec:	a804      	add	r0, sp, #16
 8042dee:	f000 fa29 	bl	8043244 <sprintf>
  OLED.println(text);
 8042df2:	4620      	mov	r0, r4
 8042df4:	a904      	add	r1, sp, #16
 8042df6:	f7ff fee8 	bl	8042bca <_ZN11Arduino_GFX7printlnEPc>
#include "driver_adc.h"

class Arduino_CPU {
  public:
    // Change CPU speed
    inline void setSpeed(const ClockDef_t *clk) { cpu_reclock(clk); };
 8042dfa:	4828      	ldr	r0, [pc, #160]	; (8042e9c <_Z4loopv+0x164>)
 8042dfc:	f7fe ff08 	bl	8041c10 <cpu_reclock>

  // Delay in low speed mode
  CPU.setSpeed(CPU_LS);
  delay(150);
 8042e00:	2096      	movs	r0, #150	; 0x96
 8042e02:	f7ff f8d6 	bl	8041fb2 <delay>
  for(uint8_t n = 40; n <= 90; n++) {
 8042e06:	462c      	mov	r4, r5
void Arduino_OLED::shutdown() {
  oled_deinit();
}

void Arduino_OLED::setPower(uint8_t power) {
  oled_power(power);
 8042e08:	4620      	mov	r0, r4
 8042e0a:	3401      	adds	r4, #1
 8042e0c:	f7fe fc84 	bl	8041718 <oled_power>
 8042e10:	b2e4      	uxtb	r4, r4
    OLED.setPower(n);
    delay(2);
 8042e12:	2002      	movs	r0, #2
 8042e14:	f7ff f8cd 	bl	8041fb2 <delay>
  OLED.println(text);

  // Delay in low speed mode
  CPU.setSpeed(CPU_LS);
  delay(150);
  for(uint8_t n = 40; n <= 90; n++) {
 8042e18:	2c5b      	cmp	r4, #91	; 0x5b
 8042e1a:	d1f5      	bne.n	8042e08 <_Z4loopv+0xd0>
 8042e1c:	245a      	movs	r4, #90	; 0x5a
 8042e1e:	4620      	mov	r0, r4
 8042e20:	f7fe fc7a 	bl	8041718 <oled_power>
    OLED.setPower(n);
    delay(2);
  }
  for(uint8_t n = 90; n >= 40; n--) {
    OLED.setPower(n);
    delay(2);
 8042e24:	2002      	movs	r0, #2
 8042e26:	f7ff f8c4 	bl	8041fb2 <delay>
  delay(150);
  for(uint8_t n = 40; n <= 90; n++) {
    OLED.setPower(n);
    delay(2);
  }
  for(uint8_t n = 90; n >= 40; n--) {
 8042e2a:	1e61      	subs	r1, r4, #1
 8042e2c:	b2cc      	uxtb	r4, r1
 8042e2e:	2c27      	cmp	r4, #39	; 0x27
 8042e30:	d1f5      	bne.n	8042e1e <_Z4loopv+0xe6>
    OLED.setPower(n);
    delay(2);
  }
  delay(150);
 8042e32:	2096      	movs	r0, #150	; 0x96
 8042e34:	f7ff f8bd 	bl	8041fb2 <delay>
 8042e38:	4819      	ldr	r0, [pc, #100]	; (8042ea0 <_Z4loopv+0x168>)
 8042e3a:	f7fe fee9 	bl	8041c10 <cpu_reclock>
  CPU.setSpeed(CPU_HS);

  if(digitalRead(BUTTON)) {
 8042e3e:	4819      	ldr	r0, [pc, #100]	; (8042ea4 <_Z4loopv+0x16c>)
 8042e40:	f7ff f890 	bl	8041f64 <digitalRead>
 8042e44:	b1b0      	cbz	r0, 8042e74 <_Z4loopv+0x13c>
void Arduino_OLED::begin() {
  oled_init();
}

void Arduino_OLED::shutdown() {
  oled_deinit();
 8042e46:	f7fe fc81 	bl	804174c <oled_deinit>
    OLED.shutdown();
    digitalWrite(BUZZER, HIGH);
 8042e4a:	2101      	movs	r1, #1
 8042e4c:	4816      	ldr	r0, [pc, #88]	; (8042ea8 <_Z4loopv+0x170>)
 8042e4e:	f7ff f881 	bl	8041f54 <digitalWrite>
    delay(250);
 8042e52:	20fa      	movs	r0, #250	; 0xfa
 8042e54:	f7ff f8ad 	bl	8041fb2 <delay>
    digitalWrite(BUZZER, LOW);
 8042e58:	4813      	ldr	r0, [pc, #76]	; (8042ea8 <_Z4loopv+0x170>)
 8042e5a:	2100      	movs	r1, #0
 8042e5c:	f7ff f87a 	bl	8041f54 <digitalWrite>
    while(digitalRead(BUTTON));
 8042e60:	4810      	ldr	r0, [pc, #64]	; (8042ea4 <_Z4loopv+0x16c>)
 8042e62:	f7ff f87f 	bl	8041f64 <digitalRead>
 8042e66:	4601      	mov	r1, r0
 8042e68:	2800      	cmp	r0, #0
 8042e6a:	d1f9      	bne.n	8042e60 <_Z4loopv+0x128>
    digitalWrite(POWER, LOW);
 8042e6c:	480f      	ldr	r0, [pc, #60]	; (8042eac <_Z4loopv+0x174>)
 8042e6e:	f7ff f871 	bl	8041f54 <digitalWrite>
 8042e72:	e7fe      	b.n	8042e72 <_Z4loopv+0x13a>
    while(1);
  }
  
}
 8042e74:	b00c      	add	sp, #48	; 0x30
 8042e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042e7a:	bf00      	nop
 8042e7c:	200019a0 	.word	0x200019a0
 8042e80:	0804819d 	.word	0x0804819d
 8042e84:	080480f4 	.word	0x080480f4
 8042e88:	08048196 	.word	0x08048196
 8042e8c:	080481ad 	.word	0x080481ad
 8042e90:	447a0000 	.word	0x447a0000
 8042e94:	080481bd 	.word	0x080481bd
 8042e98:	080481cc 	.word	0x080481cc
 8042e9c:	08047de0 	.word	0x08047de0
 8042ea0:	08047dc4 	.word	0x08047dc4
 8042ea4:	08047f70 	.word	0x08047f70
 8042ea8:	08048060 	.word	0x08048060
 8042eac:	08048124 	.word	0x08048124
 8042eb0:	0804819a 	.word	0x0804819a

08042eb4 <main>:

// Found in sketch (.ino file)
void setup();
void loop();

int main(void) {
 8042eb4:	b508      	push	{r3, lr}

  // System initialization
  init();
 8042eb6:	f7ff fea9 	bl	8042c0c <_Z4initv>
  
  // User initialization
  setup();
 8042eba:	f7ff feed 	bl	8042c98 <_Z5setupv>

	// Forever loop, I want to be, forever... loop
	while(1) loop();
 8042ebe:	f7ff ff3b 	bl	8042d38 <_Z4loopv>
 8042ec2:	e7fc      	b.n	8042ebe <main+0xa>

08042ec4 <_GLOBAL__sub_I_font>:

uint16_t Arduino_OLED::Color565(uint8_t r, uint8_t g, uint8_t b) {
  return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

Arduino_OLED OLED;
 8042ec4:	4801      	ldr	r0, [pc, #4]	; (8042ecc <_GLOBAL__sub_I_font+0x8>)
 8042ec6:	f7ff be8d 	b.w	8042be4 <_ZN12Arduino_OLEDC1Ev>
 8042eca:	bf00      	nop
 8042ecc:	200019a0 	.word	0x200019a0

08042ed0 <Reset_Handler>:
 8042ed0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8042ed2:	f000 b804 	b.w	8042ede <LoopCopyDataInit>

08042ed6 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8042ed6:	4b0e      	ldr	r3, [pc, #56]	; (8042f10 <_init+0x4>)
  ldr  r3, [r3, r1]
 8042ed8:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8042eda:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8042edc:	3104      	adds	r1, #4

08042ede <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8042ede:	480d      	ldr	r0, [pc, #52]	; (8042f14 <_init+0x8>)
  ldr  r3, =_edata
 8042ee0:	4b0d      	ldr	r3, [pc, #52]	; (8042f18 <_init+0xc>)
  adds  r2, r0, r1
 8042ee2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8042ee4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8042ee6:	f4ff aff6 	bcc.w	8042ed6 <CopyDataInit>
  ldr  r2, =_sbss
 8042eea:	4a0c      	ldr	r2, [pc, #48]	; (8042f1c <_init+0x10>)
  b  LoopFillZerobss
 8042eec:	f000 b803 	b.w	8042ef6 <LoopFillZerobss>

08042ef0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8042ef0:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8042ef2:	f842 3b04 	str.w	r3, [r2], #4

08042ef6 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8042ef6:	4b0a      	ldr	r3, [pc, #40]	; (8042f20 <_init+0x14>)
  cmp  r2, r3
 8042ef8:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8042efa:	f4ff aff9 	bcc.w	8042ef0 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8042efe:	f7ff fc67 	bl	80427d0 <SystemInit>
/* Initialize C++ objects */
  bl __libc_init_array
 8042f02:	f000 f811 	bl	8042f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8042f06:	f7ff ffd5 	bl	8042eb4 <main>
  bx  lr    
 8042f0a:	4770      	bx	lr

08042f0c <_init>:

/* Called back by __libc_init_array */
  .weak  _init
  .type  _init, %function
_init:
  bx  lr
 8042f0c:	4770      	bx	lr
 8042f0e:	0000      	.short	0x0000
 8042f10:	0804836c 	.word	0x0804836c
 8042f14:	20000c00 	.word	0x20000c00
 8042f18:	20001994 	.word	0x20001994
 8042f1c:	20001994 	.word	0x20001994
 8042f20:	200019f4 	.word	0x200019f4

08042f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8042f24:	f7ff bffe 	b.w	8042f24 <ADC_IRQHandler>

08042f28 <__libc_init_array>:
 8042f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042f2a:	4f20      	ldr	r7, [pc, #128]	; (8042fac <__libc_init_array+0x84>)
 8042f2c:	4c20      	ldr	r4, [pc, #128]	; (8042fb0 <__libc_init_array+0x88>)
 8042f2e:	1b38      	subs	r0, r7, r4
 8042f30:	1087      	asrs	r7, r0, #2
 8042f32:	d017      	beq.n	8042f64 <__libc_init_array+0x3c>
 8042f34:	1e7a      	subs	r2, r7, #1
 8042f36:	6823      	ldr	r3, [r4, #0]
 8042f38:	2501      	movs	r5, #1
 8042f3a:	f002 0601 	and.w	r6, r2, #1
 8042f3e:	4798      	blx	r3
 8042f40:	42af      	cmp	r7, r5
 8042f42:	d00f      	beq.n	8042f64 <__libc_init_array+0x3c>
 8042f44:	b12e      	cbz	r6, 8042f52 <__libc_init_array+0x2a>
 8042f46:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8042f4a:	2502      	movs	r5, #2
 8042f4c:	4788      	blx	r1
 8042f4e:	42af      	cmp	r7, r5
 8042f50:	d008      	beq.n	8042f64 <__libc_init_array+0x3c>
 8042f52:	6860      	ldr	r0, [r4, #4]
 8042f54:	4780      	blx	r0
 8042f56:	3502      	adds	r5, #2
 8042f58:	68a2      	ldr	r2, [r4, #8]
 8042f5a:	1d26      	adds	r6, r4, #4
 8042f5c:	4790      	blx	r2
 8042f5e:	3408      	adds	r4, #8
 8042f60:	42af      	cmp	r7, r5
 8042f62:	d1f6      	bne.n	8042f52 <__libc_init_array+0x2a>
 8042f64:	4f13      	ldr	r7, [pc, #76]	; (8042fb4 <__libc_init_array+0x8c>)
 8042f66:	4c14      	ldr	r4, [pc, #80]	; (8042fb8 <__libc_init_array+0x90>)
 8042f68:	f7ff ffd0 	bl	8042f0c <_init>
 8042f6c:	1b3b      	subs	r3, r7, r4
 8042f6e:	109f      	asrs	r7, r3, #2
 8042f70:	d018      	beq.n	8042fa4 <__libc_init_array+0x7c>
 8042f72:	1e7d      	subs	r5, r7, #1
 8042f74:	6821      	ldr	r1, [r4, #0]
 8042f76:	f005 0601 	and.w	r6, r5, #1
 8042f7a:	2501      	movs	r5, #1
 8042f7c:	4788      	blx	r1
 8042f7e:	42af      	cmp	r7, r5
 8042f80:	d011      	beq.n	8042fa6 <__libc_init_array+0x7e>
 8042f82:	b12e      	cbz	r6, 8042f90 <__libc_init_array+0x68>
 8042f84:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8042f88:	2502      	movs	r5, #2
 8042f8a:	4780      	blx	r0
 8042f8c:	42af      	cmp	r7, r5
 8042f8e:	d00b      	beq.n	8042fa8 <__libc_init_array+0x80>
 8042f90:	6862      	ldr	r2, [r4, #4]
 8042f92:	4790      	blx	r2
 8042f94:	3502      	adds	r5, #2
 8042f96:	68a3      	ldr	r3, [r4, #8]
 8042f98:	1d26      	adds	r6, r4, #4
 8042f9a:	4798      	blx	r3
 8042f9c:	3408      	adds	r4, #8
 8042f9e:	42af      	cmp	r7, r5
 8042fa0:	d1f6      	bne.n	8042f90 <__libc_init_array+0x68>
 8042fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042faa:	bf00      	nop
 8042fac:	08048368 	.word	0x08048368
 8042fb0:	08048368 	.word	0x08048368
 8042fb4:	0804836c 	.word	0x0804836c
 8042fb8:	08048368 	.word	0x08048368

08042fbc <memcpy>:
 8042fbc:	2a0f      	cmp	r2, #15
 8042fbe:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8042fc2:	f240 80a1 	bls.w	8043108 <memcpy+0x14c>
 8042fc6:	ea41 0300 	orr.w	r3, r1, r0
 8042fca:	079b      	lsls	r3, r3, #30
 8042fcc:	f040 809e 	bne.w	804310c <memcpy+0x150>
 8042fd0:	680c      	ldr	r4, [r1, #0]
 8042fd2:	f1a2 0510 	sub.w	r5, r2, #16
 8042fd6:	6004      	str	r4, [r0, #0]
 8042fd8:	684b      	ldr	r3, [r1, #4]
 8042fda:	46ac      	mov	ip, r5
 8042fdc:	6043      	str	r3, [r0, #4]
 8042fde:	688c      	ldr	r4, [r1, #8]
 8042fe0:	f1bc 0f0f 	cmp.w	ip, #15
 8042fe4:	6084      	str	r4, [r0, #8]
 8042fe6:	68cc      	ldr	r4, [r1, #12]
 8042fe8:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8042fec:	60c4      	str	r4, [r0, #12]
 8042fee:	f100 0310 	add.w	r3, r0, #16
 8042ff2:	f101 0410 	add.w	r4, r1, #16
 8042ff6:	d92b      	bls.n	8043050 <memcpy+0x94>
 8042ff8:	b175      	cbz	r5, 8043018 <memcpy+0x5c>
 8042ffa:	6825      	ldr	r5, [r4, #0]
 8042ffc:	f1ac 0c10 	sub.w	ip, ip, #16
 8043000:	601d      	str	r5, [r3, #0]
 8043002:	6865      	ldr	r5, [r4, #4]
 8043004:	605d      	str	r5, [r3, #4]
 8043006:	68a5      	ldr	r5, [r4, #8]
 8043008:	609d      	str	r5, [r3, #8]
 804300a:	68e5      	ldr	r5, [r4, #12]
 804300c:	3410      	adds	r4, #16
 804300e:	60dd      	str	r5, [r3, #12]
 8043010:	3310      	adds	r3, #16
 8043012:	f1bc 0f0f 	cmp.w	ip, #15
 8043016:	d91b      	bls.n	8043050 <memcpy+0x94>
 8043018:	6827      	ldr	r7, [r4, #0]
 804301a:	f104 0610 	add.w	r6, r4, #16
 804301e:	601f      	str	r7, [r3, #0]
 8043020:	6867      	ldr	r7, [r4, #4]
 8043022:	f103 0510 	add.w	r5, r3, #16
 8043026:	605f      	str	r7, [r3, #4]
 8043028:	68a7      	ldr	r7, [r4, #8]
 804302a:	f1ac 0c20 	sub.w	ip, ip, #32
 804302e:	609f      	str	r7, [r3, #8]
 8043030:	68e7      	ldr	r7, [r4, #12]
 8043032:	60df      	str	r7, [r3, #12]
 8043034:	6924      	ldr	r4, [r4, #16]
 8043036:	611c      	str	r4, [r3, #16]
 8043038:	6877      	ldr	r7, [r6, #4]
 804303a:	f106 0410 	add.w	r4, r6, #16
 804303e:	606f      	str	r7, [r5, #4]
 8043040:	68b7      	ldr	r7, [r6, #8]
 8043042:	3320      	adds	r3, #32
 8043044:	60af      	str	r7, [r5, #8]
 8043046:	68f6      	ldr	r6, [r6, #12]
 8043048:	f1bc 0f0f 	cmp.w	ip, #15
 804304c:	60ee      	str	r6, [r5, #12]
 804304e:	d8e3      	bhi.n	8043018 <memcpy+0x5c>
 8043050:	f1a2 0810 	sub.w	r8, r2, #16
 8043054:	f028 030f 	bic.w	r3, r8, #15
 8043058:	f002 040f 	and.w	r4, r2, #15
 804305c:	f103 0c10 	add.w	ip, r3, #16
 8043060:	2c03      	cmp	r4, #3
 8043062:	eb00 030c 	add.w	r3, r0, ip
 8043066:	eb01 080c 	add.w	r8, r1, ip
 804306a:	d951      	bls.n	8043110 <memcpy+0x154>
 804306c:	1f21      	subs	r1, r4, #4
 804306e:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8043072:	4644      	mov	r4, r8
 8043074:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 8043078:	f854 6b04 	ldr.w	r6, [r4], #4
 804307c:	ebc8 010c 	rsb	r1, r8, ip
 8043080:	f10c 0c04 	add.w	ip, ip, #4
 8043084:	461d      	mov	r5, r3
 8043086:	4564      	cmp	r4, ip
 8043088:	f845 6b04 	str.w	r6, [r5], #4
 804308c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8043090:	d012      	beq.n	80430b8 <memcpy+0xfc>
 8043092:	b129      	cbz	r1, 80430a0 <memcpy+0xe4>
 8043094:	f854 1b04 	ldr.w	r1, [r4], #4
 8043098:	4564      	cmp	r4, ip
 804309a:	f845 1b04 	str.w	r1, [r5], #4
 804309e:	d00b      	beq.n	80430b8 <memcpy+0xfc>
 80430a0:	4627      	mov	r7, r4
 80430a2:	f857 1b04 	ldr.w	r1, [r7], #4
 80430a6:	462e      	mov	r6, r5
 80430a8:	f846 1b04 	str.w	r1, [r6], #4
 80430ac:	6864      	ldr	r4, [r4, #4]
 80430ae:	606c      	str	r4, [r5, #4]
 80430b0:	1d3c      	adds	r4, r7, #4
 80430b2:	1d35      	adds	r5, r6, #4
 80430b4:	4564      	cmp	r4, ip
 80430b6:	d1f3      	bne.n	80430a0 <memcpy+0xe4>
 80430b8:	f109 0c01 	add.w	ip, r9, #1
 80430bc:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80430c0:	f002 0203 	and.w	r2, r2, #3
 80430c4:	eb08 0109 	add.w	r1, r8, r9
 80430c8:	444b      	add	r3, r9
 80430ca:	b1d2      	cbz	r2, 8043102 <memcpy+0x146>
 80430cc:	780d      	ldrb	r5, [r1, #0]
 80430ce:	189a      	adds	r2, r3, r2
 80430d0:	43dc      	mvns	r4, r3
 80430d2:	f803 5b01 	strb.w	r5, [r3], #1
 80430d6:	1914      	adds	r4, r2, r4
 80430d8:	4293      	cmp	r3, r2
 80430da:	f004 0401 	and.w	r4, r4, #1
 80430de:	d010      	beq.n	8043102 <memcpy+0x146>
 80430e0:	b12c      	cbz	r4, 80430ee <memcpy+0x132>
 80430e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80430e6:	f803 4b01 	strb.w	r4, [r3], #1
 80430ea:	4293      	cmp	r3, r2
 80430ec:	d009      	beq.n	8043102 <memcpy+0x146>
 80430ee:	784d      	ldrb	r5, [r1, #1]
 80430f0:	461c      	mov	r4, r3
 80430f2:	f804 5b01 	strb.w	r5, [r4], #1
 80430f6:	788d      	ldrb	r5, [r1, #2]
 80430f8:	3102      	adds	r1, #2
 80430fa:	705d      	strb	r5, [r3, #1]
 80430fc:	1c63      	adds	r3, r4, #1
 80430fe:	4293      	cmp	r3, r2
 8043100:	d1f5      	bne.n	80430ee <memcpy+0x132>
 8043102:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8043106:	4770      	bx	lr
 8043108:	4603      	mov	r3, r0
 804310a:	e7de      	b.n	80430ca <memcpy+0x10e>
 804310c:	4603      	mov	r3, r0
 804310e:	e7dd      	b.n	80430cc <memcpy+0x110>
 8043110:	4641      	mov	r1, r8
 8043112:	4622      	mov	r2, r4
 8043114:	e7d9      	b.n	80430ca <memcpy+0x10e>
 8043116:	bf00      	nop

08043118 <memset>:
 8043118:	b4f0      	push	{r4, r5, r6, r7}
 804311a:	0784      	lsls	r4, r0, #30
 804311c:	4603      	mov	r3, r0
 804311e:	f000 808d 	beq.w	804323c <memset+0x124>
 8043122:	1e54      	subs	r4, r2, #1
 8043124:	2a00      	cmp	r2, #0
 8043126:	f000 8087 	beq.w	8043238 <memset+0x120>
 804312a:	07e5      	lsls	r5, r4, #31
 804312c:	b2ce      	uxtb	r6, r1
 804312e:	d411      	bmi.n	8043154 <memset+0x3c>
 8043130:	461a      	mov	r2, r3
 8043132:	f802 6b01 	strb.w	r6, [r2], #1
 8043136:	4613      	mov	r3, r2
 8043138:	4615      	mov	r5, r2
 804313a:	0792      	lsls	r2, r2, #30
 804313c:	d010      	beq.n	8043160 <memset+0x48>
 804313e:	1e62      	subs	r2, r4, #1
 8043140:	2c00      	cmp	r4, #0
 8043142:	d079      	beq.n	8043238 <memset+0x120>
 8043144:	f803 6b01 	strb.w	r6, [r3], #1
 8043148:	4614      	mov	r4, r2
 804314a:	079a      	lsls	r2, r3, #30
 804314c:	461d      	mov	r5, r3
 804314e:	d007      	beq.n	8043160 <memset+0x48>
 8043150:	3c01      	subs	r4, #1
 8043152:	e7ed      	b.n	8043130 <memset+0x18>
 8043154:	4603      	mov	r3, r0
 8043156:	f803 6b01 	strb.w	r6, [r3], #1
 804315a:	079a      	lsls	r2, r3, #30
 804315c:	461d      	mov	r5, r3
 804315e:	d1f7      	bne.n	8043150 <memset+0x38>
 8043160:	2c03      	cmp	r4, #3
 8043162:	d952      	bls.n	804320a <memset+0xf2>
 8043164:	b2ce      	uxtb	r6, r1
 8043166:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 804316a:	2c0f      	cmp	r4, #15
 804316c:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8043170:	d92d      	bls.n	80431ce <memset+0xb6>
 8043172:	f1a4 0210 	sub.w	r2, r4, #16
 8043176:	4617      	mov	r7, r2
 8043178:	2f0f      	cmp	r7, #15
 804317a:	f3c2 1600 	ubfx	r6, r2, #4, #1
 804317e:	602b      	str	r3, [r5, #0]
 8043180:	606b      	str	r3, [r5, #4]
 8043182:	60ab      	str	r3, [r5, #8]
 8043184:	60eb      	str	r3, [r5, #12]
 8043186:	f105 0210 	add.w	r2, r5, #16
 804318a:	d916      	bls.n	80431ba <memset+0xa2>
 804318c:	b13e      	cbz	r6, 804319e <memset+0x86>
 804318e:	3f10      	subs	r7, #16
 8043190:	6013      	str	r3, [r2, #0]
 8043192:	6053      	str	r3, [r2, #4]
 8043194:	6093      	str	r3, [r2, #8]
 8043196:	60d3      	str	r3, [r2, #12]
 8043198:	3210      	adds	r2, #16
 804319a:	2f0f      	cmp	r7, #15
 804319c:	d90d      	bls.n	80431ba <memset+0xa2>
 804319e:	3f20      	subs	r7, #32
 80431a0:	f102 0610 	add.w	r6, r2, #16
 80431a4:	6013      	str	r3, [r2, #0]
 80431a6:	6053      	str	r3, [r2, #4]
 80431a8:	6093      	str	r3, [r2, #8]
 80431aa:	60d3      	str	r3, [r2, #12]
 80431ac:	6113      	str	r3, [r2, #16]
 80431ae:	6153      	str	r3, [r2, #20]
 80431b0:	6193      	str	r3, [r2, #24]
 80431b2:	61d3      	str	r3, [r2, #28]
 80431b4:	3220      	adds	r2, #32
 80431b6:	2f0f      	cmp	r7, #15
 80431b8:	d8f1      	bhi.n	804319e <memset+0x86>
 80431ba:	f1a4 0210 	sub.w	r2, r4, #16
 80431be:	f022 020f 	bic.w	r2, r2, #15
 80431c2:	f004 040f 	and.w	r4, r4, #15
 80431c6:	3210      	adds	r2, #16
 80431c8:	2c03      	cmp	r4, #3
 80431ca:	4415      	add	r5, r2
 80431cc:	d91d      	bls.n	804320a <memset+0xf2>
 80431ce:	1f27      	subs	r7, r4, #4
 80431d0:	463e      	mov	r6, r7
 80431d2:	462a      	mov	r2, r5
 80431d4:	2e03      	cmp	r6, #3
 80431d6:	f842 3b04 	str.w	r3, [r2], #4
 80431da:	f3c7 0780 	ubfx	r7, r7, #2, #1
 80431de:	d90d      	bls.n	80431fc <memset+0xe4>
 80431e0:	b127      	cbz	r7, 80431ec <memset+0xd4>
 80431e2:	3e04      	subs	r6, #4
 80431e4:	2e03      	cmp	r6, #3
 80431e6:	f842 3b04 	str.w	r3, [r2], #4
 80431ea:	d907      	bls.n	80431fc <memset+0xe4>
 80431ec:	4617      	mov	r7, r2
 80431ee:	f847 3b04 	str.w	r3, [r7], #4
 80431f2:	3e08      	subs	r6, #8
 80431f4:	6053      	str	r3, [r2, #4]
 80431f6:	1d3a      	adds	r2, r7, #4
 80431f8:	2e03      	cmp	r6, #3
 80431fa:	d8f7      	bhi.n	80431ec <memset+0xd4>
 80431fc:	1f23      	subs	r3, r4, #4
 80431fe:	f023 0203 	bic.w	r2, r3, #3
 8043202:	1d13      	adds	r3, r2, #4
 8043204:	f004 0403 	and.w	r4, r4, #3
 8043208:	18ed      	adds	r5, r5, r3
 804320a:	b1ac      	cbz	r4, 8043238 <memset+0x120>
 804320c:	b2c9      	uxtb	r1, r1
 804320e:	43ea      	mvns	r2, r5
 8043210:	192c      	adds	r4, r5, r4
 8043212:	f805 1b01 	strb.w	r1, [r5], #1
 8043216:	18a3      	adds	r3, r4, r2
 8043218:	42a5      	cmp	r5, r4
 804321a:	f003 0201 	and.w	r2, r3, #1
 804321e:	d00b      	beq.n	8043238 <memset+0x120>
 8043220:	b11a      	cbz	r2, 804322a <memset+0x112>
 8043222:	f805 1b01 	strb.w	r1, [r5], #1
 8043226:	42a5      	cmp	r5, r4
 8043228:	d006      	beq.n	8043238 <memset+0x120>
 804322a:	462b      	mov	r3, r5
 804322c:	f803 1b01 	strb.w	r1, [r3], #1
 8043230:	7069      	strb	r1, [r5, #1]
 8043232:	1c5d      	adds	r5, r3, #1
 8043234:	42a5      	cmp	r5, r4
 8043236:	d1f8      	bne.n	804322a <memset+0x112>
 8043238:	bcf0      	pop	{r4, r5, r6, r7}
 804323a:	4770      	bx	lr
 804323c:	4605      	mov	r5, r0
 804323e:	4614      	mov	r4, r2
 8043240:	e78e      	b.n	8043160 <memset+0x48>
 8043242:	bf00      	nop

08043244 <sprintf>:
 8043244:	b40e      	push	{r1, r2, r3}
 8043246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8043248:	b09c      	sub	sp, #112	; 0x70
 804324a:	ac21      	add	r4, sp, #132	; 0x84
 804324c:	f854 2b04 	ldr.w	r2, [r4], #4
 8043250:	f241 5348 	movw	r3, #5448	; 0x1548
 8043254:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8043258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 804325c:	4606      	mov	r6, r0
 804325e:	a902      	add	r1, sp, #8
 8043260:	9504      	str	r5, [sp, #16]
 8043262:	9507      	str	r5, [sp, #28]
 8043264:	6818      	ldr	r0, [r3, #0]
 8043266:	f44f 7702 	mov.w	r7, #520	; 0x208
 804326a:	4623      	mov	r3, r4
 804326c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8043270:	f8ad 7014 	strh.w	r7, [sp, #20]
 8043274:	9602      	str	r6, [sp, #8]
 8043276:	9606      	str	r6, [sp, #24]
 8043278:	f8ad 5016 	strh.w	r5, [sp, #22]
 804327c:	9401      	str	r4, [sp, #4]
 804327e:	f000 f809 	bl	8043294 <_svfprintf_r>
 8043282:	9902      	ldr	r1, [sp, #8]
 8043284:	2200      	movs	r2, #0
 8043286:	700a      	strb	r2, [r1, #0]
 8043288:	b01c      	add	sp, #112	; 0x70
 804328a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 804328e:	b003      	add	sp, #12
 8043290:	4770      	bx	lr
 8043292:	bf00      	nop

08043294 <_svfprintf_r>:
 8043294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043298:	b0c3      	sub	sp, #268	; 0x10c
 804329a:	468b      	mov	fp, r1
 804329c:	9310      	str	r3, [sp, #64]	; 0x40
 804329e:	4614      	mov	r4, r2
 80432a0:	900c      	str	r0, [sp, #48]	; 0x30
 80432a2:	f003 f8ef 	bl	8046484 <_localeconv_r>
 80432a6:	6800      	ldr	r0, [r0, #0]
 80432a8:	2600      	movs	r6, #0
 80432aa:	2700      	movs	r7, #0
 80432ac:	9014      	str	r0, [sp, #80]	; 0x50
 80432ae:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 80432b2:	f004 f975 	bl	80475a0 <strlen>
 80432b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80432ba:	9018      	str	r0, [sp, #96]	; 0x60
 80432bc:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80432c0:	b201      	sxth	r1, r0
 80432c2:	b121      	cbz	r1, 80432ce <_svfprintf_r+0x3a>
 80432c4:	f8db 2010 	ldr.w	r2, [fp, #16]
 80432c8:	2a00      	cmp	r2, #0
 80432ca:	f001 82ca 	beq.w	8044862 <_svfprintf_r+0x15ce>
 80432ce:	2700      	movs	r7, #0
 80432d0:	ae32      	add	r6, sp, #200	; 0xc8
 80432d2:	f8df 9520 	ldr.w	r9, [pc, #1312]	; 80437f4 <_svfprintf_r+0x560>
 80432d6:	9711      	str	r7, [sp, #68]	; 0x44
 80432d8:	9608      	str	r6, [sp, #32]
 80432da:	9625      	str	r6, [sp, #148]	; 0x94
 80432dc:	9727      	str	r7, [sp, #156]	; 0x9c
 80432de:	9726      	str	r7, [sp, #152]	; 0x98
 80432e0:	46a2      	mov	sl, r4
 80432e2:	9719      	str	r7, [sp, #100]	; 0x64
 80432e4:	971a      	str	r7, [sp, #104]	; 0x68
 80432e6:	970f      	str	r7, [sp, #60]	; 0x3c
 80432e8:	f89a 4000 	ldrb.w	r4, [sl]
 80432ec:	2c00      	cmp	r4, #0
 80432ee:	f000 81a2 	beq.w	8043636 <_svfprintf_r+0x3a2>
 80432f2:	2c25      	cmp	r4, #37	; 0x25
 80432f4:	f000 819f 	beq.w	8043636 <_svfprintf_r+0x3a2>
 80432f8:	f10a 0301 	add.w	r3, sl, #1
 80432fc:	e001      	b.n	8043302 <_svfprintf_r+0x6e>
 80432fe:	2d25      	cmp	r5, #37	; 0x25
 8043300:	d004      	beq.n	804330c <_svfprintf_r+0x78>
 8043302:	781d      	ldrb	r5, [r3, #0]
 8043304:	461c      	mov	r4, r3
 8043306:	3301      	adds	r3, #1
 8043308:	2d00      	cmp	r5, #0
 804330a:	d1f8      	bne.n	80432fe <_svfprintf_r+0x6a>
 804330c:	ebca 0504 	rsb	r5, sl, r4
 8043310:	b17d      	cbz	r5, 8043332 <_svfprintf_r+0x9e>
 8043312:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043314:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8043316:	1c53      	adds	r3, r2, #1
 8043318:	1941      	adds	r1, r0, r5
 804331a:	2b07      	cmp	r3, #7
 804331c:	f8c6 a000 	str.w	sl, [r6]
 8043320:	6075      	str	r5, [r6, #4]
 8043322:	9127      	str	r1, [sp, #156]	; 0x9c
 8043324:	9326      	str	r3, [sp, #152]	; 0x98
 8043326:	f300 8169 	bgt.w	80435fc <_svfprintf_r+0x368>
 804332a:	3608      	adds	r6, #8
 804332c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 804332e:	197f      	adds	r7, r7, r5
 8043330:	970f      	str	r7, [sp, #60]	; 0x3c
 8043332:	7820      	ldrb	r0, [r4, #0]
 8043334:	2800      	cmp	r0, #0
 8043336:	f000 8169 	beq.w	804360c <_svfprintf_r+0x378>
 804333a:	2100      	movs	r1, #0
 804333c:	f104 0a01 	add.w	sl, r4, #1
 8043340:	f894 8001 	ldrb.w	r8, [r4, #1]
 8043344:	f04f 34ff 	mov.w	r4, #4294967295
 8043348:	910d      	str	r1, [sp, #52]	; 0x34
 804334a:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 804334e:	9109      	str	r1, [sp, #36]	; 0x24
 8043350:	940a      	str	r4, [sp, #40]	; 0x28
 8043352:	2020      	movs	r0, #32
 8043354:	212b      	movs	r1, #43	; 0x2b
 8043356:	f10a 0a01 	add.w	sl, sl, #1
 804335a:	f1a8 0220 	sub.w	r2, r8, #32
 804335e:	2a58      	cmp	r2, #88	; 0x58
 8043360:	f200 825d 	bhi.w	804381e <_svfprintf_r+0x58a>
 8043364:	e8df f012 	tbh	[pc, r2, lsl #1]
 8043368:	025b0274 	.word	0x025b0274
 804336c:	027e025b 	.word	0x027e025b
 8043370:	025b025b 	.word	0x025b025b
 8043374:	025b025b 	.word	0x025b025b
 8043378:	025b025b 	.word	0x025b025b
 804337c:	01c501b9 	.word	0x01c501b9
 8043380:	0143025b 	.word	0x0143025b
 8043384:	025b01ca 	.word	0x025b01ca
 8043388:	028c0285 	.word	0x028c0285
 804338c:	028c028c 	.word	0x028c028c
 8043390:	028c028c 	.word	0x028c028c
 8043394:	028c028c 	.word	0x028c028c
 8043398:	028c028c 	.word	0x028c028c
 804339c:	025b025b 	.word	0x025b025b
 80433a0:	025b025b 	.word	0x025b025b
 80433a4:	025b025b 	.word	0x025b025b
 80433a8:	025b025b 	.word	0x025b025b
 80433ac:	025b025b 	.word	0x025b025b
 80433b0:	01880087 	.word	0x01880087
 80433b4:	0188025b 	.word	0x0188025b
 80433b8:	025b025b 	.word	0x025b025b
 80433bc:	025b025b 	.word	0x025b025b
 80433c0:	025b01f8 	.word	0x025b01f8
 80433c4:	006d025b 	.word	0x006d025b
 80433c8:	025b025b 	.word	0x025b025b
 80433cc:	025b025b 	.word	0x025b025b
 80433d0:	0059025b 	.word	0x0059025b
 80433d4:	025b025b 	.word	0x025b025b
 80433d8:	025b01ff 	.word	0x025b01ff
 80433dc:	025b025b 	.word	0x025b025b
 80433e0:	025b025b 	.word	0x025b025b
 80433e4:	025b025b 	.word	0x025b025b
 80433e8:	025b025b 	.word	0x025b025b
 80433ec:	01e6025b 	.word	0x01e6025b
 80433f0:	0188008b 	.word	0x0188008b
 80433f4:	01880188 	.word	0x01880188
 80433f8:	008b02aa 	.word	0x008b02aa
 80433fc:	025b025b 	.word	0x025b025b
 8043400:	025b02d7 	.word	0x025b02d7
 8043404:	0071029d 	.word	0x0071029d
 8043408:	0234021f 	.word	0x0234021f
 804340c:	02b1025b 	.word	0x02b1025b
 8043410:	005d025b 	.word	0x005d025b
 8043414:	025b025b 	.word	0x025b025b
 8043418:	0248      	.short	0x0248
 804341a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804341c:	f045 0210 	orr.w	r2, r5, #16
 8043420:	9209      	str	r2, [sp, #36]	; 0x24
 8043422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043424:	0699      	lsls	r1, r3, #26
 8043426:	f100 8208 	bmi.w	804383a <_svfprintf_r+0x5a6>
 804342a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 804342c:	06e2      	lsls	r2, r4, #27
 804342e:	f141 8091 	bpl.w	8044554 <_svfprintf_r+0x12c0>
 8043432:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8043434:	683d      	ldr	r5, [r7, #0]
 8043436:	1d3b      	adds	r3, r7, #4
 8043438:	9310      	str	r3, [sp, #64]	; 0x40
 804343a:	462c      	mov	r4, r5
 804343c:	2301      	movs	r3, #1
 804343e:	2500      	movs	r5, #0
 8043440:	e116      	b.n	8043670 <_svfprintf_r+0x3dc>
 8043442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8043444:	f042 0110 	orr.w	r1, r2, #16
 8043448:	9109      	str	r1, [sp, #36]	; 0x24
 804344a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804344c:	f013 0320 	ands.w	r3, r3, #32
 8043450:	f040 8104 	bne.w	804365c <_svfprintf_r+0x3c8>
 8043454:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8043456:	f014 0010 	ands.w	r0, r4, #16
 804345a:	f040 8761 	bne.w	8044320 <_svfprintf_r+0x108c>
 804345e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8043460:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8043464:	f000 875c 	beq.w	8044320 <_svfprintf_r+0x108c>
 8043468:	9f10      	ldr	r7, [sp, #64]	; 0x40
 804346a:	4603      	mov	r3, r0
 804346c:	1d3a      	adds	r2, r7, #4
 804346e:	883c      	ldrh	r4, [r7, #0]
 8043470:	2500      	movs	r5, #0
 8043472:	9210      	str	r2, [sp, #64]	; 0x40
 8043474:	e0fc      	b.n	8043670 <_svfprintf_r+0x3dc>
 8043476:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8043478:	f045 0310 	orr.w	r3, r5, #16
 804347c:	9309      	str	r3, [sp, #36]	; 0x24
 804347e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8043480:	06bf      	lsls	r7, r7, #26
 8043482:	f140 80da 	bpl.w	804363a <_svfprintf_r+0x3a6>
 8043486:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8043488:	1de0      	adds	r0, r4, #7
 804348a:	f020 0507 	bic.w	r5, r0, #7
 804348e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8043492:	3508      	adds	r5, #8
 8043494:	9510      	str	r5, [sp, #64]	; 0x40
 8043496:	4614      	mov	r4, r2
 8043498:	461d      	mov	r5, r3
 804349a:	2a00      	cmp	r2, #0
 804349c:	f173 0000 	sbcs.w	r0, r3, #0
 80434a0:	f2c0 8735 	blt.w	804430e <_svfprintf_r+0x107a>
 80434a4:	2301      	movs	r3, #1
 80434a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80434a8:	2f00      	cmp	r7, #0
 80434aa:	db03      	blt.n	80434b4 <_svfprintf_r+0x220>
 80434ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80434ae:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 80434b2:	9009      	str	r0, [sp, #36]	; 0x24
 80434b4:	ea54 0005 	orrs.w	r0, r4, r5
 80434b8:	f040 83ef 	bne.w	8043c9a <_svfprintf_r+0xa06>
 80434bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80434be:	2a00      	cmp	r2, #0
 80434c0:	f040 83eb 	bne.w	8043c9a <_svfprintf_r+0xa06>
 80434c4:	2b00      	cmp	r3, #0
 80434c6:	f040 8658 	bne.w	804417a <_svfprintf_r+0xee6>
 80434ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80434cc:	07da      	lsls	r2, r3, #31
 80434ce:	f141 8017 	bpl.w	8044500 <_svfprintf_r+0x126c>
 80434d2:	af42      	add	r7, sp, #264	; 0x108
 80434d4:	2130      	movs	r1, #48	; 0x30
 80434d6:	9808      	ldr	r0, [sp, #32]
 80434d8:	f807 1d41 	strb.w	r1, [r7, #-65]!
 80434dc:	1bc2      	subs	r2, r0, r7
 80434de:	920e      	str	r2, [sp, #56]	; 0x38
 80434e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80434e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80434e4:	2400      	movs	r4, #0
 80434e6:	4288      	cmp	r0, r1
 80434e8:	bfb8      	it	lt
 80434ea:	4608      	movlt	r0, r1
 80434ec:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 80434f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80434f2:	9112      	str	r1, [sp, #72]	; 0x48
 80434f4:	9415      	str	r4, [sp, #84]	; 0x54
 80434f6:	b113      	cbz	r3, 80434fe <_svfprintf_r+0x26a>
 80434f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80434fa:	1c5a      	adds	r2, r3, #1
 80434fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80434fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8043500:	f010 0102 	ands.w	r1, r0, #2
 8043504:	910a      	str	r1, [sp, #40]	; 0x28
 8043506:	d002      	beq.n	804350e <_svfprintf_r+0x27a>
 8043508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804350a:	1c94      	adds	r4, r2, #2
 804350c:	940b      	str	r4, [sp, #44]	; 0x2c
 804350e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043510:	f013 0084 	ands.w	r0, r3, #132	; 0x84
 8043514:	9013      	str	r0, [sp, #76]	; 0x4c
 8043516:	f040 8228 	bne.w	804396a <_svfprintf_r+0x6d6>
 804351a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 804351c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 804351e:	1a6d      	subs	r5, r5, r1
 8043520:	2d00      	cmp	r5, #0
 8043522:	f340 8222 	ble.w	804396a <_svfprintf_r+0x6d6>
 8043526:	2d10      	cmp	r5, #16
 8043528:	f341 8214 	ble.w	8044954 <_svfprintf_r+0x16c0>
 804352c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 804352e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8043530:	f248 2030 	movw	r0, #33328	; 0x8230
 8043534:	2410      	movs	r4, #16
 8043536:	f6c0 0004 	movt	r0, #2052	; 0x804
 804353a:	e886 0011 	stmia.w	r6, {r0, r4}
 804353e:	1911      	adds	r1, r2, r4
 8043540:	48a7      	ldr	r0, [pc, #668]	; (80437e0 <_svfprintf_r+0x54c>)
 8043542:	1c5a      	adds	r2, r3, #1
 8043544:	f1a5 0e11 	sub.w	lr, r5, #17
 8043548:	2a07      	cmp	r2, #7
 804354a:	901b      	str	r0, [sp, #108]	; 0x6c
 804354c:	9127      	str	r1, [sp, #156]	; 0x9c
 804354e:	9226      	str	r2, [sp, #152]	; 0x98
 8043550:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8043554:	f300 856c 	bgt.w	8044030 <_svfprintf_r+0xd9c>
 8043558:	3608      	adds	r6, #8
 804355a:	3d10      	subs	r5, #16
 804355c:	2d10      	cmp	r5, #16
 804355e:	f340 81f8 	ble.w	8043952 <_svfprintf_r+0x6be>
 8043562:	b18b      	cbz	r3, 8043588 <_svfprintf_r+0x2f4>
 8043564:	3201      	adds	r2, #1
 8043566:	f248 2330 	movw	r3, #33328	; 0x8230
 804356a:	3110      	adds	r1, #16
 804356c:	f6c0 0304 	movt	r3, #2052	; 0x804
 8043570:	2a07      	cmp	r2, #7
 8043572:	e886 0018 	stmia.w	r6, {r3, r4}
 8043576:	9127      	str	r1, [sp, #156]	; 0x9c
 8043578:	9226      	str	r2, [sp, #152]	; 0x98
 804357a:	f300 8568 	bgt.w	804404e <_svfprintf_r+0xdba>
 804357e:	3608      	adds	r6, #8
 8043580:	3d10      	subs	r5, #16
 8043582:	2d10      	cmp	r5, #16
 8043584:	f340 81e5 	ble.w	8043952 <_svfprintf_r+0x6be>
 8043588:	4633      	mov	r3, r6
 804358a:	462e      	mov	r6, r5
 804358c:	463d      	mov	r5, r7
 804358e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8043590:	e013      	b.n	80435ba <_svfprintf_r+0x326>
 8043592:	3308      	adds	r3, #8
 8043594:	3201      	adds	r2, #1
 8043596:	f248 2030 	movw	r0, #33328	; 0x8230
 804359a:	3110      	adds	r1, #16
 804359c:	f6c0 0004 	movt	r0, #2052	; 0x804
 80435a0:	3e10      	subs	r6, #16
 80435a2:	2a07      	cmp	r2, #7
 80435a4:	e883 0011 	stmia.w	r3, {r0, r4}
 80435a8:	9127      	str	r1, [sp, #156]	; 0x9c
 80435aa:	9226      	str	r2, [sp, #152]	; 0x98
 80435ac:	f300 81bf 	bgt.w	804392e <_svfprintf_r+0x69a>
 80435b0:	3e10      	subs	r6, #16
 80435b2:	3308      	adds	r3, #8
 80435b4:	2e10      	cmp	r6, #16
 80435b6:	f340 81c9 	ble.w	804394c <_svfprintf_r+0x6b8>
 80435ba:	3201      	adds	r2, #1
 80435bc:	f248 2030 	movw	r0, #33328	; 0x8230
 80435c0:	3110      	adds	r1, #16
 80435c2:	f6c0 0004 	movt	r0, #2052	; 0x804
 80435c6:	2a07      	cmp	r2, #7
 80435c8:	e883 0011 	stmia.w	r3, {r0, r4}
 80435cc:	9127      	str	r1, [sp, #156]	; 0x9c
 80435ce:	9226      	str	r2, [sp, #152]	; 0x98
 80435d0:	dddf      	ble.n	8043592 <_svfprintf_r+0x2fe>
 80435d2:	4638      	mov	r0, r7
 80435d4:	4659      	mov	r1, fp
 80435d6:	aa25      	add	r2, sp, #148	; 0x94
 80435d8:	f004 f812 	bl	8047600 <__ssprint_r>
 80435dc:	b9e8      	cbnz	r0, 804361a <_svfprintf_r+0x386>
 80435de:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80435e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80435e2:	ab32      	add	r3, sp, #200	; 0xc8
 80435e4:	e7d6      	b.n	8043594 <_svfprintf_r+0x300>
 80435e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80435e8:	9210      	str	r2, [sp, #64]	; 0x40
 80435ea:	4267      	negs	r7, r4
 80435ec:	970d      	str	r7, [sp, #52]	; 0x34
 80435ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80435f0:	f043 0204 	orr.w	r2, r3, #4
 80435f4:	9209      	str	r2, [sp, #36]	; 0x24
 80435f6:	f89a 8000 	ldrb.w	r8, [sl]
 80435fa:	e6ac      	b.n	8043356 <_svfprintf_r+0xc2>
 80435fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80435fe:	4659      	mov	r1, fp
 8043600:	aa25      	add	r2, sp, #148	; 0x94
 8043602:	f003 fffd 	bl	8047600 <__ssprint_r>
 8043606:	b940      	cbnz	r0, 804361a <_svfprintf_r+0x386>
 8043608:	ae32      	add	r6, sp, #200	; 0xc8
 804360a:	e68f      	b.n	804332c <_svfprintf_r+0x98>
 804360c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 804360e:	b124      	cbz	r4, 804361a <_svfprintf_r+0x386>
 8043610:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043612:	4659      	mov	r1, fp
 8043614:	aa25      	add	r2, sp, #148	; 0x94
 8043616:	f003 fff3 	bl	8047600 <__ssprint_r>
 804361a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
 804361e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8043620:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8043624:	b21a      	sxth	r2, r3
 8043626:	2a00      	cmp	r2, #0
 8043628:	bf18      	it	ne
 804362a:	f04f 34ff 	movne.w	r4, #4294967295
 804362e:	4620      	mov	r0, r4
 8043630:	b043      	add	sp, #268	; 0x10c
 8043632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8043636:	4654      	mov	r4, sl
 8043638:	e67b      	b.n	8043332 <_svfprintf_r+0x9e>
 804363a:	9909      	ldr	r1, [sp, #36]	; 0x24
 804363c:	06cd      	lsls	r5, r1, #27
 804363e:	f100 8659 	bmi.w	80442f4 <_svfprintf_r+0x1060>
 8043642:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8043644:	0664      	lsls	r4, r4, #25
 8043646:	f140 8655 	bpl.w	80442f4 <_svfprintf_r+0x1060>
 804364a:	9810      	ldr	r0, [sp, #64]	; 0x40
 804364c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8043650:	1d02      	adds	r2, r0, #4
 8043652:	17e5      	asrs	r5, r4, #31
 8043654:	9210      	str	r2, [sp, #64]	; 0x40
 8043656:	462b      	mov	r3, r5
 8043658:	4622      	mov	r2, r4
 804365a:	e71e      	b.n	804349a <_svfprintf_r+0x206>
 804365c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804365e:	1ddf      	adds	r7, r3, #7
 8043660:	f027 0207 	bic.w	r2, r7, #7
 8043664:	f102 0108 	add.w	r1, r2, #8
 8043668:	9110      	str	r1, [sp, #64]	; 0x40
 804366a:	2300      	movs	r3, #0
 804366c:	e9d2 4500 	ldrd	r4, r5, [r2]
 8043670:	2000      	movs	r0, #0
 8043672:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 8043676:	e716      	b.n	80434a6 <_svfprintf_r+0x212>
 8043678:	9d10      	ldr	r5, [sp, #64]	; 0x40
 804367a:	1def      	adds	r7, r5, #7
 804367c:	f027 0107 	bic.w	r1, r7, #7
 8043680:	680d      	ldr	r5, [r1, #0]
 8043682:	684c      	ldr	r4, [r1, #4]
 8043684:	3108      	adds	r1, #8
 8043686:	9110      	str	r1, [sp, #64]	; 0x40
 8043688:	4628      	mov	r0, r5
 804368a:	4621      	mov	r1, r4
 804368c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8043690:	4621      	mov	r1, r4
 8043692:	4628      	mov	r0, r5
 8043694:	f003 ff3e 	bl	8047514 <__fpclassifyd>
 8043698:	2801      	cmp	r0, #1
 804369a:	4621      	mov	r1, r4
 804369c:	4628      	mov	r0, r5
 804369e:	f040 8740 	bne.w	8044522 <_svfprintf_r+0x128e>
 80436a2:	2200      	movs	r2, #0
 80436a4:	2300      	movs	r3, #0
 80436a6:	f7fd f999 	bl	80409dc <__aeabi_dcmplt>
 80436aa:	2800      	cmp	r0, #0
 80436ac:	f041 81f8 	bne.w	8044aa0 <_svfprintf_r+0x180c>
 80436b0:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 80436b4:	2700      	movs	r7, #0
 80436b6:	4a4b      	ldr	r2, [pc, #300]	; (80437e4 <_svfprintf_r+0x550>)
 80436b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80436ba:	9712      	str	r7, [sp, #72]	; 0x48
 80436bc:	4f4a      	ldr	r7, [pc, #296]	; (80437e8 <_svfprintf_r+0x554>)
 80436be:	2003      	movs	r0, #3
 80436c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80436c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80436c6:	bfd8      	it	le
 80436c8:	4617      	movle	r7, r2
 80436ca:	f021 0480 	bic.w	r4, r1, #128	; 0x80
 80436ce:	2003      	movs	r0, #3
 80436d0:	2200      	movs	r2, #0
 80436d2:	9409      	str	r4, [sp, #36]	; 0x24
 80436d4:	900e      	str	r0, [sp, #56]	; 0x38
 80436d6:	9215      	str	r2, [sp, #84]	; 0x54
 80436d8:	e70d      	b.n	80434f6 <_svfprintf_r+0x262>
 80436da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80436dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80436de:	6817      	ldr	r7, [r2, #0]
 80436e0:	1d1a      	adds	r2, r3, #4
 80436e2:	2f00      	cmp	r7, #0
 80436e4:	970d      	str	r7, [sp, #52]	; 0x34
 80436e6:	f6ff af7e 	blt.w	80435e6 <_svfprintf_r+0x352>
 80436ea:	f89a 8000 	ldrb.w	r8, [sl]
 80436ee:	9210      	str	r2, [sp, #64]	; 0x40
 80436f0:	e631      	b.n	8043356 <_svfprintf_r+0xc2>
 80436f2:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 80436f6:	f89a 8000 	ldrb.w	r8, [sl]
 80436fa:	e62c      	b.n	8043356 <_svfprintf_r+0xc2>
 80436fc:	4654      	mov	r4, sl
 80436fe:	f814 8b01 	ldrb.w	r8, [r4], #1
 8043702:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8043706:	f001 82f4 	beq.w	8044cf2 <_svfprintf_r+0x1a5e>
 804370a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 804370e:	2200      	movs	r2, #0
 8043710:	2b09      	cmp	r3, #9
 8043712:	f201 823e 	bhi.w	8044b92 <_svfprintf_r+0x18fe>
 8043716:	f814 8b01 	ldrb.w	r8, [r4], #1
 804371a:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 804371e:	eb03 0247 	add.w	r2, r3, r7, lsl #1
 8043722:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8043726:	2b09      	cmp	r3, #9
 8043728:	46a2      	mov	sl, r4
 804372a:	d9f4      	bls.n	8043716 <_svfprintf_r+0x482>
 804372c:	ea42 74e2 	orr.w	r4, r2, r2, asr #31
 8043730:	940a      	str	r4, [sp, #40]	; 0x28
 8043732:	e612      	b.n	804335a <_svfprintf_r+0xc6>
 8043734:	9910      	ldr	r1, [sp, #64]	; 0x40
 8043736:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8043738:	6808      	ldr	r0, [r1, #0]
 804373a:	2701      	movs	r7, #1
 804373c:	1d22      	adds	r2, r4, #4
 804373e:	2300      	movs	r3, #0
 8043740:	970b      	str	r7, [sp, #44]	; 0x2c
 8043742:	970e      	str	r7, [sp, #56]	; 0x38
 8043744:	9210      	str	r2, [sp, #64]	; 0x40
 8043746:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
 804374a:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 804374e:	af28      	add	r7, sp, #160	; 0xa0
 8043750:	2300      	movs	r3, #0
 8043752:	9312      	str	r3, [sp, #72]	; 0x48
 8043754:	9315      	str	r3, [sp, #84]	; 0x54
 8043756:	e6d2      	b.n	80434fe <_svfprintf_r+0x26a>
 8043758:	9c09      	ldr	r4, [sp, #36]	; 0x24
 804375a:	f044 0308 	orr.w	r3, r4, #8
 804375e:	9309      	str	r3, [sp, #36]	; 0x24
 8043760:	f89a 8000 	ldrb.w	r8, [sl]
 8043764:	e5f7      	b.n	8043356 <_svfprintf_r+0xc2>
 8043766:	9909      	ldr	r1, [sp, #36]	; 0x24
 8043768:	4d20      	ldr	r5, [pc, #128]	; (80437ec <_svfprintf_r+0x558>)
 804376a:	068f      	lsls	r7, r1, #26
 804376c:	9519      	str	r5, [sp, #100]	; 0x64
 804376e:	d548      	bpl.n	8043802 <_svfprintf_r+0x56e>
 8043770:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8043772:	1dfa      	adds	r2, r7, #7
 8043774:	f022 0307 	bic.w	r3, r2, #7
 8043778:	f103 0408 	add.w	r4, r3, #8
 804377c:	9410      	str	r4, [sp, #64]	; 0x40
 804377e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8043782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8043784:	07c8      	lsls	r0, r1, #31
 8043786:	f140 8444 	bpl.w	8044012 <_svfprintf_r+0xd7e>
 804378a:	ea54 0005 	orrs.w	r0, r4, r5
 804378e:	f000 8440 	beq.w	8044012 <_svfprintf_r+0xd7e>
 8043792:	2030      	movs	r0, #48	; 0x30
 8043794:	f041 0702 	orr.w	r7, r1, #2
 8043798:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
 804379c:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 80437a0:	9709      	str	r7, [sp, #36]	; 0x24
 80437a2:	2302      	movs	r3, #2
 80437a4:	e764      	b.n	8043670 <_svfprintf_r+0x3dc>
 80437a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80437a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80437aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80437ac:	1d07      	adds	r7, r0, #4
 80437ae:	4810      	ldr	r0, [pc, #64]	; (80437f0 <_svfprintf_r+0x55c>)
 80437b0:	f041 0302 	orr.w	r3, r1, #2
 80437b4:	f04f 0878 	mov.w	r8, #120	; 0x78
 80437b8:	2230      	movs	r2, #48	; 0x30
 80437ba:	682c      	ldr	r4, [r5, #0]
 80437bc:	9309      	str	r3, [sp, #36]	; 0x24
 80437be:	9710      	str	r7, [sp, #64]	; 0x40
 80437c0:	2500      	movs	r5, #0
 80437c2:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
 80437c6:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 80437ca:	9019      	str	r0, [sp, #100]	; 0x64
 80437cc:	2302      	movs	r3, #2
 80437ce:	e74f      	b.n	8043670 <_svfprintf_r+0x3dc>
 80437d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80437d2:	f043 0220 	orr.w	r2, r3, #32
 80437d6:	9209      	str	r2, [sp, #36]	; 0x24
 80437d8:	f89a 8000 	ldrb.w	r8, [sl]
 80437dc:	e5bb      	b.n	8043356 <_svfprintf_r+0xc2>
 80437de:	bf00      	nop
 80437e0:	08048230 	.word	0x08048230
 80437e4:	080481dc 	.word	0x080481dc
 80437e8:	080481e0 	.word	0x080481e0
 80437ec:	080481ec 	.word	0x080481ec
 80437f0:	08048200 	.word	0x08048200
 80437f4:	08048220 	.word	0x08048220
 80437f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80437fa:	4d9b      	ldr	r5, [pc, #620]	; (8043a68 <_svfprintf_r+0x7d4>)
 80437fc:	068f      	lsls	r7, r1, #26
 80437fe:	9519      	str	r5, [sp, #100]	; 0x64
 8043800:	d4b6      	bmi.n	8043770 <_svfprintf_r+0x4dc>
 8043802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8043804:	06c5      	lsls	r5, r0, #27
 8043806:	f100 8592 	bmi.w	804432e <_svfprintf_r+0x109a>
 804380a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 804380c:	067c      	lsls	r4, r7, #25
 804380e:	f140 858e 	bpl.w	804432e <_svfprintf_r+0x109a>
 8043812:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8043814:	2500      	movs	r5, #0
 8043816:	1d13      	adds	r3, r2, #4
 8043818:	8814      	ldrh	r4, [r2, #0]
 804381a:	9310      	str	r3, [sp, #64]	; 0x40
 804381c:	e7b1      	b.n	8043782 <_svfprintf_r+0x4ee>
 804381e:	f1b8 0f00 	cmp.w	r8, #0
 8043822:	f43f aef3 	beq.w	804360c <_svfprintf_r+0x378>
 8043826:	2201      	movs	r2, #1
 8043828:	2400      	movs	r4, #0
 804382a:	920b      	str	r2, [sp, #44]	; 0x2c
 804382c:	f88d 80a0 	strb.w	r8, [sp, #160]	; 0xa0
 8043830:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 8043834:	920e      	str	r2, [sp, #56]	; 0x38
 8043836:	af28      	add	r7, sp, #160	; 0xa0
 8043838:	e78a      	b.n	8043750 <_svfprintf_r+0x4bc>
 804383a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 804383c:	2301      	movs	r3, #1
 804383e:	1de0      	adds	r0, r4, #7
 8043840:	f020 0507 	bic.w	r5, r0, #7
 8043844:	f105 0708 	add.w	r7, r5, #8
 8043848:	9710      	str	r7, [sp, #64]	; 0x40
 804384a:	e9d5 4500 	ldrd	r4, r5, [r5]
 804384e:	e70f      	b.n	8043670 <_svfprintf_r+0x3dc>
 8043850:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8043854:	2b00      	cmp	r3, #0
 8043856:	f040 8695 	bne.w	8044584 <_svfprintf_r+0x12f0>
 804385a:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 804385e:	f89a 8000 	ldrb.w	r8, [sl]
 8043862:	e578      	b.n	8043356 <_svfprintf_r+0xc2>
 8043864:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8043866:	f044 0701 	orr.w	r7, r4, #1
 804386a:	9709      	str	r7, [sp, #36]	; 0x24
 804386c:	f89a 8000 	ldrb.w	r8, [sl]
 8043870:	e571      	b.n	8043356 <_svfprintf_r+0xc2>
 8043872:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8043874:	f047 0380 	orr.w	r3, r7, #128	; 0x80
 8043878:	9309      	str	r3, [sp, #36]	; 0x24
 804387a:	f89a 8000 	ldrb.w	r8, [sl]
 804387e:	e56a      	b.n	8043356 <_svfprintf_r+0xc2>
 8043880:	4657      	mov	r7, sl
 8043882:	2200      	movs	r2, #0
 8043884:	f1a8 0530 	sub.w	r5, r8, #48	; 0x30
 8043888:	f817 8b01 	ldrb.w	r8, [r7], #1
 804388c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8043890:	f1a8 0430 	sub.w	r4, r8, #48	; 0x30
 8043894:	2c09      	cmp	r4, #9
 8043896:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 804389a:	46ba      	mov	sl, r7
 804389c:	d9f2      	bls.n	8043884 <_svfprintf_r+0x5f0>
 804389e:	920d      	str	r2, [sp, #52]	; 0x34
 80438a0:	e55b      	b.n	804335a <_svfprintf_r+0xc6>
 80438a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80438a4:	06a4      	lsls	r4, r4, #26
 80438a6:	f140 8661 	bpl.w	804456c <_svfprintf_r+0x12d8>
 80438aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80438ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80438ae:	683b      	ldr	r3, [r7, #0]
 80438b0:	17c4      	asrs	r4, r0, #31
 80438b2:	3704      	adds	r7, #4
 80438b4:	6018      	str	r0, [r3, #0]
 80438b6:	605c      	str	r4, [r3, #4]
 80438b8:	9710      	str	r7, [sp, #64]	; 0x40
 80438ba:	e515      	b.n	80432e8 <_svfprintf_r+0x54>
 80438bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80438be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80438c2:	9309      	str	r3, [sp, #36]	; 0x24
 80438c4:	f89a 8000 	ldrb.w	r8, [sl]
 80438c8:	e545      	b.n	8043356 <_svfprintf_r+0xc2>
 80438ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80438cc:	2400      	movs	r4, #0
 80438ce:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 80438d2:	681f      	ldr	r7, [r3, #0]
 80438d4:	1d1d      	adds	r5, r3, #4
 80438d6:	2f00      	cmp	r7, #0
 80438d8:	f001 80c5 	beq.w	8044a66 <_svfprintf_r+0x17d2>
 80438dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80438de:	4638      	mov	r0, r7
 80438e0:	2900      	cmp	r1, #0
 80438e2:	f2c1 8002 	blt.w	80448ea <_svfprintf_r+0x1656>
 80438e6:	4621      	mov	r1, r4
 80438e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80438ea:	f003 f869 	bl	80469c0 <memchr>
 80438ee:	2800      	cmp	r0, #0
 80438f0:	f001 8142 	beq.w	8044b78 <_svfprintf_r+0x18e4>
 80438f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80438f6:	1bc0      	subs	r0, r0, r7
 80438f8:	4288      	cmp	r0, r1
 80438fa:	900e      	str	r0, [sp, #56]	; 0x38
 80438fc:	9412      	str	r4, [sp, #72]	; 0x48
 80438fe:	f340 87a6 	ble.w	804484e <_svfprintf_r+0x15ba>
 8043902:	9812      	ldr	r0, [sp, #72]	; 0x48
 8043904:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 8043908:	940b      	str	r4, [sp, #44]	; 0x2c
 804390a:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 804390e:	9510      	str	r5, [sp, #64]	; 0x40
 8043910:	910e      	str	r1, [sp, #56]	; 0x38
 8043912:	9015      	str	r0, [sp, #84]	; 0x54
 8043914:	e5ef      	b.n	80434f6 <_svfprintf_r+0x262>
 8043916:	f89a 8000 	ldrb.w	r8, [sl]
 804391a:	4652      	mov	r2, sl
 804391c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8043920:	f000 86de 	beq.w	80446e0 <_svfprintf_r+0x144c>
 8043924:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8043926:	f047 0310 	orr.w	r3, r7, #16
 804392a:	9309      	str	r3, [sp, #36]	; 0x24
 804392c:	e513      	b.n	8043356 <_svfprintf_r+0xc2>
 804392e:	4638      	mov	r0, r7
 8043930:	4659      	mov	r1, fp
 8043932:	aa25      	add	r2, sp, #148	; 0x94
 8043934:	f003 fe64 	bl	8047600 <__ssprint_r>
 8043938:	2800      	cmp	r0, #0
 804393a:	f47f ae6e 	bne.w	804361a <_svfprintf_r+0x386>
 804393e:	3e10      	subs	r6, #16
 8043940:	2e10      	cmp	r6, #16
 8043942:	ab32      	add	r3, sp, #200	; 0xc8
 8043944:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8043946:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043948:	f73f ae37 	bgt.w	80435ba <_svfprintf_r+0x326>
 804394c:	462f      	mov	r7, r5
 804394e:	4635      	mov	r5, r6
 8043950:	461e      	mov	r6, r3
 8043952:	194c      	adds	r4, r1, r5
 8043954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8043956:	1c51      	adds	r1, r2, #1
 8043958:	2907      	cmp	r1, #7
 804395a:	e886 0028 	stmia.w	r6, {r3, r5}
 804395e:	9427      	str	r4, [sp, #156]	; 0x9c
 8043960:	9126      	str	r1, [sp, #152]	; 0x98
 8043962:	f300 840f 	bgt.w	8044184 <_svfprintf_r+0xef0>
 8043966:	3608      	adds	r6, #8
 8043968:	e000      	b.n	804396c <_svfprintf_r+0x6d8>
 804396a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 804396c:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
 8043970:	b168      	cbz	r0, 804398e <_svfprintf_r+0x6fa>
 8043972:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8043974:	3401      	adds	r4, #1
 8043976:	1c59      	adds	r1, r3, #1
 8043978:	2001      	movs	r0, #1
 804397a:	f10d 0273 	add.w	r2, sp, #115	; 0x73
 804397e:	2907      	cmp	r1, #7
 8043980:	6032      	str	r2, [r6, #0]
 8043982:	6070      	str	r0, [r6, #4]
 8043984:	9427      	str	r4, [sp, #156]	; 0x9c
 8043986:	9126      	str	r1, [sp, #152]	; 0x98
 8043988:	f300 8305 	bgt.w	8043f96 <_svfprintf_r+0xd02>
 804398c:	3608      	adds	r6, #8
 804398e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8043990:	b163      	cbz	r3, 80439ac <_svfprintf_r+0x718>
 8043992:	9926      	ldr	r1, [sp, #152]	; 0x98
 8043994:	3402      	adds	r4, #2
 8043996:	1c48      	adds	r0, r1, #1
 8043998:	2302      	movs	r3, #2
 804399a:	aa1d      	add	r2, sp, #116	; 0x74
 804399c:	2807      	cmp	r0, #7
 804399e:	6032      	str	r2, [r6, #0]
 80439a0:	6073      	str	r3, [r6, #4]
 80439a2:	9427      	str	r4, [sp, #156]	; 0x9c
 80439a4:	9026      	str	r0, [sp, #152]	; 0x98
 80439a6:	f300 8301 	bgt.w	8043fac <_svfprintf_r+0xd18>
 80439aa:	3608      	adds	r6, #8
 80439ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80439ae:	2d80      	cmp	r5, #128	; 0x80
 80439b0:	f000 822e 	beq.w	8043e10 <_svfprintf_r+0xb7c>
 80439b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80439b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80439b8:	1aed      	subs	r5, r5, r3
 80439ba:	2d00      	cmp	r5, #0
 80439bc:	dd75      	ble.n	8043aaa <_svfprintf_r+0x816>
 80439be:	2d10      	cmp	r5, #16
 80439c0:	f340 85f3 	ble.w	80445aa <_svfprintf_r+0x1316>
 80439c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80439c6:	2310      	movs	r3, #16
 80439c8:	3201      	adds	r2, #1
 80439ca:	4828      	ldr	r0, [pc, #160]	; (8043a6c <_svfprintf_r+0x7d8>)
 80439cc:	f1a5 0e11 	sub.w	lr, r5, #17
 80439d0:	18e4      	adds	r4, r4, r3
 80439d2:	2a07      	cmp	r2, #7
 80439d4:	f8c6 9000 	str.w	r9, [r6]
 80439d8:	6073      	str	r3, [r6, #4]
 80439da:	900a      	str	r0, [sp, #40]	; 0x28
 80439dc:	9427      	str	r4, [sp, #156]	; 0x9c
 80439de:	9226      	str	r2, [sp, #152]	; 0x98
 80439e0:	f3ce 1c00 	ubfx	ip, lr, #4, #1
 80439e4:	f300 82ac 	bgt.w	8043f40 <_svfprintf_r+0xcac>
 80439e8:	3608      	adds	r6, #8
 80439ea:	3d10      	subs	r5, #16
 80439ec:	2d10      	cmp	r5, #16
 80439ee:	dd51      	ble.n	8043a94 <_svfprintf_r+0x800>
 80439f0:	f1bc 0f00 	cmp.w	ip, #0
 80439f4:	d00d      	beq.n	8043a12 <_svfprintf_r+0x77e>
 80439f6:	3201      	adds	r2, #1
 80439f8:	3410      	adds	r4, #16
 80439fa:	2a07      	cmp	r2, #7
 80439fc:	f8c6 9000 	str.w	r9, [r6]
 8043a00:	6073      	str	r3, [r6, #4]
 8043a02:	9427      	str	r4, [sp, #156]	; 0x9c
 8043a04:	9226      	str	r2, [sp, #152]	; 0x98
 8043a06:	f300 82ad 	bgt.w	8043f64 <_svfprintf_r+0xcd0>
 8043a0a:	3608      	adds	r6, #8
 8043a0c:	3d10      	subs	r5, #16
 8043a0e:	2d10      	cmp	r5, #16
 8043a10:	dd40      	ble.n	8043a94 <_svfprintf_r+0x800>
 8043a12:	4631      	mov	r1, r6
 8043a14:	463e      	mov	r6, r7
 8043a16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8043a18:	e00e      	b.n	8043a38 <_svfprintf_r+0x7a4>
 8043a1a:	3108      	adds	r1, #8
 8043a1c:	3201      	adds	r2, #1
 8043a1e:	3410      	adds	r4, #16
 8043a20:	3d10      	subs	r5, #16
 8043a22:	2a07      	cmp	r2, #7
 8043a24:	f8c1 9000 	str.w	r9, [r1]
 8043a28:	604b      	str	r3, [r1, #4]
 8043a2a:	9226      	str	r2, [sp, #152]	; 0x98
 8043a2c:	9427      	str	r4, [sp, #156]	; 0x9c
 8043a2e:	dc1f      	bgt.n	8043a70 <_svfprintf_r+0x7dc>
 8043a30:	3d10      	subs	r5, #16
 8043a32:	3108      	adds	r1, #8
 8043a34:	2d10      	cmp	r5, #16
 8043a36:	dd2b      	ble.n	8043a90 <_svfprintf_r+0x7fc>
 8043a38:	3201      	adds	r2, #1
 8043a3a:	3410      	adds	r4, #16
 8043a3c:	2a07      	cmp	r2, #7
 8043a3e:	f8c1 9000 	str.w	r9, [r1]
 8043a42:	604b      	str	r3, [r1, #4]
 8043a44:	9427      	str	r4, [sp, #156]	; 0x9c
 8043a46:	9226      	str	r2, [sp, #152]	; 0x98
 8043a48:	dde7      	ble.n	8043a1a <_svfprintf_r+0x786>
 8043a4a:	4638      	mov	r0, r7
 8043a4c:	4659      	mov	r1, fp
 8043a4e:	aa25      	add	r2, sp, #148	; 0x94
 8043a50:	9306      	str	r3, [sp, #24]
 8043a52:	f003 fdd5 	bl	8047600 <__ssprint_r>
 8043a56:	9b06      	ldr	r3, [sp, #24]
 8043a58:	2800      	cmp	r0, #0
 8043a5a:	f47f adde 	bne.w	804361a <_svfprintf_r+0x386>
 8043a5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043a60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043a62:	a932      	add	r1, sp, #200	; 0xc8
 8043a64:	e7da      	b.n	8043a1c <_svfprintf_r+0x788>
 8043a66:	bf00      	nop
 8043a68:	08048200 	.word	0x08048200
 8043a6c:	08048220 	.word	0x08048220
 8043a70:	4638      	mov	r0, r7
 8043a72:	4659      	mov	r1, fp
 8043a74:	aa25      	add	r2, sp, #148	; 0x94
 8043a76:	9306      	str	r3, [sp, #24]
 8043a78:	f003 fdc2 	bl	8047600 <__ssprint_r>
 8043a7c:	9b06      	ldr	r3, [sp, #24]
 8043a7e:	2800      	cmp	r0, #0
 8043a80:	f47f adcb 	bne.w	804361a <_svfprintf_r+0x386>
 8043a84:	3d10      	subs	r5, #16
 8043a86:	2d10      	cmp	r5, #16
 8043a88:	a932      	add	r1, sp, #200	; 0xc8
 8043a8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043a8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043a8e:	dcd3      	bgt.n	8043a38 <_svfprintf_r+0x7a4>
 8043a90:	4637      	mov	r7, r6
 8043a92:	460e      	mov	r6, r1
 8043a94:	1c50      	adds	r0, r2, #1
 8043a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8043a98:	1964      	adds	r4, r4, r5
 8043a9a:	2807      	cmp	r0, #7
 8043a9c:	e886 0028 	stmia.w	r6, {r3, r5}
 8043aa0:	9427      	str	r4, [sp, #156]	; 0x9c
 8043aa2:	9026      	str	r0, [sp, #152]	; 0x98
 8043aa4:	f300 826c 	bgt.w	8043f80 <_svfprintf_r+0xcec>
 8043aa8:	3608      	adds	r6, #8
 8043aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043aac:	05db      	lsls	r3, r3, #23
 8043aae:	f100 811e 	bmi.w	8043cee <_svfprintf_r+0xa5a>
 8043ab2:	9826      	ldr	r0, [sp, #152]	; 0x98
 8043ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8043ab6:	6037      	str	r7, [r6, #0]
 8043ab8:	1c41      	adds	r1, r0, #1
 8043aba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8043abc:	18a4      	adds	r4, r4, r2
 8043abe:	2907      	cmp	r1, #7
 8043ac0:	6077      	str	r7, [r6, #4]
 8043ac2:	9427      	str	r4, [sp, #156]	; 0x9c
 8043ac4:	9126      	str	r1, [sp, #152]	; 0x98
 8043ac6:	f300 80a8 	bgt.w	8043c1a <_svfprintf_r+0x986>
 8043aca:	3608      	adds	r6, #8
 8043acc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8043ace:	077b      	lsls	r3, r7, #29
 8043ad0:	f140 80b1 	bpl.w	8043c36 <_svfprintf_r+0x9a2>
 8043ad4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8043ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8043ad8:	1aed      	subs	r5, r5, r3
 8043ada:	2d00      	cmp	r5, #0
 8043adc:	f340 80ab 	ble.w	8043c36 <_svfprintf_r+0x9a2>
 8043ae0:	2d10      	cmp	r5, #16
 8043ae2:	f340 87cc 	ble.w	8044a7e <_svfprintf_r+0x17ea>
 8043ae6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8043ae8:	2710      	movs	r7, #16
 8043aea:	1c43      	adds	r3, r0, #1
 8043aec:	49b2      	ldr	r1, [pc, #712]	; (8043db8 <_svfprintf_r+0xb24>)
 8043aee:	f248 2030 	movw	r0, #33328	; 0x8230
 8043af2:	f1a5 0c11 	sub.w	ip, r5, #17
 8043af6:	19e4      	adds	r4, r4, r7
 8043af8:	f6c0 0004 	movt	r0, #2052	; 0x804
 8043afc:	2b07      	cmp	r3, #7
 8043afe:	e886 0081 	stmia.w	r6, {r0, r7}
 8043b02:	9109      	str	r1, [sp, #36]	; 0x24
 8043b04:	9427      	str	r4, [sp, #156]	; 0x9c
 8043b06:	9326      	str	r3, [sp, #152]	; 0x98
 8043b08:	f3cc 1800 	ubfx	r8, ip, #4, #1
 8043b0c:	f300 83bb 	bgt.w	8044286 <_svfprintf_r+0xff2>
 8043b10:	3608      	adds	r6, #8
 8043b12:	3d10      	subs	r5, #16
 8043b14:	2d10      	cmp	r5, #16
 8043b16:	f340 80ad 	ble.w	8043c74 <_svfprintf_r+0x9e0>
 8043b1a:	f1b8 0f00 	cmp.w	r8, #0
 8043b1e:	d011      	beq.n	8043b44 <_svfprintf_r+0x8b0>
 8043b20:	3301      	adds	r3, #1
 8043b22:	f248 2030 	movw	r0, #33328	; 0x8230
 8043b26:	3410      	adds	r4, #16
 8043b28:	f6c0 0004 	movt	r0, #2052	; 0x804
 8043b2c:	2b07      	cmp	r3, #7
 8043b2e:	e886 0081 	stmia.w	r6, {r0, r7}
 8043b32:	9427      	str	r4, [sp, #156]	; 0x9c
 8043b34:	9326      	str	r3, [sp, #152]	; 0x98
 8043b36:	f300 83d1 	bgt.w	80442dc <_svfprintf_r+0x1048>
 8043b3a:	3608      	adds	r6, #8
 8043b3c:	3d10      	subs	r5, #16
 8043b3e:	2d10      	cmp	r5, #16
 8043b40:	f340 8098 	ble.w	8043c74 <_svfprintf_r+0x9e0>
 8043b44:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8043b48:	e012      	b.n	8043b70 <_svfprintf_r+0x8dc>
 8043b4a:	3608      	adds	r6, #8
 8043b4c:	3301      	adds	r3, #1
 8043b4e:	f248 2030 	movw	r0, #33328	; 0x8230
 8043b52:	3410      	adds	r4, #16
 8043b54:	f6c0 0004 	movt	r0, #2052	; 0x804
 8043b58:	3d10      	subs	r5, #16
 8043b5a:	2b07      	cmp	r3, #7
 8043b5c:	e886 0081 	stmia.w	r6, {r0, r7}
 8043b60:	9326      	str	r3, [sp, #152]	; 0x98
 8043b62:	9427      	str	r4, [sp, #156]	; 0x9c
 8043b64:	dc77      	bgt.n	8043c56 <_svfprintf_r+0x9c2>
 8043b66:	3d10      	subs	r5, #16
 8043b68:	3608      	adds	r6, #8
 8043b6a:	2d10      	cmp	r5, #16
 8043b6c:	f340 8082 	ble.w	8043c74 <_svfprintf_r+0x9e0>
 8043b70:	3301      	adds	r3, #1
 8043b72:	f248 2230 	movw	r2, #33328	; 0x8230
 8043b76:	3410      	adds	r4, #16
 8043b78:	f6c0 0204 	movt	r2, #2052	; 0x804
 8043b7c:	2b07      	cmp	r3, #7
 8043b7e:	e886 0084 	stmia.w	r6, {r2, r7}
 8043b82:	9427      	str	r4, [sp, #156]	; 0x9c
 8043b84:	9326      	str	r3, [sp, #152]	; 0x98
 8043b86:	dde0      	ble.n	8043b4a <_svfprintf_r+0x8b6>
 8043b88:	4640      	mov	r0, r8
 8043b8a:	4659      	mov	r1, fp
 8043b8c:	aa25      	add	r2, sp, #148	; 0x94
 8043b8e:	f003 fd37 	bl	8047600 <__ssprint_r>
 8043b92:	2800      	cmp	r0, #0
 8043b94:	f47f ad41 	bne.w	804361a <_svfprintf_r+0x386>
 8043b98:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8043b9c:	ae32      	add	r6, sp, #200	; 0xc8
 8043b9e:	e7d5      	b.n	8043b4c <_svfprintf_r+0x8b8>
 8043ba0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8043ba2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8043ba4:	3401      	adds	r4, #1
 8043ba6:	3501      	adds	r5, #1
 8043ba8:	2901      	cmp	r1, #1
 8043baa:	f340 8479 	ble.w	80444a0 <_svfprintf_r+0x120c>
 8043bae:	2301      	movs	r3, #1
 8043bb0:	2d07      	cmp	r5, #7
 8043bb2:	6037      	str	r7, [r6, #0]
 8043bb4:	6073      	str	r3, [r6, #4]
 8043bb6:	9427      	str	r4, [sp, #156]	; 0x9c
 8043bb8:	9526      	str	r5, [sp, #152]	; 0x98
 8043bba:	f300 8487 	bgt.w	80444cc <_svfprintf_r+0x1238>
 8043bbe:	3608      	adds	r6, #8
 8043bc0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8043bc2:	3501      	adds	r5, #1
 8043bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8043bc6:	1864      	adds	r4, r4, r1
 8043bc8:	2d07      	cmp	r5, #7
 8043bca:	6032      	str	r2, [r6, #0]
 8043bcc:	6071      	str	r1, [r6, #4]
 8043bce:	9427      	str	r4, [sp, #156]	; 0x9c
 8043bd0:	9526      	str	r5, [sp, #152]	; 0x98
 8043bd2:	f300 8488 	bgt.w	80444e6 <_svfprintf_r+0x1252>
 8043bd6:	3608      	adds	r6, #8
 8043bd8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8043bdc:	2200      	movs	r2, #0
 8043bde:	2300      	movs	r3, #0
 8043be0:	f7fc fef2 	bl	80409c8 <__aeabi_dcmpeq>
 8043be4:	2800      	cmp	r0, #0
 8043be6:	f040 82d9 	bne.w	804419c <_svfprintf_r+0xf08>
 8043bea:	9811      	ldr	r0, [sp, #68]	; 0x44
 8043bec:	3701      	adds	r7, #1
 8043bee:	3801      	subs	r0, #1
 8043bf0:	1824      	adds	r4, r4, r0
 8043bf2:	3501      	adds	r5, #1
 8043bf4:	6037      	str	r7, [r6, #0]
 8043bf6:	2d07      	cmp	r5, #7
 8043bf8:	6070      	str	r0, [r6, #4]
 8043bfa:	9427      	str	r4, [sp, #156]	; 0x9c
 8043bfc:	9526      	str	r5, [sp, #152]	; 0x98
 8043bfe:	f300 8189 	bgt.w	8043f14 <_svfprintf_r+0xc80>
 8043c02:	3608      	adds	r6, #8
 8043c04:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8043c06:	3501      	adds	r5, #1
 8043c08:	19e4      	adds	r4, r4, r7
 8043c0a:	ab21      	add	r3, sp, #132	; 0x84
 8043c0c:	2d07      	cmp	r5, #7
 8043c0e:	e886 0088 	stmia.w	r6, {r3, r7}
 8043c12:	9427      	str	r4, [sp, #156]	; 0x9c
 8043c14:	9526      	str	r5, [sp, #152]	; 0x98
 8043c16:	f77f af58 	ble.w	8043aca <_svfprintf_r+0x836>
 8043c1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043c1c:	4659      	mov	r1, fp
 8043c1e:	aa25      	add	r2, sp, #148	; 0x94
 8043c20:	f003 fcee 	bl	8047600 <__ssprint_r>
 8043c24:	2800      	cmp	r0, #0
 8043c26:	f47f acf8 	bne.w	804361a <_svfprintf_r+0x386>
 8043c2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8043c2c:	ae32      	add	r6, sp, #200	; 0xc8
 8043c2e:	077b      	lsls	r3, r7, #29
 8043c30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043c32:	f53f af4f 	bmi.w	8043ad4 <_svfprintf_r+0x840>
 8043c36:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8043c38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8043c3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8043c3c:	42b8      	cmp	r0, r7
 8043c3e:	bfac      	ite	ge
 8043c40:	1836      	addge	r6, r6, r0
 8043c42:	19f6      	addlt	r6, r6, r7
 8043c44:	960f      	str	r6, [sp, #60]	; 0x3c
 8043c46:	2c00      	cmp	r4, #0
 8043c48:	f040 8170 	bne.w	8043f2c <_svfprintf_r+0xc98>
 8043c4c:	2600      	movs	r6, #0
 8043c4e:	9626      	str	r6, [sp, #152]	; 0x98
 8043c50:	ae32      	add	r6, sp, #200	; 0xc8
 8043c52:	f7ff bb49 	b.w	80432e8 <_svfprintf_r+0x54>
 8043c56:	4640      	mov	r0, r8
 8043c58:	4659      	mov	r1, fp
 8043c5a:	aa25      	add	r2, sp, #148	; 0x94
 8043c5c:	f003 fcd0 	bl	8047600 <__ssprint_r>
 8043c60:	2800      	cmp	r0, #0
 8043c62:	f47f acda 	bne.w	804361a <_svfprintf_r+0x386>
 8043c66:	3d10      	subs	r5, #16
 8043c68:	2d10      	cmp	r5, #16
 8043c6a:	ae32      	add	r6, sp, #200	; 0xc8
 8043c6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043c6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8043c70:	f73f af7e 	bgt.w	8043b70 <_svfprintf_r+0x8dc>
 8043c74:	1c5a      	adds	r2, r3, #1
 8043c76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8043c78:	192c      	adds	r4, r5, r4
 8043c7a:	2a07      	cmp	r2, #7
 8043c7c:	6037      	str	r7, [r6, #0]
 8043c7e:	6075      	str	r5, [r6, #4]
 8043c80:	9427      	str	r4, [sp, #156]	; 0x9c
 8043c82:	9226      	str	r2, [sp, #152]	; 0x98
 8043c84:	ddd7      	ble.n	8043c36 <_svfprintf_r+0x9a2>
 8043c86:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043c88:	4659      	mov	r1, fp
 8043c8a:	aa25      	add	r2, sp, #148	; 0x94
 8043c8c:	f003 fcb8 	bl	8047600 <__ssprint_r>
 8043c90:	2800      	cmp	r0, #0
 8043c92:	f47f acc2 	bne.w	804361a <_svfprintf_r+0x386>
 8043c96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043c98:	e7cd      	b.n	8043c36 <_svfprintf_r+0x9a2>
 8043c9a:	2b01      	cmp	r3, #1
 8043c9c:	f000 81ab 	beq.w	8043ff6 <_svfprintf_r+0xd62>
 8043ca0:	2b02      	cmp	r3, #2
 8043ca2:	f10d 0ec7 	add.w	lr, sp, #199	; 0xc7
 8043ca6:	f000 818c 	beq.w	8043fc2 <_svfprintf_r+0xd2e>
 8043caa:	2307      	movs	r3, #7
 8043cac:	08e7      	lsrs	r7, r4, #3
 8043cae:	ea04 0003 	and.w	r0, r4, r3
 8043cb2:	08e9      	lsrs	r1, r5, #3
 8043cb4:	ea47 7445 	orr.w	r4, r7, r5, lsl #29
 8043cb8:	3030      	adds	r0, #48	; 0x30
 8043cba:	460d      	mov	r5, r1
 8043cbc:	b2c2      	uxtb	r2, r0
 8043cbe:	ea54 0105 	orrs.w	r1, r4, r5
 8043cc2:	4677      	mov	r7, lr
 8043cc4:	f88e 2000 	strb.w	r2, [lr]
 8043cc8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8043ccc:	d1ee      	bne.n	8043cac <_svfprintf_r+0xa18>
 8043cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8043cd0:	463b      	mov	r3, r7
 8043cd2:	07c1      	lsls	r1, r0, #31
 8043cd4:	d506      	bpl.n	8043ce4 <_svfprintf_r+0xa50>
 8043cd6:	2a30      	cmp	r2, #48	; 0x30
 8043cd8:	f000 8196 	beq.w	8044008 <_svfprintf_r+0xd74>
 8043cdc:	2430      	movs	r4, #48	; 0x30
 8043cde:	4677      	mov	r7, lr
 8043ce0:	f803 4c01 	strb.w	r4, [r3, #-1]
 8043ce4:	9908      	ldr	r1, [sp, #32]
 8043ce6:	1bca      	subs	r2, r1, r7
 8043ce8:	920e      	str	r2, [sp, #56]	; 0x38
 8043cea:	f7ff bbf9 	b.w	80434e0 <_svfprintf_r+0x24c>
 8043cee:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8043cf2:	f77f af55 	ble.w	8043ba0 <_svfprintf_r+0x90c>
 8043cf6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8043cfa:	2200      	movs	r2, #0
 8043cfc:	2300      	movs	r3, #0
 8043cfe:	f7fc fe63 	bl	80409c8 <__aeabi_dcmpeq>
 8043d02:	2800      	cmp	r0, #0
 8043d04:	f000 81b2 	beq.w	804406c <_svfprintf_r+0xdd8>
 8043d08:	9826      	ldr	r0, [sp, #152]	; 0x98
 8043d0a:	492c      	ldr	r1, [pc, #176]	; (8043dbc <_svfprintf_r+0xb28>)
 8043d0c:	1c43      	adds	r3, r0, #1
 8043d0e:	3401      	adds	r4, #1
 8043d10:	2201      	movs	r2, #1
 8043d12:	2b07      	cmp	r3, #7
 8043d14:	6031      	str	r1, [r6, #0]
 8043d16:	6072      	str	r2, [r6, #4]
 8043d18:	9427      	str	r4, [sp, #156]	; 0x9c
 8043d1a:	9326      	str	r3, [sp, #152]	; 0x98
 8043d1c:	f300 844a 	bgt.w	80445b4 <_svfprintf_r+0x1320>
 8043d20:	3608      	adds	r6, #8
 8043d22:	981e      	ldr	r0, [sp, #120]	; 0x78
 8043d24:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8043d26:	42b8      	cmp	r0, r7
 8043d28:	db03      	blt.n	8043d32 <_svfprintf_r+0xa9e>
 8043d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043d2c:	07df      	lsls	r7, r3, #31
 8043d2e:	f57f aecd 	bpl.w	8043acc <_svfprintf_r+0x838>
 8043d32:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043d34:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8043d36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8043d38:	6037      	str	r7, [r6, #0]
 8043d3a:	1c50      	adds	r0, r2, #1
 8043d3c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8043d3e:	1864      	adds	r4, r4, r1
 8043d40:	2807      	cmp	r0, #7
 8043d42:	6077      	str	r7, [r6, #4]
 8043d44:	9427      	str	r4, [sp, #156]	; 0x9c
 8043d46:	9026      	str	r0, [sp, #152]	; 0x98
 8043d48:	f300 8575 	bgt.w	8044836 <_svfprintf_r+0x15a2>
 8043d4c:	3608      	adds	r6, #8
 8043d4e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8043d50:	3d01      	subs	r5, #1
 8043d52:	2d00      	cmp	r5, #0
 8043d54:	f77f aeba 	ble.w	8043acc <_svfprintf_r+0x838>
 8043d58:	2d10      	cmp	r5, #16
 8043d5a:	f340 8286 	ble.w	804426a <_svfprintf_r+0xfd6>
 8043d5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8043d62:	2710      	movs	r7, #16
 8043d64:	f1a3 0e12 	sub.w	lr, r3, #18
 8043d68:	4815      	ldr	r0, [pc, #84]	; (8043dc0 <_svfprintf_r+0xb2c>)
 8043d6a:	1c53      	adds	r3, r2, #1
 8043d6c:	19e4      	adds	r4, r4, r7
 8043d6e:	2b07      	cmp	r3, #7
 8043d70:	f8c6 9000 	str.w	r9, [r6]
 8043d74:	6077      	str	r7, [r6, #4]
 8043d76:	900a      	str	r0, [sp, #40]	; 0x28
 8043d78:	9427      	str	r4, [sp, #156]	; 0x9c
 8043d7a:	9326      	str	r3, [sp, #152]	; 0x98
 8043d7c:	f3ce 1800 	ubfx	r8, lr, #4, #1
 8043d80:	f300 8617 	bgt.w	80449b2 <_svfprintf_r+0x171e>
 8043d84:	3608      	adds	r6, #8
 8043d86:	3d10      	subs	r5, #16
 8043d88:	2d10      	cmp	r5, #16
 8043d8a:	f340 8271 	ble.w	8044270 <_svfprintf_r+0xfdc>
 8043d8e:	f1b8 0f00 	cmp.w	r8, #0
 8043d92:	d00e      	beq.n	8043db2 <_svfprintf_r+0xb1e>
 8043d94:	3301      	adds	r3, #1
 8043d96:	3410      	adds	r4, #16
 8043d98:	2b07      	cmp	r3, #7
 8043d9a:	f8c6 9000 	str.w	r9, [r6]
 8043d9e:	6077      	str	r7, [r6, #4]
 8043da0:	9427      	str	r4, [sp, #156]	; 0x9c
 8043da2:	9326      	str	r3, [sp, #152]	; 0x98
 8043da4:	f300 862b 	bgt.w	80449fe <_svfprintf_r+0x176a>
 8043da8:	3608      	adds	r6, #8
 8043daa:	3d10      	subs	r5, #16
 8043dac:	2d10      	cmp	r5, #16
 8043dae:	f340 825f 	ble.w	8044270 <_svfprintf_r+0xfdc>
 8043db2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8043db6:	e016      	b.n	8043de6 <_svfprintf_r+0xb52>
 8043db8:	08048230 	.word	0x08048230
 8043dbc:	0804821c 	.word	0x0804821c
 8043dc0:	08048220 	.word	0x08048220
 8043dc4:	3608      	adds	r6, #8
 8043dc6:	1c4b      	adds	r3, r1, #1
 8043dc8:	3410      	adds	r4, #16
 8043dca:	3d10      	subs	r5, #16
 8043dcc:	2b07      	cmp	r3, #7
 8043dce:	f8c6 9000 	str.w	r9, [r6]
 8043dd2:	6077      	str	r7, [r6, #4]
 8043dd4:	9326      	str	r3, [sp, #152]	; 0x98
 8043dd6:	9427      	str	r4, [sp, #156]	; 0x9c
 8043dd8:	f300 811e 	bgt.w	8044018 <_svfprintf_r+0xd84>
 8043ddc:	3608      	adds	r6, #8
 8043dde:	3d10      	subs	r5, #16
 8043de0:	2d10      	cmp	r5, #16
 8043de2:	f340 8245 	ble.w	8044270 <_svfprintf_r+0xfdc>
 8043de6:	1c59      	adds	r1, r3, #1
 8043de8:	3410      	adds	r4, #16
 8043dea:	2907      	cmp	r1, #7
 8043dec:	f8c6 9000 	str.w	r9, [r6]
 8043df0:	6077      	str	r7, [r6, #4]
 8043df2:	9427      	str	r4, [sp, #156]	; 0x9c
 8043df4:	9126      	str	r1, [sp, #152]	; 0x98
 8043df6:	dde5      	ble.n	8043dc4 <_svfprintf_r+0xb30>
 8043df8:	4640      	mov	r0, r8
 8043dfa:	4659      	mov	r1, fp
 8043dfc:	aa25      	add	r2, sp, #148	; 0x94
 8043dfe:	f003 fbff 	bl	8047600 <__ssprint_r>
 8043e02:	2800      	cmp	r0, #0
 8043e04:	f47f ac09 	bne.w	804361a <_svfprintf_r+0x386>
 8043e08:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043e0a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8043e0c:	ae32      	add	r6, sp, #200	; 0xc8
 8043e0e:	e7da      	b.n	8043dc6 <_svfprintf_r+0xb32>
 8043e10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8043e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8043e14:	1a45      	subs	r5, r0, r1
 8043e16:	2d00      	cmp	r5, #0
 8043e18:	f77f adcc 	ble.w	80439b4 <_svfprintf_r+0x720>
 8043e1c:	2d10      	cmp	r5, #16
 8043e1e:	f340 8688 	ble.w	8044b32 <_svfprintf_r+0x189e>
 8043e22:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043e24:	2310      	movs	r3, #16
 8043e26:	3201      	adds	r2, #1
 8043e28:	488f      	ldr	r0, [pc, #572]	; (8044068 <_svfprintf_r+0xdd4>)
 8043e2a:	f1a5 0111 	sub.w	r1, r5, #17
 8043e2e:	18e4      	adds	r4, r4, r3
 8043e30:	2a07      	cmp	r2, #7
 8043e32:	f8c6 9000 	str.w	r9, [r6]
 8043e36:	6073      	str	r3, [r6, #4]
 8043e38:	900a      	str	r0, [sp, #40]	; 0x28
 8043e3a:	9427      	str	r4, [sp, #156]	; 0x9c
 8043e3c:	9226      	str	r2, [sp, #152]	; 0x98
 8043e3e:	f3c1 1c00 	ubfx	ip, r1, #4, #1
 8043e42:	f300 831b 	bgt.w	804447c <_svfprintf_r+0x11e8>
 8043e46:	3608      	adds	r6, #8
 8043e48:	3d10      	subs	r5, #16
 8043e4a:	2d10      	cmp	r5, #16
 8043e4c:	dd4a      	ble.n	8043ee4 <_svfprintf_r+0xc50>
 8043e4e:	f1bc 0f00 	cmp.w	ip, #0
 8043e52:	d00d      	beq.n	8043e70 <_svfprintf_r+0xbdc>
 8043e54:	3201      	adds	r2, #1
 8043e56:	3410      	adds	r4, #16
 8043e58:	2a07      	cmp	r2, #7
 8043e5a:	f8c6 9000 	str.w	r9, [r6]
 8043e5e:	6073      	str	r3, [r6, #4]
 8043e60:	9427      	str	r4, [sp, #156]	; 0x9c
 8043e62:	9226      	str	r2, [sp, #152]	; 0x98
 8043e64:	f300 8324 	bgt.w	80444b0 <_svfprintf_r+0x121c>
 8043e68:	3608      	adds	r6, #8
 8043e6a:	3d10      	subs	r5, #16
 8043e6c:	2d10      	cmp	r5, #16
 8043e6e:	dd39      	ble.n	8043ee4 <_svfprintf_r+0xc50>
 8043e70:	4621      	mov	r1, r4
 8043e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8043e74:	e00e      	b.n	8043e94 <_svfprintf_r+0xc00>
 8043e76:	3608      	adds	r6, #8
 8043e78:	3201      	adds	r2, #1
 8043e7a:	3110      	adds	r1, #16
 8043e7c:	3d10      	subs	r5, #16
 8043e7e:	2a07      	cmp	r2, #7
 8043e80:	f8c6 9000 	str.w	r9, [r6]
 8043e84:	6073      	str	r3, [r6, #4]
 8043e86:	9226      	str	r2, [sp, #152]	; 0x98
 8043e88:	9127      	str	r1, [sp, #156]	; 0x9c
 8043e8a:	dc1a      	bgt.n	8043ec2 <_svfprintf_r+0xc2e>
 8043e8c:	3d10      	subs	r5, #16
 8043e8e:	3608      	adds	r6, #8
 8043e90:	2d10      	cmp	r5, #16
 8043e92:	dd26      	ble.n	8043ee2 <_svfprintf_r+0xc4e>
 8043e94:	3201      	adds	r2, #1
 8043e96:	3110      	adds	r1, #16
 8043e98:	2a07      	cmp	r2, #7
 8043e9a:	f8c6 9000 	str.w	r9, [r6]
 8043e9e:	6073      	str	r3, [r6, #4]
 8043ea0:	9127      	str	r1, [sp, #156]	; 0x9c
 8043ea2:	9226      	str	r2, [sp, #152]	; 0x98
 8043ea4:	dde7      	ble.n	8043e76 <_svfprintf_r+0xbe2>
 8043ea6:	4620      	mov	r0, r4
 8043ea8:	4659      	mov	r1, fp
 8043eaa:	aa25      	add	r2, sp, #148	; 0x94
 8043eac:	9306      	str	r3, [sp, #24]
 8043eae:	f003 fba7 	bl	8047600 <__ssprint_r>
 8043eb2:	9b06      	ldr	r3, [sp, #24]
 8043eb4:	2800      	cmp	r0, #0
 8043eb6:	f47f abb0 	bne.w	804361a <_svfprintf_r+0x386>
 8043eba:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8043ebc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043ebe:	ae32      	add	r6, sp, #200	; 0xc8
 8043ec0:	e7da      	b.n	8043e78 <_svfprintf_r+0xbe4>
 8043ec2:	4620      	mov	r0, r4
 8043ec4:	4659      	mov	r1, fp
 8043ec6:	aa25      	add	r2, sp, #148	; 0x94
 8043ec8:	9306      	str	r3, [sp, #24]
 8043eca:	f003 fb99 	bl	8047600 <__ssprint_r>
 8043ece:	9b06      	ldr	r3, [sp, #24]
 8043ed0:	2800      	cmp	r0, #0
 8043ed2:	f47f aba2 	bne.w	804361a <_svfprintf_r+0x386>
 8043ed6:	3d10      	subs	r5, #16
 8043ed8:	2d10      	cmp	r5, #16
 8043eda:	ae32      	add	r6, sp, #200	; 0xc8
 8043edc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8043ede:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043ee0:	dcd8      	bgt.n	8043e94 <_svfprintf_r+0xc00>
 8043ee2:	460c      	mov	r4, r1
 8043ee4:	1c50      	adds	r0, r2, #1
 8043ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8043ee8:	1964      	adds	r4, r4, r5
 8043eea:	2807      	cmp	r0, #7
 8043eec:	e886 0028 	stmia.w	r6, {r3, r5}
 8043ef0:	9427      	str	r4, [sp, #156]	; 0x9c
 8043ef2:	9026      	str	r0, [sp, #152]	; 0x98
 8043ef4:	f300 8309 	bgt.w	804450a <_svfprintf_r+0x1276>
 8043ef8:	3608      	adds	r6, #8
 8043efa:	e55b      	b.n	80439b4 <_svfprintf_r+0x720>
 8043efc:	485a      	ldr	r0, [pc, #360]	; (8044068 <_svfprintf_r+0xdd4>)
 8043efe:	900a      	str	r0, [sp, #40]	; 0x28
 8043f00:	3501      	adds	r5, #1
 8043f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8043f04:	19e4      	adds	r4, r4, r7
 8043f06:	2d07      	cmp	r5, #7
 8043f08:	e886 0088 	stmia.w	r6, {r3, r7}
 8043f0c:	9427      	str	r4, [sp, #156]	; 0x9c
 8043f0e:	9526      	str	r5, [sp, #152]	; 0x98
 8043f10:	f77f ae77 	ble.w	8043c02 <_svfprintf_r+0x96e>
 8043f14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043f16:	4659      	mov	r1, fp
 8043f18:	aa25      	add	r2, sp, #148	; 0x94
 8043f1a:	f003 fb71 	bl	8047600 <__ssprint_r>
 8043f1e:	2800      	cmp	r0, #0
 8043f20:	f47f ab7b 	bne.w	804361a <_svfprintf_r+0x386>
 8043f24:	ae32      	add	r6, sp, #200	; 0xc8
 8043f26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043f28:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8043f2a:	e66b      	b.n	8043c04 <_svfprintf_r+0x970>
 8043f2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043f2e:	4659      	mov	r1, fp
 8043f30:	aa25      	add	r2, sp, #148	; 0x94
 8043f32:	f003 fb65 	bl	8047600 <__ssprint_r>
 8043f36:	2800      	cmp	r0, #0
 8043f38:	f43f ae88 	beq.w	8043c4c <_svfprintf_r+0x9b8>
 8043f3c:	f7ff bb6d 	b.w	804361a <_svfprintf_r+0x386>
 8043f40:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043f42:	4659      	mov	r1, fp
 8043f44:	aa25      	add	r2, sp, #148	; 0x94
 8043f46:	9306      	str	r3, [sp, #24]
 8043f48:	f8cd c01c 	str.w	ip, [sp, #28]
 8043f4c:	f003 fb58 	bl	8047600 <__ssprint_r>
 8043f50:	9b06      	ldr	r3, [sp, #24]
 8043f52:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8043f56:	2800      	cmp	r0, #0
 8043f58:	f47f ab5f 	bne.w	804361a <_svfprintf_r+0x386>
 8043f5c:	ae32      	add	r6, sp, #200	; 0xc8
 8043f5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043f60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043f62:	e542      	b.n	80439ea <_svfprintf_r+0x756>
 8043f64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043f66:	4659      	mov	r1, fp
 8043f68:	aa25      	add	r2, sp, #148	; 0x94
 8043f6a:	9306      	str	r3, [sp, #24]
 8043f6c:	f003 fb48 	bl	8047600 <__ssprint_r>
 8043f70:	9b06      	ldr	r3, [sp, #24]
 8043f72:	2800      	cmp	r0, #0
 8043f74:	f47f ab51 	bne.w	804361a <_svfprintf_r+0x386>
 8043f78:	ae32      	add	r6, sp, #200	; 0xc8
 8043f7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043f7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8043f7e:	e545      	b.n	8043a0c <_svfprintf_r+0x778>
 8043f80:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043f82:	4659      	mov	r1, fp
 8043f84:	aa25      	add	r2, sp, #148	; 0x94
 8043f86:	f003 fb3b 	bl	8047600 <__ssprint_r>
 8043f8a:	2800      	cmp	r0, #0
 8043f8c:	f47f ab45 	bne.w	804361a <_svfprintf_r+0x386>
 8043f90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043f92:	ae32      	add	r6, sp, #200	; 0xc8
 8043f94:	e589      	b.n	8043aaa <_svfprintf_r+0x816>
 8043f96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043f98:	4659      	mov	r1, fp
 8043f9a:	aa25      	add	r2, sp, #148	; 0x94
 8043f9c:	f003 fb30 	bl	8047600 <__ssprint_r>
 8043fa0:	2800      	cmp	r0, #0
 8043fa2:	f47f ab3a 	bne.w	804361a <_svfprintf_r+0x386>
 8043fa6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043fa8:	ae32      	add	r6, sp, #200	; 0xc8
 8043faa:	e4f0      	b.n	804398e <_svfprintf_r+0x6fa>
 8043fac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8043fae:	4659      	mov	r1, fp
 8043fb0:	aa25      	add	r2, sp, #148	; 0x94
 8043fb2:	f003 fb25 	bl	8047600 <__ssprint_r>
 8043fb6:	2800      	cmp	r0, #0
 8043fb8:	f47f ab2f 	bne.w	804361a <_svfprintf_r+0x386>
 8043fbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8043fbe:	ae32      	add	r6, sp, #200	; 0xc8
 8043fc0:	e4f4      	b.n	80439ac <_svfprintf_r+0x718>
 8043fc2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8043fc4:	960b      	str	r6, [sp, #44]	; 0x2c
 8043fc6:	260f      	movs	r6, #15
 8043fc8:	ea04 0306 	and.w	r3, r4, r6
 8043fcc:	0927      	lsrs	r7, r4, #4
 8043fce:	0928      	lsrs	r0, r5, #4
 8043fd0:	18ca      	adds	r2, r1, r3
 8043fd2:	ea47 7405 	orr.w	r4, r7, r5, lsl #28
 8043fd6:	7816      	ldrb	r6, [r2, #0]
 8043fd8:	4605      	mov	r5, r0
 8043fda:	ea54 0005 	orrs.w	r0, r4, r5
 8043fde:	4677      	mov	r7, lr
 8043fe0:	f88e 6000 	strb.w	r6, [lr]
 8043fe4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8043fe8:	d1ed      	bne.n	8043fc6 <_svfprintf_r+0xd32>
 8043fea:	9908      	ldr	r1, [sp, #32]
 8043fec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8043fee:	1bcb      	subs	r3, r1, r7
 8043ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8043ff2:	f7ff ba75 	b.w	80434e0 <_svfprintf_r+0x24c>
 8043ff6:	2d00      	cmp	r5, #0
 8043ff8:	bf08      	it	eq
 8043ffa:	2c0a      	cmpeq	r4, #10
 8043ffc:	f080 814f 	bcs.w	804429e <_svfprintf_r+0x100a>
 8044000:	af42      	add	r7, sp, #264	; 0x108
 8044002:	3430      	adds	r4, #48	; 0x30
 8044004:	f807 4d41 	strb.w	r4, [r7, #-65]!
 8044008:	9c08      	ldr	r4, [sp, #32]
 804400a:	1be2      	subs	r2, r4, r7
 804400c:	920e      	str	r2, [sp, #56]	; 0x38
 804400e:	f7ff ba67 	b.w	80434e0 <_svfprintf_r+0x24c>
 8044012:	2302      	movs	r3, #2
 8044014:	f7ff bb2c 	b.w	8043670 <_svfprintf_r+0x3dc>
 8044018:	4640      	mov	r0, r8
 804401a:	4659      	mov	r1, fp
 804401c:	aa25      	add	r2, sp, #148	; 0x94
 804401e:	f003 faef 	bl	8047600 <__ssprint_r>
 8044022:	2800      	cmp	r0, #0
 8044024:	f47f aaf9 	bne.w	804361a <_svfprintf_r+0x386>
 8044028:	ae32      	add	r6, sp, #200	; 0xc8
 804402a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 804402c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 804402e:	e6d6      	b.n	8043dde <_svfprintf_r+0xb4a>
 8044030:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044032:	4659      	mov	r1, fp
 8044034:	aa25      	add	r2, sp, #148	; 0x94
 8044036:	9306      	str	r3, [sp, #24]
 8044038:	f003 fae2 	bl	8047600 <__ssprint_r>
 804403c:	9b06      	ldr	r3, [sp, #24]
 804403e:	2800      	cmp	r0, #0
 8044040:	f47f aaeb 	bne.w	804361a <_svfprintf_r+0x386>
 8044044:	ae32      	add	r6, sp, #200	; 0xc8
 8044046:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8044048:	9a26      	ldr	r2, [sp, #152]	; 0x98
 804404a:	f7ff ba86 	b.w	804355a <_svfprintf_r+0x2c6>
 804404e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044050:	4659      	mov	r1, fp
 8044052:	aa25      	add	r2, sp, #148	; 0x94
 8044054:	f003 fad4 	bl	8047600 <__ssprint_r>
 8044058:	2800      	cmp	r0, #0
 804405a:	f47f aade 	bne.w	804361a <_svfprintf_r+0x386>
 804405e:	ae32      	add	r6, sp, #200	; 0xc8
 8044060:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8044062:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8044064:	f7ff ba8c 	b.w	8043580 <_svfprintf_r+0x2ec>
 8044068:	08048220 	.word	0x08048220
 804406c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 804406e:	2a00      	cmp	r2, #0
 8044070:	f340 82b2 	ble.w	80445d8 <_svfprintf_r+0x1344>
 8044074:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8044076:	9915      	ldr	r1, [sp, #84]	; 0x54
 8044078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 804407a:	428d      	cmp	r5, r1
 804407c:	bfa8      	it	ge
 804407e:	460d      	movge	r5, r1
 8044080:	18fa      	adds	r2, r7, r3
 8044082:	2d00      	cmp	r5, #0
 8044084:	920a      	str	r2, [sp, #40]	; 0x28
 8044086:	dd0a      	ble.n	804409e <_svfprintf_r+0xe0a>
 8044088:	9826      	ldr	r0, [sp, #152]	; 0x98
 804408a:	1964      	adds	r4, r4, r5
 804408c:	1c41      	adds	r1, r0, #1
 804408e:	2907      	cmp	r1, #7
 8044090:	6037      	str	r7, [r6, #0]
 8044092:	6075      	str	r5, [r6, #4]
 8044094:	9427      	str	r4, [sp, #156]	; 0x9c
 8044096:	9126      	str	r1, [sp, #152]	; 0x98
 8044098:	f300 847f 	bgt.w	804499a <_svfprintf_r+0x1706>
 804409c:	3608      	adds	r6, #8
 804409e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80440a0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80440a4:	1b5d      	subs	r5, r3, r5
 80440a6:	2d00      	cmp	r5, #0
 80440a8:	f340 8156 	ble.w	8044358 <_svfprintf_r+0x10c4>
 80440ac:	2d10      	cmp	r5, #16
 80440ae:	f340 826d 	ble.w	804458c <_svfprintf_r+0x12f8>
 80440b2:	9826      	ldr	r0, [sp, #152]	; 0x98
 80440b4:	f04f 0810 	mov.w	r8, #16
 80440b8:	1c43      	adds	r3, r0, #1
 80440ba:	4aa1      	ldr	r2, [pc, #644]	; (8044340 <_svfprintf_r+0x10ac>)
 80440bc:	f1a5 0111 	sub.w	r1, r5, #17
 80440c0:	4444      	add	r4, r8
 80440c2:	2b07      	cmp	r3, #7
 80440c4:	f8c6 9000 	str.w	r9, [r6]
 80440c8:	f8c6 8004 	str.w	r8, [r6, #4]
 80440cc:	920e      	str	r2, [sp, #56]	; 0x38
 80440ce:	9427      	str	r4, [sp, #156]	; 0x9c
 80440d0:	9326      	str	r3, [sp, #152]	; 0x98
 80440d2:	f3c1 1c00 	ubfx	ip, r1, #4, #1
 80440d6:	f300 844f 	bgt.w	8044978 <_svfprintf_r+0x16e4>
 80440da:	3608      	adds	r6, #8
 80440dc:	3d10      	subs	r5, #16
 80440de:	2d10      	cmp	r5, #16
 80440e0:	f340 8257 	ble.w	8044592 <_svfprintf_r+0x12fe>
 80440e4:	f1bc 0f00 	cmp.w	ip, #0
 80440e8:	d00f      	beq.n	804410a <_svfprintf_r+0xe76>
 80440ea:	3301      	adds	r3, #1
 80440ec:	3410      	adds	r4, #16
 80440ee:	2b07      	cmp	r3, #7
 80440f0:	f8c6 9000 	str.w	r9, [r6]
 80440f4:	f8c6 8004 	str.w	r8, [r6, #4]
 80440f8:	9427      	str	r4, [sp, #156]	; 0x9c
 80440fa:	9326      	str	r3, [sp, #152]	; 0x98
 80440fc:	f300 848c 	bgt.w	8044a18 <_svfprintf_r+0x1784>
 8044100:	3608      	adds	r6, #8
 8044102:	3d10      	subs	r5, #16
 8044104:	2d10      	cmp	r5, #16
 8044106:	f340 8244 	ble.w	8044592 <_svfprintf_r+0x12fe>
 804410a:	4621      	mov	r1, r4
 804410c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 804410e:	e012      	b.n	8044136 <_svfprintf_r+0xea2>
 8044110:	f106 0008 	add.w	r0, r6, #8
 8044114:	3301      	adds	r3, #1
 8044116:	3110      	adds	r1, #16
 8044118:	3d10      	subs	r5, #16
 804411a:	2b07      	cmp	r3, #7
 804411c:	f8c0 9000 	str.w	r9, [r0]
 8044120:	f8c0 8004 	str.w	r8, [r0, #4]
 8044124:	9326      	str	r3, [sp, #152]	; 0x98
 8044126:	9127      	str	r1, [sp, #156]	; 0x9c
 8044128:	dc1b      	bgt.n	8044162 <_svfprintf_r+0xece>
 804412a:	f100 0608 	add.w	r6, r0, #8
 804412e:	3d10      	subs	r5, #16
 8044130:	2d10      	cmp	r5, #16
 8044132:	f340 840d 	ble.w	8044950 <_svfprintf_r+0x16bc>
 8044136:	3301      	adds	r3, #1
 8044138:	3110      	adds	r1, #16
 804413a:	2b07      	cmp	r3, #7
 804413c:	f8c6 9000 	str.w	r9, [r6]
 8044140:	f8c6 8004 	str.w	r8, [r6, #4]
 8044144:	9127      	str	r1, [sp, #156]	; 0x9c
 8044146:	9326      	str	r3, [sp, #152]	; 0x98
 8044148:	dde2      	ble.n	8044110 <_svfprintf_r+0xe7c>
 804414a:	4620      	mov	r0, r4
 804414c:	4659      	mov	r1, fp
 804414e:	aa25      	add	r2, sp, #148	; 0x94
 8044150:	f003 fa56 	bl	8047600 <__ssprint_r>
 8044154:	2800      	cmp	r0, #0
 8044156:	f47f aa60 	bne.w	804361a <_svfprintf_r+0x386>
 804415a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 804415c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 804415e:	a832      	add	r0, sp, #200	; 0xc8
 8044160:	e7d8      	b.n	8044114 <_svfprintf_r+0xe80>
 8044162:	4620      	mov	r0, r4
 8044164:	4659      	mov	r1, fp
 8044166:	aa25      	add	r2, sp, #148	; 0x94
 8044168:	f003 fa4a 	bl	8047600 <__ssprint_r>
 804416c:	2800      	cmp	r0, #0
 804416e:	f47f aa54 	bne.w	804361a <_svfprintf_r+0x386>
 8044172:	ae32      	add	r6, sp, #200	; 0xc8
 8044174:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8044176:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044178:	e7d9      	b.n	804412e <_svfprintf_r+0xe9a>
 804417a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 804417c:	af32      	add	r7, sp, #200	; 0xc8
 804417e:	940e      	str	r4, [sp, #56]	; 0x38
 8044180:	f7ff b9ae 	b.w	80434e0 <_svfprintf_r+0x24c>
 8044184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044186:	4659      	mov	r1, fp
 8044188:	aa25      	add	r2, sp, #148	; 0x94
 804418a:	f003 fa39 	bl	8047600 <__ssprint_r>
 804418e:	2800      	cmp	r0, #0
 8044190:	f47f aa43 	bne.w	804361a <_svfprintf_r+0x386>
 8044194:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044196:	ae32      	add	r6, sp, #200	; 0xc8
 8044198:	f7ff bbe8 	b.w	804396c <_svfprintf_r+0x6d8>
 804419c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 804419e:	3f01      	subs	r7, #1
 80441a0:	2f00      	cmp	r7, #0
 80441a2:	f77f ad2f 	ble.w	8043c04 <_svfprintf_r+0x970>
 80441a6:	2f10      	cmp	r7, #16
 80441a8:	f77f aea8 	ble.w	8043efc <_svfprintf_r+0xc68>
 80441ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80441ae:	f04f 0810 	mov.w	r8, #16
 80441b2:	3501      	adds	r5, #1
 80441b4:	4962      	ldr	r1, [pc, #392]	; (8044340 <_svfprintf_r+0x10ac>)
 80441b6:	3b12      	subs	r3, #18
 80441b8:	4444      	add	r4, r8
 80441ba:	2d07      	cmp	r5, #7
 80441bc:	f8c6 9000 	str.w	r9, [r6]
 80441c0:	f8c6 8004 	str.w	r8, [r6, #4]
 80441c4:	910a      	str	r1, [sp, #40]	; 0x28
 80441c6:	9427      	str	r4, [sp, #156]	; 0x9c
 80441c8:	9526      	str	r5, [sp, #152]	; 0x98
 80441ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80441ce:	f300 83b1 	bgt.w	8044934 <_svfprintf_r+0x16a0>
 80441d2:	3608      	adds	r6, #8
 80441d4:	3f10      	subs	r7, #16
 80441d6:	2f10      	cmp	r7, #16
 80441d8:	f77f ae92 	ble.w	8043f00 <_svfprintf_r+0xc6c>
 80441dc:	b17b      	cbz	r3, 80441fe <_svfprintf_r+0xf6a>
 80441de:	3501      	adds	r5, #1
 80441e0:	3410      	adds	r4, #16
 80441e2:	2d07      	cmp	r5, #7
 80441e4:	f8c6 9000 	str.w	r9, [r6]
 80441e8:	f8c6 8004 	str.w	r8, [r6, #4]
 80441ec:	9427      	str	r4, [sp, #156]	; 0x9c
 80441ee:	9526      	str	r5, [sp, #152]	; 0x98
 80441f0:	f300 83b6 	bgt.w	8044960 <_svfprintf_r+0x16cc>
 80441f4:	3608      	adds	r6, #8
 80441f6:	3f10      	subs	r7, #16
 80441f8:	2f10      	cmp	r7, #16
 80441fa:	f77f ae81 	ble.w	8043f00 <_svfprintf_r+0xc6c>
 80441fe:	4622      	mov	r2, r4
 8044200:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8044202:	e010      	b.n	8044226 <_svfprintf_r+0xf92>
 8044204:	3608      	adds	r6, #8
 8044206:	3501      	adds	r5, #1
 8044208:	3210      	adds	r2, #16
 804420a:	3f10      	subs	r7, #16
 804420c:	2d07      	cmp	r5, #7
 804420e:	f8c6 9000 	str.w	r9, [r6]
 8044212:	f8c6 8004 	str.w	r8, [r6, #4]
 8044216:	9227      	str	r2, [sp, #156]	; 0x9c
 8044218:	9526      	str	r5, [sp, #152]	; 0x98
 804421a:	dc1a      	bgt.n	8044252 <_svfprintf_r+0xfbe>
 804421c:	3608      	adds	r6, #8
 804421e:	3f10      	subs	r7, #16
 8044220:	2f10      	cmp	r7, #16
 8044222:	f340 835f 	ble.w	80448e4 <_svfprintf_r+0x1650>
 8044226:	3501      	adds	r5, #1
 8044228:	3210      	adds	r2, #16
 804422a:	2d07      	cmp	r5, #7
 804422c:	f8c6 9000 	str.w	r9, [r6]
 8044230:	f8c6 8004 	str.w	r8, [r6, #4]
 8044234:	9227      	str	r2, [sp, #156]	; 0x9c
 8044236:	9526      	str	r5, [sp, #152]	; 0x98
 8044238:	dde4      	ble.n	8044204 <_svfprintf_r+0xf70>
 804423a:	4620      	mov	r0, r4
 804423c:	4659      	mov	r1, fp
 804423e:	aa25      	add	r2, sp, #148	; 0x94
 8044240:	f003 f9de 	bl	8047600 <__ssprint_r>
 8044244:	2800      	cmp	r0, #0
 8044246:	f47f a9e8 	bne.w	804361a <_svfprintf_r+0x386>
 804424a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 804424c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 804424e:	ae32      	add	r6, sp, #200	; 0xc8
 8044250:	e7d9      	b.n	8044206 <_svfprintf_r+0xf72>
 8044252:	4620      	mov	r0, r4
 8044254:	4659      	mov	r1, fp
 8044256:	aa25      	add	r2, sp, #148	; 0x94
 8044258:	f003 f9d2 	bl	8047600 <__ssprint_r>
 804425c:	2800      	cmp	r0, #0
 804425e:	f47f a9dc 	bne.w	804361a <_svfprintf_r+0x386>
 8044262:	ae32      	add	r6, sp, #200	; 0xc8
 8044264:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8044266:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8044268:	e7d9      	b.n	804421e <_svfprintf_r+0xf8a>
 804426a:	4935      	ldr	r1, [pc, #212]	; (8044340 <_svfprintf_r+0x10ac>)
 804426c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 804426e:	910a      	str	r1, [sp, #40]	; 0x28
 8044270:	3301      	adds	r3, #1
 8044272:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8044274:	1964      	adds	r4, r4, r5
 8044276:	2b07      	cmp	r3, #7
 8044278:	6037      	str	r7, [r6, #0]
 804427a:	6075      	str	r5, [r6, #4]
 804427c:	9427      	str	r4, [sp, #156]	; 0x9c
 804427e:	9326      	str	r3, [sp, #152]	; 0x98
 8044280:	f77f ac23 	ble.w	8043aca <_svfprintf_r+0x836>
 8044284:	e4c9      	b.n	8043c1a <_svfprintf_r+0x986>
 8044286:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044288:	4659      	mov	r1, fp
 804428a:	aa25      	add	r2, sp, #148	; 0x94
 804428c:	f003 f9b8 	bl	8047600 <__ssprint_r>
 8044290:	2800      	cmp	r0, #0
 8044292:	f47f a9c2 	bne.w	804361a <_svfprintf_r+0x386>
 8044296:	ae32      	add	r6, sp, #200	; 0xc8
 8044298:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 804429a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 804429c:	e439      	b.n	8043b12 <_svfprintf_r+0x87e>
 804429e:	f10d 0cc7 	add.w	ip, sp, #199	; 0xc7
 80442a2:	960b      	str	r6, [sp, #44]	; 0x2c
 80442a4:	4666      	mov	r6, ip
 80442a6:	4620      	mov	r0, r4
 80442a8:	4629      	mov	r1, r5
 80442aa:	220a      	movs	r2, #10
 80442ac:	2300      	movs	r3, #0
 80442ae:	f7fc fe43 	bl	8040f38 <__aeabi_uldivmod>
 80442b2:	3230      	adds	r2, #48	; 0x30
 80442b4:	7032      	strb	r2, [r6, #0]
 80442b6:	4620      	mov	r0, r4
 80442b8:	4629      	mov	r1, r5
 80442ba:	220a      	movs	r2, #10
 80442bc:	2300      	movs	r3, #0
 80442be:	f7fc fe3b 	bl	8040f38 <__aeabi_uldivmod>
 80442c2:	4604      	mov	r4, r0
 80442c4:	460d      	mov	r5, r1
 80442c6:	4637      	mov	r7, r6
 80442c8:	3e01      	subs	r6, #1
 80442ca:	ea54 0005 	orrs.w	r0, r4, r5
 80442ce:	d1ea      	bne.n	80442a6 <_svfprintf_r+0x1012>
 80442d0:	9908      	ldr	r1, [sp, #32]
 80442d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80442d4:	1bcb      	subs	r3, r1, r7
 80442d6:	930e      	str	r3, [sp, #56]	; 0x38
 80442d8:	f7ff b902 	b.w	80434e0 <_svfprintf_r+0x24c>
 80442dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80442de:	4659      	mov	r1, fp
 80442e0:	aa25      	add	r2, sp, #148	; 0x94
 80442e2:	f003 f98d 	bl	8047600 <__ssprint_r>
 80442e6:	2800      	cmp	r0, #0
 80442e8:	f47f a997 	bne.w	804361a <_svfprintf_r+0x386>
 80442ec:	ae32      	add	r6, sp, #200	; 0xc8
 80442ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80442f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80442f2:	e423      	b.n	8043b3c <_svfprintf_r+0x8a8>
 80442f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80442f6:	682b      	ldr	r3, [r5, #0]
 80442f8:	1d29      	adds	r1, r5, #4
 80442fa:	17dd      	asrs	r5, r3, #31
 80442fc:	461a      	mov	r2, r3
 80442fe:	461c      	mov	r4, r3
 8044300:	462b      	mov	r3, r5
 8044302:	2a00      	cmp	r2, #0
 8044304:	f173 0000 	sbcs.w	r0, r3, #0
 8044308:	9110      	str	r1, [sp, #64]	; 0x40
 804430a:	f6bf a8cb 	bge.w	80434a4 <_svfprintf_r+0x210>
 804430e:	222d      	movs	r2, #45	; 0x2d
 8044310:	4264      	negs	r4, r4
 8044312:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8044316:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 804431a:	2301      	movs	r3, #1
 804431c:	f7ff b8c3 	b.w	80434a6 <_svfprintf_r+0x212>
 8044320:	9910      	ldr	r1, [sp, #64]	; 0x40
 8044322:	1d0d      	adds	r5, r1, #4
 8044324:	680c      	ldr	r4, [r1, #0]
 8044326:	9510      	str	r5, [sp, #64]	; 0x40
 8044328:	2500      	movs	r5, #0
 804432a:	f7ff b9a1 	b.w	8043670 <_svfprintf_r+0x3dc>
 804432e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8044330:	6825      	ldr	r5, [r4, #0]
 8044332:	1d20      	adds	r0, r4, #4
 8044334:	9010      	str	r0, [sp, #64]	; 0x40
 8044336:	462c      	mov	r4, r5
 8044338:	2500      	movs	r5, #0
 804433a:	f7ff ba22 	b.w	8043782 <_svfprintf_r+0x4ee>
 804433e:	bf00      	nop
 8044340:	08048220 	.word	0x08048220
 8044344:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044346:	4659      	mov	r1, fp
 8044348:	aa25      	add	r2, sp, #148	; 0x94
 804434a:	f003 f959 	bl	8047600 <__ssprint_r>
 804434e:	2800      	cmp	r0, #0
 8044350:	f47f a963 	bne.w	804361a <_svfprintf_r+0x386>
 8044354:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044356:	ae32      	add	r6, sp, #200	; 0xc8
 8044358:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 804435a:	9811      	ldr	r0, [sp, #68]	; 0x44
 804435c:	9915      	ldr	r1, [sp, #84]	; 0x54
 804435e:	4283      	cmp	r3, r0
 8044360:	440f      	add	r7, r1
 8044362:	db70      	blt.n	8044446 <_svfprintf_r+0x11b2>
 8044364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8044366:	07d1      	lsls	r1, r2, #31
 8044368:	d46d      	bmi.n	8044446 <_svfprintf_r+0x11b2>
 804436a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 804436c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 804436e:	1bed      	subs	r5, r5, r7
 8044370:	1ad3      	subs	r3, r2, r3
 8044372:	42ab      	cmp	r3, r5
 8044374:	bfb8      	it	lt
 8044376:	461d      	movlt	r5, r3
 8044378:	2d00      	cmp	r5, #0
 804437a:	dd0a      	ble.n	8044392 <_svfprintf_r+0x10fe>
 804437c:	9926      	ldr	r1, [sp, #152]	; 0x98
 804437e:	1964      	adds	r4, r4, r5
 8044380:	1c48      	adds	r0, r1, #1
 8044382:	2807      	cmp	r0, #7
 8044384:	6037      	str	r7, [r6, #0]
 8044386:	6075      	str	r5, [r6, #4]
 8044388:	9427      	str	r4, [sp, #156]	; 0x9c
 804438a:	9026      	str	r0, [sp, #152]	; 0x98
 804438c:	f300 835d 	bgt.w	8044a4a <_svfprintf_r+0x17b6>
 8044390:	3608      	adds	r6, #8
 8044392:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8044396:	1b5d      	subs	r5, r3, r5
 8044398:	2d00      	cmp	r5, #0
 804439a:	f77f ab97 	ble.w	8043acc <_svfprintf_r+0x838>
 804439e:	2d10      	cmp	r5, #16
 80443a0:	f77f af63 	ble.w	804426a <_svfprintf_r+0xfd6>
 80443a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80443a6:	2710      	movs	r7, #16
 80443a8:	1c53      	adds	r3, r2, #1
 80443aa:	4988      	ldr	r1, [pc, #544]	; (80445cc <_svfprintf_r+0x1338>)
 80443ac:	f1a5 0811 	sub.w	r8, r5, #17
 80443b0:	19e4      	adds	r4, r4, r7
 80443b2:	2b07      	cmp	r3, #7
 80443b4:	f8c6 9000 	str.w	r9, [r6]
 80443b8:	6077      	str	r7, [r6, #4]
 80443ba:	910a      	str	r1, [sp, #40]	; 0x28
 80443bc:	9427      	str	r4, [sp, #156]	; 0x9c
 80443be:	9326      	str	r3, [sp, #152]	; 0x98
 80443c0:	f3c8 1800 	ubfx	r8, r8, #4, #1
 80443c4:	f300 8335 	bgt.w	8044a32 <_svfprintf_r+0x179e>
 80443c8:	3608      	adds	r6, #8
 80443ca:	3d10      	subs	r5, #16
 80443cc:	2d10      	cmp	r5, #16
 80443ce:	f77f af4f 	ble.w	8044270 <_svfprintf_r+0xfdc>
 80443d2:	f1b8 0f00 	cmp.w	r8, #0
 80443d6:	d00e      	beq.n	80443f6 <_svfprintf_r+0x1162>
 80443d8:	3301      	adds	r3, #1
 80443da:	3410      	adds	r4, #16
 80443dc:	2b07      	cmp	r3, #7
 80443de:	f8c6 9000 	str.w	r9, [r6]
 80443e2:	6077      	str	r7, [r6, #4]
 80443e4:	9427      	str	r4, [sp, #156]	; 0x9c
 80443e6:	9326      	str	r3, [sp, #152]	; 0x98
 80443e8:	f300 834e 	bgt.w	8044a88 <_svfprintf_r+0x17f4>
 80443ec:	3608      	adds	r6, #8
 80443ee:	3d10      	subs	r5, #16
 80443f0:	2d10      	cmp	r5, #16
 80443f2:	f77f af3d 	ble.w	8044270 <_svfprintf_r+0xfdc>
 80443f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80443fa:	e00f      	b.n	804441c <_svfprintf_r+0x1188>
 80443fc:	3608      	adds	r6, #8
 80443fe:	1c43      	adds	r3, r0, #1
 8044400:	3410      	adds	r4, #16
 8044402:	3d10      	subs	r5, #16
 8044404:	2b07      	cmp	r3, #7
 8044406:	f8c6 9000 	str.w	r9, [r6]
 804440a:	6077      	str	r7, [r6, #4]
 804440c:	9326      	str	r3, [sp, #152]	; 0x98
 804440e:	9427      	str	r4, [sp, #156]	; 0x9c
 8044410:	dc28      	bgt.n	8044464 <_svfprintf_r+0x11d0>
 8044412:	3608      	adds	r6, #8
 8044414:	3d10      	subs	r5, #16
 8044416:	2d10      	cmp	r5, #16
 8044418:	f77f af2a 	ble.w	8044270 <_svfprintf_r+0xfdc>
 804441c:	1c58      	adds	r0, r3, #1
 804441e:	3410      	adds	r4, #16
 8044420:	2807      	cmp	r0, #7
 8044422:	f8c6 9000 	str.w	r9, [r6]
 8044426:	6077      	str	r7, [r6, #4]
 8044428:	9427      	str	r4, [sp, #156]	; 0x9c
 804442a:	9026      	str	r0, [sp, #152]	; 0x98
 804442c:	dde6      	ble.n	80443fc <_svfprintf_r+0x1168>
 804442e:	4640      	mov	r0, r8
 8044430:	4659      	mov	r1, fp
 8044432:	aa25      	add	r2, sp, #148	; 0x94
 8044434:	f003 f8e4 	bl	8047600 <__ssprint_r>
 8044438:	2800      	cmp	r0, #0
 804443a:	f47f a8ee 	bne.w	804361a <_svfprintf_r+0x386>
 804443e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044440:	9826      	ldr	r0, [sp, #152]	; 0x98
 8044442:	ae32      	add	r6, sp, #200	; 0xc8
 8044444:	e7db      	b.n	80443fe <_svfprintf_r+0x116a>
 8044446:	9826      	ldr	r0, [sp, #152]	; 0x98
 8044448:	9918      	ldr	r1, [sp, #96]	; 0x60
 804444a:	1c42      	adds	r2, r0, #1
 804444c:	1864      	adds	r4, r4, r1
 804444e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8044450:	9914      	ldr	r1, [sp, #80]	; 0x50
 8044452:	2a07      	cmp	r2, #7
 8044454:	6031      	str	r1, [r6, #0]
 8044456:	6070      	str	r0, [r6, #4]
 8044458:	9427      	str	r4, [sp, #156]	; 0x9c
 804445a:	9226      	str	r2, [sp, #152]	; 0x98
 804445c:	f300 82b6 	bgt.w	80449cc <_svfprintf_r+0x1738>
 8044460:	3608      	adds	r6, #8
 8044462:	e782      	b.n	804436a <_svfprintf_r+0x10d6>
 8044464:	4640      	mov	r0, r8
 8044466:	4659      	mov	r1, fp
 8044468:	aa25      	add	r2, sp, #148	; 0x94
 804446a:	f003 f8c9 	bl	8047600 <__ssprint_r>
 804446e:	2800      	cmp	r0, #0
 8044470:	f47f a8d3 	bne.w	804361a <_svfprintf_r+0x386>
 8044474:	ae32      	add	r6, sp, #200	; 0xc8
 8044476:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044478:	9b26      	ldr	r3, [sp, #152]	; 0x98
 804447a:	e7cb      	b.n	8044414 <_svfprintf_r+0x1180>
 804447c:	980c      	ldr	r0, [sp, #48]	; 0x30
 804447e:	4659      	mov	r1, fp
 8044480:	aa25      	add	r2, sp, #148	; 0x94
 8044482:	9306      	str	r3, [sp, #24]
 8044484:	f8cd c01c 	str.w	ip, [sp, #28]
 8044488:	f003 f8ba 	bl	8047600 <__ssprint_r>
 804448c:	9b06      	ldr	r3, [sp, #24]
 804448e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8044492:	2800      	cmp	r0, #0
 8044494:	f47f a8c1 	bne.w	804361a <_svfprintf_r+0x386>
 8044498:	ae32      	add	r6, sp, #200	; 0xc8
 804449a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 804449c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 804449e:	e4d3      	b.n	8043e48 <_svfprintf_r+0xbb4>
 80444a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80444a2:	07d2      	lsls	r2, r2, #31
 80444a4:	f53f ab83 	bmi.w	8043bae <_svfprintf_r+0x91a>
 80444a8:	6037      	str	r7, [r6, #0]
 80444aa:	2001      	movs	r0, #1
 80444ac:	f7ff bba3 	b.w	8043bf6 <_svfprintf_r+0x962>
 80444b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80444b2:	4659      	mov	r1, fp
 80444b4:	aa25      	add	r2, sp, #148	; 0x94
 80444b6:	9306      	str	r3, [sp, #24]
 80444b8:	f003 f8a2 	bl	8047600 <__ssprint_r>
 80444bc:	9b06      	ldr	r3, [sp, #24]
 80444be:	2800      	cmp	r0, #0
 80444c0:	f47f a8ab 	bne.w	804361a <_svfprintf_r+0x386>
 80444c4:	ae32      	add	r6, sp, #200	; 0xc8
 80444c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80444c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80444ca:	e4ce      	b.n	8043e6a <_svfprintf_r+0xbd6>
 80444cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80444ce:	4659      	mov	r1, fp
 80444d0:	aa25      	add	r2, sp, #148	; 0x94
 80444d2:	f003 f895 	bl	8047600 <__ssprint_r>
 80444d6:	2800      	cmp	r0, #0
 80444d8:	f47f a89f 	bne.w	804361a <_svfprintf_r+0x386>
 80444dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80444de:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80444e0:	ae32      	add	r6, sp, #200	; 0xc8
 80444e2:	f7ff bb6d 	b.w	8043bc0 <_svfprintf_r+0x92c>
 80444e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80444e8:	4659      	mov	r1, fp
 80444ea:	aa25      	add	r2, sp, #148	; 0x94
 80444ec:	f003 f888 	bl	8047600 <__ssprint_r>
 80444f0:	2800      	cmp	r0, #0
 80444f2:	f47f a892 	bne.w	804361a <_svfprintf_r+0x386>
 80444f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80444f8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80444fa:	ae32      	add	r6, sp, #200	; 0xc8
 80444fc:	f7ff bb6c 	b.w	8043bd8 <_svfprintf_r+0x944>
 8044500:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8044502:	970e      	str	r7, [sp, #56]	; 0x38
 8044504:	af32      	add	r7, sp, #200	; 0xc8
 8044506:	f7fe bfeb 	b.w	80434e0 <_svfprintf_r+0x24c>
 804450a:	980c      	ldr	r0, [sp, #48]	; 0x30
 804450c:	4659      	mov	r1, fp
 804450e:	aa25      	add	r2, sp, #148	; 0x94
 8044510:	f003 f876 	bl	8047600 <__ssprint_r>
 8044514:	2800      	cmp	r0, #0
 8044516:	f47f a880 	bne.w	804361a <_svfprintf_r+0x386>
 804451a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 804451c:	ae32      	add	r6, sp, #200	; 0xc8
 804451e:	f7ff ba49 	b.w	80439b4 <_svfprintf_r+0x720>
 8044522:	f002 fff7 	bl	8047514 <__fpclassifyd>
 8044526:	2800      	cmp	r0, #0
 8044528:	f040 80e4 	bne.w	80446f4 <_svfprintf_r+0x1460>
 804452c:	2703      	movs	r7, #3
 804452e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8044530:	4b27      	ldr	r3, [pc, #156]	; (80445d0 <_svfprintf_r+0x133c>)
 8044532:	970b      	str	r7, [sp, #44]	; 0x2c
 8044534:	4f27      	ldr	r7, [pc, #156]	; (80445d4 <_svfprintf_r+0x1340>)
 8044536:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 804453a:	2403      	movs	r4, #3
 804453c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8044540:	bfd8      	it	le
 8044542:	461f      	movle	r7, r3
 8044544:	9012      	str	r0, [sp, #72]	; 0x48
 8044546:	9109      	str	r1, [sp, #36]	; 0x24
 8044548:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 804454c:	940e      	str	r4, [sp, #56]	; 0x38
 804454e:	9015      	str	r0, [sp, #84]	; 0x54
 8044550:	f7fe bfd1 	b.w	80434f6 <_svfprintf_r+0x262>
 8044554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8044556:	064b      	lsls	r3, r1, #25
 8044558:	f140 81b2 	bpl.w	80448c0 <_svfprintf_r+0x162c>
 804455c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 804455e:	2301      	movs	r3, #1
 8044560:	1d11      	adds	r1, r2, #4
 8044562:	8814      	ldrh	r4, [r2, #0]
 8044564:	2500      	movs	r5, #0
 8044566:	9110      	str	r1, [sp, #64]	; 0x40
 8044568:	f7ff b882 	b.w	8043670 <_svfprintf_r+0x3dc>
 804456c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 804456e:	06f8      	lsls	r0, r7, #27
 8044570:	f140 81ab 	bpl.w	80448ca <_svfprintf_r+0x1636>
 8044574:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8044576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8044578:	6821      	ldr	r1, [r4, #0]
 804457a:	1d27      	adds	r7, r4, #4
 804457c:	9710      	str	r7, [sp, #64]	; 0x40
 804457e:	600a      	str	r2, [r1, #0]
 8044580:	f7fe beb2 	b.w	80432e8 <_svfprintf_r+0x54>
 8044584:	f89a 8000 	ldrb.w	r8, [sl]
 8044588:	f7fe bee5 	b.w	8043356 <_svfprintf_r+0xc2>
 804458c:	4a0f      	ldr	r2, [pc, #60]	; (80445cc <_svfprintf_r+0x1338>)
 804458e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044590:	920e      	str	r2, [sp, #56]	; 0x38
 8044592:	1c5a      	adds	r2, r3, #1
 8044594:	990e      	ldr	r1, [sp, #56]	; 0x38
 8044596:	1964      	adds	r4, r4, r5
 8044598:	2a07      	cmp	r2, #7
 804459a:	e886 0022 	stmia.w	r6, {r1, r5}
 804459e:	9427      	str	r4, [sp, #156]	; 0x9c
 80445a0:	9226      	str	r2, [sp, #152]	; 0x98
 80445a2:	f73f aecf 	bgt.w	8044344 <_svfprintf_r+0x10b0>
 80445a6:	3608      	adds	r6, #8
 80445a8:	e6d6      	b.n	8044358 <_svfprintf_r+0x10c4>
 80445aa:	4908      	ldr	r1, [pc, #32]	; (80445cc <_svfprintf_r+0x1338>)
 80445ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80445ae:	910a      	str	r1, [sp, #40]	; 0x28
 80445b0:	f7ff ba70 	b.w	8043a94 <_svfprintf_r+0x800>
 80445b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80445b6:	4659      	mov	r1, fp
 80445b8:	aa25      	add	r2, sp, #148	; 0x94
 80445ba:	f003 f821 	bl	8047600 <__ssprint_r>
 80445be:	2800      	cmp	r0, #0
 80445c0:	f47f a82b 	bne.w	804361a <_svfprintf_r+0x386>
 80445c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80445c6:	ae32      	add	r6, sp, #200	; 0xc8
 80445c8:	f7ff bbab 	b.w	8043d22 <_svfprintf_r+0xa8e>
 80445cc:	08048220 	.word	0x08048220
 80445d0:	080481e4 	.word	0x080481e4
 80445d4:	080481e8 	.word	0x080481e8
 80445d8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80445da:	4bb7      	ldr	r3, [pc, #732]	; (80448b8 <_svfprintf_r+0x1624>)
 80445dc:	1c48      	adds	r0, r1, #1
 80445de:	3401      	adds	r4, #1
 80445e0:	2101      	movs	r1, #1
 80445e2:	2807      	cmp	r0, #7
 80445e4:	6033      	str	r3, [r6, #0]
 80445e6:	6071      	str	r1, [r6, #4]
 80445e8:	9427      	str	r4, [sp, #156]	; 0x9c
 80445ea:	9026      	str	r0, [sp, #152]	; 0x98
 80445ec:	f300 8149 	bgt.w	8044882 <_svfprintf_r+0x15ee>
 80445f0:	3608      	adds	r6, #8
 80445f2:	b92a      	cbnz	r2, 8044600 <_svfprintf_r+0x136c>
 80445f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80445f6:	b918      	cbnz	r0, 8044600 <_svfprintf_r+0x136c>
 80445f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80445fa:	07d8      	lsls	r0, r3, #31
 80445fc:	f57f aa66 	bpl.w	8043acc <_svfprintf_r+0x838>
 8044600:	9826      	ldr	r0, [sp, #152]	; 0x98
 8044602:	9918      	ldr	r1, [sp, #96]	; 0x60
 8044604:	1c43      	adds	r3, r0, #1
 8044606:	1864      	adds	r4, r4, r1
 8044608:	9818      	ldr	r0, [sp, #96]	; 0x60
 804460a:	9914      	ldr	r1, [sp, #80]	; 0x50
 804460c:	2b07      	cmp	r3, #7
 804460e:	6031      	str	r1, [r6, #0]
 8044610:	6070      	str	r0, [r6, #4]
 8044612:	9427      	str	r4, [sp, #156]	; 0x9c
 8044614:	9326      	str	r3, [sp, #152]	; 0x98
 8044616:	f300 82c7 	bgt.w	8044ba8 <_svfprintf_r+0x1914>
 804461a:	3608      	adds	r6, #8
 804461c:	f1c2 0800 	rsb	r8, r2, #0
 8044620:	f1b8 0f00 	cmp.w	r8, #0
 8044624:	f340 817a 	ble.w	804491c <_svfprintf_r+0x1688>
 8044628:	f1b8 0f10 	cmp.w	r8, #16
 804462c:	f340 81da 	ble.w	80449e4 <_svfprintf_r+0x1750>
 8044630:	2510      	movs	r5, #16
 8044632:	3301      	adds	r3, #1
 8044634:	f1a8 0211 	sub.w	r2, r8, #17
 8044638:	48a0      	ldr	r0, [pc, #640]	; (80448bc <_svfprintf_r+0x1628>)
 804463a:	1964      	adds	r4, r4, r5
 804463c:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8044640:	2b07      	cmp	r3, #7
 8044642:	f8c6 9000 	str.w	r9, [r6]
 8044646:	6075      	str	r5, [r6, #4]
 8044648:	900a      	str	r0, [sp, #40]	; 0x28
 804464a:	9427      	str	r4, [sp, #156]	; 0x9c
 804464c:	9326      	str	r3, [sp, #152]	; 0x98
 804464e:	910e      	str	r1, [sp, #56]	; 0x38
 8044650:	f300 82da 	bgt.w	8044c08 <_svfprintf_r+0x1974>
 8044654:	3608      	adds	r6, #8
 8044656:	f1a8 0810 	sub.w	r8, r8, #16
 804465a:	f1b8 0f10 	cmp.w	r8, #16
 804465e:	f340 81c3 	ble.w	80449e8 <_svfprintf_r+0x1754>
 8044662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8044664:	b182      	cbz	r2, 8044688 <_svfprintf_r+0x13f4>
 8044666:	3301      	adds	r3, #1
 8044668:	3410      	adds	r4, #16
 804466a:	2b07      	cmp	r3, #7
 804466c:	f8c6 9000 	str.w	r9, [r6]
 8044670:	6075      	str	r5, [r6, #4]
 8044672:	9427      	str	r4, [sp, #156]	; 0x9c
 8044674:	9326      	str	r3, [sp, #152]	; 0x98
 8044676:	f300 830f 	bgt.w	8044c98 <_svfprintf_r+0x1a04>
 804467a:	3608      	adds	r6, #8
 804467c:	f1a8 0810 	sub.w	r8, r8, #16
 8044680:	f1b8 0f10 	cmp.w	r8, #16
 8044684:	f340 81b0 	ble.w	80449e8 <_svfprintf_r+0x1754>
 8044688:	4620      	mov	r0, r4
 804468a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 804468c:	e013      	b.n	80446b6 <_svfprintf_r+0x1422>
 804468e:	3608      	adds	r6, #8
 8044690:	3301      	adds	r3, #1
 8044692:	3010      	adds	r0, #16
 8044694:	2b07      	cmp	r3, #7
 8044696:	f8c6 9000 	str.w	r9, [r6]
 804469a:	6075      	str	r5, [r6, #4]
 804469c:	f1a8 0810 	sub.w	r8, r8, #16
 80446a0:	9027      	str	r0, [sp, #156]	; 0x9c
 80446a2:	9326      	str	r3, [sp, #152]	; 0x98
 80446a4:	f300 80fc 	bgt.w	80448a0 <_svfprintf_r+0x160c>
 80446a8:	3608      	adds	r6, #8
 80446aa:	f1a8 0810 	sub.w	r8, r8, #16
 80446ae:	f1b8 0f10 	cmp.w	r8, #16
 80446b2:	f340 8294 	ble.w	8044bde <_svfprintf_r+0x194a>
 80446b6:	3301      	adds	r3, #1
 80446b8:	3010      	adds	r0, #16
 80446ba:	2b07      	cmp	r3, #7
 80446bc:	f8c6 9000 	str.w	r9, [r6]
 80446c0:	6075      	str	r5, [r6, #4]
 80446c2:	9027      	str	r0, [sp, #156]	; 0x9c
 80446c4:	9326      	str	r3, [sp, #152]	; 0x98
 80446c6:	dde2      	ble.n	804468e <_svfprintf_r+0x13fa>
 80446c8:	4620      	mov	r0, r4
 80446ca:	4659      	mov	r1, fp
 80446cc:	aa25      	add	r2, sp, #148	; 0x94
 80446ce:	f002 ff97 	bl	8047600 <__ssprint_r>
 80446d2:	2800      	cmp	r0, #0
 80446d4:	f47e afa1 	bne.w	804361a <_svfprintf_r+0x386>
 80446d8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80446da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80446dc:	ae32      	add	r6, sp, #200	; 0xc8
 80446de:	e7d7      	b.n	8044690 <_svfprintf_r+0x13fc>
 80446e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80446e2:	f10a 0a01 	add.w	sl, sl, #1
 80446e6:	f044 0720 	orr.w	r7, r4, #32
 80446ea:	9709      	str	r7, [sp, #36]	; 0x24
 80446ec:	f892 8001 	ldrb.w	r8, [r2, #1]
 80446f0:	f7fe be31 	b.w	8043356 <_svfprintf_r+0xc2>
 80446f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80446f6:	1c47      	adds	r7, r0, #1
 80446f8:	f000 80cf 	beq.w	804489a <_svfprintf_r+0x1606>
 80446fc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8044700:	f000 824c 	beq.w	8044b9c <_svfprintf_r+0x1908>
 8044704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8044708:	f000 8248 	beq.w	8044b9c <_svfprintf_r+0x1908>
 804470c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804470e:	2c00      	cmp	r4, #0
 8044710:	f440 7780 	orr.w	r7, r0, #256	; 0x100
 8044714:	9713      	str	r7, [sp, #76]	; 0x4c
 8044716:	f2c0 826b 	blt.w	8044bf0 <_svfprintf_r+0x195c>
 804471a:	2100      	movs	r1, #0
 804471c:	9112      	str	r1, [sp, #72]	; 0x48
 804471e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8044722:	f000 820b 	beq.w	8044b3c <_svfprintf_r+0x18a8>
 8044726:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 804472a:	f000 8207 	beq.w	8044b3c <_svfprintf_r+0x18a8>
 804472e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8044732:	f000 8262 	beq.w	8044bfa <_svfprintf_r+0x1966>
 8044736:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 804473a:	f000 825e 	beq.w	8044bfa <_svfprintf_r+0x1966>
 804473e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8044742:	2102      	movs	r1, #2
 8044744:	e88d 1002 	stmia.w	sp, {r1, ip}
 8044748:	a81e      	add	r0, sp, #120	; 0x78
 804474a:	af1f      	add	r7, sp, #124	; 0x7c
 804474c:	a920      	add	r1, sp, #128	; 0x80
 804474e:	9002      	str	r0, [sp, #8]
 8044750:	9703      	str	r7, [sp, #12]
 8044752:	462a      	mov	r2, r5
 8044754:	4623      	mov	r3, r4
 8044756:	9104      	str	r1, [sp, #16]
 8044758:	980c      	ldr	r0, [sp, #48]	; 0x30
 804475a:	f8cd c01c 	str.w	ip, [sp, #28]
 804475e:	f000 fc7f 	bl	8045060 <_dtoa_r>
 8044762:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8044766:	4607      	mov	r7, r0
 8044768:	f8dd c01c 	ldr.w	ip, [sp, #28]
 804476c:	d002      	beq.n	8044774 <_svfprintf_r+0x14e0>
 804476e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8044772:	d103      	bne.n	804477c <_svfprintf_r+0x14e8>
 8044774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8044776:	07d0      	lsls	r0, r2, #31
 8044778:	f140 8243 	bpl.w	8044c02 <_svfprintf_r+0x196e>
 804477c:	eb07 030c 	add.w	r3, r7, ip
 8044780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8044784:	930b      	str	r3, [sp, #44]	; 0x2c
 8044786:	f000 81ee 	beq.w	8044b66 <_svfprintf_r+0x18d2>
 804478a:	4628      	mov	r0, r5
 804478c:	4621      	mov	r1, r4
 804478e:	2200      	movs	r2, #0
 8044790:	2300      	movs	r3, #0
 8044792:	f7fc f919 	bl	80409c8 <__aeabi_dcmpeq>
 8044796:	bb00      	cbnz	r0, 80447da <_svfprintf_r+0x1546>
 8044798:	9a20      	ldr	r2, [sp, #128]	; 0x80
 804479a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 804479c:	4294      	cmp	r4, r2
 804479e:	f240 82d8 	bls.w	8044d52 <_svfprintf_r+0x1abe>
 80447a2:	4613      	mov	r3, r2
 80447a4:	2130      	movs	r1, #48	; 0x30
 80447a6:	43d0      	mvns	r0, r2
 80447a8:	f803 1b01 	strb.w	r1, [r3], #1
 80447ac:	1820      	adds	r0, r4, r0
 80447ae:	42a3      	cmp	r3, r4
 80447b0:	9320      	str	r3, [sp, #128]	; 0x80
 80447b2:	f000 0001 	and.w	r0, r0, #1
 80447b6:	d00f      	beq.n	80447d8 <_svfprintf_r+0x1544>
 80447b8:	b128      	cbz	r0, 80447c6 <_svfprintf_r+0x1532>
 80447ba:	7051      	strb	r1, [r2, #1]
 80447bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80447be:	3301      	adds	r3, #1
 80447c0:	4293      	cmp	r3, r2
 80447c2:	9320      	str	r3, [sp, #128]	; 0x80
 80447c4:	d008      	beq.n	80447d8 <_svfprintf_r+0x1544>
 80447c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80447c8:	4618      	mov	r0, r3
 80447ca:	f800 1b01 	strb.w	r1, [r0], #1
 80447ce:	7059      	strb	r1, [r3, #1]
 80447d0:	1c43      	adds	r3, r0, #1
 80447d2:	42a3      	cmp	r3, r4
 80447d4:	9320      	str	r3, [sp, #128]	; 0x80
 80447d6:	d1f7      	bne.n	80447c8 <_svfprintf_r+0x1534>
 80447d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80447da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80447dc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80447e0:	ebc7 0301 	rsb	r3, r7, r1
 80447e4:	9311      	str	r3, [sp, #68]	; 0x44
 80447e6:	f000 8166 	beq.w	8044ab6 <_svfprintf_r+0x1822>
 80447ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80447ee:	f000 8162 	beq.w	8044ab6 <_svfprintf_r+0x1822>
 80447f2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80447f6:	f040 82b8 	bne.w	8044d6a <_svfprintf_r+0x1ad6>
 80447fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80447fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80447fe:	2a00      	cmp	r2, #0
 8044800:	f340 8288 	ble.w	8044d14 <_svfprintf_r+0x1a80>
 8044804:	2c00      	cmp	r4, #0
 8044806:	f040 8253 	bne.w	8044cb0 <_svfprintf_r+0x1a1c>
 804480a:	9909      	ldr	r1, [sp, #36]	; 0x24
 804480c:	07c8      	lsls	r0, r1, #31
 804480e:	f100 824f 	bmi.w	8044cb0 <_svfprintf_r+0x1a1c>
 8044812:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8044816:	930b      	str	r3, [sp, #44]	; 0x2c
 8044818:	920e      	str	r2, [sp, #56]	; 0x38
 804481a:	9215      	str	r2, [sp, #84]	; 0x54
 804481c:	9912      	ldr	r1, [sp, #72]	; 0x48
 804481e:	2900      	cmp	r1, #0
 8044820:	f000 8143 	beq.w	8044aaa <_svfprintf_r+0x1816>
 8044824:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8044826:	222d      	movs	r2, #45	; 0x2d
 8044828:	2100      	movs	r1, #0
 804482a:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 804482e:	9009      	str	r0, [sp, #36]	; 0x24
 8044830:	9112      	str	r1, [sp, #72]	; 0x48
 8044832:	f7fe be61 	b.w	80434f8 <_svfprintf_r+0x264>
 8044836:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044838:	4659      	mov	r1, fp
 804483a:	aa25      	add	r2, sp, #148	; 0x94
 804483c:	f002 fee0 	bl	8047600 <__ssprint_r>
 8044840:	2800      	cmp	r0, #0
 8044842:	f47e aeea 	bne.w	804361a <_svfprintf_r+0x386>
 8044846:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044848:	ae32      	add	r6, sp, #200	; 0xc8
 804484a:	f7ff ba80 	b.w	8043d4e <_svfprintf_r+0xaba>
 804484e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8044850:	9510      	str	r5, [sp, #64]	; 0x40
 8044852:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8044856:	920b      	str	r2, [sp, #44]	; 0x2c
 8044858:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 804485c:	9415      	str	r4, [sp, #84]	; 0x54
 804485e:	f7fe be4a 	b.w	80434f6 <_svfprintf_r+0x262>
 8044862:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044864:	2140      	movs	r1, #64	; 0x40
 8044866:	f001 fe13 	bl	8046490 <_malloc_r>
 804486a:	f8cb 0000 	str.w	r0, [fp]
 804486e:	f8cb 0010 	str.w	r0, [fp, #16]
 8044872:	2800      	cmp	r0, #0
 8044874:	f000 8272 	beq.w	8044d5c <_svfprintf_r+0x1ac8>
 8044878:	2640      	movs	r6, #64	; 0x40
 804487a:	f8cb 6014 	str.w	r6, [fp, #20]
 804487e:	f7fe bd26 	b.w	80432ce <_svfprintf_r+0x3a>
 8044882:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044884:	4659      	mov	r1, fp
 8044886:	aa25      	add	r2, sp, #148	; 0x94
 8044888:	f002 feba 	bl	8047600 <__ssprint_r>
 804488c:	2800      	cmp	r0, #0
 804488e:	f47e aec4 	bne.w	804361a <_svfprintf_r+0x386>
 8044892:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8044894:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044896:	ae32      	add	r6, sp, #200	; 0xc8
 8044898:	e6ab      	b.n	80445f2 <_svfprintf_r+0x135e>
 804489a:	2206      	movs	r2, #6
 804489c:	920a      	str	r2, [sp, #40]	; 0x28
 804489e:	e735      	b.n	804470c <_svfprintf_r+0x1478>
 80448a0:	4620      	mov	r0, r4
 80448a2:	4659      	mov	r1, fp
 80448a4:	aa25      	add	r2, sp, #148	; 0x94
 80448a6:	f002 feab 	bl	8047600 <__ssprint_r>
 80448aa:	2800      	cmp	r0, #0
 80448ac:	f47e aeb5 	bne.w	804361a <_svfprintf_r+0x386>
 80448b0:	ae32      	add	r6, sp, #200	; 0xc8
 80448b2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80448b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80448b6:	e6f8      	b.n	80446aa <_svfprintf_r+0x1416>
 80448b8:	0804821c 	.word	0x0804821c
 80448bc:	08048220 	.word	0x08048220
 80448c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80448c2:	6805      	ldr	r5, [r0, #0]
 80448c4:	4607      	mov	r7, r0
 80448c6:	f7fe bdb6 	b.w	8043436 <_svfprintf_r+0x1a2>
 80448ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80448cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80448ce:	6813      	ldr	r3, [r2, #0]
 80448d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80448d2:	1d10      	adds	r0, r2, #4
 80448d4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80448d8:	9010      	str	r0, [sp, #64]	; 0x40
 80448da:	bf14      	ite	ne
 80448dc:	801f      	strhne	r7, [r3, #0]
 80448de:	601f      	streq	r7, [r3, #0]
 80448e0:	f7fe bd02 	b.w	80432e8 <_svfprintf_r+0x54>
 80448e4:	4614      	mov	r4, r2
 80448e6:	f7ff bb0b 	b.w	8043f00 <_svfprintf_r+0xc6c>
 80448ea:	f002 fe59 	bl	80475a0 <strlen>
 80448ee:	9412      	str	r4, [sp, #72]	; 0x48
 80448f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80448f2:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 80448f6:	900e      	str	r0, [sp, #56]	; 0x38
 80448f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80448fa:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 80448fe:	9510      	str	r5, [sp, #64]	; 0x40
 8044900:	9415      	str	r4, [sp, #84]	; 0x54
 8044902:	f7fe bdf8 	b.w	80434f6 <_svfprintf_r+0x262>
 8044906:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044908:	4659      	mov	r1, fp
 804490a:	aa25      	add	r2, sp, #148	; 0x94
 804490c:	f002 fe78 	bl	8047600 <__ssprint_r>
 8044910:	2800      	cmp	r0, #0
 8044912:	f47e ae82 	bne.w	804361a <_svfprintf_r+0x386>
 8044916:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044918:	9b26      	ldr	r3, [sp, #152]	; 0x98
 804491a:	ae32      	add	r6, sp, #200	; 0xc8
 804491c:	9911      	ldr	r1, [sp, #68]	; 0x44
 804491e:	1c5a      	adds	r2, r3, #1
 8044920:	1864      	adds	r4, r4, r1
 8044922:	2a07      	cmp	r2, #7
 8044924:	6037      	str	r7, [r6, #0]
 8044926:	6071      	str	r1, [r6, #4]
 8044928:	9427      	str	r4, [sp, #156]	; 0x9c
 804492a:	9226      	str	r2, [sp, #152]	; 0x98
 804492c:	f77f a8cd 	ble.w	8043aca <_svfprintf_r+0x836>
 8044930:	f7ff b973 	b.w	8043c1a <_svfprintf_r+0x986>
 8044934:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044936:	4659      	mov	r1, fp
 8044938:	aa25      	add	r2, sp, #148	; 0x94
 804493a:	9306      	str	r3, [sp, #24]
 804493c:	f002 fe60 	bl	8047600 <__ssprint_r>
 8044940:	9b06      	ldr	r3, [sp, #24]
 8044942:	2800      	cmp	r0, #0
 8044944:	f47e ae69 	bne.w	804361a <_svfprintf_r+0x386>
 8044948:	ae32      	add	r6, sp, #200	; 0xc8
 804494a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 804494c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 804494e:	e441      	b.n	80441d4 <_svfprintf_r+0xf40>
 8044950:	460c      	mov	r4, r1
 8044952:	e61e      	b.n	8044592 <_svfprintf_r+0x12fe>
 8044954:	4ca3      	ldr	r4, [pc, #652]	; (8044be4 <_svfprintf_r+0x1950>)
 8044956:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8044958:	9a26      	ldr	r2, [sp, #152]	; 0x98
 804495a:	941b      	str	r4, [sp, #108]	; 0x6c
 804495c:	f7fe bff9 	b.w	8043952 <_svfprintf_r+0x6be>
 8044960:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044962:	4659      	mov	r1, fp
 8044964:	aa25      	add	r2, sp, #148	; 0x94
 8044966:	f002 fe4b 	bl	8047600 <__ssprint_r>
 804496a:	2800      	cmp	r0, #0
 804496c:	f47e ae55 	bne.w	804361a <_svfprintf_r+0x386>
 8044970:	ae32      	add	r6, sp, #200	; 0xc8
 8044972:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044974:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8044976:	e43e      	b.n	80441f6 <_svfprintf_r+0xf62>
 8044978:	980c      	ldr	r0, [sp, #48]	; 0x30
 804497a:	4659      	mov	r1, fp
 804497c:	aa25      	add	r2, sp, #148	; 0x94
 804497e:	f8cd c01c 	str.w	ip, [sp, #28]
 8044982:	f002 fe3d 	bl	8047600 <__ssprint_r>
 8044986:	f8dd c01c 	ldr.w	ip, [sp, #28]
 804498a:	2800      	cmp	r0, #0
 804498c:	f47e ae45 	bne.w	804361a <_svfprintf_r+0x386>
 8044990:	ae32      	add	r6, sp, #200	; 0xc8
 8044992:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044994:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044996:	f7ff bba1 	b.w	80440dc <_svfprintf_r+0xe48>
 804499a:	980c      	ldr	r0, [sp, #48]	; 0x30
 804499c:	4659      	mov	r1, fp
 804499e:	aa25      	add	r2, sp, #148	; 0x94
 80449a0:	f002 fe2e 	bl	8047600 <__ssprint_r>
 80449a4:	2800      	cmp	r0, #0
 80449a6:	f47e ae38 	bne.w	804361a <_svfprintf_r+0x386>
 80449aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80449ac:	ae32      	add	r6, sp, #200	; 0xc8
 80449ae:	f7ff bb76 	b.w	804409e <_svfprintf_r+0xe0a>
 80449b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80449b4:	4659      	mov	r1, fp
 80449b6:	aa25      	add	r2, sp, #148	; 0x94
 80449b8:	f002 fe22 	bl	8047600 <__ssprint_r>
 80449bc:	2800      	cmp	r0, #0
 80449be:	f47e ae2c 	bne.w	804361a <_svfprintf_r+0x386>
 80449c2:	ae32      	add	r6, sp, #200	; 0xc8
 80449c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80449c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80449c8:	f7ff b9dd 	b.w	8043d86 <_svfprintf_r+0xaf2>
 80449cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80449ce:	4659      	mov	r1, fp
 80449d0:	aa25      	add	r2, sp, #148	; 0x94
 80449d2:	f002 fe15 	bl	8047600 <__ssprint_r>
 80449d6:	2800      	cmp	r0, #0
 80449d8:	f47e ae1f 	bne.w	804361a <_svfprintf_r+0x386>
 80449dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80449de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80449e0:	ae32      	add	r6, sp, #200	; 0xc8
 80449e2:	e4c2      	b.n	804436a <_svfprintf_r+0x10d6>
 80449e4:	4980      	ldr	r1, [pc, #512]	; (8044be8 <_svfprintf_r+0x1954>)
 80449e6:	910a      	str	r1, [sp, #40]	; 0x28
 80449e8:	3301      	adds	r3, #1
 80449ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80449ec:	4444      	add	r4, r8
 80449ee:	2b07      	cmp	r3, #7
 80449f0:	e886 0102 	stmia.w	r6, {r1, r8}
 80449f4:	9427      	str	r4, [sp, #156]	; 0x9c
 80449f6:	9326      	str	r3, [sp, #152]	; 0x98
 80449f8:	dc85      	bgt.n	8044906 <_svfprintf_r+0x1672>
 80449fa:	3608      	adds	r6, #8
 80449fc:	e78e      	b.n	804491c <_svfprintf_r+0x1688>
 80449fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044a00:	4659      	mov	r1, fp
 8044a02:	aa25      	add	r2, sp, #148	; 0x94
 8044a04:	f002 fdfc 	bl	8047600 <__ssprint_r>
 8044a08:	2800      	cmp	r0, #0
 8044a0a:	f47e ae06 	bne.w	804361a <_svfprintf_r+0x386>
 8044a0e:	ae32      	add	r6, sp, #200	; 0xc8
 8044a10:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044a12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044a14:	f7ff b9c9 	b.w	8043daa <_svfprintf_r+0xb16>
 8044a18:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044a1a:	4659      	mov	r1, fp
 8044a1c:	aa25      	add	r2, sp, #148	; 0x94
 8044a1e:	f002 fdef 	bl	8047600 <__ssprint_r>
 8044a22:	2800      	cmp	r0, #0
 8044a24:	f47e adf9 	bne.w	804361a <_svfprintf_r+0x386>
 8044a28:	ae32      	add	r6, sp, #200	; 0xc8
 8044a2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044a2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044a2e:	f7ff bb68 	b.w	8044102 <_svfprintf_r+0xe6e>
 8044a32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044a34:	4659      	mov	r1, fp
 8044a36:	aa25      	add	r2, sp, #148	; 0x94
 8044a38:	f002 fde2 	bl	8047600 <__ssprint_r>
 8044a3c:	2800      	cmp	r0, #0
 8044a3e:	f47e adec 	bne.w	804361a <_svfprintf_r+0x386>
 8044a42:	ae32      	add	r6, sp, #200	; 0xc8
 8044a44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044a46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044a48:	e4bf      	b.n	80443ca <_svfprintf_r+0x1136>
 8044a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044a4c:	4659      	mov	r1, fp
 8044a4e:	aa25      	add	r2, sp, #148	; 0x94
 8044a50:	f002 fdd6 	bl	8047600 <__ssprint_r>
 8044a54:	2800      	cmp	r0, #0
 8044a56:	f47e ade0 	bne.w	804361a <_svfprintf_r+0x386>
 8044a5a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8044a5c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8044a5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044a60:	1bf3      	subs	r3, r6, r7
 8044a62:	ae32      	add	r6, sp, #200	; 0xc8
 8044a64:	e495      	b.n	8044392 <_svfprintf_r+0x10fe>
 8044a66:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8044a68:	9510      	str	r5, [sp, #64]	; 0x40
 8044a6a:	2f06      	cmp	r7, #6
 8044a6c:	bf28      	it	cs
 8044a6e:	2706      	movcs	r7, #6
 8044a70:	ea27 71e7 	bic.w	r1, r7, r7, asr #31
 8044a74:	970e      	str	r7, [sp, #56]	; 0x38
 8044a76:	910b      	str	r1, [sp, #44]	; 0x2c
 8044a78:	4f5c      	ldr	r7, [pc, #368]	; (8044bec <_svfprintf_r+0x1958>)
 8044a7a:	f7fe be69 	b.w	8043750 <_svfprintf_r+0x4bc>
 8044a7e:	4a59      	ldr	r2, [pc, #356]	; (8044be4 <_svfprintf_r+0x1950>)
 8044a80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044a82:	9209      	str	r2, [sp, #36]	; 0x24
 8044a84:	f7ff b8f6 	b.w	8043c74 <_svfprintf_r+0x9e0>
 8044a88:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044a8a:	4659      	mov	r1, fp
 8044a8c:	aa25      	add	r2, sp, #148	; 0x94
 8044a8e:	f002 fdb7 	bl	8047600 <__ssprint_r>
 8044a92:	2800      	cmp	r0, #0
 8044a94:	f47e adc1 	bne.w	804361a <_svfprintf_r+0x386>
 8044a98:	ae32      	add	r6, sp, #200	; 0xc8
 8044a9a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044a9e:	e4a6      	b.n	80443ee <_svfprintf_r+0x115a>
 8044aa0:	232d      	movs	r3, #45	; 0x2d
 8044aa2:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 8044aa6:	f7fe be05 	b.w	80436b4 <_svfprintf_r+0x420>
 8044aaa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8044aac:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8044ab0:	9409      	str	r4, [sp, #36]	; 0x24
 8044ab2:	f7fe bd20 	b.w	80434f6 <_svfprintf_r+0x262>
 8044ab6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8044ab8:	1cd1      	adds	r1, r2, #3
 8044aba:	4610      	mov	r0, r2
 8044abc:	db02      	blt.n	8044ac4 <_svfprintf_r+0x1830>
 8044abe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8044ac0:	4294      	cmp	r4, r2
 8044ac2:	da28      	bge.n	8044b16 <_svfprintf_r+0x1882>
 8044ac4:	f1a8 0802 	sub.w	r8, r8, #2
 8044ac8:	1e43      	subs	r3, r0, #1
 8044aca:	2b00      	cmp	r3, #0
 8044acc:	931e      	str	r3, [sp, #120]	; 0x78
 8044ace:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
 8044ad2:	f2c0 8132 	blt.w	8044d3a <_svfprintf_r+0x1aa6>
 8044ad6:	222b      	movs	r2, #43	; 0x2b
 8044ad8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8044adc:	2b09      	cmp	r3, #9
 8044ade:	f300 809f 	bgt.w	8044c20 <_svfprintf_r+0x198c>
 8044ae2:	3330      	adds	r3, #48	; 0x30
 8044ae4:	2030      	movs	r0, #48	; 0x30
 8044ae6:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
 8044aea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8044aee:	a922      	add	r1, sp, #136	; 0x88
 8044af0:	aa21      	add	r2, sp, #132	; 0x84
 8044af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8044af4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8044af6:	1a88      	subs	r0, r1, r2
 8044af8:	1819      	adds	r1, r3, r0
 8044afa:	2c01      	cmp	r4, #1
 8044afc:	901a      	str	r0, [sp, #104]	; 0x68
 8044afe:	910e      	str	r1, [sp, #56]	; 0x38
 8044b00:	f340 8110 	ble.w	8044d24 <_svfprintf_r+0x1a90>
 8044b04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8044b06:	2300      	movs	r3, #0
 8044b08:	1c62      	adds	r2, r4, #1
 8044b0a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8044b0e:	920e      	str	r2, [sp, #56]	; 0x38
 8044b10:	900b      	str	r0, [sp, #44]	; 0x2c
 8044b12:	9315      	str	r3, [sp, #84]	; 0x54
 8044b14:	e682      	b.n	804481c <_svfprintf_r+0x1588>
 8044b16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8044b18:	428a      	cmp	r2, r1
 8044b1a:	db52      	blt.n	8044bc2 <_svfprintf_r+0x192e>
 8044b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8044b1e:	07cb      	lsls	r3, r1, #31
 8044b20:	f100 80df 	bmi.w	8044ce2 <_svfprintf_r+0x1a4e>
 8044b24:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8044b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8044b2a:	920e      	str	r2, [sp, #56]	; 0x38
 8044b2c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8044b30:	e673      	b.n	804481a <_svfprintf_r+0x1586>
 8044b32:	4b2d      	ldr	r3, [pc, #180]	; (8044be8 <_svfprintf_r+0x1954>)
 8044b34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8044b36:	930a      	str	r3, [sp, #40]	; 0x28
 8044b38:	f7ff b9d4 	b.w	8043ee4 <_svfprintf_r+0xc50>
 8044b3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8044b3e:	2003      	movs	r0, #3
 8044b40:	9000      	str	r0, [sp, #0]
 8044b42:	9701      	str	r7, [sp, #4]
 8044b44:	a91e      	add	r1, sp, #120	; 0x78
 8044b46:	a81f      	add	r0, sp, #124	; 0x7c
 8044b48:	af20      	add	r7, sp, #128	; 0x80
 8044b4a:	462a      	mov	r2, r5
 8044b4c:	4623      	mov	r3, r4
 8044b4e:	9003      	str	r0, [sp, #12]
 8044b50:	9704      	str	r7, [sp, #16]
 8044b52:	9102      	str	r1, [sp, #8]
 8044b54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044b56:	f000 fa83 	bl	8045060 <_dtoa_r>
 8044b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044b5c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8044b60:	1883      	adds	r3, r0, r2
 8044b62:	4607      	mov	r7, r0
 8044b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8044b66:	7839      	ldrb	r1, [r7, #0]
 8044b68:	2930      	cmp	r1, #48	; 0x30
 8044b6a:	f000 80a9 	beq.w	8044cc0 <_svfprintf_r+0x1a2c>
 8044b6e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8044b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8044b72:	1813      	adds	r3, r2, r0
 8044b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8044b76:	e608      	b.n	804478a <_svfprintf_r+0x14f6>
 8044b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044b7c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8044b80:	9012      	str	r0, [sp, #72]	; 0x48
 8044b82:	910b      	str	r1, [sp, #44]	; 0x2c
 8044b84:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8044b88:	9510      	str	r5, [sp, #64]	; 0x40
 8044b8a:	920e      	str	r2, [sp, #56]	; 0x38
 8044b8c:	9015      	str	r0, [sp, #84]	; 0x54
 8044b8e:	f7fe bcb2 	b.w	80434f6 <_svfprintf_r+0x262>
 8044b92:	2200      	movs	r2, #0
 8044b94:	46a2      	mov	sl, r4
 8044b96:	920a      	str	r2, [sp, #40]	; 0x28
 8044b98:	f7fe bbdf 	b.w	804335a <_svfprintf_r+0xc6>
 8044b9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8044b9e:	2f00      	cmp	r7, #0
 8044ba0:	bf08      	it	eq
 8044ba2:	2701      	moveq	r7, #1
 8044ba4:	970a      	str	r7, [sp, #40]	; 0x28
 8044ba6:	e5b1      	b.n	804470c <_svfprintf_r+0x1478>
 8044ba8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044baa:	4659      	mov	r1, fp
 8044bac:	aa25      	add	r2, sp, #148	; 0x94
 8044bae:	f002 fd27 	bl	8047600 <__ssprint_r>
 8044bb2:	2800      	cmp	r0, #0
 8044bb4:	f47e ad31 	bne.w	804361a <_svfprintf_r+0x386>
 8044bb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8044bba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044bbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044bbe:	ae32      	add	r6, sp, #200	; 0xc8
 8044bc0:	e52c      	b.n	804461c <_svfprintf_r+0x1388>
 8044bc2:	2a00      	cmp	r2, #0
 8044bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8044bc6:	bfd4      	ite	le
 8044bc8:	f1c2 0002 	rsble	r0, r2, #2
 8044bcc:	2001      	movgt	r0, #1
 8044bce:	18c0      	adds	r0, r0, r3
 8044bd0:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 8044bd4:	900e      	str	r0, [sp, #56]	; 0x38
 8044bd6:	940b      	str	r4, [sp, #44]	; 0x2c
 8044bd8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8044bdc:	e61d      	b.n	804481a <_svfprintf_r+0x1586>
 8044bde:	4604      	mov	r4, r0
 8044be0:	e702      	b.n	80449e8 <_svfprintf_r+0x1754>
 8044be2:	bf00      	nop
 8044be4:	08048230 	.word	0x08048230
 8044be8:	08048220 	.word	0x08048220
 8044bec:	08048214 	.word	0x08048214
 8044bf0:	222d      	movs	r2, #45	; 0x2d
 8044bf2:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8044bf6:	9212      	str	r2, [sp, #72]	; 0x48
 8044bf8:	e591      	b.n	804471e <_svfprintf_r+0x148a>
 8044bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044bfc:	f103 0c01 	add.w	ip, r3, #1
 8044c00:	e59f      	b.n	8044742 <_svfprintf_r+0x14ae>
 8044c02:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8044c04:	940b      	str	r4, [sp, #44]	; 0x2c
 8044c06:	e5e8      	b.n	80447da <_svfprintf_r+0x1546>
 8044c08:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044c0a:	4659      	mov	r1, fp
 8044c0c:	aa25      	add	r2, sp, #148	; 0x94
 8044c0e:	f002 fcf7 	bl	8047600 <__ssprint_r>
 8044c12:	2800      	cmp	r0, #0
 8044c14:	f47e ad01 	bne.w	804361a <_svfprintf_r+0x386>
 8044c18:	ae32      	add	r6, sp, #200	; 0xc8
 8044c1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044c1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044c1e:	e51a      	b.n	8044656 <_svfprintf_r+0x13c2>
 8044c20:	f246 6567 	movw	r5, #26215	; 0x6667
 8044c24:	f10d 0092 	add.w	r0, sp, #146	; 0x92
 8044c28:	f2c6 6566 	movt	r5, #26214	; 0x6666
 8044c2c:	fb85 2403 	smull	r2, r4, r5, r3
 8044c30:	17da      	asrs	r2, r3, #31
 8044c32:	ebc2 01a4 	rsb	r1, r2, r4, asr #2
 8044c36:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8044c3a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8044c3e:	4602      	mov	r2, r0
 8044c40:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8044c44:	7010      	strb	r0, [r2, #0]
 8044c46:	1e50      	subs	r0, r2, #1
 8044c48:	2909      	cmp	r1, #9
 8044c4a:	460b      	mov	r3, r1
 8044c4c:	dcee      	bgt.n	8044c2c <_svfprintf_r+0x1998>
 8044c4e:	3330      	adds	r3, #48	; 0x30
 8044c50:	f10d 0593 	add.w	r5, sp, #147	; 0x93
 8044c54:	b2d9      	uxtb	r1, r3
 8044c56:	4285      	cmp	r5, r0
 8044c58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8044c5c:	d97b      	bls.n	8044d56 <_svfprintf_r+0x1ac2>
 8044c5e:	1aac      	subs	r4, r5, r2
 8044c60:	07e4      	lsls	r4, r4, #31
 8044c62:	f10d 0085 	add.w	r0, sp, #133	; 0x85
 8044c66:	4613      	mov	r3, r2
 8044c68:	d50d      	bpl.n	8044c86 <_svfprintf_r+0x19f2>
 8044c6a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8044c6e:	4613      	mov	r3, r2
 8044c70:	f10d 0086 	add.w	r0, sp, #134	; 0x86
 8044c74:	f813 1b01 	ldrb.w	r1, [r3], #1
 8044c78:	e005      	b.n	8044c86 <_svfprintf_r+0x19f2>
 8044c7a:	f813 4b01 	ldrb.w	r4, [r3], #1
 8044c7e:	1c48      	adds	r0, r1, #1
 8044c80:	704c      	strb	r4, [r1, #1]
 8044c82:	f813 1b01 	ldrb.w	r1, [r3], #1
 8044c86:	7041      	strb	r1, [r0, #1]
 8044c88:	1c41      	adds	r1, r0, #1
 8044c8a:	42ab      	cmp	r3, r5
 8044c8c:	d1f5      	bne.n	8044c7a <_svfprintf_r+0x19e6>
 8044c8e:	ac42      	add	r4, sp, #264	; 0x108
 8044c90:	ebc2 0144 	rsb	r1, r2, r4, lsl #1
 8044c94:	39f6      	subs	r1, #246	; 0xf6
 8044c96:	e72b      	b.n	8044af0 <_svfprintf_r+0x185c>
 8044c98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8044c9a:	4659      	mov	r1, fp
 8044c9c:	aa25      	add	r2, sp, #148	; 0x94
 8044c9e:	f002 fcaf 	bl	8047600 <__ssprint_r>
 8044ca2:	2800      	cmp	r0, #0
 8044ca4:	f47e acb9 	bne.w	804361a <_svfprintf_r+0x386>
 8044ca8:	ae32      	add	r6, sp, #200	; 0xc8
 8044caa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8044cac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8044cae:	e4e5      	b.n	804467c <_svfprintf_r+0x13e8>
 8044cb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8044cb2:	1c60      	adds	r0, r4, #1
 8044cb4:	1811      	adds	r1, r2, r0
 8044cb6:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8044cba:	910e      	str	r1, [sp, #56]	; 0x38
 8044cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8044cbe:	e5ac      	b.n	804481a <_svfprintf_r+0x1586>
 8044cc0:	4628      	mov	r0, r5
 8044cc2:	4621      	mov	r1, r4
 8044cc4:	2200      	movs	r2, #0
 8044cc6:	2300      	movs	r3, #0
 8044cc8:	f8cd c01c 	str.w	ip, [sp, #28]
 8044ccc:	f7fb fe7c 	bl	80409c8 <__aeabi_dcmpeq>
 8044cd0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8044cd4:	2800      	cmp	r0, #0
 8044cd6:	f47f af4a 	bne.w	8044b6e <_svfprintf_r+0x18da>
 8044cda:	f1cc 0001 	rsb	r0, ip, #1
 8044cde:	901e      	str	r0, [sp, #120]	; 0x78
 8044ce0:	e746      	b.n	8044b70 <_svfprintf_r+0x18dc>
 8044ce2:	1c50      	adds	r0, r2, #1
 8044ce4:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 8044ce8:	900e      	str	r0, [sp, #56]	; 0x38
 8044cea:	940b      	str	r4, [sp, #44]	; 0x2c
 8044cec:	f04f 0867 	mov.w	r8, #103	; 0x67
 8044cf0:	e593      	b.n	804481a <_svfprintf_r+0x1586>
 8044cf2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8044cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8044cf6:	683a      	ldr	r2, [r7, #0]
 8044cf8:	1d1f      	adds	r7, r3, #4
 8044cfa:	2a00      	cmp	r2, #0
 8044cfc:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8044d00:	920a      	str	r2, [sp, #40]	; 0x28
 8044d02:	9710      	str	r7, [sp, #64]	; 0x40
 8044d04:	46a2      	mov	sl, r4
 8044d06:	f6be ab26 	bge.w	8043356 <_svfprintf_r+0xc2>
 8044d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8044d0e:	940a      	str	r4, [sp, #40]	; 0x28
 8044d10:	f7fe bb21 	b.w	8043356 <_svfprintf_r+0xc2>
 8044d14:	b9b4      	cbnz	r4, 8044d44 <_svfprintf_r+0x1ab0>
 8044d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8044d18:	07c1      	lsls	r1, r0, #31
 8044d1a:	d413      	bmi.n	8044d44 <_svfprintf_r+0x1ab0>
 8044d1c:	2101      	movs	r1, #1
 8044d1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8044d20:	910e      	str	r1, [sp, #56]	; 0x38
 8044d22:	e57a      	b.n	804481a <_svfprintf_r+0x1586>
 8044d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8044d26:	f012 0001 	ands.w	r0, r2, #1
 8044d2a:	f47f aeeb 	bne.w	8044b04 <_svfprintf_r+0x1870>
 8044d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8044d30:	9015      	str	r0, [sp, #84]	; 0x54
 8044d32:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8044d36:	910b      	str	r1, [sp, #44]	; 0x2c
 8044d38:	e570      	b.n	804481c <_svfprintf_r+0x1588>
 8044d3a:	212d      	movs	r1, #45	; 0x2d
 8044d3c:	425b      	negs	r3, r3
 8044d3e:	f88d 1085 	strb.w	r1, [sp, #133]	; 0x85
 8044d42:	e6cb      	b.n	8044adc <_svfprintf_r+0x1848>
 8044d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044d46:	1c9c      	adds	r4, r3, #2
 8044d48:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8044d4c:	940e      	str	r4, [sp, #56]	; 0x38
 8044d4e:	900b      	str	r0, [sp, #44]	; 0x2c
 8044d50:	e563      	b.n	804481a <_svfprintf_r+0x1586>
 8044d52:	920b      	str	r2, [sp, #44]	; 0x2c
 8044d54:	e541      	b.n	80447da <_svfprintf_r+0x1546>
 8044d56:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8044d5a:	e6c9      	b.n	8044af0 <_svfprintf_r+0x185c>
 8044d5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8044d5e:	200c      	movs	r0, #12
 8044d60:	6020      	str	r0, [r4, #0]
 8044d62:	f04f 30ff 	mov.w	r0, #4294967295
 8044d66:	f7fe bc63 	b.w	8043630 <_svfprintf_r+0x39c>
 8044d6a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8044d6c:	e6ac      	b.n	8044ac8 <_svfprintf_r+0x1834>
 8044d6e:	bf00      	nop

08044d70 <quorem>:
 8044d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044d74:	6903      	ldr	r3, [r0, #16]
 8044d76:	690c      	ldr	r4, [r1, #16]
 8044d78:	b083      	sub	sp, #12
 8044d7a:	429c      	cmp	r4, r3
 8044d7c:	4606      	mov	r6, r0
 8044d7e:	f300 816b 	bgt.w	8045058 <quorem+0x2e8>
 8044d82:	1ce0      	adds	r0, r4, #3
 8044d84:	0082      	lsls	r2, r0, #2
 8044d86:	188f      	adds	r7, r1, r2
 8044d88:	18b5      	adds	r5, r6, r2
 8044d8a:	687b      	ldr	r3, [r7, #4]
 8044d8c:	6868      	ldr	r0, [r5, #4]
 8044d8e:	1c5a      	adds	r2, r3, #1
 8044d90:	fbb0 f5f2 	udiv	r5, r0, r2
 8044d94:	f101 0314 	add.w	r3, r1, #20
 8044d98:	9301      	str	r3, [sp, #4]
 8044d9a:	3c01      	subs	r4, #1
 8044d9c:	3704      	adds	r7, #4
 8044d9e:	f106 0814 	add.w	r8, r6, #20
 8044da2:	2d00      	cmp	r5, #0
 8044da4:	f000 80bf 	beq.w	8044f26 <quorem+0x1b6>
 8044da8:	694b      	ldr	r3, [r1, #20]
 8044daa:	f8d8 2000 	ldr.w	r2, [r8]
 8044dae:	b298      	uxth	r0, r3
 8044db0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8044db4:	fb05 f000 	mul.w	r0, r5, r0
 8044db8:	fb05 f30c 	mul.w	r3, r5, ip
 8044dbc:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
 8044dc0:	fa1f fe8c 	uxth.w	lr, ip
 8044dc4:	b293      	uxth	r3, r2
 8044dc6:	b280      	uxth	r0, r0
 8044dc8:	1a1b      	subs	r3, r3, r0
 8044dca:	ebce 4212 	rsb	r2, lr, r2, lsr #16
 8044dce:	9801      	ldr	r0, [sp, #4]
 8044dd0:	eb02 4e23 	add.w	lr, r2, r3, asr #16
 8044dd4:	fa1f f983 	uxth.w	r9, r3
 8044dd8:	f101 0218 	add.w	r2, r1, #24
 8044ddc:	ea49 490e 	orr.w	r9, r9, lr, lsl #16
 8044de0:	1a38      	subs	r0, r7, r0
 8044de2:	f106 0318 	add.w	r3, r6, #24
 8044de6:	4297      	cmp	r7, r2
 8044de8:	f843 9c04 	str.w	r9, [r3, #-4]
 8044dec:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8044df0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8044df4:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 8044df8:	d372      	bcc.n	8044ee0 <quorem+0x170>
 8044dfa:	b328      	cbz	r0, 8044e48 <quorem+0xd8>
 8044dfc:	6810      	ldr	r0, [r2, #0]
 8044dfe:	681b      	ldr	r3, [r3, #0]
 8044e00:	b282      	uxth	r2, r0
 8044e02:	0c00      	lsrs	r0, r0, #16
 8044e04:	fb05 c202 	mla	r2, r5, r2, ip
 8044e08:	fb05 f000 	mul.w	r0, r5, r0
 8044e0c:	fa1f fc83 	uxth.w	ip, r3
 8044e10:	eb00 4012 	add.w	r0, r0, r2, lsr #16
 8044e14:	44f4      	add	ip, lr
 8044e16:	b292      	uxth	r2, r2
 8044e18:	fa1f fe80 	uxth.w	lr, r0
 8044e1c:	ebc2 0c0c 	rsb	ip, r2, ip
 8044e20:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 8044e24:	eb03 4e2c 	add.w	lr, r3, ip, asr #16
 8044e28:	fa1f f28c 	uxth.w	r2, ip
 8044e2c:	ea42 4c0e 	orr.w	ip, r2, lr, lsl #16
 8044e30:	f101 021c 	add.w	r2, r1, #28
 8044e34:	f106 031c 	add.w	r3, r6, #28
 8044e38:	4297      	cmp	r7, r2
 8044e3a:	f843 cc04 	str.w	ip, [r3, #-4]
 8044e3e:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 8044e42:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8044e46:	d34b      	bcc.n	8044ee0 <quorem+0x170>
 8044e48:	4610      	mov	r0, r2
 8044e4a:	f850 bb04 	ldr.w	fp, [r0], #4
 8044e4e:	f8d3 9000 	ldr.w	r9, [r3]
 8044e52:	fa1f fa8b 	uxth.w	sl, fp
 8044e56:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8044e5a:	fb05 cc0a 	mla	ip, r5, sl, ip
 8044e5e:	fb05 fb0b 	mul.w	fp, r5, fp
 8044e62:	fa1f fa89 	uxth.w	sl, r9
 8044e66:	eb0b 4b1c 	add.w	fp, fp, ip, lsr #16
 8044e6a:	44d6      	add	lr, sl
 8044e6c:	fa1f fc8c 	uxth.w	ip, ip
 8044e70:	fa1f fa8b 	uxth.w	sl, fp
 8044e74:	ebcc 0e0e 	rsb	lr, ip, lr
 8044e78:	ebca 4919 	rsb	r9, sl, r9, lsr #16
 8044e7c:	eb09 4a2e 	add.w	sl, r9, lr, asr #16
 8044e80:	fa1f fc8e 	uxth.w	ip, lr
 8044e84:	4699      	mov	r9, r3
 8044e86:	ea4c 4e0a 	orr.w	lr, ip, sl, lsl #16
 8044e8a:	f849 eb04 	str.w	lr, [r9], #4
 8044e8e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8044e92:	685a      	ldr	r2, [r3, #4]
 8044e94:	fa1f f38c 	uxth.w	r3, ip
 8044e98:	fb05 fe03 	mul.w	lr, r5, r3
 8044e9c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8044ea0:	fb05 f30c 	mul.w	r3, r5, ip
 8044ea4:	eb0e 4b1b 	add.w	fp, lr, fp, lsr #16
 8044ea8:	eb03 4c1b 	add.w	ip, r3, fp, lsr #16
 8044eac:	b293      	uxth	r3, r2
 8044eae:	fa1f fe8c 	uxth.w	lr, ip
 8044eb2:	eb03 432a 	add.w	r3, r3, sl, asr #16
 8044eb6:	fa1f fb8b 	uxth.w	fp, fp
 8044eba:	ebcb 0303 	rsb	r3, fp, r3
 8044ebe:	ebce 4212 	rsb	r2, lr, r2, lsr #16
 8044ec2:	eb02 4e23 	add.w	lr, r2, r3, asr #16
 8044ec6:	b29a      	uxth	r2, r3
 8044ec8:	464b      	mov	r3, r9
 8044eca:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 8044ece:	1d02      	adds	r2, r0, #4
 8044ed0:	4297      	cmp	r7, r2
 8044ed2:	f843 9b04 	str.w	r9, [r3], #4
 8044ed6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8044eda:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 8044ede:	d2b3      	bcs.n	8044e48 <quorem+0xd8>
 8044ee0:	1d20      	adds	r0, r4, #4
 8044ee2:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 8044ee6:	685a      	ldr	r2, [r3, #4]
 8044ee8:	b9ea      	cbnz	r2, 8044f26 <quorem+0x1b6>
 8044eea:	1d18      	adds	r0, r3, #4
 8044eec:	4598      	cmp	r8, r3
 8044eee:	d219      	bcs.n	8044f24 <quorem+0x1b4>
 8044ef0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8044ef4:	b9b2      	cbnz	r2, 8044f24 <quorem+0x1b4>
 8044ef6:	3b04      	subs	r3, #4
 8044ef8:	ebc8 0003 	rsb	r0, r8, r3
 8044efc:	1cc2      	adds	r2, r0, #3
 8044efe:	0750      	lsls	r0, r2, #29
 8044f00:	d50d      	bpl.n	8044f1e <quorem+0x1ae>
 8044f02:	3c01      	subs	r4, #1
 8044f04:	4598      	cmp	r8, r3
 8044f06:	d20d      	bcs.n	8044f24 <quorem+0x1b4>
 8044f08:	681a      	ldr	r2, [r3, #0]
 8044f0a:	3b04      	subs	r3, #4
 8044f0c:	b13a      	cbz	r2, 8044f1e <quorem+0x1ae>
 8044f0e:	e009      	b.n	8044f24 <quorem+0x1b4>
 8044f10:	6818      	ldr	r0, [r3, #0]
 8044f12:	3b04      	subs	r3, #4
 8044f14:	b930      	cbnz	r0, 8044f24 <quorem+0x1b4>
 8044f16:	681a      	ldr	r2, [r3, #0]
 8044f18:	3c01      	subs	r4, #1
 8044f1a:	3b04      	subs	r3, #4
 8044f1c:	b912      	cbnz	r2, 8044f24 <quorem+0x1b4>
 8044f1e:	3c01      	subs	r4, #1
 8044f20:	4598      	cmp	r8, r3
 8044f22:	d3f5      	bcc.n	8044f10 <quorem+0x1a0>
 8044f24:	6134      	str	r4, [r6, #16]
 8044f26:	4630      	mov	r0, r6
 8044f28:	f002 f95a 	bl	80471e0 <__mcmp>
 8044f2c:	2800      	cmp	r0, #0
 8044f2e:	f2c0 8082 	blt.w	8045036 <quorem+0x2c6>
 8044f32:	9a01      	ldr	r2, [sp, #4]
 8044f34:	f8d8 1000 	ldr.w	r1, [r8]
 8044f38:	f852 0b04 	ldr.w	r0, [r2], #4
 8044f3c:	fa1f fc81 	uxth.w	ip, r1
 8044f40:	b283      	uxth	r3, r0
 8044f42:	0c00      	lsrs	r0, r0, #16
 8044f44:	ebc3 030c 	rsb	r3, r3, ip
 8044f48:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 8044f4c:	eb01 4023 	add.w	r0, r1, r3, asr #16
 8044f50:	fa1f fe83 	uxth.w	lr, r3
 8044f54:	9b01      	ldr	r3, [sp, #4]
 8044f56:	ea4e 4c00 	orr.w	ip, lr, r0, lsl #16
 8044f5a:	1af9      	subs	r1, r7, r3
 8044f5c:	3501      	adds	r5, #1
 8044f5e:	4643      	mov	r3, r8
 8044f60:	1400      	asrs	r0, r0, #16
 8044f62:	4297      	cmp	r7, r2
 8044f64:	f843 cb04 	str.w	ip, [r3], #4
 8044f68:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8044f6c:	d34b      	bcc.n	8045006 <quorem+0x296>
 8044f6e:	b1b9      	cbz	r1, 8044fa0 <quorem+0x230>
 8044f70:	f852 eb04 	ldr.w	lr, [r2], #4
 8044f74:	6819      	ldr	r1, [r3, #0]
 8044f76:	fa1f f98e 	uxth.w	r9, lr
 8044f7a:	fa1f fa81 	uxth.w	sl, r1
 8044f7e:	ebc9 090a 	rsb	r9, r9, sl
 8044f82:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 8044f86:	4448      	add	r0, r9
 8044f88:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 8044f8c:	eb01 4120 	add.w	r1, r1, r0, asr #16
 8044f90:	b280      	uxth	r0, r0
 8044f92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8044f96:	f843 0b04 	str.w	r0, [r3], #4
 8044f9a:	1408      	asrs	r0, r1, #16
 8044f9c:	4297      	cmp	r7, r2
 8044f9e:	d332      	bcc.n	8045006 <quorem+0x296>
 8044fa0:	4682      	mov	sl, r0
 8044fa2:	4611      	mov	r1, r2
 8044fa4:	f851 0b04 	ldr.w	r0, [r1], #4
 8044fa8:	f8d3 e000 	ldr.w	lr, [r3]
 8044fac:	fa1f f980 	uxth.w	r9, r0
 8044fb0:	fa1f fb8e 	uxth.w	fp, lr
 8044fb4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8044fb8:	ebc9 0b0b 	rsb	fp, r9, fp
 8044fbc:	eb0b 000a 	add.w	r0, fp, sl
 8044fc0:	ebcc 4a1e 	rsb	sl, ip, lr, lsr #16
 8044fc4:	eb0a 4920 	add.w	r9, sl, r0, asr #16
 8044fc8:	b280      	uxth	r0, r0
 8044fca:	469e      	mov	lr, r3
 8044fcc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8044fd0:	f84e 0b04 	str.w	r0, [lr], #4
 8044fd4:	6850      	ldr	r0, [r2, #4]
 8044fd6:	685a      	ldr	r2, [r3, #4]
 8044fd8:	b283      	uxth	r3, r0
 8044fda:	fa1f fc82 	uxth.w	ip, r2
 8044fde:	0c00      	lsrs	r0, r0, #16
 8044fe0:	ebc3 030c 	rsb	r3, r3, ip
 8044fe4:	eb03 4329 	add.w	r3, r3, r9, asr #16
 8044fe8:	ebc0 4212 	rsb	r2, r0, r2, lsr #16
 8044fec:	eb02 4023 	add.w	r0, r2, r3, asr #16
 8044ff0:	b29a      	uxth	r2, r3
 8044ff2:	ea42 4a00 	orr.w	sl, r2, r0, lsl #16
 8044ff6:	1d0a      	adds	r2, r1, #4
 8044ff8:	4673      	mov	r3, lr
 8044ffa:	4297      	cmp	r7, r2
 8044ffc:	f843 ab04 	str.w	sl, [r3], #4
 8045000:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8045004:	d2cd      	bcs.n	8044fa2 <quorem+0x232>
 8045006:	1d21      	adds	r1, r4, #4
 8045008:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 804500c:	6858      	ldr	r0, [r3, #4]
 804500e:	b990      	cbnz	r0, 8045036 <quorem+0x2c6>
 8045010:	1d1a      	adds	r2, r3, #4
 8045012:	4598      	cmp	r8, r3
 8045014:	d20e      	bcs.n	8045034 <quorem+0x2c4>
 8045016:	f852 1c04 	ldr.w	r1, [r2, #-4]
 804501a:	b959      	cbnz	r1, 8045034 <quorem+0x2c4>
 804501c:	3b04      	subs	r3, #4
 804501e:	ebc8 0003 	rsb	r0, r8, r3
 8045022:	1cc2      	adds	r2, r0, #3
 8045024:	0752      	lsls	r2, r2, #29
 8045026:	d513      	bpl.n	8045050 <quorem+0x2e0>
 8045028:	3c01      	subs	r4, #1
 804502a:	4598      	cmp	r8, r3
 804502c:	d202      	bcs.n	8045034 <quorem+0x2c4>
 804502e:	6818      	ldr	r0, [r3, #0]
 8045030:	3b04      	subs	r3, #4
 8045032:	b168      	cbz	r0, 8045050 <quorem+0x2e0>
 8045034:	6134      	str	r4, [r6, #16]
 8045036:	4628      	mov	r0, r5
 8045038:	b003      	add	sp, #12
 804503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804503e:	681a      	ldr	r2, [r3, #0]
 8045040:	3b04      	subs	r3, #4
 8045042:	2a00      	cmp	r2, #0
 8045044:	d1f6      	bne.n	8045034 <quorem+0x2c4>
 8045046:	6819      	ldr	r1, [r3, #0]
 8045048:	3c01      	subs	r4, #1
 804504a:	3b04      	subs	r3, #4
 804504c:	2900      	cmp	r1, #0
 804504e:	d1f1      	bne.n	8045034 <quorem+0x2c4>
 8045050:	3c01      	subs	r4, #1
 8045052:	4598      	cmp	r8, r3
 8045054:	d3f3      	bcc.n	804503e <quorem+0x2ce>
 8045056:	e7ed      	b.n	8045034 <quorem+0x2c4>
 8045058:	2000      	movs	r0, #0
 804505a:	e7ed      	b.n	8045038 <quorem+0x2c8>
 804505c:	0000      	movs	r0, r0
 804505e:	0000      	movs	r0, r0

08045060 <_dtoa_r>:
 8045060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045064:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8045066:	b09f      	sub	sp, #124	; 0x7c
 8045068:	4681      	mov	r9, r0
 804506a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 804506c:	4692      	mov	sl, r2
 804506e:	469b      	mov	fp, r3
 8045070:	b151      	cbz	r1, 8045088 <_dtoa_r+0x28>
 8045072:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8045074:	2201      	movs	r2, #1
 8045076:	fa02 f203 	lsl.w	r2, r2, r3
 804507a:	604b      	str	r3, [r1, #4]
 804507c:	608a      	str	r2, [r1, #8]
 804507e:	f001 fd69 	bl	8046b54 <_Bfree>
 8045082:	2000      	movs	r0, #0
 8045084:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8045088:	f1bb 0800 	subs.w	r8, fp, #0
 804508c:	db39      	blt.n	8045102 <_dtoa_r+0xa2>
 804508e:	2100      	movs	r1, #0
 8045090:	6021      	str	r1, [r4, #0]
 8045092:	2400      	movs	r4, #0
 8045094:	4622      	mov	r2, r4
 8045096:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 804509a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 804509e:	ea08 0304 	and.w	r3, r8, r4
 80450a2:	4293      	cmp	r3, r2
 80450a4:	d016      	beq.n	80450d4 <_dtoa_r+0x74>
 80450a6:	4650      	mov	r0, sl
 80450a8:	4659      	mov	r1, fp
 80450aa:	2200      	movs	r2, #0
 80450ac:	2300      	movs	r3, #0
 80450ae:	f7fb fc8b 	bl	80409c8 <__aeabi_dcmpeq>
 80450b2:	2800      	cmp	r0, #0
 80450b4:	d02b      	beq.n	804510e <_dtoa_r+0xae>
 80450b6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80450b8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80450ba:	2101      	movs	r1, #1
 80450bc:	6029      	str	r1, [r5, #0]
 80450be:	2c00      	cmp	r4, #0
 80450c0:	f000 80cf 	beq.w	8045262 <_dtoa_r+0x202>
 80450c4:	4aa2      	ldr	r2, [pc, #648]	; (8045350 <_dtoa_r+0x2f0>)
 80450c6:	6022      	str	r2, [r4, #0]
 80450c8:	f102 38ff 	add.w	r8, r2, #4294967295
 80450cc:	4640      	mov	r0, r8
 80450ce:	b01f      	add	sp, #124	; 0x7c
 80450d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80450d4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80450d6:	f242 750f 	movw	r5, #9999	; 0x270f
 80450da:	6025      	str	r5, [r4, #0]
 80450dc:	f1ba 0f00 	cmp.w	sl, #0
 80450e0:	f000 80a6 	beq.w	8045230 <_dtoa_r+0x1d0>
 80450e4:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8045358 <_dtoa_r+0x2f8>
 80450e8:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 80450ea:	2d00      	cmp	r5, #0
 80450ec:	d0ee      	beq.n	80450cc <_dtoa_r+0x6c>
 80450ee:	f898 4003 	ldrb.w	r4, [r8, #3]
 80450f2:	2c00      	cmp	r4, #0
 80450f4:	f000 8208 	beq.w	8045508 <_dtoa_r+0x4a8>
 80450f8:	f108 0108 	add.w	r1, r8, #8
 80450fc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80450fe:	6021      	str	r1, [r4, #0]
 8045100:	e7e4      	b.n	80450cc <_dtoa_r+0x6c>
 8045102:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 8045106:	2501      	movs	r5, #1
 8045108:	6025      	str	r5, [r4, #0]
 804510a:	46c3      	mov	fp, r8
 804510c:	e7c1      	b.n	8045092 <_dtoa_r+0x32>
 804510e:	ae1d      	add	r6, sp, #116	; 0x74
 8045110:	af1c      	add	r7, sp, #112	; 0x70
 8045112:	4652      	mov	r2, sl
 8045114:	9600      	str	r6, [sp, #0]
 8045116:	9701      	str	r7, [sp, #4]
 8045118:	4648      	mov	r0, r9
 804511a:	465b      	mov	r3, fp
 804511c:	f002 f99a 	bl	8047454 <__d2b>
 8045120:	f3c8 520a 	ubfx	r2, r8, #20, #11
 8045124:	900b      	str	r0, [sp, #44]	; 0x2c
 8045126:	2a00      	cmp	r2, #0
 8045128:	f040 808c 	bne.w	8045244 <_dtoa_r+0x1e4>
 804512c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 804512e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8045130:	f46f 6182 	mvn.w	r1, #1040	; 0x410
 8045134:	183e      	adds	r6, r7, r0
 8045136:	428e      	cmp	r6, r1
 8045138:	f2c0 8318 	blt.w	804576c <_dtoa_r+0x70c>
 804513c:	f64f 450e 	movw	r5, #64526	; 0xfc0e
 8045140:	f6cf 75ff 	movt	r5, #65535	; 0xffff
 8045144:	1ba8      	subs	r0, r5, r6
 8045146:	f206 4212 	addw	r2, r6, #1042	; 0x412
 804514a:	fa08 f100 	lsl.w	r1, r8, r0
 804514e:	fa2a f302 	lsr.w	r3, sl, r2
 8045152:	ea41 0003 	orr.w	r0, r1, r3
 8045156:	f7fb f959 	bl	804040c <__aeabi_ui2d>
 804515a:	2401      	movs	r4, #1
 804515c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8045160:	3e01      	subs	r6, #1
 8045162:	940c      	str	r4, [sp, #48]	; 0x30
 8045164:	2300      	movs	r3, #0
 8045166:	2200      	movs	r2, #0
 8045168:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 804516c:	f7fb f810 	bl	8040190 <__aeabi_dsub>
 8045170:	a371      	add	r3, pc, #452	; (adr r3, 8045338 <_dtoa_r+0x2d8>)
 8045172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045176:	f7fb f9bf 	bl	80404f8 <__aeabi_dmul>
 804517a:	a371      	add	r3, pc, #452	; (adr r3, 8045340 <_dtoa_r+0x2e0>)
 804517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045180:	f7fb f808 	bl	8040194 <__adddf3>
 8045184:	4604      	mov	r4, r0
 8045186:	4630      	mov	r0, r6
 8045188:	460d      	mov	r5, r1
 804518a:	f7fb f94f 	bl	804042c <__aeabi_i2d>
 804518e:	a36e      	add	r3, pc, #440	; (adr r3, 8045348 <_dtoa_r+0x2e8>)
 8045190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045194:	f7fb f9b0 	bl	80404f8 <__aeabi_dmul>
 8045198:	4602      	mov	r2, r0
 804519a:	460b      	mov	r3, r1
 804519c:	4620      	mov	r0, r4
 804519e:	4629      	mov	r1, r5
 80451a0:	f7fa fff8 	bl	8040194 <__adddf3>
 80451a4:	4604      	mov	r4, r0
 80451a6:	460d      	mov	r5, r1
 80451a8:	f7fb fc40 	bl	8040a2c <__aeabi_d2iz>
 80451ac:	4629      	mov	r1, r5
 80451ae:	9007      	str	r0, [sp, #28]
 80451b0:	2200      	movs	r2, #0
 80451b2:	4620      	mov	r0, r4
 80451b4:	2300      	movs	r3, #0
 80451b6:	f7fb fc11 	bl	80409dc <__aeabi_dcmplt>
 80451ba:	2800      	cmp	r0, #0
 80451bc:	f040 82ac 	bne.w	8045718 <_dtoa_r+0x6b8>
 80451c0:	9c07      	ldr	r4, [sp, #28]
 80451c2:	2c16      	cmp	r4, #22
 80451c4:	f200 82a5 	bhi.w	8045712 <_dtoa_r+0x6b2>
 80451c8:	4d62      	ldr	r5, [pc, #392]	; (8045354 <_dtoa_r+0x2f4>)
 80451ca:	4652      	mov	r2, sl
 80451cc:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 80451d0:	465b      	mov	r3, fp
 80451d2:	c803      	ldmia	r0, {r0, r1}
 80451d4:	f7fb fc20 	bl	8040a18 <__aeabi_dcmpgt>
 80451d8:	2800      	cmp	r0, #0
 80451da:	f000 82cf 	beq.w	804577c <_dtoa_r+0x71c>
 80451de:	9a07      	ldr	r2, [sp, #28]
 80451e0:	2400      	movs	r4, #0
 80451e2:	1e51      	subs	r1, r2, #1
 80451e4:	9107      	str	r1, [sp, #28]
 80451e6:	9410      	str	r4, [sp, #64]	; 0x40
 80451e8:	1bbe      	subs	r6, r7, r6
 80451ea:	3e01      	subs	r6, #1
 80451ec:	f100 82ab 	bmi.w	8045746 <_dtoa_r+0x6e6>
 80451f0:	2500      	movs	r5, #0
 80451f2:	9608      	str	r6, [sp, #32]
 80451f4:	950a      	str	r5, [sp, #40]	; 0x28
 80451f6:	9807      	ldr	r0, [sp, #28]
 80451f8:	2800      	cmp	r0, #0
 80451fa:	f2c0 829b 	blt.w	8045734 <_dtoa_r+0x6d4>
 80451fe:	9a08      	ldr	r2, [sp, #32]
 8045200:	900f      	str	r0, [sp, #60]	; 0x3c
 8045202:	1811      	adds	r1, r2, r0
 8045204:	2000      	movs	r0, #0
 8045206:	9108      	str	r1, [sp, #32]
 8045208:	900e      	str	r0, [sp, #56]	; 0x38
 804520a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 804520c:	2c09      	cmp	r4, #9
 804520e:	d82b      	bhi.n	8045268 <_dtoa_r+0x208>
 8045210:	2c05      	cmp	r4, #5
 8045212:	f341 801e 	ble.w	8046252 <_dtoa_r+0x11f2>
 8045216:	1f23      	subs	r3, r4, #4
 8045218:	9328      	str	r3, [sp, #160]	; 0xa0
 804521a:	2500      	movs	r5, #0
 804521c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 804521e:	1e91      	subs	r1, r2, #2
 8045220:	2903      	cmp	r1, #3
 8045222:	d823      	bhi.n	804526c <_dtoa_r+0x20c>
 8045224:	e8df f011 	tbh	[pc, r1, lsl #1]
 8045228:	05130525 	.word	0x05130525
 804522c:	0522032b 	.word	0x0522032b
 8045230:	4b49      	ldr	r3, [pc, #292]	; (8045358 <_dtoa_r+0x2f8>)
 8045232:	484a      	ldr	r0, [pc, #296]	; (804535c <_dtoa_r+0x2fc>)
 8045234:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8045238:	f1b8 0f00 	cmp.w	r8, #0
 804523c:	bf0c      	ite	eq
 804523e:	4680      	moveq	r8, r0
 8045240:	4698      	movne	r8, r3
 8045242:	e751      	b.n	80450e8 <_dtoa_r+0x88>
 8045244:	f02b 477f 	bic.w	r7, fp, #4278190080	; 0xff000000
 8045248:	f427 0470 	bic.w	r4, r7, #15728640	; 0xf00000
 804524c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8045250:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8045254:	2200      	movs	r2, #0
 8045256:	4650      	mov	r0, sl
 8045258:	f445 1140 	orr.w	r1, r5, #3145728	; 0x300000
 804525c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 804525e:	920c      	str	r2, [sp, #48]	; 0x30
 8045260:	e780      	b.n	8045164 <_dtoa_r+0x104>
 8045262:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8045360 <_dtoa_r+0x300>
 8045266:	e731      	b.n	80450cc <_dtoa_r+0x6c>
 8045268:	2500      	movs	r5, #0
 804526a:	9528      	str	r5, [sp, #160]	; 0xa0
 804526c:	2400      	movs	r4, #0
 804526e:	4621      	mov	r1, r4
 8045270:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8045274:	4648      	mov	r0, r9
 8045276:	f001 fc47 	bl	8046b08 <_Balloc>
 804527a:	f04f 33ff 	mov.w	r3, #4294967295
 804527e:	2101      	movs	r1, #1
 8045280:	4680      	mov	r8, r0
 8045282:	9309      	str	r3, [sp, #36]	; 0x24
 8045284:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8045288:	9311      	str	r3, [sp, #68]	; 0x44
 804528a:	9429      	str	r4, [sp, #164]	; 0xa4
 804528c:	910d      	str	r1, [sp, #52]	; 0x34
 804528e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8045290:	2800      	cmp	r0, #0
 8045292:	f2c0 813c 	blt.w	804550e <_dtoa_r+0x4ae>
 8045296:	9a07      	ldr	r2, [sp, #28]
 8045298:	2a0e      	cmp	r2, #14
 804529a:	f300 8138 	bgt.w	804550e <_dtoa_r+0x4ae>
 804529e:	4d2d      	ldr	r5, [pc, #180]	; (8045354 <_dtoa_r+0x2f4>)
 80452a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80452a2:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 80452a6:	2b00      	cmp	r3, #0
 80452a8:	e9d0 4500 	ldrd	r4, r5, [r0]
 80452ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80452b0:	f2c0 84e2 	blt.w	8045c78 <_dtoa_r+0xc18>
 80452b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80452b8:	4650      	mov	r0, sl
 80452ba:	4659      	mov	r1, fp
 80452bc:	f7fb fa46 	bl	804074c <__aeabi_ddiv>
 80452c0:	f7fb fbb4 	bl	8040a2c <__aeabi_d2iz>
 80452c4:	4606      	mov	r6, r0
 80452c6:	f7fb f8b1 	bl	804042c <__aeabi_i2d>
 80452ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80452ce:	f7fb f913 	bl	80404f8 <__aeabi_dmul>
 80452d2:	4602      	mov	r2, r0
 80452d4:	460b      	mov	r3, r1
 80452d6:	4650      	mov	r0, sl
 80452d8:	4659      	mov	r1, fp
 80452da:	f7fa ff59 	bl	8040190 <__aeabi_dsub>
 80452de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80452e0:	f106 0230 	add.w	r2, r6, #48	; 0x30
 80452e4:	46c2      	mov	sl, r8
 80452e6:	2b01      	cmp	r3, #1
 80452e8:	4604      	mov	r4, r0
 80452ea:	460d      	mov	r5, r1
 80452ec:	f80a 2b01 	strb.w	r2, [sl], #1
 80452f0:	f000 8095 	beq.w	804541e <_dtoa_r+0x3be>
 80452f4:	2300      	movs	r3, #0
 80452f6:	2200      	movs	r2, #0
 80452f8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80452fc:	f7fb f8fc 	bl	80404f8 <__aeabi_dmul>
 8045300:	2200      	movs	r2, #0
 8045302:	2300      	movs	r3, #0
 8045304:	4604      	mov	r4, r0
 8045306:	460d      	mov	r5, r1
 8045308:	f7fb fb5e 	bl	80409c8 <__aeabi_dcmpeq>
 804530c:	2800      	cmp	r0, #0
 804530e:	f040 80be 	bne.w	804548e <_dtoa_r+0x42e>
 8045312:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8045314:	f108 0702 	add.w	r7, r8, #2
 8045318:	eb08 0b06 	add.w	fp, r8, r6
 804531c:	ebc7 000b 	rsb	r0, r7, fp
 8045320:	07c2      	lsls	r2, r0, #31
 8045322:	f100 80c6 	bmi.w	80454b2 <_dtoa_r+0x452>
 8045326:	f8cd 8018 	str.w	r8, [sp, #24]
 804532a:	f8cd 9020 	str.w	r9, [sp, #32]
 804532e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8045332:	e04c      	b.n	80453ce <_dtoa_r+0x36e>
 8045334:	f3af 8000 	nop.w
 8045338:	636f4361 	.word	0x636f4361
 804533c:	3fd287a7 	.word	0x3fd287a7
 8045340:	8b60c8b3 	.word	0x8b60c8b3
 8045344:	3fc68a28 	.word	0x3fc68a28
 8045348:	509f79fb 	.word	0x509f79fb
 804534c:	3fd34413 	.word	0x3fd34413
 8045350:	0804821d 	.word	0x0804821d
 8045354:	08048270 	.word	0x08048270
 8045358:	0804824c 	.word	0x0804824c
 804535c:	08048240 	.word	0x08048240
 8045360:	0804821c 	.word	0x0804821c
 8045364:	f7fb f8c8 	bl	80404f8 <__aeabi_dmul>
 8045368:	2200      	movs	r2, #0
 804536a:	2300      	movs	r3, #0
 804536c:	4604      	mov	r4, r0
 804536e:	460d      	mov	r5, r1
 8045370:	f7fb fb2a 	bl	80409c8 <__aeabi_dcmpeq>
 8045374:	4642      	mov	r2, r8
 8045376:	464b      	mov	r3, r9
 8045378:	2800      	cmp	r0, #0
 804537a:	f040 8575 	bne.w	8045e68 <_dtoa_r+0xe08>
 804537e:	4620      	mov	r0, r4
 8045380:	4629      	mov	r1, r5
 8045382:	f7fb f9e3 	bl	804074c <__aeabi_ddiv>
 8045386:	f7fb fb51 	bl	8040a2c <__aeabi_d2iz>
 804538a:	4606      	mov	r6, r0
 804538c:	f7fb f84e 	bl	804042c <__aeabi_i2d>
 8045390:	4642      	mov	r2, r8
 8045392:	464b      	mov	r3, r9
 8045394:	f7fb f8b0 	bl	80404f8 <__aeabi_dmul>
 8045398:	4602      	mov	r2, r0
 804539a:	460b      	mov	r3, r1
 804539c:	4620      	mov	r0, r4
 804539e:	4629      	mov	r1, r5
 80453a0:	f7fa fef6 	bl	8040190 <__aeabi_dsub>
 80453a4:	3630      	adds	r6, #48	; 0x30
 80453a6:	2300      	movs	r3, #0
 80453a8:	2200      	movs	r2, #0
 80453aa:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80453ae:	f807 6c01 	strb.w	r6, [r7, #-1]
 80453b2:	f7fb f8a1 	bl	80404f8 <__aeabi_dmul>
 80453b6:	2200      	movs	r2, #0
 80453b8:	2300      	movs	r3, #0
 80453ba:	46ba      	mov	sl, r7
 80453bc:	4604      	mov	r4, r0
 80453be:	460d      	mov	r5, r1
 80453c0:	f107 0701 	add.w	r7, r7, #1
 80453c4:	f7fb fb00 	bl	80409c8 <__aeabi_dcmpeq>
 80453c8:	2800      	cmp	r0, #0
 80453ca:	f040 854d 	bne.w	8045e68 <_dtoa_r+0xe08>
 80453ce:	4642      	mov	r2, r8
 80453d0:	464b      	mov	r3, r9
 80453d2:	4620      	mov	r0, r4
 80453d4:	4629      	mov	r1, r5
 80453d6:	f7fb f9b9 	bl	804074c <__aeabi_ddiv>
 80453da:	f7fb fb27 	bl	8040a2c <__aeabi_d2iz>
 80453de:	4606      	mov	r6, r0
 80453e0:	f7fb f824 	bl	804042c <__aeabi_i2d>
 80453e4:	4642      	mov	r2, r8
 80453e6:	464b      	mov	r3, r9
 80453e8:	f7fb f886 	bl	80404f8 <__aeabi_dmul>
 80453ec:	4602      	mov	r2, r0
 80453ee:	460b      	mov	r3, r1
 80453f0:	4620      	mov	r0, r4
 80453f2:	4629      	mov	r1, r5
 80453f4:	f7fa fecc 	bl	8040190 <__aeabi_dsub>
 80453f8:	2300      	movs	r3, #0
 80453fa:	2200      	movs	r2, #0
 80453fc:	f106 0c30 	add.w	ip, r6, #48	; 0x30
 8045400:	455f      	cmp	r7, fp
 8045402:	f807 cc01 	strb.w	ip, [r7, #-1]
 8045406:	46ba      	mov	sl, r7
 8045408:	4604      	mov	r4, r0
 804540a:	460d      	mov	r5, r1
 804540c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045410:	f107 0701 	add.w	r7, r7, #1
 8045414:	d1a6      	bne.n	8045364 <_dtoa_r+0x304>
 8045416:	f8dd 8018 	ldr.w	r8, [sp, #24]
 804541a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 804541e:	4622      	mov	r2, r4
 8045420:	462b      	mov	r3, r5
 8045422:	4620      	mov	r0, r4
 8045424:	4629      	mov	r1, r5
 8045426:	f7fa feb5 	bl	8040194 <__adddf3>
 804542a:	4604      	mov	r4, r0
 804542c:	460d      	mov	r5, r1
 804542e:	4622      	mov	r2, r4
 8045430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8045434:	462b      	mov	r3, r5
 8045436:	f7fb fad1 	bl	80409dc <__aeabi_dcmplt>
 804543a:	b940      	cbnz	r0, 804544e <_dtoa_r+0x3ee>
 804543c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8045440:	4622      	mov	r2, r4
 8045442:	462b      	mov	r3, r5
 8045444:	f7fb fac0 	bl	80409c8 <__aeabi_dcmpeq>
 8045448:	b308      	cbz	r0, 804548e <_dtoa_r+0x42e>
 804544a:	07f0      	lsls	r0, r6, #31
 804544c:	d51f      	bpl.n	804548e <_dtoa_r+0x42e>
 804544e:	f81a 7c01 	ldrb.w	r7, [sl, #-1]
 8045452:	ea6f 0108 	mvn.w	r1, r8
 8045456:	eb0a 0201 	add.w	r2, sl, r1
 804545a:	07d1      	lsls	r1, r2, #31
 804545c:	d506      	bpl.n	804546c <_dtoa_r+0x40c>
 804545e:	2f39      	cmp	r7, #57	; 0x39
 8045460:	f10a 33ff 	add.w	r3, sl, #4294967295
 8045464:	d110      	bne.n	8045488 <_dtoa_r+0x428>
 8045466:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 804546a:	469a      	mov	sl, r3
 804546c:	2f39      	cmp	r7, #57	; 0x39
 804546e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8045472:	d109      	bne.n	8045488 <_dtoa_r+0x428>
 8045474:	4598      	cmp	r8, r3
 8045476:	f000 8505 	beq.w	8045e84 <_dtoa_r+0xe24>
 804547a:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 804547e:	469a      	mov	sl, r3
 8045480:	2f39      	cmp	r7, #57	; 0x39
 8045482:	f103 33ff 	add.w	r3, r3, #4294967295
 8045486:	d0ee      	beq.n	8045466 <_dtoa_r+0x406>
 8045488:	1c78      	adds	r0, r7, #1
 804548a:	b2c4      	uxtb	r4, r0
 804548c:	701c      	strb	r4, [r3, #0]
 804548e:	4648      	mov	r0, r9
 8045490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045492:	f001 fb5f 	bl	8046b54 <_Bfree>
 8045496:	2400      	movs	r4, #0
 8045498:	9b07      	ldr	r3, [sp, #28]
 804549a:	f88a 4000 	strb.w	r4, [sl]
 804549e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80454a0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80454a2:	1c58      	adds	r0, r3, #1
 80454a4:	6028      	str	r0, [r5, #0]
 80454a6:	2c00      	cmp	r4, #0
 80454a8:	f43f ae10 	beq.w	80450cc <_dtoa_r+0x6c>
 80454ac:	f8c4 a000 	str.w	sl, [r4]
 80454b0:	e60c      	b.n	80450cc <_dtoa_r+0x6c>
 80454b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80454b6:	4620      	mov	r0, r4
 80454b8:	4629      	mov	r1, r5
 80454ba:	f7fb f947 	bl	804074c <__aeabi_ddiv>
 80454be:	f7fb fab5 	bl	8040a2c <__aeabi_d2iz>
 80454c2:	4606      	mov	r6, r0
 80454c4:	f7fa ffb2 	bl	804042c <__aeabi_i2d>
 80454c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80454cc:	f7fb f814 	bl	80404f8 <__aeabi_dmul>
 80454d0:	4602      	mov	r2, r0
 80454d2:	460b      	mov	r3, r1
 80454d4:	4620      	mov	r0, r4
 80454d6:	4629      	mov	r1, r5
 80454d8:	f7fa fe5a 	bl	8040190 <__aeabi_dsub>
 80454dc:	3630      	adds	r6, #48	; 0x30
 80454de:	2300      	movs	r3, #0
 80454e0:	2200      	movs	r2, #0
 80454e2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80454e6:	f807 6c01 	strb.w	r6, [r7, #-1]
 80454ea:	f7fb f805 	bl	80404f8 <__aeabi_dmul>
 80454ee:	2200      	movs	r2, #0
 80454f0:	2300      	movs	r3, #0
 80454f2:	46ba      	mov	sl, r7
 80454f4:	4604      	mov	r4, r0
 80454f6:	460d      	mov	r5, r1
 80454f8:	f108 0703 	add.w	r7, r8, #3
 80454fc:	f7fb fa64 	bl	80409c8 <__aeabi_dcmpeq>
 8045500:	2800      	cmp	r0, #0
 8045502:	f43f af10 	beq.w	8045326 <_dtoa_r+0x2c6>
 8045506:	e7c2      	b.n	804548e <_dtoa_r+0x42e>
 8045508:	f108 0103 	add.w	r1, r8, #3
 804550c:	e5f6      	b.n	80450fc <_dtoa_r+0x9c>
 804550e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8045510:	2f00      	cmp	r7, #0
 8045512:	f000 811d 	beq.w	8045750 <_dtoa_r+0x6f0>
 8045516:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8045518:	2c01      	cmp	r4, #1
 804551a:	f340 83dc 	ble.w	8045cd6 <_dtoa_r+0xc76>
 804551e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8045520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8045522:	1e48      	subs	r0, r1, #1
 8045524:	4282      	cmp	r2, r0
 8045526:	f2c0 84b8 	blt.w	8045e9a <_dtoa_r+0xe3a>
 804552a:	1a15      	subs	r5, r2, r0
 804552c:	9909      	ldr	r1, [sp, #36]	; 0x24
 804552e:	2900      	cmp	r1, #0
 8045530:	f2c0 8607 	blt.w	8046142 <_dtoa_r+0x10e2>
 8045534:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8045536:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8045538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 804553a:	4648      	mov	r0, r9
 804553c:	19d3      	adds	r3, r2, r7
 804553e:	9a08      	ldr	r2, [sp, #32]
 8045540:	2101      	movs	r1, #1
 8045542:	19d7      	adds	r7, r2, r7
 8045544:	930a      	str	r3, [sp, #40]	; 0x28
 8045546:	9708      	str	r7, [sp, #32]
 8045548:	f001 fbd8 	bl	8046cfc <__i2b>
 804554c:	900c      	str	r0, [sp, #48]	; 0x30
 804554e:	b164      	cbz	r4, 804556a <_dtoa_r+0x50a>
 8045550:	9808      	ldr	r0, [sp, #32]
 8045552:	2800      	cmp	r0, #0
 8045554:	dd09      	ble.n	804556a <_dtoa_r+0x50a>
 8045556:	990a      	ldr	r1, [sp, #40]	; 0x28
 8045558:	4603      	mov	r3, r0
 804555a:	42a3      	cmp	r3, r4
 804555c:	bfa8      	it	ge
 804555e:	4623      	movge	r3, r4
 8045560:	1aca      	subs	r2, r1, r3
 8045562:	1ac7      	subs	r7, r0, r3
 8045564:	920a      	str	r2, [sp, #40]	; 0x28
 8045566:	1ae4      	subs	r4, r4, r3
 8045568:	9708      	str	r7, [sp, #32]
 804556a:	980e      	ldr	r0, [sp, #56]	; 0x38
 804556c:	2800      	cmp	r0, #0
 804556e:	dd1a      	ble.n	80455a6 <_dtoa_r+0x546>
 8045570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8045572:	2b00      	cmp	r3, #0
 8045574:	f000 847e 	beq.w	8045e74 <_dtoa_r+0xe14>
 8045578:	2d00      	cmp	r5, #0
 804557a:	dd10      	ble.n	804559e <_dtoa_r+0x53e>
 804557c:	990c      	ldr	r1, [sp, #48]	; 0x30
 804557e:	462a      	mov	r2, r5
 8045580:	4648      	mov	r0, r9
 8045582:	f001 fd2d 	bl	8046fe0 <__pow5mult>
 8045586:	900c      	str	r0, [sp, #48]	; 0x30
 8045588:	990c      	ldr	r1, [sp, #48]	; 0x30
 804558a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 804558c:	4648      	mov	r0, r9
 804558e:	f001 fbbf 	bl	8046d10 <__multiply>
 8045592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045594:	4606      	mov	r6, r0
 8045596:	4648      	mov	r0, r9
 8045598:	f001 fadc 	bl	8046b54 <_Bfree>
 804559c:	960b      	str	r6, [sp, #44]	; 0x2c
 804559e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80455a0:	1b4a      	subs	r2, r1, r5
 80455a2:	f040 8392 	bne.w	8045cca <_dtoa_r+0xc6a>
 80455a6:	2101      	movs	r1, #1
 80455a8:	4648      	mov	r0, r9
 80455aa:	f001 fba7 	bl	8046cfc <__i2b>
 80455ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80455b0:	4607      	mov	r7, r0
 80455b2:	2d00      	cmp	r5, #0
 80455b4:	dd05      	ble.n	80455c2 <_dtoa_r+0x562>
 80455b6:	4639      	mov	r1, r7
 80455b8:	4648      	mov	r0, r9
 80455ba:	462a      	mov	r2, r5
 80455bc:	f001 fd10 	bl	8046fe0 <__pow5mult>
 80455c0:	4607      	mov	r7, r0
 80455c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80455c4:	2a01      	cmp	r2, #1
 80455c6:	f340 8141 	ble.w	804584c <_dtoa_r+0x7ec>
 80455ca:	2500      	movs	r5, #0
 80455cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80455ce:	2900      	cmp	r1, #0
 80455d0:	f040 83f5 	bne.w	8045dbe <_dtoa_r+0xd5e>
 80455d4:	2201      	movs	r2, #1
 80455d6:	9908      	ldr	r1, [sp, #32]
 80455d8:	1852      	adds	r2, r2, r1
 80455da:	f012 001f 	ands.w	r0, r2, #31
 80455de:	f000 80bc 	beq.w	804575a <_dtoa_r+0x6fa>
 80455e2:	f1c0 0220 	rsb	r2, r0, #32
 80455e6:	2a04      	cmp	r2, #4
 80455e8:	f340 862d 	ble.w	8046246 <_dtoa_r+0x11e6>
 80455ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80455ee:	f1c0 001c 	rsb	r0, r0, #28
 80455f2:	1813      	adds	r3, r2, r0
 80455f4:	1809      	adds	r1, r1, r0
 80455f6:	930a      	str	r3, [sp, #40]	; 0x28
 80455f8:	1824      	adds	r4, r4, r0
 80455fa:	9108      	str	r1, [sp, #32]
 80455fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80455fe:	2a00      	cmp	r2, #0
 8045600:	dd04      	ble.n	804560c <_dtoa_r+0x5ac>
 8045602:	4648      	mov	r0, r9
 8045604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045606:	f001 fd35 	bl	8047074 <__lshift>
 804560a:	900b      	str	r0, [sp, #44]	; 0x2c
 804560c:	9a08      	ldr	r2, [sp, #32]
 804560e:	2a00      	cmp	r2, #0
 8045610:	dd04      	ble.n	804561c <_dtoa_r+0x5bc>
 8045612:	4639      	mov	r1, r7
 8045614:	4648      	mov	r0, r9
 8045616:	f001 fd2d 	bl	8047074 <__lshift>
 804561a:	4607      	mov	r7, r0
 804561c:	9810      	ldr	r0, [sp, #64]	; 0x40
 804561e:	2800      	cmp	r0, #0
 8045620:	f040 83b5 	bne.w	8045d8e <_dtoa_r+0xd2e>
 8045624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8045626:	2900      	cmp	r1, #0
 8045628:	f340 83d2 	ble.w	8045dd0 <_dtoa_r+0xd70>
 804562c:	980d      	ldr	r0, [sp, #52]	; 0x34
 804562e:	2800      	cmp	r0, #0
 8045630:	f040 80a6 	bne.w	8045780 <_dtoa_r+0x720>
 8045634:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8045636:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8045638:	07e3      	lsls	r3, r4, #31
 804563a:	f140 8389 	bpl.w	8045d50 <_dtoa_r+0xcf0>
 804563e:	46a2      	mov	sl, r4
 8045640:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8045642:	e010      	b.n	8045666 <_dtoa_r+0x606>
 8045644:	f001 fa90 	bl	8046b68 <__multadd>
 8045648:	4639      	mov	r1, r7
 804564a:	4606      	mov	r6, r0
 804564c:	f7ff fb90 	bl	8044d70 <quorem>
 8045650:	3030      	adds	r0, #48	; 0x30
 8045652:	f808 0004 	strb.w	r0, [r8, r4]
 8045656:	4631      	mov	r1, r6
 8045658:	4648      	mov	r0, r9
 804565a:	220a      	movs	r2, #10
 804565c:	2300      	movs	r3, #0
 804565e:	f001 fa83 	bl	8046b68 <__multadd>
 8045662:	1c65      	adds	r5, r4, #1
 8045664:	4606      	mov	r6, r0
 8045666:	4639      	mov	r1, r7
 8045668:	4630      	mov	r0, r6
 804566a:	f7ff fb81 	bl	8044d70 <quorem>
 804566e:	1c6c      	adds	r4, r5, #1
 8045670:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8045674:	220a      	movs	r2, #10
 8045676:	2300      	movs	r3, #0
 8045678:	45a2      	cmp	sl, r4
 804567a:	4631      	mov	r1, r6
 804567c:	4648      	mov	r0, r9
 804567e:	f808 b005 	strb.w	fp, [r8, r5]
 8045682:	dcdf      	bgt.n	8045644 <_dtoa_r+0x5e4>
 8045684:	960b      	str	r6, [sp, #44]	; 0x2c
 8045686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8045688:	2500      	movs	r5, #0
 804568a:	2901      	cmp	r1, #1
 804568c:	bfac      	ite	ge
 804568e:	eb08 0a01 	addge.w	sl, r8, r1
 8045692:	f108 0a01 	addlt.w	sl, r8, #1
 8045696:	2201      	movs	r2, #1
 8045698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 804569a:	4648      	mov	r0, r9
 804569c:	f001 fcea 	bl	8047074 <__lshift>
 80456a0:	4639      	mov	r1, r7
 80456a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80456a4:	f001 fd9c 	bl	80471e0 <__mcmp>
 80456a8:	2800      	cmp	r0, #0
 80456aa:	f340 842b 	ble.w	8045f04 <_dtoa_r+0xea4>
 80456ae:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
 80456b2:	ea6f 0308 	mvn.w	r3, r8
 80456b6:	eb0a 0103 	add.w	r1, sl, r3
 80456ba:	07cc      	lsls	r4, r1, #31
 80456bc:	d506      	bpl.n	80456cc <_dtoa_r+0x66c>
 80456be:	2a39      	cmp	r2, #57	; 0x39
 80456c0:	f10a 34ff 	add.w	r4, sl, #4294967295
 80456c4:	d110      	bne.n	80456e8 <_dtoa_r+0x688>
 80456c6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80456ca:	46a2      	mov	sl, r4
 80456cc:	2a39      	cmp	r2, #57	; 0x39
 80456ce:	f10a 34ff 	add.w	r4, sl, #4294967295
 80456d2:	d109      	bne.n	80456e8 <_dtoa_r+0x688>
 80456d4:	45a0      	cmp	r8, r4
 80456d6:	f000 8353 	beq.w	8045d80 <_dtoa_r+0xd20>
 80456da:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80456de:	46a2      	mov	sl, r4
 80456e0:	2a39      	cmp	r2, #57	; 0x39
 80456e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80456e6:	d0ee      	beq.n	80456c6 <_dtoa_r+0x666>
 80456e8:	1c50      	adds	r0, r2, #1
 80456ea:	7020      	strb	r0, [r4, #0]
 80456ec:	4648      	mov	r0, r9
 80456ee:	4639      	mov	r1, r7
 80456f0:	f001 fa30 	bl	8046b54 <_Bfree>
 80456f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80456f6:	2a00      	cmp	r2, #0
 80456f8:	f43f aec9 	beq.w	804548e <_dtoa_r+0x42e>
 80456fc:	2d00      	cmp	r5, #0
 80456fe:	f000 82de 	beq.w	8045cbe <_dtoa_r+0xc5e>
 8045702:	4295      	cmp	r5, r2
 8045704:	f000 82db 	beq.w	8045cbe <_dtoa_r+0xc5e>
 8045708:	4648      	mov	r0, r9
 804570a:	4629      	mov	r1, r5
 804570c:	f001 fa22 	bl	8046b54 <_Bfree>
 8045710:	e2d5      	b.n	8045cbe <_dtoa_r+0xc5e>
 8045712:	2301      	movs	r3, #1
 8045714:	9310      	str	r3, [sp, #64]	; 0x40
 8045716:	e567      	b.n	80451e8 <_dtoa_r+0x188>
 8045718:	9807      	ldr	r0, [sp, #28]
 804571a:	f7fa fe87 	bl	804042c <__aeabi_i2d>
 804571e:	4622      	mov	r2, r4
 8045720:	462b      	mov	r3, r5
 8045722:	f7fb f951 	bl	80409c8 <__aeabi_dcmpeq>
 8045726:	2800      	cmp	r0, #0
 8045728:	f47f ad4a 	bne.w	80451c0 <_dtoa_r+0x160>
 804572c:	9807      	ldr	r0, [sp, #28]
 804572e:	1e41      	subs	r1, r0, #1
 8045730:	9107      	str	r1, [sp, #28]
 8045732:	e545      	b.n	80451c0 <_dtoa_r+0x160>
 8045734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8045736:	9907      	ldr	r1, [sp, #28]
 8045738:	2500      	movs	r5, #0
 804573a:	1a54      	subs	r4, r2, r1
 804573c:	424b      	negs	r3, r1
 804573e:	940a      	str	r4, [sp, #40]	; 0x28
 8045740:	930e      	str	r3, [sp, #56]	; 0x38
 8045742:	950f      	str	r5, [sp, #60]	; 0x3c
 8045744:	e561      	b.n	804520a <_dtoa_r+0x1aa>
 8045746:	4276      	negs	r6, r6
 8045748:	2300      	movs	r3, #0
 804574a:	960a      	str	r6, [sp, #40]	; 0x28
 804574c:	9308      	str	r3, [sp, #32]
 804574e:	e552      	b.n	80451f6 <_dtoa_r+0x196>
 8045750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8045752:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8045754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8045756:	930c      	str	r3, [sp, #48]	; 0x30
 8045758:	e6f9      	b.n	804554e <_dtoa_r+0x4ee>
 804575a:	231c      	movs	r3, #28
 804575c:	990a      	ldr	r1, [sp, #40]	; 0x28
 804575e:	9a08      	ldr	r2, [sp, #32]
 8045760:	18c8      	adds	r0, r1, r3
 8045762:	18e4      	adds	r4, r4, r3
 8045764:	18d3      	adds	r3, r2, r3
 8045766:	900a      	str	r0, [sp, #40]	; 0x28
 8045768:	9308      	str	r3, [sp, #32]
 804576a:	e747      	b.n	80455fc <_dtoa_r+0x59c>
 804576c:	f64f 33ee 	movw	r3, #64494	; 0xfbee
 8045770:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8045774:	1b9c      	subs	r4, r3, r6
 8045776:	fa0a f004 	lsl.w	r0, sl, r4
 804577a:	e4ec      	b.n	8045156 <_dtoa_r+0xf6>
 804577c:	9010      	str	r0, [sp, #64]	; 0x40
 804577e:	e533      	b.n	80451e8 <_dtoa_r+0x188>
 8045780:	2c00      	cmp	r4, #0
 8045782:	dd05      	ble.n	8045790 <_dtoa_r+0x730>
 8045784:	4648      	mov	r0, r9
 8045786:	990c      	ldr	r1, [sp, #48]	; 0x30
 8045788:	4622      	mov	r2, r4
 804578a:	f001 fc73 	bl	8047074 <__lshift>
 804578e:	900c      	str	r0, [sp, #48]	; 0x30
 8045790:	2d00      	cmp	r5, #0
 8045792:	f040 83f0 	bne.w	8045f76 <_dtoa_r+0xf16>
 8045796:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8045798:	9809      	ldr	r0, [sp, #36]	; 0x24
 804579a:	f108 0401 	add.w	r4, r8, #1
 804579e:	eb08 0100 	add.w	r1, r8, r0
 80457a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80457a4:	f00a 0201 	and.w	r2, sl, #1
 80457a8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80457ac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80457b0:	9109      	str	r1, [sp, #36]	; 0x24
 80457b2:	920a      	str	r2, [sp, #40]	; 0x28
 80457b4:	4639      	mov	r1, r7
 80457b6:	4640      	mov	r0, r8
 80457b8:	f7ff fada 	bl	8044d70 <quorem>
 80457bc:	4629      	mov	r1, r5
 80457be:	4682      	mov	sl, r0
 80457c0:	4640      	mov	r0, r8
 80457c2:	f001 fd0d 	bl	80471e0 <__mcmp>
 80457c6:	4632      	mov	r2, r6
 80457c8:	9006      	str	r0, [sp, #24]
 80457ca:	4639      	mov	r1, r7
 80457cc:	4648      	mov	r0, r9
 80457ce:	f001 fd35 	bl	804723c <__mdiff>
 80457d2:	68c3      	ldr	r3, [r0, #12]
 80457d4:	4602      	mov	r2, r0
 80457d6:	1e60      	subs	r0, r4, #1
 80457d8:	9008      	str	r0, [sp, #32]
 80457da:	f10a 0b30 	add.w	fp, sl, #48	; 0x30
 80457de:	2b00      	cmp	r3, #0
 80457e0:	f000 8282 	beq.w	8045ce8 <_dtoa_r+0xc88>
 80457e4:	4648      	mov	r0, r9
 80457e6:	4611      	mov	r1, r2
 80457e8:	f001 f9b4 	bl	8046b54 <_Bfree>
 80457ec:	2301      	movs	r3, #1
 80457ee:	9906      	ldr	r1, [sp, #24]
 80457f0:	2900      	cmp	r1, #0
 80457f2:	f2c0 8366 	blt.w	8045ec2 <_dtoa_r+0xe62>
 80457f6:	d105      	bne.n	8045804 <_dtoa_r+0x7a4>
 80457f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80457fa:	b91a      	cbnz	r2, 8045804 <_dtoa_r+0x7a4>
 80457fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80457fe:	2800      	cmp	r0, #0
 8045800:	f000 835f 	beq.w	8045ec2 <_dtoa_r+0xe62>
 8045804:	2b00      	cmp	r3, #0
 8045806:	f300 83ce 	bgt.w	8045fa6 <_dtoa_r+0xf46>
 804580a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804580c:	f804 bc01 	strb.w	fp, [r4, #-1]
 8045810:	429c      	cmp	r4, r3
 8045812:	46a2      	mov	sl, r4
 8045814:	f000 83d7 	beq.w	8045fc6 <_dtoa_r+0xf66>
 8045818:	4641      	mov	r1, r8
 804581a:	220a      	movs	r2, #10
 804581c:	2300      	movs	r3, #0
 804581e:	4648      	mov	r0, r9
 8045820:	f001 f9a2 	bl	8046b68 <__multadd>
 8045824:	42b5      	cmp	r5, r6
 8045826:	4680      	mov	r8, r0
 8045828:	f000 8288 	beq.w	8045d3c <_dtoa_r+0xcdc>
 804582c:	4629      	mov	r1, r5
 804582e:	220a      	movs	r2, #10
 8045830:	2300      	movs	r3, #0
 8045832:	4648      	mov	r0, r9
 8045834:	f001 f998 	bl	8046b68 <__multadd>
 8045838:	4631      	mov	r1, r6
 804583a:	4605      	mov	r5, r0
 804583c:	220a      	movs	r2, #10
 804583e:	4648      	mov	r0, r9
 8045840:	2300      	movs	r3, #0
 8045842:	f001 f991 	bl	8046b68 <__multadd>
 8045846:	3401      	adds	r4, #1
 8045848:	4606      	mov	r6, r0
 804584a:	e7b3      	b.n	80457b4 <_dtoa_r+0x754>
 804584c:	f1ba 0f00 	cmp.w	sl, #0
 8045850:	f47f aebb 	bne.w	80455ca <_dtoa_r+0x56a>
 8045854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8045858:	4658      	mov	r0, fp
 804585a:	2b00      	cmp	r3, #0
 804585c:	f040 8476 	bne.w	804614c <_dtoa_r+0x10ec>
 8045860:	2500      	movs	r5, #0
 8045862:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 8045866:	4005      	ands	r5, r0
 8045868:	2d00      	cmp	r5, #0
 804586a:	f43f aeaf 	beq.w	80455cc <_dtoa_r+0x56c>
 804586e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8045870:	9808      	ldr	r0, [sp, #32]
 8045872:	1c4a      	adds	r2, r1, #1
 8045874:	1c43      	adds	r3, r0, #1
 8045876:	920a      	str	r2, [sp, #40]	; 0x28
 8045878:	9308      	str	r3, [sp, #32]
 804587a:	2501      	movs	r5, #1
 804587c:	e6a6      	b.n	80455cc <_dtoa_r+0x56c>
 804587e:	2001      	movs	r0, #1
 8045880:	900d      	str	r0, [sp, #52]	; 0x34
 8045882:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8045884:	2a00      	cmp	r2, #0
 8045886:	f340 8317 	ble.w	8045eb8 <_dtoa_r+0xe58>
 804588a:	4614      	mov	r4, r2
 804588c:	9211      	str	r2, [sp, #68]	; 0x44
 804588e:	9209      	str	r2, [sp, #36]	; 0x24
 8045890:	2100      	movs	r1, #0
 8045892:	2c17      	cmp	r4, #23
 8045894:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8045898:	d90a      	bls.n	80458b0 <_dtoa_r+0x850>
 804589a:	2201      	movs	r2, #1
 804589c:	2304      	movs	r3, #4
 804589e:	005b      	lsls	r3, r3, #1
 80458a0:	f103 0014 	add.w	r0, r3, #20
 80458a4:	4611      	mov	r1, r2
 80458a6:	3201      	adds	r2, #1
 80458a8:	42a0      	cmp	r0, r4
 80458aa:	d9f8      	bls.n	804589e <_dtoa_r+0x83e>
 80458ac:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80458b0:	4648      	mov	r0, r9
 80458b2:	f001 f929 	bl	8046b08 <_Balloc>
 80458b6:	2c0e      	cmp	r4, #14
 80458b8:	4680      	mov	r8, r0
 80458ba:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80458be:	f63f ace6 	bhi.w	804528e <_dtoa_r+0x22e>
 80458c2:	2d00      	cmp	r5, #0
 80458c4:	f43f ace3 	beq.w	804528e <_dtoa_r+0x22e>
 80458c8:	9f07      	ldr	r7, [sp, #28]
 80458ca:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 80458ce:	2f00      	cmp	r7, #0
 80458d0:	f340 832e 	ble.w	8045f30 <_dtoa_r+0xed0>
 80458d4:	4899      	ldr	r0, [pc, #612]	; (8045b3c <_dtoa_r+0xadc>)
 80458d6:	f007 060f 	and.w	r6, r7, #15
 80458da:	eb00 01c6 	add.w	r1, r0, r6, lsl #3
 80458de:	113e      	asrs	r6, r7, #4
 80458e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80458e4:	06f1      	lsls	r1, r6, #27
 80458e6:	f140 82e1 	bpl.w	8045eac <_dtoa_r+0xe4c>
 80458ea:	4f95      	ldr	r7, [pc, #596]	; (8045b40 <_dtoa_r+0xae0>)
 80458ec:	4650      	mov	r0, sl
 80458ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80458f2:	4659      	mov	r1, fp
 80458f4:	f7fa ff2a 	bl	804074c <__aeabi_ddiv>
 80458f8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80458fc:	f006 060f 	and.w	r6, r6, #15
 8045900:	2703      	movs	r7, #3
 8045902:	b186      	cbz	r6, 8045926 <_dtoa_r+0x8c6>
 8045904:	f8df a238 	ldr.w	sl, [pc, #568]	; 8045b40 <_dtoa_r+0xae0>
 8045908:	4620      	mov	r0, r4
 804590a:	4629      	mov	r1, r5
 804590c:	07f2      	lsls	r2, r6, #31
 804590e:	d504      	bpl.n	804591a <_dtoa_r+0x8ba>
 8045910:	e9da 2300 	ldrd	r2, r3, [sl]
 8045914:	f7fa fdf0 	bl	80404f8 <__aeabi_dmul>
 8045918:	3701      	adds	r7, #1
 804591a:	1076      	asrs	r6, r6, #1
 804591c:	f10a 0a08 	add.w	sl, sl, #8
 8045920:	d1f4      	bne.n	804590c <_dtoa_r+0x8ac>
 8045922:	4604      	mov	r4, r0
 8045924:	460d      	mov	r5, r1
 8045926:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 804592a:	4622      	mov	r2, r4
 804592c:	462b      	mov	r3, r5
 804592e:	f7fa ff0d 	bl	804074c <__aeabi_ddiv>
 8045932:	4682      	mov	sl, r0
 8045934:	468b      	mov	fp, r1
 8045936:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8045938:	b153      	cbz	r3, 8045950 <_dtoa_r+0x8f0>
 804593a:	2300      	movs	r3, #0
 804593c:	4650      	mov	r0, sl
 804593e:	4659      	mov	r1, fp
 8045940:	2200      	movs	r2, #0
 8045942:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8045946:	f7fb f849 	bl	80409dc <__aeabi_dcmplt>
 804594a:	2800      	cmp	r0, #0
 804594c:	f040 840d 	bne.w	804616a <_dtoa_r+0x110a>
 8045950:	4638      	mov	r0, r7
 8045952:	f7fa fd6b 	bl	804042c <__aeabi_i2d>
 8045956:	4652      	mov	r2, sl
 8045958:	465b      	mov	r3, fp
 804595a:	f7fa fdcd 	bl	80404f8 <__aeabi_dmul>
 804595e:	2300      	movs	r3, #0
 8045960:	2200      	movs	r2, #0
 8045962:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8045966:	f7fa fc15 	bl	8040194 <__adddf3>
 804596a:	4604      	mov	r4, r0
 804596c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804596e:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8045972:	2800      	cmp	r0, #0
 8045974:	f000 825b 	beq.w	8045e2e <_dtoa_r+0xdce>
 8045978:	9e07      	ldr	r6, [sp, #28]
 804597a:	961a      	str	r6, [sp, #104]	; 0x68
 804597c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 804597e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8045980:	2900      	cmp	r1, #0
 8045982:	f000 832a 	beq.w	8045fda <_dtoa_r+0xf7a>
 8045986:	4f6d      	ldr	r7, [pc, #436]	; (8045b3c <_dtoa_r+0xadc>)
 8045988:	2100      	movs	r1, #0
 804598a:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
 804598e:	f1a2 0308 	sub.w	r3, r2, #8
 8045992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045996:	2000      	movs	r0, #0
 8045998:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 804599c:	f7fa fed6 	bl	804074c <__aeabi_ddiv>
 80459a0:	4622      	mov	r2, r4
 80459a2:	462b      	mov	r3, r5
 80459a4:	f7fa fbf4 	bl	8040190 <__aeabi_dsub>
 80459a8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80459ac:	4650      	mov	r0, sl
 80459ae:	4659      	mov	r1, fp
 80459b0:	f7fb f83c 	bl	8040a2c <__aeabi_d2iz>
 80459b4:	4604      	mov	r4, r0
 80459b6:	f7fa fd39 	bl	804042c <__aeabi_i2d>
 80459ba:	4602      	mov	r2, r0
 80459bc:	460b      	mov	r3, r1
 80459be:	4650      	mov	r0, sl
 80459c0:	4659      	mov	r1, fp
 80459c2:	f7fa fbe5 	bl	8040190 <__aeabi_dsub>
 80459c6:	3430      	adds	r4, #48	; 0x30
 80459c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80459cc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80459d0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80459d4:	b2e7      	uxtb	r7, r4
 80459d6:	46c2      	mov	sl, r8
 80459d8:	f80a 7b01 	strb.w	r7, [sl], #1
 80459dc:	f7fb f81c 	bl	8040a18 <__aeabi_dcmpgt>
 80459e0:	2800      	cmp	r0, #0
 80459e2:	f040 8403 	bne.w	80461ec <_dtoa_r+0x118c>
 80459e6:	2100      	movs	r1, #0
 80459e8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80459ec:	2000      	movs	r0, #0
 80459ee:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80459f2:	f7fa fbcd 	bl	8040190 <__aeabi_dsub>
 80459f6:	4602      	mov	r2, r0
 80459f8:	460b      	mov	r3, r1
 80459fa:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80459fe:	f7fb f80b 	bl	8040a18 <__aeabi_dcmpgt>
 8045a02:	2800      	cmp	r0, #0
 8045a04:	f040 841b 	bne.w	804623e <_dtoa_r+0x11de>
 8045a08:	2e01      	cmp	r6, #1
 8045a0a:	f340 828d 	ble.w	8045f28 <_dtoa_r+0xec8>
 8045a0e:	ea6f 050a 	mvn.w	r5, sl
 8045a12:	4446      	add	r6, r8
 8045a14:	19af      	adds	r7, r5, r6
 8045a16:	2300      	movs	r3, #0
 8045a18:	f007 0401 	and.w	r4, r7, #1
 8045a1c:	2200      	movs	r2, #0
 8045a1e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045a22:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8045a26:	9618      	str	r6, [sp, #96]	; 0x60
 8045a28:	9416      	str	r4, [sp, #88]	; 0x58
 8045a2a:	f7fa fd65 	bl	80404f8 <__aeabi_dmul>
 8045a2e:	2300      	movs	r3, #0
 8045a30:	2200      	movs	r2, #0
 8045a32:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045a36:	4604      	mov	r4, r0
 8045a38:	460d      	mov	r5, r1
 8045a3a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8045a3e:	f7fa fd5b 	bl	80404f8 <__aeabi_dmul>
 8045a42:	460f      	mov	r7, r1
 8045a44:	4606      	mov	r6, r0
 8045a46:	f7fa fff1 	bl	8040a2c <__aeabi_d2iz>
 8045a4a:	4683      	mov	fp, r0
 8045a4c:	f7fa fcee 	bl	804042c <__aeabi_i2d>
 8045a50:	4602      	mov	r2, r0
 8045a52:	460b      	mov	r3, r1
 8045a54:	4630      	mov	r0, r6
 8045a56:	4639      	mov	r1, r7
 8045a58:	f7fa fb9a 	bl	8040190 <__aeabi_dsub>
 8045a5c:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8045a60:	b2df      	uxtb	r7, r3
 8045a62:	46d3      	mov	fp, sl
 8045a64:	f80b 7b01 	strb.w	r7, [fp], #1
 8045a68:	4622      	mov	r2, r4
 8045a6a:	462b      	mov	r3, r5
 8045a6c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8045a70:	46da      	mov	sl, fp
 8045a72:	f7fa ffb3 	bl	80409dc <__aeabi_dcmplt>
 8045a76:	2800      	cmp	r0, #0
 8045a78:	f040 80e6 	bne.w	8045c48 <_dtoa_r+0xbe8>
 8045a7c:	2100      	movs	r1, #0
 8045a7e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8045a82:	2000      	movs	r0, #0
 8045a84:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8045a88:	f7fa fb82 	bl	8040190 <__aeabi_dsub>
 8045a8c:	4622      	mov	r2, r4
 8045a8e:	462b      	mov	r3, r5
 8045a90:	f7fa ffa4 	bl	80409dc <__aeabi_dcmplt>
 8045a94:	2800      	cmp	r0, #0
 8045a96:	f040 83b2 	bne.w	80461fe <_dtoa_r+0x119e>
 8045a9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8045a9c:	458b      	cmp	fp, r1
 8045a9e:	f000 8243 	beq.w	8045f28 <_dtoa_r+0xec8>
 8045aa2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8045aa4:	2800      	cmp	r0, #0
 8045aa6:	d040      	beq.n	8045b2a <_dtoa_r+0xaca>
 8045aa8:	2300      	movs	r3, #0
 8045aaa:	2200      	movs	r2, #0
 8045aac:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045ab0:	4620      	mov	r0, r4
 8045ab2:	4629      	mov	r1, r5
 8045ab4:	f7fa fd20 	bl	80404f8 <__aeabi_dmul>
 8045ab8:	2300      	movs	r3, #0
 8045aba:	2200      	movs	r2, #0
 8045abc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045ac0:	4604      	mov	r4, r0
 8045ac2:	460d      	mov	r5, r1
 8045ac4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8045ac8:	f7fa fd16 	bl	80404f8 <__aeabi_dmul>
 8045acc:	460f      	mov	r7, r1
 8045ace:	4606      	mov	r6, r0
 8045ad0:	f7fa ffac 	bl	8040a2c <__aeabi_d2iz>
 8045ad4:	4682      	mov	sl, r0
 8045ad6:	f7fa fca9 	bl	804042c <__aeabi_i2d>
 8045ada:	4602      	mov	r2, r0
 8045adc:	460b      	mov	r3, r1
 8045ade:	4630      	mov	r0, r6
 8045ae0:	4639      	mov	r1, r7
 8045ae2:	f7fa fb55 	bl	8040190 <__aeabi_dsub>
 8045ae6:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 8045aea:	b2d7      	uxtb	r7, r2
 8045aec:	f80b 7b01 	strb.w	r7, [fp], #1
 8045af0:	4622      	mov	r2, r4
 8045af2:	462b      	mov	r3, r5
 8045af4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8045af8:	46da      	mov	sl, fp
 8045afa:	f7fa ff6f 	bl	80409dc <__aeabi_dcmplt>
 8045afe:	2800      	cmp	r0, #0
 8045b00:	f040 80a2 	bne.w	8045c48 <_dtoa_r+0xbe8>
 8045b04:	2100      	movs	r1, #0
 8045b06:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8045b0a:	2000      	movs	r0, #0
 8045b0c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8045b10:	f7fa fb3e 	bl	8040190 <__aeabi_dsub>
 8045b14:	4622      	mov	r2, r4
 8045b16:	462b      	mov	r3, r5
 8045b18:	f7fa ff60 	bl	80409dc <__aeabi_dcmplt>
 8045b1c:	2800      	cmp	r0, #0
 8045b1e:	f040 836e 	bne.w	80461fe <_dtoa_r+0x119e>
 8045b22:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8045b24:	459b      	cmp	fp, r3
 8045b26:	f000 81ff 	beq.w	8045f28 <_dtoa_r+0xec8>
 8045b2a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8045b2e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 8045b32:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8045b36:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8045b3a:	e050      	b.n	8045bde <_dtoa_r+0xb7e>
 8045b3c:	08048270 	.word	0x08048270
 8045b40:	08048338 	.word	0x08048338
 8045b44:	2100      	movs	r1, #0
 8045b46:	2000      	movs	r0, #0
 8045b48:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8045b4c:	f7fa fb20 	bl	8040190 <__aeabi_dsub>
 8045b50:	4622      	mov	r2, r4
 8045b52:	462b      	mov	r3, r5
 8045b54:	f7fa ff42 	bl	80409dc <__aeabi_dcmplt>
 8045b58:	2300      	movs	r3, #0
 8045b5a:	2200      	movs	r2, #0
 8045b5c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045b60:	2800      	cmp	r0, #0
 8045b62:	f040 8347 	bne.w	80461f4 <_dtoa_r+0x1194>
 8045b66:	4620      	mov	r0, r4
 8045b68:	4629      	mov	r1, r5
 8045b6a:	f7fa fcc5 	bl	80404f8 <__aeabi_dmul>
 8045b6e:	2300      	movs	r3, #0
 8045b70:	2200      	movs	r2, #0
 8045b72:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045b76:	4604      	mov	r4, r0
 8045b78:	460d      	mov	r5, r1
 8045b7a:	4630      	mov	r0, r6
 8045b7c:	4639      	mov	r1, r7
 8045b7e:	f7fa fcbb 	bl	80404f8 <__aeabi_dmul>
 8045b82:	460f      	mov	r7, r1
 8045b84:	4606      	mov	r6, r0
 8045b86:	f7fa ff51 	bl	8040a2c <__aeabi_d2iz>
 8045b8a:	4682      	mov	sl, r0
 8045b8c:	f7fa fc4e 	bl	804042c <__aeabi_i2d>
 8045b90:	4602      	mov	r2, r0
 8045b92:	460b      	mov	r3, r1
 8045b94:	4630      	mov	r0, r6
 8045b96:	4639      	mov	r1, r7
 8045b98:	f7fa fafa 	bl	8040190 <__aeabi_dsub>
 8045b9c:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8045ba0:	fa5f f883 	uxtb.w	r8, r3
 8045ba4:	f80b 8b01 	strb.w	r8, [fp], #1
 8045ba8:	4622      	mov	r2, r4
 8045baa:	462b      	mov	r3, r5
 8045bac:	4606      	mov	r6, r0
 8045bae:	460f      	mov	r7, r1
 8045bb0:	f7fa ff14 	bl	80409dc <__aeabi_dcmplt>
 8045bb4:	46da      	mov	sl, fp
 8045bb6:	4632      	mov	r2, r6
 8045bb8:	463b      	mov	r3, r7
 8045bba:	2800      	cmp	r0, #0
 8045bbc:	d140      	bne.n	8045c40 <_dtoa_r+0xbe0>
 8045bbe:	2100      	movs	r1, #0
 8045bc0:	2000      	movs	r0, #0
 8045bc2:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8045bc6:	f7fa fae3 	bl	8040190 <__aeabi_dsub>
 8045bca:	4622      	mov	r2, r4
 8045bcc:	462b      	mov	r3, r5
 8045bce:	f7fa ff05 	bl	80409dc <__aeabi_dcmplt>
 8045bd2:	2800      	cmp	r0, #0
 8045bd4:	f040 830e 	bne.w	80461f4 <_dtoa_r+0x1194>
 8045bd8:	45cb      	cmp	fp, r9
 8045bda:	f000 81a1 	beq.w	8045f20 <_dtoa_r+0xec0>
 8045bde:	2300      	movs	r3, #0
 8045be0:	4620      	mov	r0, r4
 8045be2:	4629      	mov	r1, r5
 8045be4:	2200      	movs	r2, #0
 8045be6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045bea:	f7fa fc85 	bl	80404f8 <__aeabi_dmul>
 8045bee:	2300      	movs	r3, #0
 8045bf0:	2200      	movs	r2, #0
 8045bf2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8045bf6:	4604      	mov	r4, r0
 8045bf8:	460d      	mov	r5, r1
 8045bfa:	4630      	mov	r0, r6
 8045bfc:	4639      	mov	r1, r7
 8045bfe:	f7fa fc7b 	bl	80404f8 <__aeabi_dmul>
 8045c02:	460f      	mov	r7, r1
 8045c04:	4606      	mov	r6, r0
 8045c06:	f7fa ff11 	bl	8040a2c <__aeabi_d2iz>
 8045c0a:	4680      	mov	r8, r0
 8045c0c:	f7fa fc0e 	bl	804042c <__aeabi_i2d>
 8045c10:	4602      	mov	r2, r0
 8045c12:	460b      	mov	r3, r1
 8045c14:	4630      	mov	r0, r6
 8045c16:	4639      	mov	r1, r7
 8045c18:	f7fa faba 	bl	8040190 <__aeabi_dsub>
 8045c1c:	f108 0230 	add.w	r2, r8, #48	; 0x30
 8045c20:	46da      	mov	sl, fp
 8045c22:	fa5f f882 	uxtb.w	r8, r2
 8045c26:	f80a 8b01 	strb.w	r8, [sl], #1
 8045c2a:	4622      	mov	r2, r4
 8045c2c:	462b      	mov	r3, r5
 8045c2e:	4606      	mov	r6, r0
 8045c30:	460f      	mov	r7, r1
 8045c32:	f7fa fed3 	bl	80409dc <__aeabi_dcmplt>
 8045c36:	46d3      	mov	fp, sl
 8045c38:	4632      	mov	r2, r6
 8045c3a:	463b      	mov	r3, r7
 8045c3c:	2800      	cmp	r0, #0
 8045c3e:	d081      	beq.n	8045b44 <_dtoa_r+0xae4>
 8045c40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8045c44:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8045c48:	981a      	ldr	r0, [sp, #104]	; 0x68
 8045c4a:	9007      	str	r0, [sp, #28]
 8045c4c:	e41f      	b.n	804548e <_dtoa_r+0x42e>
 8045c4e:	2400      	movs	r4, #0
 8045c50:	940d      	str	r4, [sp, #52]	; 0x34
 8045c52:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8045c54:	9b07      	ldr	r3, [sp, #28]
 8045c56:	18c2      	adds	r2, r0, r3
 8045c58:	1c54      	adds	r4, r2, #1
 8045c5a:	2c00      	cmp	r4, #0
 8045c5c:	9211      	str	r2, [sp, #68]	; 0x44
 8045c5e:	9409      	str	r4, [sp, #36]	; 0x24
 8045c60:	f73f ae16 	bgt.w	8045890 <_dtoa_r+0x830>
 8045c64:	2100      	movs	r1, #0
 8045c66:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8045c6a:	e621      	b.n	80458b0 <_dtoa_r+0x850>
 8045c6c:	2101      	movs	r1, #1
 8045c6e:	910d      	str	r1, [sp, #52]	; 0x34
 8045c70:	e7ef      	b.n	8045c52 <_dtoa_r+0xbf2>
 8045c72:	2300      	movs	r3, #0
 8045c74:	930d      	str	r3, [sp, #52]	; 0x34
 8045c76:	e604      	b.n	8045882 <_dtoa_r+0x822>
 8045c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8045c7a:	2900      	cmp	r1, #0
 8045c7c:	f73f ab1a 	bgt.w	80452b4 <_dtoa_r+0x254>
 8045c80:	f040 82cd 	bne.w	804621e <_dtoa_r+0x11be>
 8045c84:	2300      	movs	r3, #0
 8045c86:	2200      	movs	r2, #0
 8045c88:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8045c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8045c90:	f7fa fc32 	bl	80404f8 <__aeabi_dmul>
 8045c94:	4652      	mov	r2, sl
 8045c96:	465b      	mov	r3, fp
 8045c98:	f7fa feb4 	bl	8040a04 <__aeabi_dcmpge>
 8045c9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8045c9e:	970c      	str	r7, [sp, #48]	; 0x30
 8045ca0:	2800      	cmp	r0, #0
 8045ca2:	f000 80aa 	beq.w	8045dfa <_dtoa_r+0xd9a>
 8045ca6:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8045ca8:	46c2      	mov	sl, r8
 8045caa:	43e9      	mvns	r1, r5
 8045cac:	9107      	str	r1, [sp, #28]
 8045cae:	4648      	mov	r0, r9
 8045cb0:	4639      	mov	r1, r7
 8045cb2:	f000 ff4f 	bl	8046b54 <_Bfree>
 8045cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8045cb8:	2a00      	cmp	r2, #0
 8045cba:	f43f abe8 	beq.w	804548e <_dtoa_r+0x42e>
 8045cbe:	4648      	mov	r0, r9
 8045cc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8045cc2:	f000 ff47 	bl	8046b54 <_Bfree>
 8045cc6:	f7ff bbe2 	b.w	804548e <_dtoa_r+0x42e>
 8045cca:	4648      	mov	r0, r9
 8045ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045cce:	f001 f987 	bl	8046fe0 <__pow5mult>
 8045cd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8045cd4:	e467      	b.n	80455a6 <_dtoa_r+0x546>
 8045cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8045cd8:	2a00      	cmp	r2, #0
 8045cda:	f000 823a 	beq.w	8046152 <_dtoa_r+0x10f2>
 8045cde:	f200 4733 	addw	r7, r0, #1075	; 0x433
 8045ce2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8045ce4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8045ce6:	e427      	b.n	8045538 <_dtoa_r+0x4d8>
 8045ce8:	4611      	mov	r1, r2
 8045cea:	4640      	mov	r0, r8
 8045cec:	9203      	str	r2, [sp, #12]
 8045cee:	f001 fa77 	bl	80471e0 <__mcmp>
 8045cf2:	9903      	ldr	r1, [sp, #12]
 8045cf4:	4603      	mov	r3, r0
 8045cf6:	4648      	mov	r0, r9
 8045cf8:	9303      	str	r3, [sp, #12]
 8045cfa:	f000 ff2b 	bl	8046b54 <_Bfree>
 8045cfe:	9b03      	ldr	r3, [sp, #12]
 8045d00:	2b00      	cmp	r3, #0
 8045d02:	f47f ad74 	bne.w	80457ee <_dtoa_r+0x78e>
 8045d06:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8045d08:	2a00      	cmp	r2, #0
 8045d0a:	f47f ad70 	bne.w	80457ee <_dtoa_r+0x78e>
 8045d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8045d10:	2800      	cmp	r0, #0
 8045d12:	f47f ad6c 	bne.w	80457ee <_dtoa_r+0x78e>
 8045d16:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8045d1a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8045d1e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8045d22:	f000 80e7 	beq.w	8045ef4 <_dtoa_r+0xe94>
 8045d26:	9806      	ldr	r0, [sp, #24]
 8045d28:	2800      	cmp	r0, #0
 8045d2a:	dd01      	ble.n	8045d30 <_dtoa_r+0xcd0>
 8045d2c:	f10a 0b31 	add.w	fp, sl, #49	; 0x31
 8045d30:	f8dd a020 	ldr.w	sl, [sp, #32]
 8045d34:	f80a bb01 	strb.w	fp, [sl], #1
 8045d38:	960c      	str	r6, [sp, #48]	; 0x30
 8045d3a:	e4d7      	b.n	80456ec <_dtoa_r+0x68c>
 8045d3c:	4629      	mov	r1, r5
 8045d3e:	4648      	mov	r0, r9
 8045d40:	220a      	movs	r2, #10
 8045d42:	2300      	movs	r3, #0
 8045d44:	f000 ff10 	bl	8046b68 <__multadd>
 8045d48:	3401      	adds	r4, #1
 8045d4a:	4605      	mov	r5, r0
 8045d4c:	4606      	mov	r6, r0
 8045d4e:	e531      	b.n	80457b4 <_dtoa_r+0x754>
 8045d50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8045d52:	4639      	mov	r1, r7
 8045d54:	f7ff f80c 	bl	8044d70 <quorem>
 8045d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8045d5a:	2501      	movs	r5, #1
 8045d5c:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 8045d60:	42ab      	cmp	r3, r5
 8045d62:	f888 b000 	strb.w	fp, [r8]
 8045d66:	f77f ac8e 	ble.w	8045686 <_dtoa_r+0x626>
 8045d6a:	4648      	mov	r0, r9
 8045d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045d6e:	220a      	movs	r2, #10
 8045d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8045d72:	f000 fef9 	bl	8046b68 <__multadd>
 8045d76:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8045d7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8045d7c:	4606      	mov	r6, r0
 8045d7e:	e472      	b.n	8045666 <_dtoa_r+0x606>
 8045d80:	9b07      	ldr	r3, [sp, #28]
 8045d82:	2431      	movs	r4, #49	; 0x31
 8045d84:	1c59      	adds	r1, r3, #1
 8045d86:	9107      	str	r1, [sp, #28]
 8045d88:	f888 4000 	strb.w	r4, [r8]
 8045d8c:	e4ae      	b.n	80456ec <_dtoa_r+0x68c>
 8045d8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8045d90:	4639      	mov	r1, r7
 8045d92:	f001 fa25 	bl	80471e0 <__mcmp>
 8045d96:	2800      	cmp	r0, #0
 8045d98:	f6bf ac44 	bge.w	8045624 <_dtoa_r+0x5c4>
 8045d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045d9e:	220a      	movs	r2, #10
 8045da0:	2300      	movs	r3, #0
 8045da2:	4648      	mov	r0, r9
 8045da4:	f000 fee0 	bl	8046b68 <__multadd>
 8045da8:	9b07      	ldr	r3, [sp, #28]
 8045daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8045dac:	1e59      	subs	r1, r3, #1
 8045dae:	900b      	str	r0, [sp, #44]	; 0x2c
 8045db0:	9107      	str	r1, [sp, #28]
 8045db2:	2a00      	cmp	r2, #0
 8045db4:	f040 8235 	bne.w	8046222 <_dtoa_r+0x11c2>
 8045db8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8045dba:	9009      	str	r0, [sp, #36]	; 0x24
 8045dbc:	e432      	b.n	8045624 <_dtoa_r+0x5c4>
 8045dbe:	6938      	ldr	r0, [r7, #16]
 8045dc0:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8045dc4:	6918      	ldr	r0, [r3, #16]
 8045dc6:	f000 ff4d 	bl	8046c64 <__hi0bits>
 8045dca:	f1c0 0220 	rsb	r2, r0, #32
 8045dce:	e402      	b.n	80455d6 <_dtoa_r+0x576>
 8045dd0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8045dd2:	2a02      	cmp	r2, #2
 8045dd4:	f77f ac2a 	ble.w	804562c <_dtoa_r+0x5cc>
 8045dd8:	2900      	cmp	r1, #0
 8045dda:	f47f af64 	bne.w	8045ca6 <_dtoa_r+0xc46>
 8045dde:	4639      	mov	r1, r7
 8045de0:	2205      	movs	r2, #5
 8045de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8045de4:	4648      	mov	r0, r9
 8045de6:	f000 febf 	bl	8046b68 <__multadd>
 8045dea:	4607      	mov	r7, r0
 8045dec:	4639      	mov	r1, r7
 8045dee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8045df0:	f001 f9f6 	bl	80471e0 <__mcmp>
 8045df4:	2800      	cmp	r0, #0
 8045df6:	f77f af56 	ble.w	8045ca6 <_dtoa_r+0xc46>
 8045dfa:	9807      	ldr	r0, [sp, #28]
 8045dfc:	46c2      	mov	sl, r8
 8045dfe:	2331      	movs	r3, #49	; 0x31
 8045e00:	1c44      	adds	r4, r0, #1
 8045e02:	f80a 3b01 	strb.w	r3, [sl], #1
 8045e06:	9407      	str	r4, [sp, #28]
 8045e08:	e751      	b.n	8045cae <_dtoa_r+0xc4e>
 8045e0a:	4638      	mov	r0, r7
 8045e0c:	f7fa fb0e 	bl	804042c <__aeabi_i2d>
 8045e10:	4602      	mov	r2, r0
 8045e12:	460b      	mov	r3, r1
 8045e14:	4650      	mov	r0, sl
 8045e16:	4659      	mov	r1, fp
 8045e18:	f7fa fb6e 	bl	80404f8 <__aeabi_dmul>
 8045e1c:	2300      	movs	r3, #0
 8045e1e:	2200      	movs	r2, #0
 8045e20:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8045e24:	f7fa f9b6 	bl	8040194 <__adddf3>
 8045e28:	4604      	mov	r4, r0
 8045e2a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8045e2e:	2300      	movs	r3, #0
 8045e30:	2200      	movs	r2, #0
 8045e32:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8045e36:	4650      	mov	r0, sl
 8045e38:	4659      	mov	r1, fp
 8045e3a:	f7fa f9a9 	bl	8040190 <__aeabi_dsub>
 8045e3e:	4622      	mov	r2, r4
 8045e40:	462b      	mov	r3, r5
 8045e42:	4682      	mov	sl, r0
 8045e44:	468b      	mov	fp, r1
 8045e46:	f7fa fde7 	bl	8040a18 <__aeabi_dcmpgt>
 8045e4a:	4607      	mov	r7, r0
 8045e4c:	2800      	cmp	r0, #0
 8045e4e:	f040 80c1 	bne.w	8045fd4 <_dtoa_r+0xf74>
 8045e52:	4622      	mov	r2, r4
 8045e54:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8045e58:	4650      	mov	r0, sl
 8045e5a:	4659      	mov	r1, fp
 8045e5c:	f7fa fdbe 	bl	80409dc <__aeabi_dcmplt>
 8045e60:	2800      	cmp	r0, #0
 8045e62:	d061      	beq.n	8045f28 <_dtoa_r+0xec8>
 8045e64:	970c      	str	r7, [sp, #48]	; 0x30
 8045e66:	e71e      	b.n	8045ca6 <_dtoa_r+0xc46>
 8045e68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8045e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8045e70:	f7ff bb0d 	b.w	804548e <_dtoa_r+0x42e>
 8045e74:	4648      	mov	r0, r9
 8045e76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8045e7a:	f001 f8b1 	bl	8046fe0 <__pow5mult>
 8045e7e:	900b      	str	r0, [sp, #44]	; 0x2c
 8045e80:	f7ff bb91 	b.w	80455a6 <_dtoa_r+0x546>
 8045e84:	9d07      	ldr	r5, [sp, #28]
 8045e86:	2230      	movs	r2, #48	; 0x30
 8045e88:	1c69      	adds	r1, r5, #1
 8045e8a:	4643      	mov	r3, r8
 8045e8c:	2431      	movs	r4, #49	; 0x31
 8045e8e:	f888 2000 	strb.w	r2, [r8]
 8045e92:	9107      	str	r1, [sp, #28]
 8045e94:	701c      	strb	r4, [r3, #0]
 8045e96:	f7ff bafa 	b.w	804548e <_dtoa_r+0x42e>
 8045e9a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8045e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8045e9e:	1bc5      	subs	r5, r0, r7
 8045ea0:	195c      	adds	r4, r3, r5
 8045ea2:	940f      	str	r4, [sp, #60]	; 0x3c
 8045ea4:	900e      	str	r0, [sp, #56]	; 0x38
 8045ea6:	2500      	movs	r5, #0
 8045ea8:	f7ff bb40 	b.w	804552c <_dtoa_r+0x4cc>
 8045eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8045eb0:	2702      	movs	r7, #2
 8045eb2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8045eb6:	e524      	b.n	8045902 <_dtoa_r+0x8a2>
 8045eb8:	2401      	movs	r4, #1
 8045eba:	9411      	str	r4, [sp, #68]	; 0x44
 8045ebc:	9409      	str	r4, [sp, #36]	; 0x24
 8045ebe:	9429      	str	r4, [sp, #164]	; 0xa4
 8045ec0:	e6d0      	b.n	8045c64 <_dtoa_r+0xc04>
 8045ec2:	2b00      	cmp	r3, #0
 8045ec4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8045ec8:	465c      	mov	r4, fp
 8045eca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8045ece:	f77f af2f 	ble.w	8045d30 <_dtoa_r+0xcd0>
 8045ed2:	2201      	movs	r2, #1
 8045ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8045ed6:	4648      	mov	r0, r9
 8045ed8:	f001 f8cc 	bl	8047074 <__lshift>
 8045edc:	4639      	mov	r1, r7
 8045ede:	900b      	str	r0, [sp, #44]	; 0x2c
 8045ee0:	f001 f97e 	bl	80471e0 <__mcmp>
 8045ee4:	2800      	cmp	r0, #0
 8045ee6:	f340 8193 	ble.w	8046210 <_dtoa_r+0x11b0>
 8045eea:	2c39      	cmp	r4, #57	; 0x39
 8045eec:	f10a 0b31 	add.w	fp, sl, #49	; 0x31
 8045ef0:	f47f af1e 	bne.w	8045d30 <_dtoa_r+0xcd0>
 8045ef4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8045ef8:	2239      	movs	r2, #57	; 0x39
 8045efa:	f80a 2b01 	strb.w	r2, [sl], #1
 8045efe:	960c      	str	r6, [sp, #48]	; 0x30
 8045f00:	f7ff bbd7 	b.w	80456b2 <_dtoa_r+0x652>
 8045f04:	d103      	bne.n	8045f0e <_dtoa_r+0xeae>
 8045f06:	f01b 0f01 	tst.w	fp, #1
 8045f0a:	f47f abd0 	bne.w	80456ae <_dtoa_r+0x64e>
 8045f0e:	4652      	mov	r2, sl
 8045f10:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8045f14:	4692      	mov	sl, r2
 8045f16:	3a01      	subs	r2, #1
 8045f18:	2930      	cmp	r1, #48	; 0x30
 8045f1a:	d0f9      	beq.n	8045f10 <_dtoa_r+0xeb0>
 8045f1c:	f7ff bbe6 	b.w	80456ec <_dtoa_r+0x68c>
 8045f20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8045f24:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8045f28:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8045f2c:	f7ff b9af 	b.w	804528e <_dtoa_r+0x22e>
 8045f30:	9d07      	ldr	r5, [sp, #28]
 8045f32:	426c      	negs	r4, r5
 8045f34:	2c00      	cmp	r4, #0
 8045f36:	f000 8113 	beq.w	8046160 <_dtoa_r+0x1100>
 8045f3a:	4bb3      	ldr	r3, [pc, #716]	; (8046208 <_dtoa_r+0x11a8>)
 8045f3c:	f004 010f 	and.w	r1, r4, #15
 8045f40:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8045f44:	ca0c      	ldmia	r2, {r2, r3}
 8045f46:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8045f4a:	f7fa fad5 	bl	80404f8 <__aeabi_dmul>
 8045f4e:	1124      	asrs	r4, r4, #4
 8045f50:	4682      	mov	sl, r0
 8045f52:	468b      	mov	fp, r1
 8045f54:	f000 8170 	beq.w	8046238 <_dtoa_r+0x11d8>
 8045f58:	4dac      	ldr	r5, [pc, #688]	; (804620c <_dtoa_r+0x11ac>)
 8045f5a:	2702      	movs	r7, #2
 8045f5c:	07e3      	lsls	r3, r4, #31
 8045f5e:	d504      	bpl.n	8045f6a <_dtoa_r+0xf0a>
 8045f60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8045f64:	f7fa fac8 	bl	80404f8 <__aeabi_dmul>
 8045f68:	3701      	adds	r7, #1
 8045f6a:	3508      	adds	r5, #8
 8045f6c:	1064      	asrs	r4, r4, #1
 8045f6e:	d1f5      	bne.n	8045f5c <_dtoa_r+0xefc>
 8045f70:	4682      	mov	sl, r0
 8045f72:	468b      	mov	fp, r1
 8045f74:	e4df      	b.n	8045936 <_dtoa_r+0x8d6>
 8045f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8045f78:	4648      	mov	r0, r9
 8045f7a:	6851      	ldr	r1, [r2, #4]
 8045f7c:	f000 fdc4 	bl	8046b08 <_Balloc>
 8045f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8045f82:	4604      	mov	r4, r0
 8045f84:	692b      	ldr	r3, [r5, #16]
 8045f86:	4629      	mov	r1, r5
 8045f88:	1c9e      	adds	r6, r3, #2
 8045f8a:	00b2      	lsls	r2, r6, #2
 8045f8c:	310c      	adds	r1, #12
 8045f8e:	f100 000c 	add.w	r0, r0, #12
 8045f92:	f7fd f813 	bl	8042fbc <memcpy>
 8045f96:	4648      	mov	r0, r9
 8045f98:	4621      	mov	r1, r4
 8045f9a:	2201      	movs	r2, #1
 8045f9c:	f001 f86a 	bl	8047074 <__lshift>
 8045fa0:	4606      	mov	r6, r0
 8045fa2:	f7ff bbf9 	b.w	8045798 <_dtoa_r+0x738>
 8045fa6:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 8045faa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8045fae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8045fb2:	d09f      	beq.n	8045ef4 <_dtoa_r+0xe94>
 8045fb4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8045fb8:	f10b 0e01 	add.w	lr, fp, #1
 8045fbc:	f80a eb01 	strb.w	lr, [sl], #1
 8045fc0:	960c      	str	r6, [sp, #48]	; 0x30
 8045fc2:	f7ff bb93 	b.w	80456ec <_dtoa_r+0x68c>
 8045fc6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8045fca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8045fce:	960c      	str	r6, [sp, #48]	; 0x30
 8045fd0:	f7ff bb61 	b.w	8045696 <_dtoa_r+0x636>
 8045fd4:	2700      	movs	r7, #0
 8045fd6:	970c      	str	r7, [sp, #48]	; 0x30
 8045fd8:	e70f      	b.n	8045dfa <_dtoa_r+0xd9a>
 8045fda:	4a8b      	ldr	r2, [pc, #556]	; (8046208 <_dtoa_r+0x11a8>)
 8045fdc:	1e73      	subs	r3, r6, #1
 8045fde:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8045fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8045fe4:	4622      	mov	r2, r4
 8045fe6:	462b      	mov	r3, r5
 8045fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8045fec:	f7fa fa84 	bl	80404f8 <__aeabi_dmul>
 8045ff0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8045ff4:	4650      	mov	r0, sl
 8045ff6:	4659      	mov	r1, fp
 8045ff8:	f7fa fd18 	bl	8040a2c <__aeabi_d2iz>
 8045ffc:	4607      	mov	r7, r0
 8045ffe:	f7fa fa15 	bl	804042c <__aeabi_i2d>
 8046002:	460b      	mov	r3, r1
 8046004:	4602      	mov	r2, r0
 8046006:	4659      	mov	r1, fp
 8046008:	4650      	mov	r0, sl
 804600a:	f7fa f8c1 	bl	8040190 <__aeabi_dsub>
 804600e:	46c2      	mov	sl, r8
 8046010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8046014:	2e01      	cmp	r6, #1
 8046016:	4604      	mov	r4, r0
 8046018:	460d      	mov	r5, r1
 804601a:	f80a 3b01 	strb.w	r3, [sl], #1
 804601e:	d07c      	beq.n	804611a <_dtoa_r+0x10ba>
 8046020:	f108 34ff 	add.w	r4, r8, #4294967295
 8046024:	eb04 0b06 	add.w	fp, r4, r6
 8046028:	ea6f 0508 	mvn.w	r5, r8
 804602c:	eb05 060b 	add.w	r6, r5, fp
 8046030:	2300      	movs	r3, #0
 8046032:	2200      	movs	r2, #0
 8046034:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8046038:	f006 0701 	and.w	r7, r6, #1
 804603c:	9716      	str	r7, [sp, #88]	; 0x58
 804603e:	f7fa fa5b 	bl	80404f8 <__aeabi_dmul>
 8046042:	460c      	mov	r4, r1
 8046044:	4606      	mov	r6, r0
 8046046:	f7fa fcf1 	bl	8040a2c <__aeabi_d2iz>
 804604a:	9003      	str	r0, [sp, #12]
 804604c:	f7fa f9ee 	bl	804042c <__aeabi_i2d>
 8046050:	4602      	mov	r2, r0
 8046052:	460b      	mov	r3, r1
 8046054:	4630      	mov	r0, r6
 8046056:	4621      	mov	r1, r4
 8046058:	f7fa f89a 	bl	8040190 <__aeabi_dsub>
 804605c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8046060:	45da      	cmp	sl, fp
 8046062:	f10c 0230 	add.w	r2, ip, #48	; 0x30
 8046066:	4604      	mov	r4, r0
 8046068:	460d      	mov	r5, r1
 804606a:	f888 2001 	strb.w	r2, [r8, #1]
 804606e:	4657      	mov	r7, sl
 8046070:	d051      	beq.n	8046116 <_dtoa_r+0x10b6>
 8046072:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8046074:	b1eb      	cbz	r3, 80460b2 <_dtoa_r+0x1052>
 8046076:	2300      	movs	r3, #0
 8046078:	2200      	movs	r2, #0
 804607a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 804607e:	f7fa fa3b 	bl	80404f8 <__aeabi_dmul>
 8046082:	460d      	mov	r5, r1
 8046084:	4606      	mov	r6, r0
 8046086:	f7fa fcd1 	bl	8040a2c <__aeabi_d2iz>
 804608a:	9003      	str	r0, [sp, #12]
 804608c:	f7fa f9ce 	bl	804042c <__aeabi_i2d>
 8046090:	4602      	mov	r2, r0
 8046092:	460b      	mov	r3, r1
 8046094:	4630      	mov	r0, r6
 8046096:	4629      	mov	r1, r5
 8046098:	f7fa f87a 	bl	8040190 <__aeabi_dsub>
 804609c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80460a0:	4657      	mov	r7, sl
 80460a2:	4604      	mov	r4, r0
 80460a4:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 80460a8:	f807 0f01 	strb.w	r0, [r7, #1]!
 80460ac:	455f      	cmp	r7, fp
 80460ae:	460d      	mov	r5, r1
 80460b0:	d031      	beq.n	8046116 <_dtoa_r+0x10b6>
 80460b2:	4620      	mov	r0, r4
 80460b4:	4629      	mov	r1, r5
 80460b6:	2300      	movs	r3, #0
 80460b8:	2200      	movs	r2, #0
 80460ba:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80460be:	f7fa fa1b 	bl	80404f8 <__aeabi_dmul>
 80460c2:	460d      	mov	r5, r1
 80460c4:	4604      	mov	r4, r0
 80460c6:	f7fa fcb1 	bl	8040a2c <__aeabi_d2iz>
 80460ca:	4606      	mov	r6, r0
 80460cc:	f7fa f9ae 	bl	804042c <__aeabi_i2d>
 80460d0:	4602      	mov	r2, r0
 80460d2:	460b      	mov	r3, r1
 80460d4:	4620      	mov	r0, r4
 80460d6:	4629      	mov	r1, r5
 80460d8:	f7fa f85a 	bl	8040190 <__aeabi_dsub>
 80460dc:	3630      	adds	r6, #48	; 0x30
 80460de:	2300      	movs	r3, #0
 80460e0:	2200      	movs	r2, #0
 80460e2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80460e6:	f807 6f01 	strb.w	r6, [r7, #1]!
 80460ea:	f7fa fa05 	bl	80404f8 <__aeabi_dmul>
 80460ee:	460d      	mov	r5, r1
 80460f0:	4604      	mov	r4, r0
 80460f2:	f7fa fc9b 	bl	8040a2c <__aeabi_d2iz>
 80460f6:	4606      	mov	r6, r0
 80460f8:	f7fa f998 	bl	804042c <__aeabi_i2d>
 80460fc:	3630      	adds	r6, #48	; 0x30
 80460fe:	4602      	mov	r2, r0
 8046100:	460b      	mov	r3, r1
 8046102:	4620      	mov	r0, r4
 8046104:	4629      	mov	r1, r5
 8046106:	f7fa f843 	bl	8040190 <__aeabi_dsub>
 804610a:	f807 6f01 	strb.w	r6, [r7, #1]!
 804610e:	455f      	cmp	r7, fp
 8046110:	d1d1      	bne.n	80460b6 <_dtoa_r+0x1056>
 8046112:	4604      	mov	r4, r0
 8046114:	460d      	mov	r5, r1
 8046116:	9912      	ldr	r1, [sp, #72]	; 0x48
 8046118:	448a      	add	sl, r1
 804611a:	2300      	movs	r3, #0
 804611c:	2200      	movs	r2, #0
 804611e:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8046122:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8046126:	f7fa f835 	bl	8040194 <__adddf3>
 804612a:	4622      	mov	r2, r4
 804612c:	462b      	mov	r3, r5
 804612e:	f7fa fc55 	bl	80409dc <__aeabi_dcmplt>
 8046132:	2800      	cmp	r0, #0
 8046134:	d043      	beq.n	80461be <_dtoa_r+0x115e>
 8046136:	981a      	ldr	r0, [sp, #104]	; 0x68
 8046138:	f81a 7c01 	ldrb.w	r7, [sl, #-1]
 804613c:	9007      	str	r0, [sp, #28]
 804613e:	f7ff b988 	b.w	8045452 <_dtoa_r+0x3f2>
 8046142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8046144:	2700      	movs	r7, #0
 8046146:	1a44      	subs	r4, r0, r1
 8046148:	f7ff b9f6 	b.w	8045538 <_dtoa_r+0x4d8>
 804614c:	4655      	mov	r5, sl
 804614e:	f7ff ba3d 	b.w	80455cc <_dtoa_r+0x56c>
 8046152:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8046154:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8046156:	f1c3 0736 	rsb	r7, r3, #54	; 0x36
 804615a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 804615c:	f7ff b9ec 	b.w	8045538 <_dtoa_r+0x4d8>
 8046160:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8046164:	2702      	movs	r7, #2
 8046166:	f7ff bbe6 	b.w	8045936 <_dtoa_r+0x8d6>
 804616a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 804616c:	2c00      	cmp	r4, #0
 804616e:	f43f ae4c 	beq.w	8045e0a <_dtoa_r+0xdaa>
 8046172:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8046174:	2a00      	cmp	r2, #0
 8046176:	f77f aed7 	ble.w	8045f28 <_dtoa_r+0xec8>
 804617a:	2300      	movs	r3, #0
 804617c:	2200      	movs	r2, #0
 804617e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8046182:	4650      	mov	r0, sl
 8046184:	4659      	mov	r1, fp
 8046186:	f7fa f9b7 	bl	80404f8 <__aeabi_dmul>
 804618a:	4682      	mov	sl, r0
 804618c:	1c78      	adds	r0, r7, #1
 804618e:	468b      	mov	fp, r1
 8046190:	f7fa f94c 	bl	804042c <__aeabi_i2d>
 8046194:	4602      	mov	r2, r0
 8046196:	460b      	mov	r3, r1
 8046198:	4650      	mov	r0, sl
 804619a:	4659      	mov	r1, fp
 804619c:	f7fa f9ac 	bl	80404f8 <__aeabi_dmul>
 80461a0:	2300      	movs	r3, #0
 80461a2:	2200      	movs	r2, #0
 80461a4:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80461a8:	f7f9 fff4 	bl	8040194 <__adddf3>
 80461ac:	4604      	mov	r4, r0
 80461ae:	9807      	ldr	r0, [sp, #28]
 80461b0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80461b4:	1e46      	subs	r6, r0, #1
 80461b6:	961a      	str	r6, [sp, #104]	; 0x68
 80461b8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80461ba:	f7ff bbe0 	b.w	804597e <_dtoa_r+0x91e>
 80461be:	2100      	movs	r1, #0
 80461c0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80461c4:	2000      	movs	r0, #0
 80461c6:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80461ca:	f7f9 ffe1 	bl	8040190 <__aeabi_dsub>
 80461ce:	4622      	mov	r2, r4
 80461d0:	462b      	mov	r3, r5
 80461d2:	f7fa fc21 	bl	8040a18 <__aeabi_dcmpgt>
 80461d6:	2800      	cmp	r0, #0
 80461d8:	f43f aea6 	beq.w	8045f28 <_dtoa_r+0xec8>
 80461dc:	4653      	mov	r3, sl
 80461de:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80461e2:	469a      	mov	sl, r3
 80461e4:	2a30      	cmp	r2, #48	; 0x30
 80461e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80461ea:	d0f8      	beq.n	80461de <_dtoa_r+0x117e>
 80461ec:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80461ee:	9407      	str	r4, [sp, #28]
 80461f0:	f7ff b94d 	b.w	804548e <_dtoa_r+0x42e>
 80461f4:	4647      	mov	r7, r8
 80461f6:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80461fa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80461fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8046200:	9107      	str	r1, [sp, #28]
 8046202:	f7ff b926 	b.w	8045452 <_dtoa_r+0x3f2>
 8046206:	bf00      	nop
 8046208:	08048270 	.word	0x08048270
 804620c:	08048338 	.word	0x08048338
 8046210:	f47f ad8e 	bne.w	8045d30 <_dtoa_r+0xcd0>
 8046214:	f01b 0f01 	tst.w	fp, #1
 8046218:	f43f ad8a 	beq.w	8045d30 <_dtoa_r+0xcd0>
 804621c:	e665      	b.n	8045eea <_dtoa_r+0xe8a>
 804621e:	2700      	movs	r7, #0
 8046220:	e620      	b.n	8045e64 <_dtoa_r+0xe04>
 8046222:	2300      	movs	r3, #0
 8046224:	4648      	mov	r0, r9
 8046226:	990c      	ldr	r1, [sp, #48]	; 0x30
 8046228:	220a      	movs	r2, #10
 804622a:	f000 fc9d 	bl	8046b68 <__multadd>
 804622e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8046230:	900c      	str	r0, [sp, #48]	; 0x30
 8046232:	9309      	str	r3, [sp, #36]	; 0x24
 8046234:	f7ff b9f6 	b.w	8045624 <_dtoa_r+0x5c4>
 8046238:	2702      	movs	r7, #2
 804623a:	f7ff bb7c 	b.w	8045936 <_dtoa_r+0x8d6>
 804623e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8046240:	9207      	str	r2, [sp, #28]
 8046242:	f7ff b906 	b.w	8045452 <_dtoa_r+0x3f2>
 8046246:	f43f a9d9 	beq.w	80455fc <_dtoa_r+0x59c>
 804624a:	f1c0 033c 	rsb	r3, r0, #60	; 0x3c
 804624e:	f7ff ba85 	b.w	804575c <_dtoa_r+0x6fc>
 8046252:	2501      	movs	r5, #1
 8046254:	f7fe bfe2 	b.w	804521c <_dtoa_r+0x1bc>

08046258 <_malloc_trim_r>:
 8046258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804625a:	4d22      	ldr	r5, [pc, #136]	; (80462e4 <_malloc_trim_r+0x8c>)
 804625c:	460f      	mov	r7, r1
 804625e:	4604      	mov	r4, r0
 8046260:	f000 fc4e 	bl	8046b00 <__malloc_lock>
 8046264:	68ab      	ldr	r3, [r5, #8]
 8046266:	685e      	ldr	r6, [r3, #4]
 8046268:	f026 0603 	bic.w	r6, r6, #3
 804626c:	f606 70ef 	addw	r0, r6, #4079	; 0xfef
 8046270:	1bc1      	subs	r1, r0, r7
 8046272:	0b0a      	lsrs	r2, r1, #12
 8046274:	1e57      	subs	r7, r2, #1
 8046276:	033f      	lsls	r7, r7, #12
 8046278:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 804627c:	db07      	blt.n	804628e <_malloc_trim_r+0x36>
 804627e:	2100      	movs	r1, #0
 8046280:	4620      	mov	r0, r4
 8046282:	f001 f97b 	bl	804757c <_sbrk_r>
 8046286:	68ab      	ldr	r3, [r5, #8]
 8046288:	1999      	adds	r1, r3, r6
 804628a:	4288      	cmp	r0, r1
 804628c:	d004      	beq.n	8046298 <_malloc_trim_r+0x40>
 804628e:	4620      	mov	r0, r4
 8046290:	f000 fc38 	bl	8046b04 <__malloc_unlock>
 8046294:	2000      	movs	r0, #0
 8046296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8046298:	4279      	negs	r1, r7
 804629a:	4620      	mov	r0, r4
 804629c:	f001 f96e 	bl	804757c <_sbrk_r>
 80462a0:	3001      	adds	r0, #1
 80462a2:	d00d      	beq.n	80462c0 <_malloc_trim_r+0x68>
 80462a4:	4b10      	ldr	r3, [pc, #64]	; (80462e8 <_malloc_trim_r+0x90>)
 80462a6:	68a8      	ldr	r0, [r5, #8]
 80462a8:	681a      	ldr	r2, [r3, #0]
 80462aa:	1bf6      	subs	r6, r6, r7
 80462ac:	f046 0601 	orr.w	r6, r6, #1
 80462b0:	1bd7      	subs	r7, r2, r7
 80462b2:	6046      	str	r6, [r0, #4]
 80462b4:	4620      	mov	r0, r4
 80462b6:	601f      	str	r7, [r3, #0]
 80462b8:	f000 fc24 	bl	8046b04 <__malloc_unlock>
 80462bc:	2001      	movs	r0, #1
 80462be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80462c0:	2100      	movs	r1, #0
 80462c2:	4620      	mov	r0, r4
 80462c4:	f001 f95a 	bl	804757c <_sbrk_r>
 80462c8:	68ab      	ldr	r3, [r5, #8]
 80462ca:	1ac2      	subs	r2, r0, r3
 80462cc:	2a0f      	cmp	r2, #15
 80462ce:	ddde      	ble.n	804628e <_malloc_trim_r+0x36>
 80462d0:	4906      	ldr	r1, [pc, #24]	; (80462ec <_malloc_trim_r+0x94>)
 80462d2:	f042 0201 	orr.w	r2, r2, #1
 80462d6:	6809      	ldr	r1, [r1, #0]
 80462d8:	605a      	str	r2, [r3, #4]
 80462da:	1a40      	subs	r0, r0, r1
 80462dc:	4902      	ldr	r1, [pc, #8]	; (80462e8 <_malloc_trim_r+0x90>)
 80462de:	6008      	str	r0, [r1, #0]
 80462e0:	e7d5      	b.n	804628e <_malloc_trim_r+0x36>
 80462e2:	bf00      	nop
 80462e4:	20001584 	.word	0x20001584
 80462e8:	200019c4 	.word	0x200019c4
 80462ec:	20001990 	.word	0x20001990

080462f0 <_free_r>:
 80462f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80462f4:	460d      	mov	r5, r1
 80462f6:	4606      	mov	r6, r0
 80462f8:	2900      	cmp	r1, #0
 80462fa:	d055      	beq.n	80463a8 <_free_r+0xb8>
 80462fc:	f000 fc00 	bl	8046b00 <__malloc_lock>
 8046300:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8046304:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8046474 <_free_r+0x184>
 8046308:	f1a5 0408 	sub.w	r4, r5, #8
 804630c:	f021 0301 	bic.w	r3, r1, #1
 8046310:	18e2      	adds	r2, r4, r3
 8046312:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8046316:	6857      	ldr	r7, [r2, #4]
 8046318:	4290      	cmp	r0, r2
 804631a:	f027 0703 	bic.w	r7, r7, #3
 804631e:	d065      	beq.n	80463ec <_free_r+0xfc>
 8046320:	f011 0101 	ands.w	r1, r1, #1
 8046324:	6057      	str	r7, [r2, #4]
 8046326:	d032      	beq.n	804638e <_free_r+0x9e>
 8046328:	2100      	movs	r1, #0
 804632a:	19d0      	adds	r0, r2, r7
 804632c:	6840      	ldr	r0, [r0, #4]
 804632e:	07c0      	lsls	r0, r0, #31
 8046330:	d406      	bmi.n	8046340 <_free_r+0x50>
 8046332:	19db      	adds	r3, r3, r7
 8046334:	6890      	ldr	r0, [r2, #8]
 8046336:	2900      	cmp	r1, #0
 8046338:	d04a      	beq.n	80463d0 <_free_r+0xe0>
 804633a:	68d2      	ldr	r2, [r2, #12]
 804633c:	60c2      	str	r2, [r0, #12]
 804633e:	6090      	str	r0, [r2, #8]
 8046340:	f043 0001 	orr.w	r0, r3, #1
 8046344:	6060      	str	r0, [r4, #4]
 8046346:	50e3      	str	r3, [r4, r3]
 8046348:	b9e1      	cbnz	r1, 8046384 <_free_r+0x94>
 804634a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804634e:	d32d      	bcc.n	80463ac <_free_r+0xbc>
 8046350:	0a5a      	lsrs	r2, r3, #9
 8046352:	2a04      	cmp	r2, #4
 8046354:	d866      	bhi.n	8046424 <_free_r+0x134>
 8046356:	0998      	lsrs	r0, r3, #6
 8046358:	3038      	adds	r0, #56	; 0x38
 804635a:	0042      	lsls	r2, r0, #1
 804635c:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8046360:	f8de 2008 	ldr.w	r2, [lr, #8]
 8046364:	4943      	ldr	r1, [pc, #268]	; (8046474 <_free_r+0x184>)
 8046366:	4572      	cmp	r2, lr
 8046368:	d062      	beq.n	8046430 <_free_r+0x140>
 804636a:	6850      	ldr	r0, [r2, #4]
 804636c:	f020 0103 	bic.w	r1, r0, #3
 8046370:	428b      	cmp	r3, r1
 8046372:	d202      	bcs.n	804637a <_free_r+0x8a>
 8046374:	6892      	ldr	r2, [r2, #8]
 8046376:	4596      	cmp	lr, r2
 8046378:	d1f7      	bne.n	804636a <_free_r+0x7a>
 804637a:	68d3      	ldr	r3, [r2, #12]
 804637c:	60e3      	str	r3, [r4, #12]
 804637e:	60a2      	str	r2, [r4, #8]
 8046380:	60d4      	str	r4, [r2, #12]
 8046382:	609c      	str	r4, [r3, #8]
 8046384:	4630      	mov	r0, r6
 8046386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804638a:	f000 bbbb 	b.w	8046b04 <__malloc_unlock>
 804638e:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8046392:	f10c 0808 	add.w	r8, ip, #8
 8046396:	1b64      	subs	r4, r4, r5
 8046398:	68a0      	ldr	r0, [r4, #8]
 804639a:	195b      	adds	r3, r3, r5
 804639c:	4540      	cmp	r0, r8
 804639e:	d03f      	beq.n	8046420 <_free_r+0x130>
 80463a0:	68e5      	ldr	r5, [r4, #12]
 80463a2:	60c5      	str	r5, [r0, #12]
 80463a4:	60a8      	str	r0, [r5, #8]
 80463a6:	e7c0      	b.n	804632a <_free_r+0x3a>
 80463a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80463ac:	08d9      	lsrs	r1, r3, #3
 80463ae:	108a      	asrs	r2, r1, #2
 80463b0:	2001      	movs	r0, #1
 80463b2:	fa00 f002 	lsl.w	r0, r0, r2
 80463b6:	eb0c 03c1 	add.w	r3, ip, r1, lsl #3
 80463ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80463be:	689a      	ldr	r2, [r3, #8]
 80463c0:	4308      	orrs	r0, r1
 80463c2:	60e3      	str	r3, [r4, #12]
 80463c4:	60a2      	str	r2, [r4, #8]
 80463c6:	f8cc 0004 	str.w	r0, [ip, #4]
 80463ca:	609c      	str	r4, [r3, #8]
 80463cc:	60d4      	str	r4, [r2, #12]
 80463ce:	e7d9      	b.n	8046384 <_free_r+0x94>
 80463d0:	4d29      	ldr	r5, [pc, #164]	; (8046478 <_free_r+0x188>)
 80463d2:	42a8      	cmp	r0, r5
 80463d4:	d1b1      	bne.n	804633a <_free_r+0x4a>
 80463d6:	f043 0101 	orr.w	r1, r3, #1
 80463da:	f8cc 4014 	str.w	r4, [ip, #20]
 80463de:	f8cc 4010 	str.w	r4, [ip, #16]
 80463e2:	60e0      	str	r0, [r4, #12]
 80463e4:	60a0      	str	r0, [r4, #8]
 80463e6:	6061      	str	r1, [r4, #4]
 80463e8:	50e3      	str	r3, [r4, r3]
 80463ea:	e7cb      	b.n	8046384 <_free_r+0x94>
 80463ec:	18ff      	adds	r7, r7, r3
 80463ee:	07cb      	lsls	r3, r1, #31
 80463f0:	d407      	bmi.n	8046402 <_free_r+0x112>
 80463f2:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80463f6:	1a24      	subs	r4, r4, r0
 80463f8:	68e3      	ldr	r3, [r4, #12]
 80463fa:	68a2      	ldr	r2, [r4, #8]
 80463fc:	183f      	adds	r7, r7, r0
 80463fe:	60d3      	str	r3, [r2, #12]
 8046400:	609a      	str	r2, [r3, #8]
 8046402:	481e      	ldr	r0, [pc, #120]	; (804647c <_free_r+0x18c>)
 8046404:	f047 0101 	orr.w	r1, r7, #1
 8046408:	6803      	ldr	r3, [r0, #0]
 804640a:	6061      	str	r1, [r4, #4]
 804640c:	429f      	cmp	r7, r3
 804640e:	f8cc 4008 	str.w	r4, [ip, #8]
 8046412:	d3b7      	bcc.n	8046384 <_free_r+0x94>
 8046414:	4a1a      	ldr	r2, [pc, #104]	; (8046480 <_free_r+0x190>)
 8046416:	4630      	mov	r0, r6
 8046418:	6811      	ldr	r1, [r2, #0]
 804641a:	f7ff ff1d 	bl	8046258 <_malloc_trim_r>
 804641e:	e7b1      	b.n	8046384 <_free_r+0x94>
 8046420:	2101      	movs	r1, #1
 8046422:	e782      	b.n	804632a <_free_r+0x3a>
 8046424:	2a14      	cmp	r2, #20
 8046426:	d80c      	bhi.n	8046442 <_free_r+0x152>
 8046428:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 804642c:	0042      	lsls	r2, r0, #1
 804642e:	e795      	b.n	804635c <_free_r+0x6c>
 8046430:	1080      	asrs	r0, r0, #2
 8046432:	2501      	movs	r5, #1
 8046434:	fa05 f500 	lsl.w	r5, r5, r0
 8046438:	6848      	ldr	r0, [r1, #4]
 804643a:	4613      	mov	r3, r2
 804643c:	4328      	orrs	r0, r5
 804643e:	6048      	str	r0, [r1, #4]
 8046440:	e79c      	b.n	804637c <_free_r+0x8c>
 8046442:	2a54      	cmp	r2, #84	; 0x54
 8046444:	d803      	bhi.n	804644e <_free_r+0x15e>
 8046446:	0b18      	lsrs	r0, r3, #12
 8046448:	306e      	adds	r0, #110	; 0x6e
 804644a:	0042      	lsls	r2, r0, #1
 804644c:	e786      	b.n	804635c <_free_r+0x6c>
 804644e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8046452:	d803      	bhi.n	804645c <_free_r+0x16c>
 8046454:	0bd8      	lsrs	r0, r3, #15
 8046456:	3077      	adds	r0, #119	; 0x77
 8046458:	0042      	lsls	r2, r0, #1
 804645a:	e77f      	b.n	804635c <_free_r+0x6c>
 804645c:	f240 5154 	movw	r1, #1364	; 0x554
 8046460:	428a      	cmp	r2, r1
 8046462:	d803      	bhi.n	804646c <_free_r+0x17c>
 8046464:	0c98      	lsrs	r0, r3, #18
 8046466:	307c      	adds	r0, #124	; 0x7c
 8046468:	0042      	lsls	r2, r0, #1
 804646a:	e777      	b.n	804635c <_free_r+0x6c>
 804646c:	22fc      	movs	r2, #252	; 0xfc
 804646e:	207e      	movs	r0, #126	; 0x7e
 8046470:	e774      	b.n	804635c <_free_r+0x6c>
 8046472:	bf00      	nop
 8046474:	20001584 	.word	0x20001584
 8046478:	2000158c 	.word	0x2000158c
 804647c:	2000198c 	.word	0x2000198c
 8046480:	200019c0 	.word	0x200019c0

08046484 <_localeconv_r>:
 8046484:	f241 504c 	movw	r0, #5452	; 0x154c
 8046488:	f2c2 0000 	movt	r0, #8192	; 0x2000
 804648c:	4770      	bx	lr
 804648e:	bf00      	nop

08046490 <_malloc_r>:
 8046490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046494:	f101 050b 	add.w	r5, r1, #11
 8046498:	2d16      	cmp	r5, #22
 804649a:	b083      	sub	sp, #12
 804649c:	4606      	mov	r6, r0
 804649e:	d927      	bls.n	80464f0 <_malloc_r+0x60>
 80464a0:	f035 0507 	bics.w	r5, r5, #7
 80464a4:	d427      	bmi.n	80464f6 <_malloc_r+0x66>
 80464a6:	42a9      	cmp	r1, r5
 80464a8:	d825      	bhi.n	80464f6 <_malloc_r+0x66>
 80464aa:	4630      	mov	r0, r6
 80464ac:	f000 fb28 	bl	8046b00 <__malloc_lock>
 80464b0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80464b4:	d223      	bcs.n	80464fe <_malloc_r+0x6e>
 80464b6:	4fb9      	ldr	r7, [pc, #740]	; (804679c <_malloc_r+0x30c>)
 80464b8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 80464bc:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80464c0:	68d4      	ldr	r4, [r2, #12]
 80464c2:	4294      	cmp	r4, r2
 80464c4:	f000 81d8 	beq.w	8046878 <_malloc_r+0x3e8>
 80464c8:	6863      	ldr	r3, [r4, #4]
 80464ca:	68e2      	ldr	r2, [r4, #12]
 80464cc:	f023 0103 	bic.w	r1, r3, #3
 80464d0:	1863      	adds	r3, r4, r1
 80464d2:	6858      	ldr	r0, [r3, #4]
 80464d4:	68a1      	ldr	r1, [r4, #8]
 80464d6:	f040 0001 	orr.w	r0, r0, #1
 80464da:	6058      	str	r0, [r3, #4]
 80464dc:	60ca      	str	r2, [r1, #12]
 80464de:	6091      	str	r1, [r2, #8]
 80464e0:	4630      	mov	r0, r6
 80464e2:	f000 fb0f 	bl	8046b04 <__malloc_unlock>
 80464e6:	3408      	adds	r4, #8
 80464e8:	4620      	mov	r0, r4
 80464ea:	b003      	add	sp, #12
 80464ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80464f0:	2510      	movs	r5, #16
 80464f2:	42a9      	cmp	r1, r5
 80464f4:	d9d9      	bls.n	80464aa <_malloc_r+0x1a>
 80464f6:	240c      	movs	r4, #12
 80464f8:	6034      	str	r4, [r6, #0]
 80464fa:	2400      	movs	r4, #0
 80464fc:	e7f4      	b.n	80464e8 <_malloc_r+0x58>
 80464fe:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8046502:	f000 8089 	beq.w	8046618 <_malloc_r+0x188>
 8046506:	f1bc 0f04 	cmp.w	ip, #4
 804650a:	f200 8153 	bhi.w	80467b4 <_malloc_r+0x324>
 804650e:	ea4f 1795 	mov.w	r7, r5, lsr #6
 8046512:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 8046516:	ea4f 014e 	mov.w	r1, lr, lsl #1
 804651a:	4fa0      	ldr	r7, [pc, #640]	; (804679c <_malloc_r+0x30c>)
 804651c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8046520:	68cc      	ldr	r4, [r1, #12]
 8046522:	42a1      	cmp	r1, r4
 8046524:	d105      	bne.n	8046532 <_malloc_r+0xa2>
 8046526:	e00c      	b.n	8046542 <_malloc_r+0xb2>
 8046528:	2a00      	cmp	r2, #0
 804652a:	da7a      	bge.n	8046622 <_malloc_r+0x192>
 804652c:	68e4      	ldr	r4, [r4, #12]
 804652e:	42a1      	cmp	r1, r4
 8046530:	d007      	beq.n	8046542 <_malloc_r+0xb2>
 8046532:	6863      	ldr	r3, [r4, #4]
 8046534:	f023 0003 	bic.w	r0, r3, #3
 8046538:	1b42      	subs	r2, r0, r5
 804653a:	2a0f      	cmp	r2, #15
 804653c:	ddf4      	ble.n	8046528 <_malloc_r+0x98>
 804653e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8046542:	f10e 0c01 	add.w	ip, lr, #1
 8046546:	4b95      	ldr	r3, [pc, #596]	; (804679c <_malloc_r+0x30c>)
 8046548:	693c      	ldr	r4, [r7, #16]
 804654a:	f103 0e08 	add.w	lr, r3, #8
 804654e:	4574      	cmp	r4, lr
 8046550:	f000 8170 	beq.w	8046834 <_malloc_r+0x3a4>
 8046554:	6861      	ldr	r1, [r4, #4]
 8046556:	f021 0103 	bic.w	r1, r1, #3
 804655a:	1b4a      	subs	r2, r1, r5
 804655c:	2a0f      	cmp	r2, #15
 804655e:	f300 8156 	bgt.w	804680e <_malloc_r+0x37e>
 8046562:	2a00      	cmp	r2, #0
 8046564:	f8c3 e014 	str.w	lr, [r3, #20]
 8046568:	f8c3 e010 	str.w	lr, [r3, #16]
 804656c:	da67      	bge.n	804663e <_malloc_r+0x1ae>
 804656e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8046572:	f080 812d 	bcs.w	80467d0 <_malloc_r+0x340>
 8046576:	08c9      	lsrs	r1, r1, #3
 8046578:	1088      	asrs	r0, r1, #2
 804657a:	f04f 0801 	mov.w	r8, #1
 804657e:	fa08 f800 	lsl.w	r8, r8, r0
 8046582:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8046586:	685a      	ldr	r2, [r3, #4]
 8046588:	6888      	ldr	r0, [r1, #8]
 804658a:	ea48 0202 	orr.w	r2, r8, r2
 804658e:	60e1      	str	r1, [r4, #12]
 8046590:	60a0      	str	r0, [r4, #8]
 8046592:	605a      	str	r2, [r3, #4]
 8046594:	608c      	str	r4, [r1, #8]
 8046596:	60c4      	str	r4, [r0, #12]
 8046598:	2001      	movs	r0, #1
 804659a:	ea4f 04ac 	mov.w	r4, ip, asr #2
 804659e:	fa00 f004 	lsl.w	r0, r0, r4
 80465a2:	4290      	cmp	r0, r2
 80465a4:	d855      	bhi.n	8046652 <_malloc_r+0x1c2>
 80465a6:	4202      	tst	r2, r0
 80465a8:	d106      	bne.n	80465b8 <_malloc_r+0x128>
 80465aa:	f02c 0c03 	bic.w	ip, ip, #3
 80465ae:	0040      	lsls	r0, r0, #1
 80465b0:	4202      	tst	r2, r0
 80465b2:	f10c 0c04 	add.w	ip, ip, #4
 80465b6:	d0fa      	beq.n	80465ae <_malloc_r+0x11e>
 80465b8:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
 80465bc:	464c      	mov	r4, r9
 80465be:	46e0      	mov	r8, ip
 80465c0:	68e3      	ldr	r3, [r4, #12]
 80465c2:	429c      	cmp	r4, r3
 80465c4:	d107      	bne.n	80465d6 <_malloc_r+0x146>
 80465c6:	e137      	b.n	8046838 <_malloc_r+0x3a8>
 80465c8:	2a00      	cmp	r2, #0
 80465ca:	f280 815f 	bge.w	804688c <_malloc_r+0x3fc>
 80465ce:	68db      	ldr	r3, [r3, #12]
 80465d0:	429c      	cmp	r4, r3
 80465d2:	f000 8131 	beq.w	8046838 <_malloc_r+0x3a8>
 80465d6:	6859      	ldr	r1, [r3, #4]
 80465d8:	f021 0103 	bic.w	r1, r1, #3
 80465dc:	1b4a      	subs	r2, r1, r5
 80465de:	2a0f      	cmp	r2, #15
 80465e0:	ddf2      	ble.n	80465c8 <_malloc_r+0x138>
 80465e2:	461c      	mov	r4, r3
 80465e4:	68d8      	ldr	r0, [r3, #12]
 80465e6:	f854 cf08 	ldr.w	ip, [r4, #8]!
 80465ea:	1959      	adds	r1, r3, r5
 80465ec:	f045 0801 	orr.w	r8, r5, #1
 80465f0:	f042 0501 	orr.w	r5, r2, #1
 80465f4:	f8cc 000c 	str.w	r0, [ip, #12]
 80465f8:	f8c0 c008 	str.w	ip, [r0, #8]
 80465fc:	f8c3 8004 	str.w	r8, [r3, #4]
 8046600:	6179      	str	r1, [r7, #20]
 8046602:	6139      	str	r1, [r7, #16]
 8046604:	f8c1 e00c 	str.w	lr, [r1, #12]
 8046608:	f8c1 e008 	str.w	lr, [r1, #8]
 804660c:	604d      	str	r5, [r1, #4]
 804660e:	508a      	str	r2, [r1, r2]
 8046610:	4630      	mov	r0, r6
 8046612:	f000 fa77 	bl	8046b04 <__malloc_unlock>
 8046616:	e767      	b.n	80464e8 <_malloc_r+0x58>
 8046618:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 804661c:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8046620:	e77b      	b.n	804651a <_malloc_r+0x8a>
 8046622:	1822      	adds	r2, r4, r0
 8046624:	6850      	ldr	r0, [r2, #4]
 8046626:	68e3      	ldr	r3, [r4, #12]
 8046628:	68a1      	ldr	r1, [r4, #8]
 804662a:	f040 0001 	orr.w	r0, r0, #1
 804662e:	6050      	str	r0, [r2, #4]
 8046630:	60cb      	str	r3, [r1, #12]
 8046632:	6099      	str	r1, [r3, #8]
 8046634:	4630      	mov	r0, r6
 8046636:	f000 fa65 	bl	8046b04 <__malloc_unlock>
 804663a:	3408      	adds	r4, #8
 804663c:	e754      	b.n	80464e8 <_malloc_r+0x58>
 804663e:	1862      	adds	r2, r4, r1
 8046640:	6853      	ldr	r3, [r2, #4]
 8046642:	4630      	mov	r0, r6
 8046644:	f043 0101 	orr.w	r1, r3, #1
 8046648:	6051      	str	r1, [r2, #4]
 804664a:	f000 fa5b 	bl	8046b04 <__malloc_unlock>
 804664e:	3408      	adds	r4, #8
 8046650:	e74a      	b.n	80464e8 <_malloc_r+0x58>
 8046652:	68bc      	ldr	r4, [r7, #8]
 8046654:	6860      	ldr	r0, [r4, #4]
 8046656:	f020 0903 	bic.w	r9, r0, #3
 804665a:	45a9      	cmp	r9, r5
 804665c:	d304      	bcc.n	8046668 <_malloc_r+0x1d8>
 804665e:	ebc5 0309 	rsb	r3, r5, r9
 8046662:	2b0f      	cmp	r3, #15
 8046664:	f300 808d 	bgt.w	8046782 <_malloc_r+0x2f2>
 8046668:	4a4d      	ldr	r2, [pc, #308]	; (80467a0 <_malloc_r+0x310>)
 804666a:	4b4e      	ldr	r3, [pc, #312]	; (80467a4 <_malloc_r+0x314>)
 804666c:	6811      	ldr	r1, [r2, #0]
 804666e:	6818      	ldr	r0, [r3, #0]
 8046670:	3101      	adds	r1, #1
 8046672:	eb04 0b09 	add.w	fp, r4, r9
 8046676:	eb05 0300 	add.w	r3, r5, r0
 804667a:	f000 8151 	beq.w	8046920 <_malloc_r+0x490>
 804667e:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8046682:	300f      	adds	r0, #15
 8046684:	f420 617f 	bic.w	r1, r0, #4080	; 0xff0
 8046688:	f021 0c0f 	bic.w	ip, r1, #15
 804668c:	4661      	mov	r1, ip
 804668e:	4630      	mov	r0, r6
 8046690:	e88d 1004 	stmia.w	sp, {r2, ip}
 8046694:	f000 ff72 	bl	804757c <_sbrk_r>
 8046698:	e89d 1004 	ldmia.w	sp, {r2, ip}
 804669c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80466a0:	4680      	mov	r8, r0
 80466a2:	f000 8146 	beq.w	8046932 <_malloc_r+0x4a2>
 80466a6:	4583      	cmp	fp, r0
 80466a8:	f200 8108 	bhi.w	80468bc <_malloc_r+0x42c>
 80466ac:	f8df a100 	ldr.w	sl, [pc, #256]	; 80467b0 <_malloc_r+0x320>
 80466b0:	45c3      	cmp	fp, r8
 80466b2:	f8da 3000 	ldr.w	r3, [sl]
 80466b6:	4463      	add	r3, ip
 80466b8:	f8ca 3000 	str.w	r3, [sl]
 80466bc:	f000 813e 	beq.w	804693c <_malloc_r+0x4ac>
 80466c0:	6812      	ldr	r2, [r2, #0]
 80466c2:	3201      	adds	r2, #1
 80466c4:	f000 814b 	beq.w	804695e <_malloc_r+0x4ce>
 80466c8:	ebcb 0b08 	rsb	fp, fp, r8
 80466cc:	445b      	add	r3, fp
 80466ce:	f8ca 3000 	str.w	r3, [sl]
 80466d2:	f018 0107 	ands.w	r1, r8, #7
 80466d6:	f000 8104 	beq.w	80468e2 <_malloc_r+0x452>
 80466da:	f1c1 0008 	rsb	r0, r1, #8
 80466de:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 80466e2:	4480      	add	r8, r0
 80466e4:	f103 0208 	add.w	r2, r3, #8
 80466e8:	eb08 010c 	add.w	r1, r8, ip
 80466ec:	0508      	lsls	r0, r1, #20
 80466ee:	0d03      	lsrs	r3, r0, #20
 80466f0:	ebc3 0b02 	rsb	fp, r3, r2
 80466f4:	4630      	mov	r0, r6
 80466f6:	4659      	mov	r1, fp
 80466f8:	f000 ff40 	bl	804757c <_sbrk_r>
 80466fc:	1c43      	adds	r3, r0, #1
 80466fe:	f000 813a 	beq.w	8046976 <_malloc_r+0x4e6>
 8046702:	ebc8 0200 	rsb	r2, r8, r0
 8046706:	eb0b 0102 	add.w	r1, fp, r2
 804670a:	f041 0001 	orr.w	r0, r1, #1
 804670e:	f8da 3000 	ldr.w	r3, [sl]
 8046712:	42bc      	cmp	r4, r7
 8046714:	445b      	add	r3, fp
 8046716:	f8c7 8008 	str.w	r8, [r7, #8]
 804671a:	f8ca 3000 	str.w	r3, [sl]
 804671e:	f8c8 0004 	str.w	r0, [r8, #4]
 8046722:	d015      	beq.n	8046750 <_malloc_r+0x2c0>
 8046724:	f1b9 0f0f 	cmp.w	r9, #15
 8046728:	f240 80e9 	bls.w	80468fe <_malloc_r+0x46e>
 804672c:	6861      	ldr	r1, [r4, #4]
 804672e:	f1a9 020c 	sub.w	r2, r9, #12
 8046732:	f022 0207 	bic.w	r2, r2, #7
 8046736:	f001 0c01 	and.w	ip, r1, #1
 804673a:	2005      	movs	r0, #5
 804673c:	18a1      	adds	r1, r4, r2
 804673e:	ea42 0e0c 	orr.w	lr, r2, ip
 8046742:	2a0f      	cmp	r2, #15
 8046744:	f8c4 e004 	str.w	lr, [r4, #4]
 8046748:	6048      	str	r0, [r1, #4]
 804674a:	6088      	str	r0, [r1, #8]
 804674c:	f200 810b 	bhi.w	8046966 <_malloc_r+0x4d6>
 8046750:	4a15      	ldr	r2, [pc, #84]	; (80467a8 <_malloc_r+0x318>)
 8046752:	68bc      	ldr	r4, [r7, #8]
 8046754:	6810      	ldr	r0, [r2, #0]
 8046756:	4283      	cmp	r3, r0
 8046758:	bf88      	it	hi
 804675a:	6013      	strhi	r3, [r2, #0]
 804675c:	4a13      	ldr	r2, [pc, #76]	; (80467ac <_malloc_r+0x31c>)
 804675e:	6811      	ldr	r1, [r2, #0]
 8046760:	428b      	cmp	r3, r1
 8046762:	bf88      	it	hi
 8046764:	6013      	strhi	r3, [r2, #0]
 8046766:	6863      	ldr	r3, [r4, #4]
 8046768:	f023 0003 	bic.w	r0, r3, #3
 804676c:	42a8      	cmp	r0, r5
 804676e:	ebc5 0300 	rsb	r3, r5, r0
 8046772:	d301      	bcc.n	8046778 <_malloc_r+0x2e8>
 8046774:	2b0f      	cmp	r3, #15
 8046776:	dc04      	bgt.n	8046782 <_malloc_r+0x2f2>
 8046778:	4630      	mov	r0, r6
 804677a:	f000 f9c3 	bl	8046b04 <__malloc_unlock>
 804677e:	2400      	movs	r4, #0
 8046780:	e6b2      	b.n	80464e8 <_malloc_r+0x58>
 8046782:	1962      	adds	r2, r4, r5
 8046784:	f043 0101 	orr.w	r1, r3, #1
 8046788:	f045 0501 	orr.w	r5, r5, #1
 804678c:	6065      	str	r5, [r4, #4]
 804678e:	4630      	mov	r0, r6
 8046790:	6051      	str	r1, [r2, #4]
 8046792:	60ba      	str	r2, [r7, #8]
 8046794:	f000 f9b6 	bl	8046b04 <__malloc_unlock>
 8046798:	3408      	adds	r4, #8
 804679a:	e6a5      	b.n	80464e8 <_malloc_r+0x58>
 804679c:	20001584 	.word	0x20001584
 80467a0:	20001990 	.word	0x20001990
 80467a4:	200019c0 	.word	0x200019c0
 80467a8:	200019bc 	.word	0x200019bc
 80467ac:	200019b8 	.word	0x200019b8
 80467b0:	200019c4 	.word	0x200019c4
 80467b4:	f1bc 0f14 	cmp.w	ip, #20
 80467b8:	d977      	bls.n	80468aa <_malloc_r+0x41a>
 80467ba:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80467be:	f200 8086 	bhi.w	80468ce <_malloc_r+0x43e>
 80467c2:	ea4f 3415 	mov.w	r4, r5, lsr #12
 80467c6:	f104 0e6e 	add.w	lr, r4, #110	; 0x6e
 80467ca:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80467ce:	e6a4      	b.n	804651a <_malloc_r+0x8a>
 80467d0:	0a48      	lsrs	r0, r1, #9
 80467d2:	2804      	cmp	r0, #4
 80467d4:	d96e      	bls.n	80468b4 <_malloc_r+0x424>
 80467d6:	2814      	cmp	r0, #20
 80467d8:	f200 80a5 	bhi.w	8046926 <_malloc_r+0x496>
 80467dc:	f100 025b 	add.w	r2, r0, #91	; 0x5b
 80467e0:	0050      	lsls	r0, r2, #1
 80467e2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80467e6:	6883      	ldr	r3, [r0, #8]
 80467e8:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80469b4 <_malloc_r+0x524>
 80467ec:	4283      	cmp	r3, r0
 80467ee:	d07b      	beq.n	80468e8 <_malloc_r+0x458>
 80467f0:	685a      	ldr	r2, [r3, #4]
 80467f2:	f022 0203 	bic.w	r2, r2, #3
 80467f6:	4291      	cmp	r1, r2
 80467f8:	d202      	bcs.n	8046800 <_malloc_r+0x370>
 80467fa:	689b      	ldr	r3, [r3, #8]
 80467fc:	4298      	cmp	r0, r3
 80467fe:	d1f7      	bne.n	80467f0 <_malloc_r+0x360>
 8046800:	68d9      	ldr	r1, [r3, #12]
 8046802:	687a      	ldr	r2, [r7, #4]
 8046804:	60e1      	str	r1, [r4, #12]
 8046806:	60a3      	str	r3, [r4, #8]
 8046808:	60dc      	str	r4, [r3, #12]
 804680a:	608c      	str	r4, [r1, #8]
 804680c:	e6c4      	b.n	8046598 <_malloc_r+0x108>
 804680e:	1961      	adds	r1, r4, r5
 8046810:	f042 0001 	orr.w	r0, r2, #1
 8046814:	f045 0501 	orr.w	r5, r5, #1
 8046818:	6065      	str	r5, [r4, #4]
 804681a:	6159      	str	r1, [r3, #20]
 804681c:	6119      	str	r1, [r3, #16]
 804681e:	6048      	str	r0, [r1, #4]
 8046820:	f8c1 e00c 	str.w	lr, [r1, #12]
 8046824:	f8c1 e008 	str.w	lr, [r1, #8]
 8046828:	508a      	str	r2, [r1, r2]
 804682a:	4630      	mov	r0, r6
 804682c:	f000 f96a 	bl	8046b04 <__malloc_unlock>
 8046830:	3408      	adds	r4, #8
 8046832:	e659      	b.n	80464e8 <_malloc_r+0x58>
 8046834:	685a      	ldr	r2, [r3, #4]
 8046836:	e6af      	b.n	8046598 <_malloc_r+0x108>
 8046838:	f108 0801 	add.w	r8, r8, #1
 804683c:	3408      	adds	r4, #8
 804683e:	f018 0f03 	tst.w	r8, #3
 8046842:	f47f aebd 	bne.w	80465c0 <_malloc_r+0x130>
 8046846:	4649      	mov	r1, r9
 8046848:	f01c 0f03 	tst.w	ip, #3
 804684c:	f1a1 0408 	sub.w	r4, r1, #8
 8046850:	f10c 3cff 	add.w	ip, ip, #4294967295
 8046854:	f000 80a2 	beq.w	804699c <_malloc_r+0x50c>
 8046858:	6809      	ldr	r1, [r1, #0]
 804685a:	42a1      	cmp	r1, r4
 804685c:	d0f4      	beq.n	8046848 <_malloc_r+0x3b8>
 804685e:	687c      	ldr	r4, [r7, #4]
 8046860:	0040      	lsls	r0, r0, #1
 8046862:	42a0      	cmp	r0, r4
 8046864:	f63f aef5 	bhi.w	8046652 <_malloc_r+0x1c2>
 8046868:	2800      	cmp	r0, #0
 804686a:	f43f aef2 	beq.w	8046652 <_malloc_r+0x1c2>
 804686e:	4204      	tst	r4, r0
 8046870:	f000 8099 	beq.w	80469a6 <_malloc_r+0x516>
 8046874:	46c4      	mov	ip, r8
 8046876:	e69f      	b.n	80465b8 <_malloc_r+0x128>
 8046878:	f104 0308 	add.w	r3, r4, #8
 804687c:	6964      	ldr	r4, [r4, #20]
 804687e:	42a3      	cmp	r3, r4
 8046880:	bf08      	it	eq
 8046882:	f10c 0c02 	addeq.w	ip, ip, #2
 8046886:	f43f ae5e 	beq.w	8046546 <_malloc_r+0xb6>
 804688a:	e61d      	b.n	80464c8 <_malloc_r+0x38>
 804688c:	1859      	adds	r1, r3, r1
 804688e:	6848      	ldr	r0, [r1, #4]
 8046890:	461c      	mov	r4, r3
 8046892:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8046896:	68db      	ldr	r3, [r3, #12]
 8046898:	f040 0001 	orr.w	r0, r0, #1
 804689c:	6048      	str	r0, [r1, #4]
 804689e:	60d3      	str	r3, [r2, #12]
 80468a0:	609a      	str	r2, [r3, #8]
 80468a2:	4630      	mov	r0, r6
 80468a4:	f000 f92e 	bl	8046b04 <__malloc_unlock>
 80468a8:	e61e      	b.n	80464e8 <_malloc_r+0x58>
 80468aa:	f10c 0e5b 	add.w	lr, ip, #91	; 0x5b
 80468ae:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80468b2:	e632      	b.n	804651a <_malloc_r+0x8a>
 80468b4:	098a      	lsrs	r2, r1, #6
 80468b6:	3238      	adds	r2, #56	; 0x38
 80468b8:	0050      	lsls	r0, r2, #1
 80468ba:	e792      	b.n	80467e2 <_malloc_r+0x352>
 80468bc:	42bc      	cmp	r4, r7
 80468be:	f43f aef5 	beq.w	80466ac <_malloc_r+0x21c>
 80468c2:	4c3c      	ldr	r4, [pc, #240]	; (80469b4 <_malloc_r+0x524>)
 80468c4:	68a4      	ldr	r4, [r4, #8]
 80468c6:	6862      	ldr	r2, [r4, #4]
 80468c8:	f022 0003 	bic.w	r0, r2, #3
 80468cc:	e74e      	b.n	804676c <_malloc_r+0x2dc>
 80468ce:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80468d2:	d81a      	bhi.n	804690a <_malloc_r+0x47a>
 80468d4:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 80468d8:	f102 0e77 	add.w	lr, r2, #119	; 0x77
 80468dc:	ea4f 014e 	mov.w	r1, lr, lsl #1
 80468e0:	e61b      	b.n	804651a <_malloc_r+0x8a>
 80468e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80468e6:	e6ff      	b.n	80466e8 <_malloc_r+0x258>
 80468e8:	1091      	asrs	r1, r2, #2
 80468ea:	2001      	movs	r0, #1
 80468ec:	fa00 f001 	lsl.w	r0, r0, r1
 80468f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80468f4:	4619      	mov	r1, r3
 80468f6:	4302      	orrs	r2, r0
 80468f8:	f8c8 2004 	str.w	r2, [r8, #4]
 80468fc:	e782      	b.n	8046804 <_malloc_r+0x374>
 80468fe:	2201      	movs	r2, #1
 8046900:	f8c8 2004 	str.w	r2, [r8, #4]
 8046904:	4644      	mov	r4, r8
 8046906:	2000      	movs	r0, #0
 8046908:	e730      	b.n	804676c <_malloc_r+0x2dc>
 804690a:	f240 5354 	movw	r3, #1364	; 0x554
 804690e:	459c      	cmp	ip, r3
 8046910:	d821      	bhi.n	8046956 <_malloc_r+0x4c6>
 8046912:	ea4f 4095 	mov.w	r0, r5, lsr #18
 8046916:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
 804691a:	ea4f 014e 	mov.w	r1, lr, lsl #1
 804691e:	e5fc      	b.n	804651a <_malloc_r+0x8a>
 8046920:	f103 0c10 	add.w	ip, r3, #16
 8046924:	e6b2      	b.n	804668c <_malloc_r+0x1fc>
 8046926:	2854      	cmp	r0, #84	; 0x54
 8046928:	d829      	bhi.n	804697e <_malloc_r+0x4ee>
 804692a:	0b0a      	lsrs	r2, r1, #12
 804692c:	326e      	adds	r2, #110	; 0x6e
 804692e:	0050      	lsls	r0, r2, #1
 8046930:	e757      	b.n	80467e2 <_malloc_r+0x352>
 8046932:	68bc      	ldr	r4, [r7, #8]
 8046934:	6861      	ldr	r1, [r4, #4]
 8046936:	f021 0003 	bic.w	r0, r1, #3
 804693a:	e717      	b.n	804676c <_malloc_r+0x2dc>
 804693c:	ea4f 500b 	mov.w	r0, fp, lsl #20
 8046940:	0d01      	lsrs	r1, r0, #20
 8046942:	2900      	cmp	r1, #0
 8046944:	f47f aebc 	bne.w	80466c0 <_malloc_r+0x230>
 8046948:	68b8      	ldr	r0, [r7, #8]
 804694a:	eb0c 0109 	add.w	r1, ip, r9
 804694e:	f041 0401 	orr.w	r4, r1, #1
 8046952:	6044      	str	r4, [r0, #4]
 8046954:	e6fc      	b.n	8046750 <_malloc_r+0x2c0>
 8046956:	21fc      	movs	r1, #252	; 0xfc
 8046958:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 804695c:	e5dd      	b.n	804651a <_malloc_r+0x8a>
 804695e:	4816      	ldr	r0, [pc, #88]	; (80469b8 <_malloc_r+0x528>)
 8046960:	f8c0 8000 	str.w	r8, [r0]
 8046964:	e6b5      	b.n	80466d2 <_malloc_r+0x242>
 8046966:	f104 0108 	add.w	r1, r4, #8
 804696a:	4c14      	ldr	r4, [pc, #80]	; (80469bc <_malloc_r+0x52c>)
 804696c:	4630      	mov	r0, r6
 804696e:	f7ff fcbf 	bl	80462f0 <_free_r>
 8046972:	6823      	ldr	r3, [r4, #0]
 8046974:	e6ec      	b.n	8046750 <_malloc_r+0x2c0>
 8046976:	2001      	movs	r0, #1
 8046978:	f04f 0b00 	mov.w	fp, #0
 804697c:	e6c7      	b.n	804670e <_malloc_r+0x27e>
 804697e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8046982:	d803      	bhi.n	804698c <_malloc_r+0x4fc>
 8046984:	0bca      	lsrs	r2, r1, #15
 8046986:	3277      	adds	r2, #119	; 0x77
 8046988:	0050      	lsls	r0, r2, #1
 804698a:	e72a      	b.n	80467e2 <_malloc_r+0x352>
 804698c:	f240 5354 	movw	r3, #1364	; 0x554
 8046990:	4298      	cmp	r0, r3
 8046992:	d80c      	bhi.n	80469ae <_malloc_r+0x51e>
 8046994:	0c8a      	lsrs	r2, r1, #18
 8046996:	327c      	adds	r2, #124	; 0x7c
 8046998:	0050      	lsls	r0, r2, #1
 804699a:	e722      	b.n	80467e2 <_malloc_r+0x352>
 804699c:	687c      	ldr	r4, [r7, #4]
 804699e:	ea24 0400 	bic.w	r4, r4, r0
 80469a2:	607c      	str	r4, [r7, #4]
 80469a4:	e75c      	b.n	8046860 <_malloc_r+0x3d0>
 80469a6:	0040      	lsls	r0, r0, #1
 80469a8:	f108 0804 	add.w	r8, r8, #4
 80469ac:	e75f      	b.n	804686e <_malloc_r+0x3de>
 80469ae:	20fc      	movs	r0, #252	; 0xfc
 80469b0:	227e      	movs	r2, #126	; 0x7e
 80469b2:	e716      	b.n	80467e2 <_malloc_r+0x352>
 80469b4:	20001584 	.word	0x20001584
 80469b8:	20001990 	.word	0x20001990
 80469bc:	200019c4 	.word	0x200019c4

080469c0 <memchr>:
 80469c0:	0783      	lsls	r3, r0, #30
 80469c2:	b4f0      	push	{r4, r5, r6, r7}
 80469c4:	b2c9      	uxtb	r1, r1
 80469c6:	f000 8096 	beq.w	8046af6 <memchr+0x136>
 80469ca:	1e53      	subs	r3, r2, #1
 80469cc:	2a00      	cmp	r2, #0
 80469ce:	f000 8094 	beq.w	8046afa <memchr+0x13a>
 80469d2:	7802      	ldrb	r2, [r0, #0]
 80469d4:	428a      	cmp	r2, r1
 80469d6:	d00b      	beq.n	80469f0 <memchr+0x30>
 80469d8:	1c42      	adds	r2, r0, #1
 80469da:	07d8      	lsls	r0, r3, #31
 80469dc:	d51a      	bpl.n	8046a14 <memchr+0x54>
 80469de:	f012 0f03 	tst.w	r2, #3
 80469e2:	4610      	mov	r0, r2
 80469e4:	d01c      	beq.n	8046a20 <memchr+0x60>
 80469e6:	7814      	ldrb	r4, [r2, #0]
 80469e8:	3b01      	subs	r3, #1
 80469ea:	3201      	adds	r2, #1
 80469ec:	428c      	cmp	r4, r1
 80469ee:	d111      	bne.n	8046a14 <memchr+0x54>
 80469f0:	bcf0      	pop	{r4, r5, r6, r7}
 80469f2:	4770      	bx	lr
 80469f4:	2b00      	cmp	r3, #0
 80469f6:	d07c      	beq.n	8046af2 <memchr+0x132>
 80469f8:	7812      	ldrb	r2, [r2, #0]
 80469fa:	3b01      	subs	r3, #1
 80469fc:	428a      	cmp	r2, r1
 80469fe:	d0f7      	beq.n	80469f0 <memchr+0x30>
 8046a00:	f014 0f03 	tst.w	r4, #3
 8046a04:	4620      	mov	r0, r4
 8046a06:	f104 0201 	add.w	r2, r4, #1
 8046a0a:	d009      	beq.n	8046a20 <memchr+0x60>
 8046a0c:	7824      	ldrb	r4, [r4, #0]
 8046a0e:	3b01      	subs	r3, #1
 8046a10:	428c      	cmp	r4, r1
 8046a12:	d0ed      	beq.n	80469f0 <memchr+0x30>
 8046a14:	f012 0f03 	tst.w	r2, #3
 8046a18:	4610      	mov	r0, r2
 8046a1a:	f102 0401 	add.w	r4, r2, #1
 8046a1e:	d1e9      	bne.n	80469f4 <memchr+0x34>
 8046a20:	2b03      	cmp	r3, #3
 8046a22:	d93f      	bls.n	8046aa4 <memchr+0xe4>
 8046a24:	6804      	ldr	r4, [r0, #0]
 8046a26:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 8046a2a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8046a2e:	ea85 0704 	eor.w	r7, r5, r4
 8046a32:	f1a7 3201 	sub.w	r2, r7, #16843009	; 0x1010101
 8046a36:	ea22 0207 	bic.w	r2, r2, r7
 8046a3a:	1f1e      	subs	r6, r3, #4
 8046a3c:	1d04      	adds	r4, r0, #4
 8046a3e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8046a42:	f3c6 0780 	ubfx	r7, r6, #2, #1
 8046a46:	d12d      	bne.n	8046aa4 <memchr+0xe4>
 8046a48:	2e03      	cmp	r6, #3
 8046a4a:	4633      	mov	r3, r6
 8046a4c:	d929      	bls.n	8046aa2 <memchr+0xe2>
 8046a4e:	b167      	cbz	r7, 8046a6a <memchr+0xaa>
 8046a50:	6826      	ldr	r6, [r4, #0]
 8046a52:	4620      	mov	r0, r4
 8046a54:	ea85 0206 	eor.w	r2, r5, r6
 8046a58:	f1a2 3601 	sub.w	r6, r2, #16843009	; 0x1010101
 8046a5c:	ea26 0202 	bic.w	r2, r6, r2
 8046a60:	3404      	adds	r4, #4
 8046a62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8046a66:	d019      	beq.n	8046a9c <memchr+0xdc>
 8046a68:	e01c      	b.n	8046aa4 <memchr+0xe4>
 8046a6a:	4620      	mov	r0, r4
 8046a6c:	6824      	ldr	r4, [r4, #0]
 8046a6e:	1d06      	adds	r6, r0, #4
 8046a70:	ea85 0204 	eor.w	r2, r5, r4
 8046a74:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8046a78:	ea24 0202 	bic.w	r2, r4, r2
 8046a7c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8046a80:	d110      	bne.n	8046aa4 <memchr+0xe4>
 8046a82:	6834      	ldr	r4, [r6, #0]
 8046a84:	3b04      	subs	r3, #4
 8046a86:	ea85 0204 	eor.w	r2, r5, r4
 8046a8a:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8046a8e:	ea24 0202 	bic.w	r2, r4, r2
 8046a92:	1d34      	adds	r4, r6, #4
 8046a94:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8046a98:	4630      	mov	r0, r6
 8046a9a:	d103      	bne.n	8046aa4 <memchr+0xe4>
 8046a9c:	3b04      	subs	r3, #4
 8046a9e:	2b03      	cmp	r3, #3
 8046aa0:	d8e3      	bhi.n	8046a6a <memchr+0xaa>
 8046aa2:	4620      	mov	r0, r4
 8046aa4:	1e5d      	subs	r5, r3, #1
 8046aa6:	b323      	cbz	r3, 8046af2 <memchr+0x132>
 8046aa8:	7803      	ldrb	r3, [r0, #0]
 8046aaa:	428b      	cmp	r3, r1
 8046aac:	d0a0      	beq.n	80469f0 <memchr+0x30>
 8046aae:	1c43      	adds	r3, r0, #1
 8046ab0:	2200      	movs	r2, #0
 8046ab2:	07e8      	lsls	r0, r5, #31
 8046ab4:	d514      	bpl.n	8046ae0 <memchr+0x120>
 8046ab6:	781c      	ldrb	r4, [r3, #0]
 8046ab8:	4618      	mov	r0, r3
 8046aba:	2201      	movs	r2, #1
 8046abc:	3301      	adds	r3, #1
 8046abe:	428c      	cmp	r4, r1
 8046ac0:	d096      	beq.n	80469f0 <memchr+0x30>
 8046ac2:	4295      	cmp	r5, r2
 8046ac4:	4618      	mov	r0, r3
 8046ac6:	f103 0401 	add.w	r4, r3, #1
 8046aca:	f102 0202 	add.w	r2, r2, #2
 8046ace:	d00e      	beq.n	8046aee <memchr+0x12e>
 8046ad0:	781b      	ldrb	r3, [r3, #0]
 8046ad2:	428b      	cmp	r3, r1
 8046ad4:	d08c      	beq.n	80469f0 <memchr+0x30>
 8046ad6:	4620      	mov	r0, r4
 8046ad8:	7824      	ldrb	r4, [r4, #0]
 8046ada:	1c43      	adds	r3, r0, #1
 8046adc:	428c      	cmp	r4, r1
 8046ade:	d087      	beq.n	80469f0 <memchr+0x30>
 8046ae0:	4295      	cmp	r5, r2
 8046ae2:	4618      	mov	r0, r3
 8046ae4:	f103 0401 	add.w	r4, r3, #1
 8046ae8:	f102 0202 	add.w	r2, r2, #2
 8046aec:	d1f0      	bne.n	8046ad0 <memchr+0x110>
 8046aee:	2000      	movs	r0, #0
 8046af0:	e77e      	b.n	80469f0 <memchr+0x30>
 8046af2:	4618      	mov	r0, r3
 8046af4:	e77c      	b.n	80469f0 <memchr+0x30>
 8046af6:	4613      	mov	r3, r2
 8046af8:	e792      	b.n	8046a20 <memchr+0x60>
 8046afa:	4610      	mov	r0, r2
 8046afc:	e778      	b.n	80469f0 <memchr+0x30>
 8046afe:	bf00      	nop

08046b00 <__malloc_lock>:
 8046b00:	4770      	bx	lr
 8046b02:	bf00      	nop

08046b04 <__malloc_unlock>:
 8046b04:	4770      	bx	lr
 8046b06:	bf00      	nop

08046b08 <_Balloc>:
 8046b08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8046b0a:	b570      	push	{r4, r5, r6, lr}
 8046b0c:	4605      	mov	r5, r0
 8046b0e:	460c      	mov	r4, r1
 8046b10:	b14b      	cbz	r3, 8046b26 <_Balloc+0x1e>
 8046b12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8046b16:	b180      	cbz	r0, 8046b3a <_Balloc+0x32>
 8046b18:	6801      	ldr	r1, [r0, #0]
 8046b1a:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 8046b1e:	2300      	movs	r3, #0
 8046b20:	6103      	str	r3, [r0, #16]
 8046b22:	60c3      	str	r3, [r0, #12]
 8046b24:	bd70      	pop	{r4, r5, r6, pc}
 8046b26:	2104      	movs	r1, #4
 8046b28:	2221      	movs	r2, #33	; 0x21
 8046b2a:	f000 fde9 	bl	8047700 <_calloc_r>
 8046b2e:	4603      	mov	r3, r0
 8046b30:	64e8      	str	r0, [r5, #76]	; 0x4c
 8046b32:	2800      	cmp	r0, #0
 8046b34:	d1ed      	bne.n	8046b12 <_Balloc+0xa>
 8046b36:	2000      	movs	r0, #0
 8046b38:	bd70      	pop	{r4, r5, r6, pc}
 8046b3a:	2101      	movs	r1, #1
 8046b3c:	fa01 f604 	lsl.w	r6, r1, r4
 8046b40:	1d72      	adds	r2, r6, #5
 8046b42:	4628      	mov	r0, r5
 8046b44:	0092      	lsls	r2, r2, #2
 8046b46:	f000 fddb 	bl	8047700 <_calloc_r>
 8046b4a:	2800      	cmp	r0, #0
 8046b4c:	d0f3      	beq.n	8046b36 <_Balloc+0x2e>
 8046b4e:	6044      	str	r4, [r0, #4]
 8046b50:	6086      	str	r6, [r0, #8]
 8046b52:	e7e4      	b.n	8046b1e <_Balloc+0x16>

08046b54 <_Bfree>:
 8046b54:	b131      	cbz	r1, 8046b64 <_Bfree+0x10>
 8046b56:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8046b58:	684a      	ldr	r2, [r1, #4]
 8046b5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8046b5e:	6008      	str	r0, [r1, #0]
 8046b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8046b64:	4770      	bx	lr
 8046b66:	bf00      	nop

08046b68 <__multadd>:
 8046b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8046b6c:	460f      	mov	r7, r1
 8046b6e:	6949      	ldr	r1, [r1, #20]
 8046b70:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8046b74:	b28c      	uxth	r4, r1
 8046b76:	0c0e      	lsrs	r6, r1, #16
 8046b78:	fb02 3304 	mla	r3, r2, r4, r3
 8046b7c:	fb02 f106 	mul.w	r1, r2, r6
 8046b80:	b29c      	uxth	r4, r3
 8046b82:	eb01 4613 	add.w	r6, r1, r3, lsr #16
 8046b86:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 8046b8a:	f107 0318 	add.w	r3, r7, #24
 8046b8e:	f843 4c04 	str.w	r4, [r3, #-4]
 8046b92:	2401      	movs	r4, #1
 8046b94:	f108 31ff 	add.w	r1, r8, #4294967295
 8046b98:	0c36      	lsrs	r6, r6, #16
 8046b9a:	45a0      	cmp	r8, r4
 8046b9c:	4681      	mov	r9, r0
 8046b9e:	f001 0001 	and.w	r0, r1, #1
 8046ba2:	dd38      	ble.n	8046c16 <__multadd+0xae>
 8046ba4:	b198      	cbz	r0, 8046bce <__multadd+0x66>
 8046ba6:	681b      	ldr	r3, [r3, #0]
 8046ba8:	2402      	movs	r4, #2
 8046baa:	b299      	uxth	r1, r3
 8046bac:	0c18      	lsrs	r0, r3, #16
 8046bae:	fb02 6601 	mla	r6, r2, r1, r6
 8046bb2:	fb02 f000 	mul.w	r0, r2, r0
 8046bb6:	b2b1      	uxth	r1, r6
 8046bb8:	eb00 4016 	add.w	r0, r0, r6, lsr #16
 8046bbc:	eb01 4600 	add.w	r6, r1, r0, lsl #16
 8046bc0:	f107 031c 	add.w	r3, r7, #28
 8046bc4:	f843 6c04 	str.w	r6, [r3, #-4]
 8046bc8:	0c06      	lsrs	r6, r0, #16
 8046bca:	45a0      	cmp	r8, r4
 8046bcc:	dd23      	ble.n	8046c16 <__multadd+0xae>
 8046bce:	6818      	ldr	r0, [r3, #0]
 8046bd0:	461d      	mov	r5, r3
 8046bd2:	b281      	uxth	r1, r0
 8046bd4:	0c00      	lsrs	r0, r0, #16
 8046bd6:	fb02 6601 	mla	r6, r2, r1, r6
 8046bda:	fb02 f100 	mul.w	r1, r2, r0
 8046bde:	b2b0      	uxth	r0, r6
 8046be0:	eb01 4116 	add.w	r1, r1, r6, lsr #16
 8046be4:	eb00 4601 	add.w	r6, r0, r1, lsl #16
 8046be8:	f845 6b04 	str.w	r6, [r5], #4
 8046bec:	6858      	ldr	r0, [r3, #4]
 8046bee:	3402      	adds	r4, #2
 8046bf0:	b283      	uxth	r3, r0
 8046bf2:	0c06      	lsrs	r6, r0, #16
 8046bf4:	fb02 f303 	mul.w	r3, r2, r3
 8046bf8:	fb02 f606 	mul.w	r6, r2, r6
 8046bfc:	eb03 4111 	add.w	r1, r3, r1, lsr #16
 8046c00:	eb06 4011 	add.w	r0, r6, r1, lsr #16
 8046c04:	b28e      	uxth	r6, r1
 8046c06:	eb06 4100 	add.w	r1, r6, r0, lsl #16
 8046c0a:	462b      	mov	r3, r5
 8046c0c:	0c06      	lsrs	r6, r0, #16
 8046c0e:	45a0      	cmp	r8, r4
 8046c10:	f843 1b04 	str.w	r1, [r3], #4
 8046c14:	dcdb      	bgt.n	8046bce <__multadd+0x66>
 8046c16:	b146      	cbz	r6, 8046c2a <__multadd+0xc2>
 8046c18:	68ba      	ldr	r2, [r7, #8]
 8046c1a:	4590      	cmp	r8, r2
 8046c1c:	da08      	bge.n	8046c30 <__multadd+0xc8>
 8046c1e:	eb07 0288 	add.w	r2, r7, r8, lsl #2
 8046c22:	f108 0001 	add.w	r0, r8, #1
 8046c26:	6156      	str	r6, [r2, #20]
 8046c28:	6138      	str	r0, [r7, #16]
 8046c2a:	4638      	mov	r0, r7
 8046c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8046c30:	687c      	ldr	r4, [r7, #4]
 8046c32:	4648      	mov	r0, r9
 8046c34:	1c61      	adds	r1, r4, #1
 8046c36:	f7ff ff67 	bl	8046b08 <_Balloc>
 8046c3a:	693b      	ldr	r3, [r7, #16]
 8046c3c:	f107 010c 	add.w	r1, r7, #12
 8046c40:	1c9a      	adds	r2, r3, #2
 8046c42:	4604      	mov	r4, r0
 8046c44:	0092      	lsls	r2, r2, #2
 8046c46:	f100 000c 	add.w	r0, r0, #12
 8046c4a:	f7fc f9b7 	bl	8042fbc <memcpy>
 8046c4e:	6878      	ldr	r0, [r7, #4]
 8046c50:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8046c54:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8046c58:	6039      	str	r1, [r7, #0]
 8046c5a:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8046c5e:	4627      	mov	r7, r4
 8046c60:	e7dd      	b.n	8046c1e <__multadd+0xb6>
 8046c62:	bf00      	nop

08046c64 <__hi0bits>:
 8046c64:	0c02      	lsrs	r2, r0, #16
 8046c66:	4603      	mov	r3, r0
 8046c68:	d116      	bne.n	8046c98 <__hi0bits+0x34>
 8046c6a:	0403      	lsls	r3, r0, #16
 8046c6c:	2010      	movs	r0, #16
 8046c6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8046c72:	d101      	bne.n	8046c78 <__hi0bits+0x14>
 8046c74:	3008      	adds	r0, #8
 8046c76:	021b      	lsls	r3, r3, #8
 8046c78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8046c7c:	d101      	bne.n	8046c82 <__hi0bits+0x1e>
 8046c7e:	3004      	adds	r0, #4
 8046c80:	011b      	lsls	r3, r3, #4
 8046c82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8046c86:	d101      	bne.n	8046c8c <__hi0bits+0x28>
 8046c88:	3002      	adds	r0, #2
 8046c8a:	009b      	lsls	r3, r3, #2
 8046c8c:	2b00      	cmp	r3, #0
 8046c8e:	db02      	blt.n	8046c96 <__hi0bits+0x32>
 8046c90:	005b      	lsls	r3, r3, #1
 8046c92:	d403      	bmi.n	8046c9c <__hi0bits+0x38>
 8046c94:	2020      	movs	r0, #32
 8046c96:	4770      	bx	lr
 8046c98:	2000      	movs	r0, #0
 8046c9a:	e7e8      	b.n	8046c6e <__hi0bits+0xa>
 8046c9c:	3001      	adds	r0, #1
 8046c9e:	4770      	bx	lr

08046ca0 <__lo0bits>:
 8046ca0:	6803      	ldr	r3, [r0, #0]
 8046ca2:	4602      	mov	r2, r0
 8046ca4:	f013 0007 	ands.w	r0, r3, #7
 8046ca8:	d007      	beq.n	8046cba <__lo0bits+0x1a>
 8046caa:	07d9      	lsls	r1, r3, #31
 8046cac:	d41f      	bmi.n	8046cee <__lo0bits+0x4e>
 8046cae:	0798      	lsls	r0, r3, #30
 8046cb0:	d41f      	bmi.n	8046cf2 <__lo0bits+0x52>
 8046cb2:	0898      	lsrs	r0, r3, #2
 8046cb4:	6010      	str	r0, [r2, #0]
 8046cb6:	2002      	movs	r0, #2
 8046cb8:	4770      	bx	lr
 8046cba:	b299      	uxth	r1, r3
 8046cbc:	b909      	cbnz	r1, 8046cc2 <__lo0bits+0x22>
 8046cbe:	0c1b      	lsrs	r3, r3, #16
 8046cc0:	2010      	movs	r0, #16
 8046cc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8046cc6:	d101      	bne.n	8046ccc <__lo0bits+0x2c>
 8046cc8:	3008      	adds	r0, #8
 8046cca:	0a1b      	lsrs	r3, r3, #8
 8046ccc:	0719      	lsls	r1, r3, #28
 8046cce:	d101      	bne.n	8046cd4 <__lo0bits+0x34>
 8046cd0:	3004      	adds	r0, #4
 8046cd2:	091b      	lsrs	r3, r3, #4
 8046cd4:	0799      	lsls	r1, r3, #30
 8046cd6:	d101      	bne.n	8046cdc <__lo0bits+0x3c>
 8046cd8:	3002      	adds	r0, #2
 8046cda:	089b      	lsrs	r3, r3, #2
 8046cdc:	07d9      	lsls	r1, r3, #31
 8046cde:	d404      	bmi.n	8046cea <__lo0bits+0x4a>
 8046ce0:	085b      	lsrs	r3, r3, #1
 8046ce2:	d101      	bne.n	8046ce8 <__lo0bits+0x48>
 8046ce4:	2020      	movs	r0, #32
 8046ce6:	4770      	bx	lr
 8046ce8:	3001      	adds	r0, #1
 8046cea:	6013      	str	r3, [r2, #0]
 8046cec:	4770      	bx	lr
 8046cee:	2000      	movs	r0, #0
 8046cf0:	4770      	bx	lr
 8046cf2:	0859      	lsrs	r1, r3, #1
 8046cf4:	6011      	str	r1, [r2, #0]
 8046cf6:	2001      	movs	r0, #1
 8046cf8:	4770      	bx	lr
 8046cfa:	bf00      	nop

08046cfc <__i2b>:
 8046cfc:	b510      	push	{r4, lr}
 8046cfe:	460c      	mov	r4, r1
 8046d00:	2101      	movs	r1, #1
 8046d02:	f7ff ff01 	bl	8046b08 <_Balloc>
 8046d06:	2201      	movs	r2, #1
 8046d08:	6144      	str	r4, [r0, #20]
 8046d0a:	6102      	str	r2, [r0, #16]
 8046d0c:	bd10      	pop	{r4, pc}
 8046d0e:	bf00      	nop

08046d10 <__multiply>:
 8046d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046d14:	690c      	ldr	r4, [r1, #16]
 8046d16:	6917      	ldr	r7, [r2, #16]
 8046d18:	b085      	sub	sp, #20
 8046d1a:	42bc      	cmp	r4, r7
 8046d1c:	460e      	mov	r6, r1
 8046d1e:	4690      	mov	r8, r2
 8046d20:	da04      	bge.n	8046d2c <__multiply+0x1c>
 8046d22:	4622      	mov	r2, r4
 8046d24:	4646      	mov	r6, r8
 8046d26:	463c      	mov	r4, r7
 8046d28:	4688      	mov	r8, r1
 8046d2a:	4617      	mov	r7, r2
 8046d2c:	68b3      	ldr	r3, [r6, #8]
 8046d2e:	19e2      	adds	r2, r4, r7
 8046d30:	6871      	ldr	r1, [r6, #4]
 8046d32:	429a      	cmp	r2, r3
 8046d34:	bfc8      	it	gt
 8046d36:	3101      	addgt	r1, #1
 8046d38:	9201      	str	r2, [sp, #4]
 8046d3a:	f7ff fee5 	bl	8046b08 <_Balloc>
 8046d3e:	9901      	ldr	r1, [sp, #4]
 8046d40:	9003      	str	r0, [sp, #12]
 8046d42:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8046d46:	3314      	adds	r3, #20
 8046d48:	3014      	adds	r0, #20
 8046d4a:	4298      	cmp	r0, r3
 8046d4c:	9302      	str	r3, [sp, #8]
 8046d4e:	d21a      	bcs.n	8046d86 <__multiply+0x76>
 8046d50:	9902      	ldr	r1, [sp, #8]
 8046d52:	43c2      	mvns	r2, r0
 8046d54:	9b03      	ldr	r3, [sp, #12]
 8046d56:	188a      	adds	r2, r1, r2
 8046d58:	9902      	ldr	r1, [sp, #8]
 8046d5a:	3318      	adds	r3, #24
 8046d5c:	2500      	movs	r5, #0
 8046d5e:	4299      	cmp	r1, r3
 8046d60:	6005      	str	r5, [r0, #0]
 8046d62:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8046d66:	d90e      	bls.n	8046d86 <__multiply+0x76>
 8046d68:	b128      	cbz	r0, 8046d76 <__multiply+0x66>
 8046d6a:	601d      	str	r5, [r3, #0]
 8046d6c:	9b03      	ldr	r3, [sp, #12]
 8046d6e:	9a02      	ldr	r2, [sp, #8]
 8046d70:	331c      	adds	r3, #28
 8046d72:	429a      	cmp	r2, r3
 8046d74:	d907      	bls.n	8046d86 <__multiply+0x76>
 8046d76:	9802      	ldr	r0, [sp, #8]
 8046d78:	4619      	mov	r1, r3
 8046d7a:	f841 5b04 	str.w	r5, [r1], #4
 8046d7e:	605d      	str	r5, [r3, #4]
 8046d80:	1d0b      	adds	r3, r1, #4
 8046d82:	4298      	cmp	r0, r3
 8046d84:	d8f8      	bhi.n	8046d78 <__multiply+0x68>
 8046d86:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 8046d8a:	3314      	adds	r3, #20
 8046d8c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8046d90:	f108 0714 	add.w	r7, r8, #20
 8046d94:	3414      	adds	r4, #20
 8046d96:	429f      	cmp	r7, r3
 8046d98:	9300      	str	r3, [sp, #0]
 8046d9a:	f106 0c14 	add.w	ip, r6, #20
 8046d9e:	f080 80f9 	bcs.w	8046f94 <__multiply+0x284>
 8046da2:	9803      	ldr	r0, [sp, #12]
 8046da4:	3018      	adds	r0, #24
 8046da6:	f857 3b04 	ldr.w	r3, [r7], #4
 8046daa:	b29a      	uxth	r2, r3
 8046dac:	2a00      	cmp	r2, #0
 8046dae:	d06e      	beq.n	8046e8e <__multiply+0x17e>
 8046db0:	4661      	mov	r1, ip
 8046db2:	f851 6b04 	ldr.w	r6, [r1], #4
 8046db6:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8046dba:	fa1f f886 	uxth.w	r8, r6
 8046dbe:	b2ab      	uxth	r3, r5
 8046dc0:	0c36      	lsrs	r6, r6, #16
 8046dc2:	0c2d      	lsrs	r5, r5, #16
 8046dc4:	fb02 3308 	mla	r3, r2, r8, r3
 8046dc8:	fb02 5606 	mla	r6, r2, r6, r5
 8046dcc:	ea6f 050c 	mvn.w	r5, ip
 8046dd0:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 8046dd4:	b29b      	uxth	r3, r3
 8046dd6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8046dda:	1965      	adds	r5, r4, r5
 8046ddc:	0c36      	lsrs	r6, r6, #16
 8046dde:	428c      	cmp	r4, r1
 8046de0:	f840 3c04 	str.w	r3, [r0, #-4]
 8046de4:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8046de8:	4603      	mov	r3, r0
 8046dea:	d94d      	bls.n	8046e88 <__multiply+0x178>
 8046dec:	b1cd      	cbz	r5, 8046e22 <__multiply+0x112>
 8046dee:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8046df2:	6803      	ldr	r3, [r0, #0]
 8046df4:	fa1f f985 	uxth.w	r9, r5
 8046df8:	fa1f f883 	uxth.w	r8, r3
 8046dfc:	0c2d      	lsrs	r5, r5, #16
 8046dfe:	0c1b      	lsrs	r3, r3, #16
 8046e00:	fb02 8809 	mla	r8, r2, r9, r8
 8046e04:	fb02 3505 	mla	r5, r2, r5, r3
 8046e08:	4446      	add	r6, r8
 8046e0a:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8046e0e:	b2b6      	uxth	r6, r6
 8046e10:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8046e14:	4603      	mov	r3, r0
 8046e16:	3104      	adds	r1, #4
 8046e18:	f843 6b04 	str.w	r6, [r3], #4
 8046e1c:	0c2e      	lsrs	r6, r5, #16
 8046e1e:	428c      	cmp	r4, r1
 8046e20:	d932      	bls.n	8046e88 <__multiply+0x178>
 8046e22:	460d      	mov	r5, r1
 8046e24:	f8d3 e000 	ldr.w	lr, [r3]
 8046e28:	f855 9b04 	ldr.w	r9, [r5], #4
 8046e2c:	fa1f fa8e 	uxth.w	sl, lr
 8046e30:	fa1f fb89 	uxth.w	fp, r9
 8046e34:	fb02 aa0b 	mla	sl, r2, fp, sl
 8046e38:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8046e3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8046e40:	fb02 8e09 	mla	lr, r2, r9, r8
 8046e44:	4456      	add	r6, sl
 8046e46:	eb0e 4916 	add.w	r9, lr, r6, lsr #16
 8046e4a:	b2b6      	uxth	r6, r6
 8046e4c:	4698      	mov	r8, r3
 8046e4e:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8046e52:	f848 6b04 	str.w	r6, [r8], #4
 8046e56:	684e      	ldr	r6, [r1, #4]
 8046e58:	6859      	ldr	r1, [r3, #4]
 8046e5a:	fa1f fa86 	uxth.w	sl, r6
 8046e5e:	b28b      	uxth	r3, r1
 8046e60:	0c36      	lsrs	r6, r6, #16
 8046e62:	0c09      	lsrs	r1, r1, #16
 8046e64:	fb02 330a 	mla	r3, r2, sl, r3
 8046e68:	fb02 1606 	mla	r6, r2, r6, r1
 8046e6c:	eb03 4319 	add.w	r3, r3, r9, lsr #16
 8046e70:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 8046e74:	b299      	uxth	r1, r3
 8046e76:	4643      	mov	r3, r8
 8046e78:	ea41 4806 	orr.w	r8, r1, r6, lsl #16
 8046e7c:	1d29      	adds	r1, r5, #4
 8046e7e:	0c36      	lsrs	r6, r6, #16
 8046e80:	428c      	cmp	r4, r1
 8046e82:	f843 8b04 	str.w	r8, [r3], #4
 8046e86:	d8cc      	bhi.n	8046e22 <__multiply+0x112>
 8046e88:	601e      	str	r6, [r3, #0]
 8046e8a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8046e8e:	0c1a      	lsrs	r2, r3, #16
 8046e90:	d07b      	beq.n	8046f8a <__multiply+0x27a>
 8046e92:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8046e96:	f8bc 5000 	ldrh.w	r5, [ip]
 8046e9a:	0c31      	lsrs	r1, r6, #16
 8046e9c:	fb02 1505 	mla	r5, r2, r5, r1
 8046ea0:	b2b3      	uxth	r3, r6
 8046ea2:	ea43 4605 	orr.w	r6, r3, r5, lsl #16
 8046ea6:	f840 6c04 	str.w	r6, [r0, #-4]
 8046eaa:	46e2      	mov	sl, ip
 8046eac:	4603      	mov	r3, r0
 8046eae:	f85a 1b04 	ldr.w	r1, [sl], #4
 8046eb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8046eb6:	0c09      	lsrs	r1, r1, #16
 8046eb8:	fa1f f986 	uxth.w	r9, r6
 8046ebc:	fb02 9101 	mla	r1, r2, r1, r9
 8046ec0:	ea6f 0e0c 	mvn.w	lr, ip
 8046ec4:	eb04 080e 	add.w	r8, r4, lr
 8046ec8:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8046ecc:	4554      	cmp	r4, sl
 8046ece:	f3c8 0980 	ubfx	r9, r8, #2, #1
 8046ed2:	4605      	mov	r5, r0
 8046ed4:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8046ed8:	d956      	bls.n	8046f88 <__multiply+0x278>
 8046eda:	f1b9 0f00 	cmp.w	r9, #0
 8046ede:	d01b      	beq.n	8046f18 <__multiply+0x208>
 8046ee0:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 8046ee4:	0c36      	lsrs	r6, r6, #16
 8046ee6:	fb02 6505 	mla	r5, r2, r5, r6
 8046eea:	b289      	uxth	r1, r1
 8046eec:	eb05 0e08 	add.w	lr, r5, r8
 8046ef0:	ea41 460e 	orr.w	r6, r1, lr, lsl #16
 8046ef4:	f843 6c04 	str.w	r6, [r3, #-4]
 8046ef8:	f85a 1b04 	ldr.w	r1, [sl], #4
 8046efc:	461d      	mov	r5, r3
 8046efe:	f853 6b04 	ldr.w	r6, [r3], #4
 8046f02:	0c09      	lsrs	r1, r1, #16
 8046f04:	fa1f f986 	uxth.w	r9, r6
 8046f08:	fb02 9101 	mla	r1, r2, r1, r9
 8046f0c:	4554      	cmp	r4, sl
 8046f0e:	eb01 411e 	add.w	r1, r1, lr, lsr #16
 8046f12:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8046f16:	d937      	bls.n	8046f88 <__multiply+0x278>
 8046f18:	f8ba b000 	ldrh.w	fp, [sl]
 8046f1c:	0c35      	lsrs	r5, r6, #16
 8046f1e:	fb02 560b 	mla	r6, r2, fp, r5
 8046f22:	b289      	uxth	r1, r1
 8046f24:	eb06 0b08 	add.w	fp, r6, r8
 8046f28:	ea41 450b 	orr.w	r5, r1, fp, lsl #16
 8046f2c:	f843 5c04 	str.w	r5, [r3, #-4]
 8046f30:	4656      	mov	r6, sl
 8046f32:	461d      	mov	r5, r3
 8046f34:	f856 9b04 	ldr.w	r9, [r6], #4
 8046f38:	f855 1b04 	ldr.w	r1, [r5], #4
 8046f3c:	f8da 8004 	ldr.w	r8, [sl, #4]
 8046f40:	ea4f 4e19 	mov.w	lr, r9, lsr #16
 8046f44:	fa1f fa81 	uxth.w	sl, r1
 8046f48:	fb02 a90e 	mla	r9, r2, lr, sl
 8046f4c:	0c09      	lsrs	r1, r1, #16
 8046f4e:	fa1f f888 	uxth.w	r8, r8
 8046f52:	fb02 1e08 	mla	lr, r2, r8, r1
 8046f56:	eb09 4a1b 	add.w	sl, r9, fp, lsr #16
 8046f5a:	eb0e 481a 	add.w	r8, lr, sl, lsr #16
 8046f5e:	fa1f f98a 	uxth.w	r9, sl
 8046f62:	ea49 4108 	orr.w	r1, r9, r8, lsl #16
 8046f66:	46b2      	mov	sl, r6
 8046f68:	f845 1c04 	str.w	r1, [r5, #-4]
 8046f6c:	f85a 1b04 	ldr.w	r1, [sl], #4
 8046f70:	685e      	ldr	r6, [r3, #4]
 8046f72:	0c09      	lsrs	r1, r1, #16
 8046f74:	b2b3      	uxth	r3, r6
 8046f76:	fb02 3301 	mla	r3, r2, r1, r3
 8046f7a:	eb03 4118 	add.w	r1, r3, r8, lsr #16
 8046f7e:	1d2b      	adds	r3, r5, #4
 8046f80:	4554      	cmp	r4, sl
 8046f82:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8046f86:	d8c7      	bhi.n	8046f18 <__multiply+0x208>
 8046f88:	6029      	str	r1, [r5, #0]
 8046f8a:	9a00      	ldr	r2, [sp, #0]
 8046f8c:	3004      	adds	r0, #4
 8046f8e:	42ba      	cmp	r2, r7
 8046f90:	f63f af09 	bhi.w	8046da6 <__multiply+0x96>
 8046f94:	9901      	ldr	r1, [sp, #4]
 8046f96:	2900      	cmp	r1, #0
 8046f98:	dd1a      	ble.n	8046fd0 <__multiply+0x2c0>
 8046f9a:	9b02      	ldr	r3, [sp, #8]
 8046f9c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8046fa0:	3b04      	subs	r3, #4
 8046fa2:	b9a8      	cbnz	r0, 8046fd0 <__multiply+0x2c0>
 8046fa4:	9901      	ldr	r1, [sp, #4]
 8046fa6:	1e4a      	subs	r2, r1, #1
 8046fa8:	07d0      	lsls	r0, r2, #31
 8046faa:	d517      	bpl.n	8046fdc <__multiply+0x2cc>
 8046fac:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8046fb0:	9201      	str	r2, [sp, #4]
 8046fb2:	b968      	cbnz	r0, 8046fd0 <__multiply+0x2c0>
 8046fb4:	9a01      	ldr	r2, [sp, #4]
 8046fb6:	e008      	b.n	8046fca <__multiply+0x2ba>
 8046fb8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8046fbc:	3b04      	subs	r3, #4
 8046fbe:	b931      	cbnz	r1, 8046fce <__multiply+0x2be>
 8046fc0:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8046fc4:	3a01      	subs	r2, #1
 8046fc6:	3b04      	subs	r3, #4
 8046fc8:	b908      	cbnz	r0, 8046fce <__multiply+0x2be>
 8046fca:	3a01      	subs	r2, #1
 8046fcc:	d1f4      	bne.n	8046fb8 <__multiply+0x2a8>
 8046fce:	9201      	str	r2, [sp, #4]
 8046fd0:	9901      	ldr	r1, [sp, #4]
 8046fd2:	9803      	ldr	r0, [sp, #12]
 8046fd4:	6101      	str	r1, [r0, #16]
 8046fd6:	b005      	add	sp, #20
 8046fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8046fdc:	460a      	mov	r2, r1
 8046fde:	e7f4      	b.n	8046fca <__multiply+0x2ba>

08046fe0 <__pow5mult>:
 8046fe0:	f012 0303 	ands.w	r3, r2, #3
 8046fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8046fe8:	4614      	mov	r4, r2
 8046fea:	4680      	mov	r8, r0
 8046fec:	460f      	mov	r7, r1
 8046fee:	d12b      	bne.n	8047048 <__pow5mult+0x68>
 8046ff0:	10a4      	asrs	r4, r4, #2
 8046ff2:	d01b      	beq.n	804702c <__pow5mult+0x4c>
 8046ff4:	f8d8 6048 	ldr.w	r6, [r8, #72]	; 0x48
 8046ff8:	b92e      	cbnz	r6, 8047006 <__pow5mult+0x26>
 8046ffa:	e02e      	b.n	804705a <__pow5mult+0x7a>
 8046ffc:	1064      	asrs	r4, r4, #1
 8046ffe:	d015      	beq.n	804702c <__pow5mult+0x4c>
 8047000:	6835      	ldr	r5, [r6, #0]
 8047002:	b1b5      	cbz	r5, 8047032 <__pow5mult+0x52>
 8047004:	462e      	mov	r6, r5
 8047006:	07e3      	lsls	r3, r4, #31
 8047008:	d5f8      	bpl.n	8046ffc <__pow5mult+0x1c>
 804700a:	4639      	mov	r1, r7
 804700c:	4632      	mov	r2, r6
 804700e:	4640      	mov	r0, r8
 8047010:	f7ff fe7e 	bl	8046d10 <__multiply>
 8047014:	b1b7      	cbz	r7, 8047044 <__pow5mult+0x64>
 8047016:	687a      	ldr	r2, [r7, #4]
 8047018:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 804701c:	1064      	asrs	r4, r4, #1
 804701e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8047022:	6039      	str	r1, [r7, #0]
 8047024:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8047028:	4607      	mov	r7, r0
 804702a:	d1e9      	bne.n	8047000 <__pow5mult+0x20>
 804702c:	4638      	mov	r0, r7
 804702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8047032:	4631      	mov	r1, r6
 8047034:	4632      	mov	r2, r6
 8047036:	4640      	mov	r0, r8
 8047038:	f7ff fe6a 	bl	8046d10 <__multiply>
 804703c:	6030      	str	r0, [r6, #0]
 804703e:	6005      	str	r5, [r0, #0]
 8047040:	4606      	mov	r6, r0
 8047042:	e7e0      	b.n	8047006 <__pow5mult+0x26>
 8047044:	4607      	mov	r7, r0
 8047046:	e7d9      	b.n	8046ffc <__pow5mult+0x1c>
 8047048:	4a09      	ldr	r2, [pc, #36]	; (8047070 <__pow5mult+0x90>)
 804704a:	1e5f      	subs	r7, r3, #1
 804704c:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8047050:	2300      	movs	r3, #0
 8047052:	f7ff fd89 	bl	8046b68 <__multadd>
 8047056:	4607      	mov	r7, r0
 8047058:	e7ca      	b.n	8046ff0 <__pow5mult+0x10>
 804705a:	4640      	mov	r0, r8
 804705c:	f240 2171 	movw	r1, #625	; 0x271
 8047060:	f7ff fe4c 	bl	8046cfc <__i2b>
 8047064:	4606      	mov	r6, r0
 8047066:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 804706a:	2000      	movs	r0, #0
 804706c:	6030      	str	r0, [r6, #0]
 804706e:	e7ca      	b.n	8047006 <__pow5mult+0x26>
 8047070:	08048260 	.word	0x08048260

08047074 <__lshift>:
 8047074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047078:	690b      	ldr	r3, [r1, #16]
 804707a:	ea4f 1862 	mov.w	r8, r2, asr #5
 804707e:	4693      	mov	fp, r2
 8047080:	eb08 0a03 	add.w	sl, r8, r3
 8047084:	688a      	ldr	r2, [r1, #8]
 8047086:	f10a 0601 	add.w	r6, sl, #1
 804708a:	4296      	cmp	r6, r2
 804708c:	460f      	mov	r7, r1
 804708e:	4681      	mov	r9, r0
 8047090:	6849      	ldr	r1, [r1, #4]
 8047092:	dd03      	ble.n	804709c <__lshift+0x28>
 8047094:	0052      	lsls	r2, r2, #1
 8047096:	3101      	adds	r1, #1
 8047098:	4296      	cmp	r6, r2
 804709a:	dcfb      	bgt.n	8047094 <__lshift+0x20>
 804709c:	4648      	mov	r0, r9
 804709e:	f7ff fd33 	bl	8046b08 <_Balloc>
 80470a2:	f1b8 0f00 	cmp.w	r8, #0
 80470a6:	f100 0414 	add.w	r4, r0, #20
 80470aa:	dd1d      	ble.n	80470e8 <__lshift+0x74>
 80470ac:	2301      	movs	r3, #1
 80470ae:	2200      	movs	r2, #0
 80470b0:	f108 31ff 	add.w	r1, r8, #4294967295
 80470b4:	4543      	cmp	r3, r8
 80470b6:	6022      	str	r2, [r4, #0]
 80470b8:	ea01 0103 	and.w	r1, r1, r3
 80470bc:	f100 0518 	add.w	r5, r0, #24
 80470c0:	d00e      	beq.n	80470e0 <__lshift+0x6c>
 80470c2:	b129      	cbz	r1, 80470d0 <__lshift+0x5c>
 80470c4:	2302      	movs	r3, #2
 80470c6:	4543      	cmp	r3, r8
 80470c8:	602a      	str	r2, [r5, #0]
 80470ca:	f100 051c 	add.w	r5, r0, #28
 80470ce:	d007      	beq.n	80470e0 <__lshift+0x6c>
 80470d0:	462c      	mov	r4, r5
 80470d2:	f844 2b04 	str.w	r2, [r4], #4
 80470d6:	3302      	adds	r3, #2
 80470d8:	606a      	str	r2, [r5, #4]
 80470da:	1d25      	adds	r5, r4, #4
 80470dc:	4543      	cmp	r3, r8
 80470de:	d1f7      	bne.n	80470d0 <__lshift+0x5c>
 80470e0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80470e4:	f102 0414 	add.w	r4, r2, #20
 80470e8:	6939      	ldr	r1, [r7, #16]
 80470ea:	f107 0514 	add.w	r5, r7, #20
 80470ee:	eb07 0281 	add.w	r2, r7, r1, lsl #2
 80470f2:	3214      	adds	r2, #20
 80470f4:	f01b 0b1f 	ands.w	fp, fp, #31
 80470f8:	d051      	beq.n	804719e <__lshift+0x12a>
 80470fa:	6829      	ldr	r1, [r5, #0]
 80470fc:	4623      	mov	r3, r4
 80470fe:	fa01 f10b 	lsl.w	r1, r1, fp
 8047102:	f107 0418 	add.w	r4, r7, #24
 8047106:	f843 1b04 	str.w	r1, [r3], #4
 804710a:	43ed      	mvns	r5, r5
 804710c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8047110:	f1cb 0e20 	rsb	lr, fp, #32
 8047114:	1955      	adds	r5, r2, r5
 8047116:	42a2      	cmp	r2, r4
 8047118:	f3c5 0580 	ubfx	r5, r5, #2, #1
 804711c:	fa21 f80e 	lsr.w	r8, r1, lr
 8047120:	d92a      	bls.n	8047178 <__lshift+0x104>
 8047122:	b175      	cbz	r5, 8047142 <__lshift+0xce>
 8047124:	6821      	ldr	r1, [r4, #0]
 8047126:	f107 041c 	add.w	r4, r7, #28
 804712a:	fa01 f10b 	lsl.w	r1, r1, fp
 804712e:	ea48 0101 	orr.w	r1, r8, r1
 8047132:	f843 1b04 	str.w	r1, [r3], #4
 8047136:	f854 1c04 	ldr.w	r1, [r4, #-4]
 804713a:	42a2      	cmp	r2, r4
 804713c:	fa21 f80e 	lsr.w	r8, r1, lr
 8047140:	d91a      	bls.n	8047178 <__lshift+0x104>
 8047142:	6821      	ldr	r1, [r4, #0]
 8047144:	461d      	mov	r5, r3
 8047146:	fa01 f10b 	lsl.w	r1, r1, fp
 804714a:	ea48 0101 	orr.w	r1, r8, r1
 804714e:	f845 1b04 	str.w	r1, [r5], #4
 8047152:	4621      	mov	r1, r4
 8047154:	f851 8b04 	ldr.w	r8, [r1], #4
 8047158:	6864      	ldr	r4, [r4, #4]
 804715a:	fa28 fc0e 	lsr.w	ip, r8, lr
 804715e:	fa04 f40b 	lsl.w	r4, r4, fp
 8047162:	ea4c 0404 	orr.w	r4, ip, r4
 8047166:	605c      	str	r4, [r3, #4]
 8047168:	460c      	mov	r4, r1
 804716a:	f854 1b04 	ldr.w	r1, [r4], #4
 804716e:	1d2b      	adds	r3, r5, #4
 8047170:	42a2      	cmp	r2, r4
 8047172:	fa21 f80e 	lsr.w	r8, r1, lr
 8047176:	d8e4      	bhi.n	8047142 <__lshift+0xce>
 8047178:	f8c3 8000 	str.w	r8, [r3]
 804717c:	f1b8 0f00 	cmp.w	r8, #0
 8047180:	d001      	beq.n	8047186 <__lshift+0x112>
 8047182:	f10a 0602 	add.w	r6, sl, #2
 8047186:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 804718a:	687a      	ldr	r2, [r7, #4]
 804718c:	3e01      	subs	r6, #1
 804718e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8047192:	6106      	str	r6, [r0, #16]
 8047194:	6039      	str	r1, [r7, #0]
 8047196:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 804719a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804719e:	43eb      	mvns	r3, r5
 80471a0:	f107 0118 	add.w	r1, r7, #24
 80471a4:	682d      	ldr	r5, [r5, #0]
 80471a6:	18d3      	adds	r3, r2, r3
 80471a8:	428a      	cmp	r2, r1
 80471aa:	f844 5b04 	str.w	r5, [r4], #4
 80471ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80471b2:	d9e8      	bls.n	8047186 <__lshift+0x112>
 80471b4:	b133      	cbz	r3, 80471c4 <__lshift+0x150>
 80471b6:	680b      	ldr	r3, [r1, #0]
 80471b8:	f107 011c 	add.w	r1, r7, #28
 80471bc:	428a      	cmp	r2, r1
 80471be:	f844 3b04 	str.w	r3, [r4], #4
 80471c2:	d9e0      	bls.n	8047186 <__lshift+0x112>
 80471c4:	468c      	mov	ip, r1
 80471c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80471ca:	4625      	mov	r5, r4
 80471cc:	f845 3b04 	str.w	r3, [r5], #4
 80471d0:	684b      	ldr	r3, [r1, #4]
 80471d2:	f10c 0104 	add.w	r1, ip, #4
 80471d6:	6063      	str	r3, [r4, #4]
 80471d8:	1d2c      	adds	r4, r5, #4
 80471da:	428a      	cmp	r2, r1
 80471dc:	d8f2      	bhi.n	80471c4 <__lshift+0x150>
 80471de:	e7d2      	b.n	8047186 <__lshift+0x112>

080471e0 <__mcmp>:
 80471e0:	b4f0      	push	{r4, r5, r6, r7}
 80471e2:	690b      	ldr	r3, [r1, #16]
 80471e4:	4605      	mov	r5, r0
 80471e6:	6900      	ldr	r0, [r0, #16]
 80471e8:	1ac0      	subs	r0, r0, r3
 80471ea:	d124      	bne.n	8047236 <__mcmp+0x56>
 80471ec:	1d1a      	adds	r2, r3, #4
 80471ee:	0094      	lsls	r4, r2, #2
 80471f0:	192b      	adds	r3, r5, r4
 80471f2:	1d1e      	adds	r6, r3, #4
 80471f4:	1909      	adds	r1, r1, r4
 80471f6:	3514      	adds	r5, #20
 80471f8:	f856 4c04 	ldr.w	r4, [r6, #-4]
 80471fc:	680a      	ldr	r2, [r1, #0]
 80471fe:	43ef      	mvns	r7, r5
 8047200:	19be      	adds	r6, r7, r6
 8047202:	4294      	cmp	r4, r2
 8047204:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8047208:	d110      	bne.n	804722c <__mcmp+0x4c>
 804720a:	429d      	cmp	r5, r3
 804720c:	d213      	bcs.n	8047236 <__mcmp+0x56>
 804720e:	b13e      	cbz	r6, 8047220 <__mcmp+0x40>
 8047210:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8047214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8047218:	4294      	cmp	r4, r2
 804721a:	d107      	bne.n	804722c <__mcmp+0x4c>
 804721c:	429d      	cmp	r5, r3
 804721e:	d20a      	bcs.n	8047236 <__mcmp+0x56>
 8047220:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8047224:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8047228:	4294      	cmp	r4, r2
 804722a:	d0f1      	beq.n	8047210 <__mcmp+0x30>
 804722c:	42a2      	cmp	r2, r4
 804722e:	bf94      	ite	ls
 8047230:	2001      	movls	r0, #1
 8047232:	f04f 30ff 	movhi.w	r0, #4294967295
 8047236:	bcf0      	pop	{r4, r5, r6, r7}
 8047238:	4770      	bx	lr
 804723a:	bf00      	nop

0804723c <__mdiff>:
 804723c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047240:	460f      	mov	r7, r1
 8047242:	4604      	mov	r4, r0
 8047244:	4611      	mov	r1, r2
 8047246:	4638      	mov	r0, r7
 8047248:	4691      	mov	r9, r2
 804724a:	f7ff ffc9 	bl	80471e0 <__mcmp>
 804724e:	1e05      	subs	r5, r0, #0
 8047250:	f000 80f7 	beq.w	8047442 <__mdiff+0x206>
 8047254:	f2c0 80ef 	blt.w	8047436 <__mdiff+0x1fa>
 8047258:	f04f 0a00 	mov.w	sl, #0
 804725c:	4620      	mov	r0, r4
 804725e:	6879      	ldr	r1, [r7, #4]
 8047260:	f7ff fc52 	bl	8046b08 <_Balloc>
 8047264:	697e      	ldr	r6, [r7, #20]
 8047266:	f8d9 1014 	ldr.w	r1, [r9, #20]
 804726a:	f8d9 5010 	ldr.w	r5, [r9, #16]
 804726e:	fa1f fc86 	uxth.w	ip, r6
 8047272:	b28c      	uxth	r4, r1
 8047274:	0c09      	lsrs	r1, r1, #16
 8047276:	ebc4 040c 	rsb	r4, r4, ip
 804727a:	693b      	ldr	r3, [r7, #16]
 804727c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8047280:	ebc1 4616 	rsb	r6, r1, r6, lsr #16
 8047284:	f109 0214 	add.w	r2, r9, #20
 8047288:	eb06 4124 	add.w	r1, r6, r4, asr #16
 804728c:	f105 0b14 	add.w	fp, r5, #20
 8047290:	43d2      	mvns	r2, r2
 8047292:	b2a4      	uxth	r4, r4
 8047294:	f109 0618 	add.w	r6, r9, #24
 8047298:	445a      	add	r2, fp
 804729a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 804729e:	eb07 0883 	add.w	r8, r7, r3, lsl #2
 80472a2:	f100 0518 	add.w	r5, r0, #24
 80472a6:	1409      	asrs	r1, r1, #16
 80472a8:	45b3      	cmp	fp, r6
 80472aa:	f8c0 a00c 	str.w	sl, [r0, #12]
 80472ae:	6144      	str	r4, [r0, #20]
 80472b0:	f3c2 0a80 	ubfx	sl, r2, #2, #1
 80472b4:	f108 0814 	add.w	r8, r8, #20
 80472b8:	f107 0c18 	add.w	ip, r7, #24
 80472bc:	462a      	mov	r2, r5
 80472be:	d956      	bls.n	804736e <__mdiff+0x132>
 80472c0:	f1ba 0f00 	cmp.w	sl, #0
 80472c4:	d01b      	beq.n	80472fe <__mdiff+0xc2>
 80472c6:	f8dc 2000 	ldr.w	r2, [ip]
 80472ca:	6836      	ldr	r6, [r6, #0]
 80472cc:	b294      	uxth	r4, r2
 80472ce:	1861      	adds	r1, r4, r1
 80472d0:	fa1f fe86 	uxth.w	lr, r6
 80472d4:	0c36      	lsrs	r6, r6, #16
 80472d6:	ebce 0401 	rsb	r4, lr, r1
 80472da:	ebc6 4212 	rsb	r2, r6, r2, lsr #16
 80472de:	eb02 4124 	add.w	r1, r2, r4, asr #16
 80472e2:	b2a6      	uxth	r6, r4
 80472e4:	ea46 4401 	orr.w	r4, r6, r1, lsl #16
 80472e8:	f109 061c 	add.w	r6, r9, #28
 80472ec:	602c      	str	r4, [r5, #0]
 80472ee:	1409      	asrs	r1, r1, #16
 80472f0:	f100 051c 	add.w	r5, r0, #28
 80472f4:	45b3      	cmp	fp, r6
 80472f6:	f107 0c1c 	add.w	ip, r7, #28
 80472fa:	462a      	mov	r2, r5
 80472fc:	d937      	bls.n	804736e <__mdiff+0x132>
 80472fe:	4662      	mov	r2, ip
 8047300:	f852 4b04 	ldr.w	r4, [r2], #4
 8047304:	4637      	mov	r7, r6
 8047306:	f857 9b04 	ldr.w	r9, [r7], #4
 804730a:	fa1f fa84 	uxth.w	sl, r4
 804730e:	fa1f fe89 	uxth.w	lr, r9
 8047312:	4451      	add	r1, sl
 8047314:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8047318:	ebce 0101 	rsb	r1, lr, r1
 804731c:	ebc9 4414 	rsb	r4, r9, r4, lsr #16
 8047320:	eb04 4421 	add.w	r4, r4, r1, asr #16
 8047324:	fa1f fa81 	uxth.w	sl, r1
 8047328:	ea4a 4e04 	orr.w	lr, sl, r4, lsl #16
 804732c:	4629      	mov	r1, r5
 804732e:	f841 eb04 	str.w	lr, [r1], #4
 8047332:	f8dc c004 	ldr.w	ip, [ip, #4]
 8047336:	6876      	ldr	r6, [r6, #4]
 8047338:	fa1f f98c 	uxth.w	r9, ip
 804733c:	eb09 4424 	add.w	r4, r9, r4, asr #16
 8047340:	fa1f fa86 	uxth.w	sl, r6
 8047344:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8047348:	ebca 0404 	rsb	r4, sl, r4
 804734c:	ebc6 4e1c 	rsb	lr, r6, ip, lsr #16
 8047350:	eb0e 4924 	add.w	r9, lr, r4, asr #16
 8047354:	b2a6      	uxth	r6, r4
 8047356:	ea46 4409 	orr.w	r4, r6, r9, lsl #16
 804735a:	1d3e      	adds	r6, r7, #4
 804735c:	606c      	str	r4, [r5, #4]
 804735e:	1d0d      	adds	r5, r1, #4
 8047360:	45b3      	cmp	fp, r6
 8047362:	f102 0c04 	add.w	ip, r2, #4
 8047366:	ea4f 4129 	mov.w	r1, r9, asr #16
 804736a:	462a      	mov	r2, r5
 804736c:	d8c7      	bhi.n	80472fe <__mdiff+0xc2>
 804736e:	45e0      	cmp	r8, ip
 8047370:	d957      	bls.n	8047422 <__mdiff+0x1e6>
 8047372:	4662      	mov	r2, ip
 8047374:	f852 6b04 	ldr.w	r6, [r2], #4
 8047378:	ea6f 0a0c 	mvn.w	sl, ip
 804737c:	b2b4      	uxth	r4, r6
 804737e:	1861      	adds	r1, r4, r1
 8047380:	ea4f 4916 	mov.w	r9, r6, lsr #16
 8047384:	eb09 4e21 	add.w	lr, r9, r1, asr #16
 8047388:	b28c      	uxth	r4, r1
 804738a:	eb08 060a 	add.w	r6, r8, sl
 804738e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8047392:	4629      	mov	r1, r5
 8047394:	4590      	cmp	r8, r2
 8047396:	f841 4b04 	str.w	r4, [r1], #4
 804739a:	f3c6 0680 	ubfx	r6, r6, #2, #1
 804739e:	ea4f 492e 	mov.w	r9, lr, asr #16
 80473a2:	d936      	bls.n	8047412 <__mdiff+0x1d6>
 80473a4:	b186      	cbz	r6, 80473c8 <__mdiff+0x18c>
 80473a6:	f852 6b04 	ldr.w	r6, [r2], #4
 80473aa:	b2b4      	uxth	r4, r6
 80473ac:	44a1      	add	r9, r4
 80473ae:	0c36      	lsrs	r6, r6, #16
 80473b0:	eb06 4629 	add.w	r6, r6, r9, asr #16
 80473b4:	fa1f f489 	uxth.w	r4, r9
 80473b8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80473bc:	4590      	cmp	r8, r2
 80473be:	f841 4b04 	str.w	r4, [r1], #4
 80473c2:	ea4f 4926 	mov.w	r9, r6, asr #16
 80473c6:	d924      	bls.n	8047412 <__mdiff+0x1d6>
 80473c8:	4617      	mov	r7, r2
 80473ca:	f857 4b04 	ldr.w	r4, [r7], #4
 80473ce:	460e      	mov	r6, r1
 80473d0:	fa1f fa84 	uxth.w	sl, r4
 80473d4:	eb0a 0e09 	add.w	lr, sl, r9
 80473d8:	0c24      	lsrs	r4, r4, #16
 80473da:	eb04 442e 	add.w	r4, r4, lr, asr #16
 80473de:	fa1f f98e 	uxth.w	r9, lr
 80473e2:	ea49 4e04 	orr.w	lr, r9, r4, lsl #16
 80473e6:	f846 eb04 	str.w	lr, [r6], #4
 80473ea:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80473ee:	1d3a      	adds	r2, r7, #4
 80473f0:	fa1f f789 	uxth.w	r7, r9
 80473f4:	eb07 4424 	add.w	r4, r7, r4, asr #16
 80473f8:	ea4f 4719 	mov.w	r7, r9, lsr #16
 80473fc:	eb07 4724 	add.w	r7, r7, r4, asr #16
 8047400:	b2a4      	uxth	r4, r4
 8047402:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8047406:	604c      	str	r4, [r1, #4]
 8047408:	1d31      	adds	r1, r6, #4
 804740a:	4590      	cmp	r8, r2
 804740c:	ea4f 4927 	mov.w	r9, r7, asr #16
 8047410:	d8da      	bhi.n	80473c8 <__mdiff+0x18c>
 8047412:	ea6f 020c 	mvn.w	r2, ip
 8047416:	eb02 0108 	add.w	r1, r2, r8
 804741a:	f021 0203 	bic.w	r2, r1, #3
 804741e:	1d11      	adds	r1, r2, #4
 8047420:	186a      	adds	r2, r5, r1
 8047422:	3a04      	subs	r2, #4
 8047424:	b924      	cbnz	r4, 8047430 <__mdiff+0x1f4>
 8047426:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 804742a:	3b01      	subs	r3, #1
 804742c:	2900      	cmp	r1, #0
 804742e:	d0fa      	beq.n	8047426 <__mdiff+0x1ea>
 8047430:	6103      	str	r3, [r0, #16]
 8047432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8047436:	463b      	mov	r3, r7
 8047438:	f04f 0a01 	mov.w	sl, #1
 804743c:	464f      	mov	r7, r9
 804743e:	4699      	mov	r9, r3
 8047440:	e70c      	b.n	804725c <__mdiff+0x20>
 8047442:	4620      	mov	r0, r4
 8047444:	4629      	mov	r1, r5
 8047446:	f7ff fb5f 	bl	8046b08 <_Balloc>
 804744a:	2201      	movs	r2, #1
 804744c:	6102      	str	r2, [r0, #16]
 804744e:	6145      	str	r5, [r0, #20]
 8047450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08047454 <__d2b>:
 8047454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8047458:	2101      	movs	r1, #1
 804745a:	b083      	sub	sp, #12
 804745c:	461d      	mov	r5, r3
 804745e:	4614      	mov	r4, r2
 8047460:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8047462:	f7ff fb51 	bl	8046b08 <_Balloc>
 8047466:	f3c5 560a 	ubfx	r6, r5, #20, #11
 804746a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 804746e:	4680      	mov	r8, r0
 8047470:	46a9      	mov	r9, r5
 8047472:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
 8047476:	b10e      	cbz	r6, 804747c <__d2b+0x28>
 8047478:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 804747c:	9001      	str	r0, [sp, #4]
 804747e:	2c00      	cmp	r4, #0
 8047480:	d024      	beq.n	80474cc <__d2b+0x78>
 8047482:	aa02      	add	r2, sp, #8
 8047484:	4668      	mov	r0, sp
 8047486:	f842 4d08 	str.w	r4, [r2, #-8]!
 804748a:	f7ff fc09 	bl	8046ca0 <__lo0bits>
 804748e:	9b01      	ldr	r3, [sp, #4]
 8047490:	2800      	cmp	r0, #0
 8047492:	d131      	bne.n	80474f8 <__d2b+0xa4>
 8047494:	9c00      	ldr	r4, [sp, #0]
 8047496:	f8c8 4014 	str.w	r4, [r8, #20]
 804749a:	2b00      	cmp	r3, #0
 804749c:	bf0c      	ite	eq
 804749e:	2401      	moveq	r4, #1
 80474a0:	2402      	movne	r4, #2
 80474a2:	f8c8 3018 	str.w	r3, [r8, #24]
 80474a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80474aa:	b9de      	cbnz	r6, 80474e4 <__d2b+0x90>
 80474ac:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 80474b0:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 80474b4:	6900      	ldr	r0, [r0, #16]
 80474b6:	603b      	str	r3, [r7, #0]
 80474b8:	f7ff fbd4 	bl	8046c64 <__hi0bits>
 80474bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80474be:	ebc0 1244 	rsb	r2, r0, r4, lsl #5
 80474c2:	600a      	str	r2, [r1, #0]
 80474c4:	4640      	mov	r0, r8
 80474c6:	b003      	add	sp, #12
 80474c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80474cc:	a801      	add	r0, sp, #4
 80474ce:	f7ff fbe7 	bl	8046ca0 <__lo0bits>
 80474d2:	9901      	ldr	r1, [sp, #4]
 80474d4:	2401      	movs	r4, #1
 80474d6:	f8c8 1014 	str.w	r1, [r8, #20]
 80474da:	f8c8 4010 	str.w	r4, [r8, #16]
 80474de:	3020      	adds	r0, #32
 80474e0:	2e00      	cmp	r6, #0
 80474e2:	d0e3      	beq.n	80474ac <__d2b+0x58>
 80474e4:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 80474e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80474ea:	eb09 0300 	add.w	r3, r9, r0
 80474ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80474f2:	603b      	str	r3, [r7, #0]
 80474f4:	6010      	str	r0, [r2, #0]
 80474f6:	e7e5      	b.n	80474c4 <__d2b+0x70>
 80474f8:	f1c0 0120 	rsb	r1, r0, #32
 80474fc:	fa03 f401 	lsl.w	r4, r3, r1
 8047500:	fa23 f300 	lsr.w	r3, r3, r0
 8047504:	9a00      	ldr	r2, [sp, #0]
 8047506:	9301      	str	r3, [sp, #4]
 8047508:	ea44 0102 	orr.w	r1, r4, r2
 804750c:	f8c8 1014 	str.w	r1, [r8, #20]
 8047510:	e7c3      	b.n	804749a <__d2b+0x46>
 8047512:	bf00      	nop

08047514 <__fpclassifyd>:
 8047514:	460b      	mov	r3, r1
 8047516:	b161      	cbz	r1, 8047532 <__fpclassifyd+0x1e>
 8047518:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 804751c:	d009      	beq.n	8047532 <__fpclassifyd+0x1e>
 804751e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8047522:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
 8047526:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 804752a:	4291      	cmp	r1, r2
 804752c:	d805      	bhi.n	804753a <__fpclassifyd+0x26>
 804752e:	2004      	movs	r0, #4
 8047530:	4770      	bx	lr
 8047532:	2800      	cmp	r0, #0
 8047534:	d1f3      	bne.n	804751e <__fpclassifyd+0xa>
 8047536:	2002      	movs	r0, #2
 8047538:	4770      	bx	lr
 804753a:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
 804753e:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8047542:	4291      	cmp	r1, r2
 8047544:	d9f3      	bls.n	804752e <__fpclassifyd+0x1a>
 8047546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804754a:	f2c0 020f 	movt	r2, #15
 804754e:	4293      	cmp	r3, r2
 8047550:	d801      	bhi.n	8047556 <__fpclassifyd+0x42>
 8047552:	2003      	movs	r0, #3
 8047554:	4770      	bx	lr
 8047556:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 804755a:	4291      	cmp	r1, r2
 804755c:	d9f9      	bls.n	8047552 <__fpclassifyd+0x3e>
 804755e:	2200      	movs	r2, #0
 8047560:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8047564:	4293      	cmp	r3, r2
 8047566:	d004      	beq.n	8047572 <__fpclassifyd+0x5e>
 8047568:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 804756c:	d001      	beq.n	8047572 <__fpclassifyd+0x5e>
 804756e:	2000      	movs	r0, #0
 8047570:	4770      	bx	lr
 8047572:	f1d0 0001 	rsbs	r0, r0, #1
 8047576:	bf38      	it	cc
 8047578:	2000      	movcc	r0, #0
 804757a:	4770      	bx	lr

0804757c <_sbrk_r>:
 804757c:	b538      	push	{r3, r4, r5, lr}
 804757e:	4c07      	ldr	r4, [pc, #28]	; (804759c <_sbrk_r+0x20>)
 8047580:	2300      	movs	r3, #0
 8047582:	4605      	mov	r5, r0
 8047584:	4608      	mov	r0, r1
 8047586:	6023      	str	r3, [r4, #0]
 8047588:	f7fb f9ca 	bl	8042920 <_sbrk>
 804758c:	1c43      	adds	r3, r0, #1
 804758e:	d000      	beq.n	8047592 <_sbrk_r+0x16>
 8047590:	bd38      	pop	{r3, r4, r5, pc}
 8047592:	6821      	ldr	r1, [r4, #0]
 8047594:	2900      	cmp	r1, #0
 8047596:	d0fb      	beq.n	8047590 <_sbrk_r+0x14>
 8047598:	6029      	str	r1, [r5, #0]
 804759a:	bd38      	pop	{r3, r4, r5, pc}
 804759c:	200019f0 	.word	0x200019f0

080475a0 <strlen>:
 80475a0:	f020 0103 	bic.w	r1, r0, #3
 80475a4:	f010 0003 	ands.w	r0, r0, #3
 80475a8:	f1c0 0000 	rsb	r0, r0, #0
 80475ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80475b0:	f100 0c04 	add.w	ip, r0, #4
 80475b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80475b8:	f06f 0200 	mvn.w	r2, #0
 80475bc:	bf1c      	itt	ne
 80475be:	fa22 f20c 	lsrne.w	r2, r2, ip
 80475c2:	4313      	orrne	r3, r2
 80475c4:	f04f 0c01 	mov.w	ip, #1
 80475c8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80475cc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80475d0:	eba3 020c 	sub.w	r2, r3, ip
 80475d4:	ea22 0203 	bic.w	r2, r2, r3
 80475d8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80475dc:	bf04      	itt	eq
 80475de:	f851 3b04 	ldreq.w	r3, [r1], #4
 80475e2:	3004      	addeq	r0, #4
 80475e4:	d0f4      	beq.n	80475d0 <strlen+0x30>
 80475e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80475ea:	bf1f      	itttt	ne
 80475ec:	3001      	addne	r0, #1
 80475ee:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80475f2:	3001      	addne	r0, #1
 80475f4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80475f8:	bf18      	it	ne
 80475fa:	3001      	addne	r0, #1
 80475fc:	4770      	bx	lr
 80475fe:	bf00      	nop

08047600 <__ssprint_r>:
 8047600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047604:	6894      	ldr	r4, [r2, #8]
 8047606:	b083      	sub	sp, #12
 8047608:	4692      	mov	sl, r2
 804760a:	4681      	mov	r9, r0
 804760c:	460d      	mov	r5, r1
 804760e:	6817      	ldr	r7, [r2, #0]
 8047610:	2c00      	cmp	r4, #0
 8047612:	d06e      	beq.n	80476f2 <__ssprint_r+0xf2>
 8047614:	f04f 0b00 	mov.w	fp, #0
 8047618:	6808      	ldr	r0, [r1, #0]
 804761a:	688e      	ldr	r6, [r1, #8]
 804761c:	465c      	mov	r4, fp
 804761e:	2c00      	cmp	r4, #0
 8047620:	d047      	beq.n	80476b2 <__ssprint_r+0xb2>
 8047622:	42b4      	cmp	r4, r6
 8047624:	46b0      	mov	r8, r6
 8047626:	d349      	bcc.n	80476bc <__ssprint_r+0xbc>
 8047628:	89ab      	ldrh	r3, [r5, #12]
 804762a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 804762e:	d030      	beq.n	8047692 <__ssprint_r+0x92>
 8047630:	696e      	ldr	r6, [r5, #20]
 8047632:	6929      	ldr	r1, [r5, #16]
 8047634:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8047638:	ebc1 0800 	rsb	r8, r1, r0
 804763c:	eb02 76d2 	add.w	r6, r2, r2, lsr #31
 8047640:	1c60      	adds	r0, r4, #1
 8047642:	1076      	asrs	r6, r6, #1
 8047644:	4440      	add	r0, r8
 8047646:	4286      	cmp	r6, r0
 8047648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804764c:	4632      	mov	r2, r6
 804764e:	b21b      	sxth	r3, r3
 8047650:	bf3c      	itt	cc
 8047652:	4606      	movcc	r6, r0
 8047654:	4632      	movcc	r2, r6
 8047656:	4648      	mov	r0, r9
 8047658:	2b00      	cmp	r3, #0
 804765a:	d032      	beq.n	80476c2 <__ssprint_r+0xc2>
 804765c:	4611      	mov	r1, r2
 804765e:	f7fe ff17 	bl	8046490 <_malloc_r>
 8047662:	2800      	cmp	r0, #0
 8047664:	d036      	beq.n	80476d4 <__ssprint_r+0xd4>
 8047666:	6929      	ldr	r1, [r5, #16]
 8047668:	4642      	mov	r2, r8
 804766a:	9001      	str	r0, [sp, #4]
 804766c:	f7fb fca6 	bl	8042fbc <memcpy>
 8047670:	89aa      	ldrh	r2, [r5, #12]
 8047672:	f422 6090 	bic.w	r0, r2, #1152	; 0x480
 8047676:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 804767a:	81a9      	strh	r1, [r5, #12]
 804767c:	9901      	ldr	r1, [sp, #4]
 804767e:	ebc8 0306 	rsb	r3, r8, r6
 8047682:	eb01 0008 	add.w	r0, r1, r8
 8047686:	616e      	str	r6, [r5, #20]
 8047688:	6129      	str	r1, [r5, #16]
 804768a:	6028      	str	r0, [r5, #0]
 804768c:	4626      	mov	r6, r4
 804768e:	60ab      	str	r3, [r5, #8]
 8047690:	46a0      	mov	r8, r4
 8047692:	4659      	mov	r1, fp
 8047694:	4642      	mov	r2, r8
 8047696:	f000 f863 	bl	8047760 <memmove>
 804769a:	f8da 1008 	ldr.w	r1, [sl, #8]
 804769e:	68aa      	ldr	r2, [r5, #8]
 80476a0:	6828      	ldr	r0, [r5, #0]
 80476a2:	1b96      	subs	r6, r2, r6
 80476a4:	4440      	add	r0, r8
 80476a6:	1b0c      	subs	r4, r1, r4
 80476a8:	60ae      	str	r6, [r5, #8]
 80476aa:	6028      	str	r0, [r5, #0]
 80476ac:	f8ca 4008 	str.w	r4, [sl, #8]
 80476b0:	b1fc      	cbz	r4, 80476f2 <__ssprint_r+0xf2>
 80476b2:	f8d7 b000 	ldr.w	fp, [r7]
 80476b6:	687c      	ldr	r4, [r7, #4]
 80476b8:	3708      	adds	r7, #8
 80476ba:	e7b0      	b.n	804761e <__ssprint_r+0x1e>
 80476bc:	4626      	mov	r6, r4
 80476be:	46a0      	mov	r8, r4
 80476c0:	e7e7      	b.n	8047692 <__ssprint_r+0x92>
 80476c2:	f000 f925 	bl	8047910 <_realloc_r>
 80476c6:	4601      	mov	r1, r0
 80476c8:	2800      	cmp	r0, #0
 80476ca:	d1d8      	bne.n	804767e <__ssprint_r+0x7e>
 80476cc:	4648      	mov	r0, r9
 80476ce:	6929      	ldr	r1, [r5, #16]
 80476d0:	f7fe fe0e 	bl	80462f0 <_free_r>
 80476d4:	89aa      	ldrh	r2, [r5, #12]
 80476d6:	2100      	movs	r1, #0
 80476d8:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 80476dc:	230c      	movs	r3, #12
 80476de:	f8c9 3000 	str.w	r3, [r9]
 80476e2:	81a8      	strh	r0, [r5, #12]
 80476e4:	f04f 30ff 	mov.w	r0, #4294967295
 80476e8:	f8ca 1008 	str.w	r1, [sl, #8]
 80476ec:	f8ca 1004 	str.w	r1, [sl, #4]
 80476f0:	e002      	b.n	80476f8 <__ssprint_r+0xf8>
 80476f2:	f8ca 4004 	str.w	r4, [sl, #4]
 80476f6:	4620      	mov	r0, r4
 80476f8:	b003      	add	sp, #12
 80476fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80476fe:	bf00      	nop

08047700 <_calloc_r>:
 8047700:	b510      	push	{r4, lr}
 8047702:	fb01 f102 	mul.w	r1, r1, r2
 8047706:	f7fe fec3 	bl	8046490 <_malloc_r>
 804770a:	4604      	mov	r4, r0
 804770c:	b168      	cbz	r0, 804772a <_calloc_r+0x2a>
 804770e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8047712:	f022 0103 	bic.w	r1, r2, #3
 8047716:	1f0a      	subs	r2, r1, #4
 8047718:	2a24      	cmp	r2, #36	; 0x24
 804771a:	d818      	bhi.n	804774e <_calloc_r+0x4e>
 804771c:	2a13      	cmp	r2, #19
 804771e:	d806      	bhi.n	804772e <_calloc_r+0x2e>
 8047720:	4603      	mov	r3, r0
 8047722:	2000      	movs	r0, #0
 8047724:	6018      	str	r0, [r3, #0]
 8047726:	6058      	str	r0, [r3, #4]
 8047728:	6098      	str	r0, [r3, #8]
 804772a:	4620      	mov	r0, r4
 804772c:	bd10      	pop	{r4, pc}
 804772e:	2300      	movs	r3, #0
 8047730:	2a1b      	cmp	r2, #27
 8047732:	6003      	str	r3, [r0, #0]
 8047734:	6043      	str	r3, [r0, #4]
 8047736:	d90f      	bls.n	8047758 <_calloc_r+0x58>
 8047738:	2a24      	cmp	r2, #36	; 0x24
 804773a:	6083      	str	r3, [r0, #8]
 804773c:	60c3      	str	r3, [r0, #12]
 804773e:	bf05      	ittet	eq
 8047740:	6103      	streq	r3, [r0, #16]
 8047742:	6143      	streq	r3, [r0, #20]
 8047744:	f100 0310 	addne.w	r3, r0, #16
 8047748:	f100 0318 	addeq.w	r3, r0, #24
 804774c:	e7e9      	b.n	8047722 <_calloc_r+0x22>
 804774e:	2100      	movs	r1, #0
 8047750:	f7fb fce2 	bl	8043118 <memset>
 8047754:	4620      	mov	r0, r4
 8047756:	bd10      	pop	{r4, pc}
 8047758:	f100 0308 	add.w	r3, r0, #8
 804775c:	e7e1      	b.n	8047722 <_calloc_r+0x22>
 804775e:	bf00      	nop

08047760 <memmove>:
 8047760:	4288      	cmp	r0, r1
 8047762:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8047766:	d926      	bls.n	80477b6 <memmove+0x56>
 8047768:	188c      	adds	r4, r1, r2
 804776a:	42a0      	cmp	r0, r4
 804776c:	d223      	bcs.n	80477b6 <memmove+0x56>
 804776e:	1883      	adds	r3, r0, r2
 8047770:	1e55      	subs	r5, r2, #1
 8047772:	b1ea      	cbz	r2, 80477b0 <memmove+0x50>
 8047774:	4622      	mov	r2, r4
 8047776:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 804777a:	f005 0401 	and.w	r4, r5, #1
 804777e:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8047782:	1e69      	subs	r1, r5, #1
 8047784:	b1a5      	cbz	r5, 80477b0 <memmove+0x50>
 8047786:	b13c      	cbz	r4, 8047798 <memmove+0x38>
 8047788:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 804778c:	3901      	subs	r1, #1
 804778e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8047792:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8047796:	d00b      	beq.n	80477b0 <memmove+0x50>
 8047798:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 804779c:	3902      	subs	r1, #2
 804779e:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80477a2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80477a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80477aa:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80477ae:	d1f3      	bne.n	8047798 <memmove+0x38>
 80477b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80477b4:	4770      	bx	lr
 80477b6:	2a0f      	cmp	r2, #15
 80477b8:	f240 80a2 	bls.w	8047900 <memmove+0x1a0>
 80477bc:	ea41 0300 	orr.w	r3, r1, r0
 80477c0:	079b      	lsls	r3, r3, #30
 80477c2:	f040 809f 	bne.w	8047904 <memmove+0x1a4>
 80477c6:	680c      	ldr	r4, [r1, #0]
 80477c8:	f1a2 0510 	sub.w	r5, r2, #16
 80477cc:	6004      	str	r4, [r0, #0]
 80477ce:	684b      	ldr	r3, [r1, #4]
 80477d0:	46ac      	mov	ip, r5
 80477d2:	6043      	str	r3, [r0, #4]
 80477d4:	688c      	ldr	r4, [r1, #8]
 80477d6:	f1bc 0f0f 	cmp.w	ip, #15
 80477da:	6084      	str	r4, [r0, #8]
 80477dc:	68cc      	ldr	r4, [r1, #12]
 80477de:	f3c5 1500 	ubfx	r5, r5, #4, #1
 80477e2:	60c4      	str	r4, [r0, #12]
 80477e4:	f100 0310 	add.w	r3, r0, #16
 80477e8:	f101 0410 	add.w	r4, r1, #16
 80477ec:	d92a      	bls.n	8047844 <memmove+0xe4>
 80477ee:	b175      	cbz	r5, 804780e <memmove+0xae>
 80477f0:	6825      	ldr	r5, [r4, #0]
 80477f2:	f1ac 0c10 	sub.w	ip, ip, #16
 80477f6:	601d      	str	r5, [r3, #0]
 80477f8:	6865      	ldr	r5, [r4, #4]
 80477fa:	605d      	str	r5, [r3, #4]
 80477fc:	68a5      	ldr	r5, [r4, #8]
 80477fe:	609d      	str	r5, [r3, #8]
 8047800:	68e5      	ldr	r5, [r4, #12]
 8047802:	3410      	adds	r4, #16
 8047804:	60dd      	str	r5, [r3, #12]
 8047806:	3310      	adds	r3, #16
 8047808:	f1bc 0f0f 	cmp.w	ip, #15
 804780c:	d91a      	bls.n	8047844 <memmove+0xe4>
 804780e:	6827      	ldr	r7, [r4, #0]
 8047810:	f104 0610 	add.w	r6, r4, #16
 8047814:	601f      	str	r7, [r3, #0]
 8047816:	6867      	ldr	r7, [r4, #4]
 8047818:	f103 0510 	add.w	r5, r3, #16
 804781c:	605f      	str	r7, [r3, #4]
 804781e:	68a7      	ldr	r7, [r4, #8]
 8047820:	f1ac 0c20 	sub.w	ip, ip, #32
 8047824:	609f      	str	r7, [r3, #8]
 8047826:	68e7      	ldr	r7, [r4, #12]
 8047828:	60df      	str	r7, [r3, #12]
 804782a:	6927      	ldr	r7, [r4, #16]
 804782c:	3420      	adds	r4, #32
 804782e:	611f      	str	r7, [r3, #16]
 8047830:	6877      	ldr	r7, [r6, #4]
 8047832:	3320      	adds	r3, #32
 8047834:	606f      	str	r7, [r5, #4]
 8047836:	68b7      	ldr	r7, [r6, #8]
 8047838:	f1bc 0f0f 	cmp.w	ip, #15
 804783c:	60af      	str	r7, [r5, #8]
 804783e:	68f6      	ldr	r6, [r6, #12]
 8047840:	60ee      	str	r6, [r5, #12]
 8047842:	d8e4      	bhi.n	804780e <memmove+0xae>
 8047844:	f1a2 0810 	sub.w	r8, r2, #16
 8047848:	f028 030f 	bic.w	r3, r8, #15
 804784c:	f002 040f 	and.w	r4, r2, #15
 8047850:	f103 0c10 	add.w	ip, r3, #16
 8047854:	2c03      	cmp	r4, #3
 8047856:	eb00 030c 	add.w	r3, r0, ip
 804785a:	eb01 080c 	add.w	r8, r1, ip
 804785e:	d953      	bls.n	8047908 <memmove+0x1a8>
 8047860:	1f21      	subs	r1, r4, #4
 8047862:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8047866:	4644      	mov	r4, r8
 8047868:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 804786c:	f854 6b04 	ldr.w	r6, [r4], #4
 8047870:	ebc8 010c 	rsb	r1, r8, ip
 8047874:	f10c 0c04 	add.w	ip, ip, #4
 8047878:	461d      	mov	r5, r3
 804787a:	4564      	cmp	r4, ip
 804787c:	f845 6b04 	str.w	r6, [r5], #4
 8047880:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8047884:	d012      	beq.n	80478ac <memmove+0x14c>
 8047886:	b129      	cbz	r1, 8047894 <memmove+0x134>
 8047888:	f854 1b04 	ldr.w	r1, [r4], #4
 804788c:	4564      	cmp	r4, ip
 804788e:	f845 1b04 	str.w	r1, [r5], #4
 8047892:	d00b      	beq.n	80478ac <memmove+0x14c>
 8047894:	4627      	mov	r7, r4
 8047896:	f857 1b04 	ldr.w	r1, [r7], #4
 804789a:	462e      	mov	r6, r5
 804789c:	f846 1b04 	str.w	r1, [r6], #4
 80478a0:	6864      	ldr	r4, [r4, #4]
 80478a2:	606c      	str	r4, [r5, #4]
 80478a4:	1d3c      	adds	r4, r7, #4
 80478a6:	1d35      	adds	r5, r6, #4
 80478a8:	4564      	cmp	r4, ip
 80478aa:	d1f3      	bne.n	8047894 <memmove+0x134>
 80478ac:	f109 0c01 	add.w	ip, r9, #1
 80478b0:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80478b4:	f002 0203 	and.w	r2, r2, #3
 80478b8:	eb08 0109 	add.w	r1, r8, r9
 80478bc:	444b      	add	r3, r9
 80478be:	2a00      	cmp	r2, #0
 80478c0:	f43f af76 	beq.w	80477b0 <memmove+0x50>
 80478c4:	780d      	ldrb	r5, [r1, #0]
 80478c6:	189a      	adds	r2, r3, r2
 80478c8:	43dc      	mvns	r4, r3
 80478ca:	f803 5b01 	strb.w	r5, [r3], #1
 80478ce:	1914      	adds	r4, r2, r4
 80478d0:	4293      	cmp	r3, r2
 80478d2:	f004 0401 	and.w	r4, r4, #1
 80478d6:	f43f af6b 	beq.w	80477b0 <memmove+0x50>
 80478da:	b134      	cbz	r4, 80478ea <memmove+0x18a>
 80478dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80478e0:	f803 4b01 	strb.w	r4, [r3], #1
 80478e4:	4293      	cmp	r3, r2
 80478e6:	f43f af63 	beq.w	80477b0 <memmove+0x50>
 80478ea:	784d      	ldrb	r5, [r1, #1]
 80478ec:	461c      	mov	r4, r3
 80478ee:	f804 5b01 	strb.w	r5, [r4], #1
 80478f2:	788d      	ldrb	r5, [r1, #2]
 80478f4:	3102      	adds	r1, #2
 80478f6:	705d      	strb	r5, [r3, #1]
 80478f8:	1c63      	adds	r3, r4, #1
 80478fa:	4293      	cmp	r3, r2
 80478fc:	d1f5      	bne.n	80478ea <memmove+0x18a>
 80478fe:	e757      	b.n	80477b0 <memmove+0x50>
 8047900:	4603      	mov	r3, r0
 8047902:	e7dc      	b.n	80478be <memmove+0x15e>
 8047904:	4603      	mov	r3, r0
 8047906:	e7dd      	b.n	80478c4 <memmove+0x164>
 8047908:	4641      	mov	r1, r8
 804790a:	4622      	mov	r2, r4
 804790c:	e7d7      	b.n	80478be <memmove+0x15e>
 804790e:	bf00      	nop

08047910 <_realloc_r>:
 8047910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047914:	460c      	mov	r4, r1
 8047916:	b083      	sub	sp, #12
 8047918:	4681      	mov	r9, r0
 804791a:	4617      	mov	r7, r2
 804791c:	2900      	cmp	r1, #0
 804791e:	f000 80c6 	beq.w	8047aae <_realloc_r+0x19e>
 8047922:	f7ff f8ed 	bl	8046b00 <__malloc_lock>
 8047926:	f107 050b 	add.w	r5, r7, #11
 804792a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 804792e:	2d16      	cmp	r5, #22
 8047930:	f1a4 0a08 	sub.w	sl, r4, #8
 8047934:	f023 0603 	bic.w	r6, r3, #3
 8047938:	d850      	bhi.n	80479dc <_realloc_r+0xcc>
 804793a:	2110      	movs	r1, #16
 804793c:	460d      	mov	r5, r1
 804793e:	42af      	cmp	r7, r5
 8047940:	d851      	bhi.n	80479e6 <_realloc_r+0xd6>
 8047942:	428e      	cmp	r6, r1
 8047944:	da54      	bge.n	80479f0 <_realloc_r+0xe0>
 8047946:	f8df c3b0 	ldr.w	ip, [pc, #944]	; 8047cf8 <_realloc_r+0x3e8>
 804794a:	eb0a 0206 	add.w	r2, sl, r6
 804794e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8047952:	4290      	cmp	r0, r2
 8047954:	f000 80b1 	beq.w	8047aba <_realloc_r+0x1aa>
 8047958:	f8d2 e004 	ldr.w	lr, [r2, #4]
 804795c:	f02e 0801 	bic.w	r8, lr, #1
 8047960:	4490      	add	r8, r2
 8047962:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8047966:	f018 0f01 	tst.w	r8, #1
 804796a:	d05b      	beq.n	8047a24 <_realloc_r+0x114>
 804796c:	f04f 0e00 	mov.w	lr, #0
 8047970:	4672      	mov	r2, lr
 8047972:	07db      	lsls	r3, r3, #31
 8047974:	d476      	bmi.n	8047a64 <_realloc_r+0x154>
 8047976:	f854 3c08 	ldr.w	r3, [r4, #-8]
 804797a:	ebc3 0b0a 	rsb	fp, r3, sl
 804797e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8047982:	f023 0303 	bic.w	r3, r3, #3
 8047986:	199b      	adds	r3, r3, r6
 8047988:	9301      	str	r3, [sp, #4]
 804798a:	2a00      	cmp	r2, #0
 804798c:	d067      	beq.n	8047a5e <_realloc_r+0x14e>
 804798e:	4282      	cmp	r2, r0
 8047990:	eb0e 0803 	add.w	r8, lr, r3
 8047994:	f000 80f4 	beq.w	8047b80 <_realloc_r+0x270>
 8047998:	4588      	cmp	r8, r1
 804799a:	db60      	blt.n	8047a5e <_realloc_r+0x14e>
 804799c:	68d1      	ldr	r1, [r2, #12]
 804799e:	6890      	ldr	r0, [r2, #8]
 80479a0:	465f      	mov	r7, fp
 80479a2:	60c1      	str	r1, [r0, #12]
 80479a4:	6088      	str	r0, [r1, #8]
 80479a6:	f8db 300c 	ldr.w	r3, [fp, #12]
 80479aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80479ae:	1f32      	subs	r2, r6, #4
 80479b0:	2a24      	cmp	r2, #36	; 0x24
 80479b2:	60cb      	str	r3, [r1, #12]
 80479b4:	6099      	str	r1, [r3, #8]
 80479b6:	f200 812d 	bhi.w	8047c14 <_realloc_r+0x304>
 80479ba:	2a13      	cmp	r2, #19
 80479bc:	f240 80bb 	bls.w	8047b36 <_realloc_r+0x226>
 80479c0:	6821      	ldr	r1, [r4, #0]
 80479c2:	2a1b      	cmp	r2, #27
 80479c4:	f8cb 1008 	str.w	r1, [fp, #8]
 80479c8:	6860      	ldr	r0, [r4, #4]
 80479ca:	f8cb 000c 	str.w	r0, [fp, #12]
 80479ce:	f200 8138 	bhi.w	8047c42 <_realloc_r+0x332>
 80479d2:	f10b 0010 	add.w	r0, fp, #16
 80479d6:	f104 0308 	add.w	r3, r4, #8
 80479da:	e0ae      	b.n	8047b3a <_realloc_r+0x22a>
 80479dc:	f025 0507 	bic.w	r5, r5, #7
 80479e0:	2d00      	cmp	r5, #0
 80479e2:	4629      	mov	r1, r5
 80479e4:	daab      	bge.n	804793e <_realloc_r+0x2e>
 80479e6:	270c      	movs	r7, #12
 80479e8:	f8c9 7000 	str.w	r7, [r9]
 80479ec:	2700      	movs	r7, #0
 80479ee:	e015      	b.n	8047a1c <_realloc_r+0x10c>
 80479f0:	46b0      	mov	r8, r6
 80479f2:	ebc5 0708 	rsb	r7, r5, r8
 80479f6:	2f0f      	cmp	r7, #15
 80479f8:	f003 0001 	and.w	r0, r3, #1
 80479fc:	d81d      	bhi.n	8047a3a <_realloc_r+0x12a>
 80479fe:	ea40 0108 	orr.w	r1, r0, r8
 8047a02:	f8ca 1004 	str.w	r1, [sl, #4]
 8047a06:	44c2      	add	sl, r8
 8047a08:	f8da 3004 	ldr.w	r3, [sl, #4]
 8047a0c:	f043 0201 	orr.w	r2, r3, #1
 8047a10:	f8ca 2004 	str.w	r2, [sl, #4]
 8047a14:	4648      	mov	r0, r9
 8047a16:	f7ff f875 	bl	8046b04 <__malloc_unlock>
 8047a1a:	4627      	mov	r7, r4
 8047a1c:	4638      	mov	r0, r7
 8047a1e:	b003      	add	sp, #12
 8047a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8047a24:	f02e 0e03 	bic.w	lr, lr, #3
 8047a28:	eb0e 0806 	add.w	r8, lr, r6
 8047a2c:	4588      	cmp	r8, r1
 8047a2e:	dba0      	blt.n	8047972 <_realloc_r+0x62>
 8047a30:	68d7      	ldr	r7, [r2, #12]
 8047a32:	6892      	ldr	r2, [r2, #8]
 8047a34:	60d7      	str	r7, [r2, #12]
 8047a36:	60ba      	str	r2, [r7, #8]
 8047a38:	e7db      	b.n	80479f2 <_realloc_r+0xe2>
 8047a3a:	eb0a 0105 	add.w	r1, sl, r5
 8047a3e:	4305      	orrs	r5, r0
 8047a40:	f047 0001 	orr.w	r0, r7, #1
 8047a44:	f8ca 5004 	str.w	r5, [sl, #4]
 8047a48:	19cf      	adds	r7, r1, r7
 8047a4a:	6048      	str	r0, [r1, #4]
 8047a4c:	687b      	ldr	r3, [r7, #4]
 8047a4e:	4648      	mov	r0, r9
 8047a50:	f043 0201 	orr.w	r2, r3, #1
 8047a54:	607a      	str	r2, [r7, #4]
 8047a56:	3108      	adds	r1, #8
 8047a58:	f7fe fc4a 	bl	80462f0 <_free_r>
 8047a5c:	e7da      	b.n	8047a14 <_realloc_r+0x104>
 8047a5e:	9a01      	ldr	r2, [sp, #4]
 8047a60:	428a      	cmp	r2, r1
 8047a62:	da35      	bge.n	8047ad0 <_realloc_r+0x1c0>
 8047a64:	4639      	mov	r1, r7
 8047a66:	4648      	mov	r0, r9
 8047a68:	f7fe fd12 	bl	8046490 <_malloc_r>
 8047a6c:	4607      	mov	r7, r0
 8047a6e:	b1d0      	cbz	r0, 8047aa6 <_realloc_r+0x196>
 8047a70:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8047a74:	f1a0 0108 	sub.w	r1, r0, #8
 8047a78:	f023 0201 	bic.w	r2, r3, #1
 8047a7c:	4452      	add	r2, sl
 8047a7e:	4291      	cmp	r1, r2
 8047a80:	f000 80c1 	beq.w	8047c06 <_realloc_r+0x2f6>
 8047a84:	1f32      	subs	r2, r6, #4
 8047a86:	2a24      	cmp	r2, #36	; 0x24
 8047a88:	d876      	bhi.n	8047b78 <_realloc_r+0x268>
 8047a8a:	2a13      	cmp	r2, #19
 8047a8c:	d848      	bhi.n	8047b20 <_realloc_r+0x210>
 8047a8e:	4603      	mov	r3, r0
 8047a90:	4620      	mov	r0, r4
 8047a92:	6802      	ldr	r2, [r0, #0]
 8047a94:	601a      	str	r2, [r3, #0]
 8047a96:	6841      	ldr	r1, [r0, #4]
 8047a98:	6059      	str	r1, [r3, #4]
 8047a9a:	6880      	ldr	r0, [r0, #8]
 8047a9c:	6098      	str	r0, [r3, #8]
 8047a9e:	4648      	mov	r0, r9
 8047aa0:	4621      	mov	r1, r4
 8047aa2:	f7fe fc25 	bl	80462f0 <_free_r>
 8047aa6:	4648      	mov	r0, r9
 8047aa8:	f7ff f82c 	bl	8046b04 <__malloc_unlock>
 8047aac:	e7b6      	b.n	8047a1c <_realloc_r+0x10c>
 8047aae:	4611      	mov	r1, r2
 8047ab0:	b003      	add	sp, #12
 8047ab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047ab6:	f7fe bceb 	b.w	8046490 <_malloc_r>
 8047aba:	6842      	ldr	r2, [r0, #4]
 8047abc:	f105 0810 	add.w	r8, r5, #16
 8047ac0:	f022 0e03 	bic.w	lr, r2, #3
 8047ac4:	eb0e 0206 	add.w	r2, lr, r6
 8047ac8:	4542      	cmp	r2, r8
 8047aca:	da41      	bge.n	8047b50 <_realloc_r+0x240>
 8047acc:	4602      	mov	r2, r0
 8047ace:	e750      	b.n	8047972 <_realloc_r+0x62>
 8047ad0:	465f      	mov	r7, fp
 8047ad2:	f8db 300c 	ldr.w	r3, [fp, #12]
 8047ad6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8047ada:	1f32      	subs	r2, r6, #4
 8047adc:	2a24      	cmp	r2, #36	; 0x24
 8047ade:	60cb      	str	r3, [r1, #12]
 8047ae0:	6099      	str	r1, [r3, #8]
 8047ae2:	f200 80a3 	bhi.w	8047c2c <_realloc_r+0x31c>
 8047ae6:	2a13      	cmp	r2, #19
 8047ae8:	f240 809d 	bls.w	8047c26 <_realloc_r+0x316>
 8047aec:	6823      	ldr	r3, [r4, #0]
 8047aee:	2a1b      	cmp	r2, #27
 8047af0:	f8cb 3008 	str.w	r3, [fp, #8]
 8047af4:	6861      	ldr	r1, [r4, #4]
 8047af6:	f8cb 100c 	str.w	r1, [fp, #12]
 8047afa:	f200 80b8 	bhi.w	8047c6e <_realloc_r+0x35e>
 8047afe:	f10b 0010 	add.w	r0, fp, #16
 8047b02:	f104 0208 	add.w	r2, r4, #8
 8047b06:	6813      	ldr	r3, [r2, #0]
 8047b08:	463c      	mov	r4, r7
 8047b0a:	6003      	str	r3, [r0, #0]
 8047b0c:	6857      	ldr	r7, [r2, #4]
 8047b0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8047b12:	6047      	str	r7, [r0, #4]
 8047b14:	6892      	ldr	r2, [r2, #8]
 8047b16:	46da      	mov	sl, fp
 8047b18:	6082      	str	r2, [r0, #8]
 8047b1a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8047b1e:	e768      	b.n	80479f2 <_realloc_r+0xe2>
 8047b20:	6821      	ldr	r1, [r4, #0]
 8047b22:	2a1b      	cmp	r2, #27
 8047b24:	6001      	str	r1, [r0, #0]
 8047b26:	6863      	ldr	r3, [r4, #4]
 8047b28:	6043      	str	r3, [r0, #4]
 8047b2a:	d861      	bhi.n	8047bf0 <_realloc_r+0x2e0>
 8047b2c:	f100 0308 	add.w	r3, r0, #8
 8047b30:	f104 0008 	add.w	r0, r4, #8
 8047b34:	e7ad      	b.n	8047a92 <_realloc_r+0x182>
 8047b36:	4638      	mov	r0, r7
 8047b38:	4623      	mov	r3, r4
 8047b3a:	681a      	ldr	r2, [r3, #0]
 8047b3c:	463c      	mov	r4, r7
 8047b3e:	6002      	str	r2, [r0, #0]
 8047b40:	685f      	ldr	r7, [r3, #4]
 8047b42:	46da      	mov	sl, fp
 8047b44:	6047      	str	r7, [r0, #4]
 8047b46:	689b      	ldr	r3, [r3, #8]
 8047b48:	6083      	str	r3, [r0, #8]
 8047b4a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8047b4e:	e750      	b.n	80479f2 <_realloc_r+0xe2>
 8047b50:	1b57      	subs	r7, r2, r5
 8047b52:	eb0a 0305 	add.w	r3, sl, r5
 8047b56:	f047 0001 	orr.w	r0, r7, #1
 8047b5a:	6058      	str	r0, [r3, #4]
 8047b5c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8047b60:	4648      	mov	r0, r9
 8047b62:	f001 0201 	and.w	r2, r1, #1
 8047b66:	4315      	orrs	r5, r2
 8047b68:	f844 5c04 	str.w	r5, [r4, #-4]
 8047b6c:	f8cc 3008 	str.w	r3, [ip, #8]
 8047b70:	4627      	mov	r7, r4
 8047b72:	f7fe ffc7 	bl	8046b04 <__malloc_unlock>
 8047b76:	e751      	b.n	8047a1c <_realloc_r+0x10c>
 8047b78:	4621      	mov	r1, r4
 8047b7a:	f7ff fdf1 	bl	8047760 <memmove>
 8047b7e:	e78e      	b.n	8047a9e <_realloc_r+0x18e>
 8047b80:	f105 0010 	add.w	r0, r5, #16
 8047b84:	4580      	cmp	r8, r0
 8047b86:	f6ff af6a 	blt.w	8047a5e <_realloc_r+0x14e>
 8047b8a:	465f      	mov	r7, fp
 8047b8c:	f8db 000c 	ldr.w	r0, [fp, #12]
 8047b90:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8047b94:	1f32      	subs	r2, r6, #4
 8047b96:	2a24      	cmp	r2, #36	; 0x24
 8047b98:	60c8      	str	r0, [r1, #12]
 8047b9a:	6081      	str	r1, [r0, #8]
 8047b9c:	f200 808c 	bhi.w	8047cb8 <_realloc_r+0x3a8>
 8047ba0:	2a13      	cmp	r2, #19
 8047ba2:	d97c      	bls.n	8047c9e <_realloc_r+0x38e>
 8047ba4:	6820      	ldr	r0, [r4, #0]
 8047ba6:	2a1b      	cmp	r2, #27
 8047ba8:	f8cb 0008 	str.w	r0, [fp, #8]
 8047bac:	6861      	ldr	r1, [r4, #4]
 8047bae:	f8cb 100c 	str.w	r1, [fp, #12]
 8047bb2:	f200 808a 	bhi.w	8047cca <_realloc_r+0x3ba>
 8047bb6:	f10b 0310 	add.w	r3, fp, #16
 8047bba:	3408      	adds	r4, #8
 8047bbc:	6820      	ldr	r0, [r4, #0]
 8047bbe:	6018      	str	r0, [r3, #0]
 8047bc0:	6862      	ldr	r2, [r4, #4]
 8047bc2:	605a      	str	r2, [r3, #4]
 8047bc4:	68a1      	ldr	r1, [r4, #8]
 8047bc6:	6099      	str	r1, [r3, #8]
 8047bc8:	ebc5 0008 	rsb	r0, r5, r8
 8047bcc:	eb0b 0305 	add.w	r3, fp, r5
 8047bd0:	f040 0201 	orr.w	r2, r0, #1
 8047bd4:	605a      	str	r2, [r3, #4]
 8047bd6:	f8db 1004 	ldr.w	r1, [fp, #4]
 8047bda:	4648      	mov	r0, r9
 8047bdc:	f001 0201 	and.w	r2, r1, #1
 8047be0:	4315      	orrs	r5, r2
 8047be2:	f8cb 5004 	str.w	r5, [fp, #4]
 8047be6:	f8cc 3008 	str.w	r3, [ip, #8]
 8047bea:	f7fe ff8b 	bl	8046b04 <__malloc_unlock>
 8047bee:	e715      	b.n	8047a1c <_realloc_r+0x10c>
 8047bf0:	68a0      	ldr	r0, [r4, #8]
 8047bf2:	2a24      	cmp	r2, #36	; 0x24
 8047bf4:	60b8      	str	r0, [r7, #8]
 8047bf6:	68e1      	ldr	r1, [r4, #12]
 8047bf8:	60f9      	str	r1, [r7, #12]
 8047bfa:	d02f      	beq.n	8047c5c <_realloc_r+0x34c>
 8047bfc:	f107 0310 	add.w	r3, r7, #16
 8047c00:	f104 0010 	add.w	r0, r4, #16
 8047c04:	e745      	b.n	8047a92 <_realloc_r+0x182>
 8047c06:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8047c0a:	f027 0c03 	bic.w	ip, r7, #3
 8047c0e:	eb0c 0806 	add.w	r8, ip, r6
 8047c12:	e6ee      	b.n	80479f2 <_realloc_r+0xe2>
 8047c14:	4621      	mov	r1, r4
 8047c16:	4638      	mov	r0, r7
 8047c18:	f7ff fda2 	bl	8047760 <memmove>
 8047c1c:	463c      	mov	r4, r7
 8047c1e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8047c22:	46da      	mov	sl, fp
 8047c24:	e6e5      	b.n	80479f2 <_realloc_r+0xe2>
 8047c26:	4638      	mov	r0, r7
 8047c28:	4622      	mov	r2, r4
 8047c2a:	e76c      	b.n	8047b06 <_realloc_r+0x1f6>
 8047c2c:	4621      	mov	r1, r4
 8047c2e:	4638      	mov	r0, r7
 8047c30:	f7ff fd96 	bl	8047760 <memmove>
 8047c34:	463c      	mov	r4, r7
 8047c36:	f8db 3004 	ldr.w	r3, [fp, #4]
 8047c3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8047c3e:	46da      	mov	sl, fp
 8047c40:	e6d7      	b.n	80479f2 <_realloc_r+0xe2>
 8047c42:	68a3      	ldr	r3, [r4, #8]
 8047c44:	2a24      	cmp	r2, #36	; 0x24
 8047c46:	f8cb 3010 	str.w	r3, [fp, #16]
 8047c4a:	68e1      	ldr	r1, [r4, #12]
 8047c4c:	f8cb 1014 	str.w	r1, [fp, #20]
 8047c50:	d01a      	beq.n	8047c88 <_realloc_r+0x378>
 8047c52:	f10b 0018 	add.w	r0, fp, #24
 8047c56:	f104 0310 	add.w	r3, r4, #16
 8047c5a:	e76e      	b.n	8047b3a <_realloc_r+0x22a>
 8047c5c:	6922      	ldr	r2, [r4, #16]
 8047c5e:	f107 0318 	add.w	r3, r7, #24
 8047c62:	613a      	str	r2, [r7, #16]
 8047c64:	6961      	ldr	r1, [r4, #20]
 8047c66:	f104 0018 	add.w	r0, r4, #24
 8047c6a:	6179      	str	r1, [r7, #20]
 8047c6c:	e711      	b.n	8047a92 <_realloc_r+0x182>
 8047c6e:	68a0      	ldr	r0, [r4, #8]
 8047c70:	2a24      	cmp	r2, #36	; 0x24
 8047c72:	f8cb 0010 	str.w	r0, [fp, #16]
 8047c76:	68e3      	ldr	r3, [r4, #12]
 8047c78:	f8cb 3014 	str.w	r3, [fp, #20]
 8047c7c:	d011      	beq.n	8047ca2 <_realloc_r+0x392>
 8047c7e:	f10b 0018 	add.w	r0, fp, #24
 8047c82:	f104 0210 	add.w	r2, r4, #16
 8047c86:	e73e      	b.n	8047b06 <_realloc_r+0x1f6>
 8047c88:	6922      	ldr	r2, [r4, #16]
 8047c8a:	f10b 0020 	add.w	r0, fp, #32
 8047c8e:	f8cb 2018 	str.w	r2, [fp, #24]
 8047c92:	6961      	ldr	r1, [r4, #20]
 8047c94:	f104 0318 	add.w	r3, r4, #24
 8047c98:	f8cb 101c 	str.w	r1, [fp, #28]
 8047c9c:	e74d      	b.n	8047b3a <_realloc_r+0x22a>
 8047c9e:	463b      	mov	r3, r7
 8047ca0:	e78c      	b.n	8047bbc <_realloc_r+0x2ac>
 8047ca2:	6922      	ldr	r2, [r4, #16]
 8047ca4:	f10b 0020 	add.w	r0, fp, #32
 8047ca8:	f8cb 2018 	str.w	r2, [fp, #24]
 8047cac:	6961      	ldr	r1, [r4, #20]
 8047cae:	f104 0218 	add.w	r2, r4, #24
 8047cb2:	f8cb 101c 	str.w	r1, [fp, #28]
 8047cb6:	e726      	b.n	8047b06 <_realloc_r+0x1f6>
 8047cb8:	4638      	mov	r0, r7
 8047cba:	4621      	mov	r1, r4
 8047cbc:	f8cd c000 	str.w	ip, [sp]
 8047cc0:	f7ff fd4e 	bl	8047760 <memmove>
 8047cc4:	f8dd c000 	ldr.w	ip, [sp]
 8047cc8:	e77e      	b.n	8047bc8 <_realloc_r+0x2b8>
 8047cca:	68a3      	ldr	r3, [r4, #8]
 8047ccc:	2a24      	cmp	r2, #36	; 0x24
 8047cce:	f8cb 3010 	str.w	r3, [fp, #16]
 8047cd2:	68e0      	ldr	r0, [r4, #12]
 8047cd4:	f8cb 0014 	str.w	r0, [fp, #20]
 8047cd8:	d003      	beq.n	8047ce2 <_realloc_r+0x3d2>
 8047cda:	f10b 0318 	add.w	r3, fp, #24
 8047cde:	3410      	adds	r4, #16
 8047ce0:	e76c      	b.n	8047bbc <_realloc_r+0x2ac>
 8047ce2:	6922      	ldr	r2, [r4, #16]
 8047ce4:	f10b 0320 	add.w	r3, fp, #32
 8047ce8:	f8cb 2018 	str.w	r2, [fp, #24]
 8047cec:	6961      	ldr	r1, [r4, #20]
 8047cee:	3418      	adds	r4, #24
 8047cf0:	f8cb 101c 	str.w	r1, [fp, #28]
 8047cf4:	e762      	b.n	8047bbc <_realloc_r+0x2ac>
 8047cf6:	bf00      	nop
 8047cf8:	20001584 	.word	0x20001584
 8047cfc:	07000103 	.word	0x07000103
 8047d00:	07000008 	.word	0x07000008
 8047d04:	090c010f 	.word	0x090c010f
 8047d08:	0a01050c 	.word	0x0a01050c
 8047d0c:	04010106 	.word	0x04010106
 8047d10:	011f0201 	.word	0x011f0201
 8047d14:	12013030 	.word	0x12013030
 8047d18:	1e0f011c 	.word	0x1e0f011c
 8047d1c:	030f0001 	.word	0x030f0001
 8047d20:	1d0a0a0a 	.word	0x1d0a0a0a
 8047d24:	05050503 	.word	0x05050503
 8047d28:	00010108 	.word	0x00010108
 8047d2c:	08047e2c 	.word	0x08047e2c
 8047d30:	08047e40 	.word	0x08047e40
 8047d34:	08047e54 	.word	0x08047e54
 8047d38:	08047e68 	.word	0x08047e68
 8047d3c:	08047e7c 	.word	0x08047e7c
 8047d40:	080480d0 	.word	0x080480d0
 8047d44:	08047ea4 	.word	0x08047ea4
 8047d48:	080480f4 	.word	0x080480f4
 8047d4c:	08047f20 	.word	0x08047f20
 8047d50:	08047f34 	.word	0x08047f34
 8047d54:	08047f48 	.word	0x08047f48
 8047d58:	08047fc0 	.word	0x08047fc0
 8047d5c:	08047fd4 	.word	0x08047fd4
 8047d60:	08047fe8 	.word	0x08047fe8
 8047d64:	08047ffc 	.word	0x08047ffc
 8047d68:	08048010 	.word	0x08048010
 8047d6c:	08048024 	.word	0x08048024
 8047d70:	08048110 	.word	0x08048110
 8047d74:	0804804c 	.word	0x0804804c
 8047d78:	08048060 	.word	0x08048060
 8047d7c:	08048074 	.word	0x08048074
 8047d80:	08047f5c 	.word	0x08047f5c
 8047d84:	08047f70 	.word	0x08047f70
 8047d88:	08048038 	.word	0x08048038
 8047d8c:	08047f84 	.word	0x08047f84
 8047d90:	08047f98 	.word	0x08047f98
 8047d94:	08047fac 	.word	0x08047fac
 8047d98:	08047e90 	.word	0x08047e90
 8047d9c:	08048090 	.word	0x08048090
 8047da0:	08048124 	.word	0x08048124
 8047da4:	08047ec8 	.word	0x08047ec8
 8047da8:	08047ee4 	.word	0x08047ee4
 8047dac:	08047ef8 	.word	0x08047ef8
 8047db0:	08047f0c 	.word	0x08047f0c
 8047db4:	08048138 	.word	0x08048138
 8047db8:	080480bc 	.word	0x080480bc
 8047dbc:	08047dfc 	.word	0x08047dfc
 8047dc0:	08047e10 	.word	0x08047e10

08047dc4 <sysclock_120m>:
 8047dc4:	07270e00 00f0001a 00050002 00000007     ..'.............
 8047dd4:	00000000 00001000 00001400              ............

08047de0 <sysclock_3m25>:
 8047de0:	00319750 00000000 00000000 00000000     P.1.............
 8047df0:	000000a0 00000000 00000000              ............

08047dfc <PIN_PC12>:
 8047dfc:	40020800 00001000 0000000c 00000004     ...@............
 8047e0c:	08047eb8                                .~..

08047e10 <PIN_PC13>:
 8047e10:	40020800 00002000 0000000d 00000004     ...@. ..........
 8047e20:	080480b4                                ....

08047e24 <pincfg_af_i2c1>:
 8047e24:	00010202 00000004                       ........

08047e2c <PIN_PA0>:
 8047e2c:	40020000 00000001 00000000 00000001     ...@............
 8047e3c:	080480b4                                ....

08047e40 <PIN_PA1>:
 8047e40:	40020000 00000002 00000001 00000001     ...@............
 8047e50:	08047eb8                                .~..

08047e54 <PIN_PA2>:
 8047e54:	40020000 00000004 00000002 00000001     ...@............
 8047e64:	080480ec                                ....

08047e68 <PIN_PA4>:
 8047e68:	40020000 00000010 00000004 00000001     ...@............
 8047e78:	08047ec0                                .~..

08047e7c <PIN_PA5>:
 8047e7c:	40020000 00000020 00000005 00000001     ...@ ...........
 8047e8c:	08048088                                ....

08047e90 <PIN_PC0>:
 8047e90:	40020800 00000001 00000000 00000004     ...@............
 8047ea0:	08047eb8                                .~..

08047ea4 <PIN_PA8>:
 8047ea4:	40020000 00000100 00000008 00000001     ...@............
 8047eb4:	08047edc                                .~..

08047eb8 <pincfg_out_r>:
 8047eb8:	00000201 00000000                       ........

08047ec0 <pincfg_out_s>:
 8047ec0:	00000201 00010000                       ........

08047ec8 <PIN_PC4>:
 8047ec8:	40020800 00000010 00000004 00000004     ...@............
 8047ed8:	080480ec                                ....

08047edc <pincfg_af_mco1>:
 8047edc:	00000202 ffff0000                       ........

08047ee4 <PIN_PC6>:
 8047ee4:	40020800 00000040 00000006 00000004     ...@@...........
 8047ef4:	080480b4                                ....

08047ef8 <PIN_PC7>:
 8047ef8:	40020800 00000080 00000007 00000004     ...@............
 8047f08:	08048108                                ....

08047f0c <PIN_PC9>:
 8047f0c:	40020800 00000200 00000009 00000004     ...@............
 8047f1c:	08047eb8                                .~..

08047f20 <PIN_PA11>:
 8047f20:	40020000 00000800 0000000b 00000001     ...@............
 8047f30:	080480b4                                ....

08047f34 <PIN_PA12>:
 8047f34:	40020000 00001000 0000000c 00000001     ...@............
 8047f44:	080480b4                                ....

08047f48 <PIN_PA15>:
 8047f48:	40020000 00008000 0000000f 00000001     ...@............
 8047f58:	080480a4                                ....

08047f5c <PIN_PB10>:
 8047f5c:	40020400 00000400 0000000a 00000002     ...@............
 8047f6c:	080480b4                                ....

08047f70 <PIN_PB11>:
 8047f70:	40020400 00000800 0000000b 00000002     ...@............
 8047f80:	080480b4                                ....

08047f84 <PIN_PB13>:
 8047f84:	40020400 00002000 0000000d 00000002     ...@. ..........
 8047f94:	08047eb8                                .~..

08047f98 <PIN_PB14>:
 8047f98:	40020400 00004000 0000000e 00000002     ...@.@..........
 8047fa8:	080480ac                                ....

08047fac <PIN_PB15>:
 8047fac:	40020400 00008000 0000000f 00000002     ...@............
 8047fbc:	08047eb8                                .~..

08047fc0 <PIN_PB0>:
 8047fc0:	40020400 00000001 00000000 00000002     ...@............
 8047fd0:	08047eb8                                .~..

08047fd4 <PIN_PB1>:
 8047fd4:	40020400 00000002 00000001 00000002     ...@............
 8047fe4:	080480a4                                ....

08047fe8 <PIN_PB2>:
 8047fe8:	40020400 00000004 00000002 00000002     ...@............
 8047ff8:	08047eb8                                .~..

08047ffc <PIN_PB3>:
 8047ffc:	40020400 00000008 00000003 00000002     ...@............
 804800c:	08047eb8                                .~..

08048010 <PIN_PB4>:
 8048010:	40020400 00000010 00000004 00000002     ...@............
 8048020:	08047eb8                                .~..

08048024 <PIN_PB5>:
 8048024:	40020400 00000020 00000005 00000002     ...@ ...........
 8048034:	08047eb8                                .~..

08048038 <PIN_PB12>:
 8048038:	40020400 00001000 0000000c 00000002     ...@............
 8048048:	08047ec0                                .~..

0804804c <PIN_PB7>:
 804804c:	40020400 00000080 00000007 00000002     ...@............
 804805c:	08047e24                                $~..

08048060 <PIN_PB8>:
 8048060:	40020400 00000100 00000008 00000002     ...@............
 8048070:	08047eb8                                .~..

08048074 <PIN_PB9>:
 8048074:	40020400 00000200 00000009 00000002     ...@............
 8048084:	080480ac                                ....

08048088 <pincfg_af_spi1>:
 8048088:	00000202 00000005                       ........

08048090 <PIN_PC1>:
 8048090:	40020800 00000002 00000001 00000004     ...@............
 80480a0:	08047eb8                                .~..

080480a4 <pincfg_out_od_r>:
 80480a4:	00010201 00000000                       ........

080480ac <pincfg_in_pd>:
 80480ac:	02010200 ffff0000                       ........

080480b4 <pincfg_in>:
 80480b4:	00010200 ffff0000                       ........

080480bc <PIN_PC11>:
 80480bc:	40020800 00000800 0000000b 00000004     ...@............
 80480cc:	080480ac                                ....

080480d0 <PIN_PA7>:
 80480d0:	40020000 00000080 00000007 00000001     ...@............
 80480e0:	08048088                                ....

080480e4 <pincfg_in_pu>:
 80480e4:	01010200 ffff0000                       ........

080480ec <pincfg_ain>:
 80480ec:	00000203 ffff0000                       ........

080480f4 <PIN_PA9>:
 80480f4:	40020000 00000200 00000009 00000001     ...@............
 8048104:	080480ac                                ....

08048108 <pincfg_out_od_s>:
 8048108:	00010201 00010000                       ........

08048110 <PIN_PB6>:
 8048110:	40020400 00000040 00000006 00000002     ...@@...........
 8048120:	08047e24                                $~..

08048124 <PIN_PC3>:
 8048124:	40020800 00000008 00000003 00000004     ...@............
 8048134:	08048108                                ....

08048138 <PIN_PC10>:
 8048138:	40020800 00000400 0000000a 00000004     ...@............
 8048148:	08047eb8 00000000                       .~......

08048150 <_ZTV12Arduino_OLED>:
 8048150:	00000000 00000000 080429cd 080429a9     .........)...)..
 8048160:	08042985 08042955 080429e9 00000000     .)..U)...)......
 8048170:	20554d50 74696e69 202e2e2e 4f002020     PMU init...   .O
 8048180:	4146004b 50004c49 6520554d 6c62616e     K.FAIL.PMU enabl
 8048190:	2e2e2e65 45590020 4f4e0053 42535500     e... .YES.NO.USB
 80481a0:	6e6f6320 7463656e 203a6465 554d5000      connected: .PMU
 80481b0:	61686320 6e696772 20203a67 74614200      charging:  .Bat
 80481c0:	79726574 2e25203a 00566632 736e6553     tery: %.2fV.Sens
 80481d0:	203a726f 25752520 00000025 00464e49     or:  %u%%...INF.
 80481e0:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
 80481f0:	37363534 42413938 46454443 00000000     456789ABCDEF....
 8048200:	33323130 37363534 62613938 66656463     0123456789abcdef
 8048210:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

08048220 <zeroes.6721>:
 8048220:	30303030 30303030 30303030 30303030     0000000000000000

08048230 <blanks.6720>:
 8048230:	20202020 20202020 20202020 20202020                     
 8048240:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8048250:	00000043 49534f50 00000058 0000002e     C...POSIX.......

08048260 <p05.5242>:
 8048260:	00000005 00000019 0000007d 00000000     ........}.......

08048270 <__mprec_tens>:
 8048270:	00000000 3ff00000 00000000 40240000     .......?......$@
 8048280:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8048290:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80482a0:	00000000 412e8480 00000000 416312d0     .......A......cA
 80482b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80482c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80482d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80482e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 80482f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8048300:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8048310:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8048320:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8048330:	79d99db4 44ea7843                       ...yCx.D

08048338 <__mprec_bigtens>:
 8048338:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8048348:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8048358:	7f73bf3c 75154fdd                       <.s..O.u
